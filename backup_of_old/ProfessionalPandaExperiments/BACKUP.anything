/***
	ol {
		counter-reset: list;
		margin-left:1em;
	}
	ol.toc {
		margin:0;
		padding:0;
	}

	ol li {
		position:relative;
		list-style:none;
		min-height:70px;
	}
	ol.toc li {
		min-height:0px;
		padding:10px;
	    background-color:#e67e22;
	    margin:5px;
	    border-left: 50px solid brown;
	    margin-left: -50px;
	    padding-right:35px;
	    transition:all 0.25s;
	}
	ol.toc li:hover {
		background-color:#e74c3c;
		color:white;
	    cursor:pointer;
	}

	ol li:before {
		counter-increment: list;
		content: counter(list);
		position:absolute;
		display:inline-block;
		left:-80px;
		top:14px;
		font-size:54px;
		width:70px;
		color:white;
		text-align: right;
	}
	ol.toc li:before {
		top:auto;
		font-size:20px;
	} ***/

	/*.indexTable div { 
	-moz-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
     -o-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
     -webkit-filter: grayscale(100%);
     filter: gray;
     filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
}

.indexTable div:hover {
	filter:none;
	-webkit-filter:none;
	-moz-filter:none;
	-o-filter:none;
}*/



	/*.hexagon, .hexSmall {
		background-color:#e67e22;
		width:112px;
		height:100px;
		box-sizing:border-box;
		-webkit-clip-path: polygon(23% 0%, 77% 0%, 100% 50%, 77% 100%, 23% 100%, 0% 50%);
		clip-path: polygon(23% 0%, 77% 0%, 100% 50%, 77% 100%, 23% 100%, 0% 50%);
		shape-inside: polygon(23% 0%, 77% 0%, 100% 50%, 77% 100%, 23% 100%, 0% 50%);
		position:relative;
		margin-left:-15px;
		display:inline-block;
	}*/

	/** NEW PALETTE: #99a238 #eeb850 #e78655**/

		/*em strong, em b, strong em, b em {
		color:rgb(150,46,0);
		font-variant:normal;
		letter-spacing: 0px;
		font-weight:normal;
		border-bottom:1px solid rgb(150,46,0);
	}*/

		
	<!-- Perhaps we could use $row['post'] to check for strings like data-lang="blabla" within the code
	And then use this to determine which files we should actually load.
	But, I don't know if that's faster than the current method. -->
	<!-- <script src="highlighter/ace.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-javascript.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-html.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-css.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-glsl.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-latex.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/mode-php.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/theme-monokai.js" defer type="text/javascript" charset="utf-8"></script>
	<script src="highlighter/worker-javascript.js" defer type="text/javascript" charset="utf-8"></script> -->

	<!-- <link rel="stylesheet" type="text/css" href="Fonts/css/font-awesome.min.css" /> -->

/*$("pre").each(function() {
		generatingSomeID += Math.round(Math.random()*10)+1;
		var generateID = generatingSomeID;
		$(this).attr('id','myIDis'+generateID);
	    var editor = ace.edit("myIDis"+generateID);
	    var Range = ace.require("ace/range").Range;
	    editors.push(editor);

	    editor.setTheme("ace/theme/monokai");

	    editor.setFontSize(16);
	    editor.setShowPrintMargin(false);

	    editor.renderer.setShowGutter(true);
	    //editor.setAutoScrollEditorIntoView(true);
	    editor.setOption("minLines", 1);
	    editor.setOption("maxLines", 50);
	    editor.setReadOnly(true);

	    var theLang = '';

	    if($(this).attr('data-lang') == undefined) {
	    	theLang = 'js';
		    editor.getSession().setMode("ace/mode/javascript");	    	
	    } else {
	    	theLang = $(this).attr('data-lang');
		    editor.getSession().setMode("ace/mode/" + theLang);
	    }
	    editor.getSession().setUseWrapMode(true);

	    if(theLang == 'html' || theLang == 'css') {
	    	var saveParentID = $(this).closest("div").attr("class");
	    	if(saveParentID == "sideImagePreview") {
				$("<span class='seeInAction'><a data-id='" + (editors.length-1) + "' data-lang='" + theLang + "'>Try code in Editor!</a></span>").insertAfter($(this).closest("div"));
	    	} else {
			    $("<span class='seeInAction'><a data-id='" + (editors.length-1) + "' data-lang='" + theLang + "'>Try code in Editor!</a></span>").insertAfter($(this));
	    	}
	    }

	    if($(this).parent().attr('class') == 'sideImagePreview') {
		    $(this).height($(this).parent().height()-30);	    	
	    }
	});*/

			/*function findCodeExamples($matches) {
		global $alreadyMatched;
		$m = $matches[1];
		if(!in_array($m, $alreadyMatched)) {
			array_push($alreadyMatched, $m);
			echo '<script src="highlighter/mode-' . $m . '.js" defer type="text/javascript" charset="utf-8"></script>';
		}
		return 'data-lang="' . $m . '"';
	}*/
	//$newPost = preg_replace_callback('/data\-lang="(.+)"/', "findCodeExamples", $newPost);
	if(sizeof($alreadyMatched) > 0) {
		//echo '<script src="highlighter/ace.js" defer type="text/javascript" charset="utf-8"></script>';
		//echo '<script src="highlighter/theme-monokai.js" defer type="text/javascript" charset="utf-8"></script>';
	}