[
{"type":"header","version":"4.9.5","comment":"Export to JSON plugin for PHPMyAdmin"},
{"type":"database","name":"u4302d8117_main"},
{"type":"table","name":"articles","database":"u4302d8117_main","data":
[
{"id":"1","title":"Introduction to HTML5 Games","post":"<p>Welcome to the complete guide on HTML5 Games! This is the post that will get it all started for you, from here on you can choose your own path to developing greatness.<\/p>\r\n\r\n<h2>What is HTML5 Gaming?<\/h2>\r\n\r\n<p>HTML5 games can be played on&nbsp;any device or system, as long as it has a capable browser and internet. This is because the games are created from the same code that makes websites (an HTML5 game basically is a very, very interactive website). However, although everyone calls it &#39;HTML5 games&#39;, the actual core of these games is a language called JavaScript (from here on: JS). Originally, JS was created to give the user basic interaction with a website (e.g. clicking a button, changing background-image over time, dynamically loading\/updating content). But,&nbsp;most of this has&nbsp;now been taken over by CSS3. CSS is the language used to style websites, and since its third version it can even animate these styles and make them interactive. This gave JS a chance to develop itself into something greater, and now the time has come: it has become easy enough to use JS to create games right in your web browser!&nbsp;<\/p>\r\n\r\n<h2>What do I need?&nbsp;<\/h2>\r\n\r\n<ul>\r\n\t<li>A browser to test your games in (<strong>Chrome or Firefox<\/strong>).<br \/>\r\n\tChrome has built in developer tools to help you debug, for Firefox you need to install the Firebug extension<br \/>\r\n\t&nbsp;<\/li>\r\n\t<li>A text editor to code in&nbsp;<strong>(Sublime Text<\/strong>).<br \/>\r\n\tIn my opinion,&nbsp;Sublime Text is the best out there, and all you&#39;re ever going to need. No need to buy the expensive Adobe DreamWeaver. However, if have your game running on a server, you might want to look into&nbsp;<strong>Coda<\/strong>, as it makes you able to keep an ftp connection open wile you code your files,<br \/>\r\n\t&nbsp;<\/li>\r\n\t<li>A (Local) Server to run your websites\/games on.<br \/>\r\n\tFree hosting is available at multiple places and suffices, but you could always buy &#39;premium hosting&#39;.<br \/>\r\n\tBut, you can also use the software&nbsp;<strong>WAMP<\/strong>&nbsp;to create a local server to do everything on.<br \/>\r\n\t&nbsp;<\/li>\r\n\t<li>A basic understanding of&nbsp;<strong>HTML5 and CSS3<\/strong><br \/>\r\n\tHTML5 is very much&nbsp;needed for the core structure of the main game page and perhaps a few elements later on. CSS3 is used for styling the game, so it depends on how you want the game to look how much you have to learn.<br \/>\r\n\tDon&#39;t worry, both languages are the simplest available (how would the World Wide Web have gotten so popular if it wasn&#39;t that way?).<br \/>\r\n\t&nbsp;<\/li>\r\n\t<li>Very broad&nbsp;<strong>JavaScript<\/strong>&nbsp;knowledge<br \/>\r\n\tI mean it. You&nbsp;need to know the basics of the code you&#39;re going to be working with, but HTML5 is not an extremely easy method of creating games. You need to know as much as you can.<br \/>\r\n\t&nbsp;<\/li>\r\n\t<li>A&nbsp;<strong>JS&nbsp;<\/strong><strong>library<\/strong>&nbsp;to help you.<br \/>\r\n\tDon&#39;t think &#39;heh, I can do this on my own, no help&#39;. There are really awesome libraries out there, that really take a lot of&nbsp;the hard work away from creating a game, while still giving you all the freedom in the world to create what you want.<\/li>\r\n<\/ul>\r\n\r\n<h2>What are the best libraries?<\/h2>\r\n\r\n<p><strong>Phaser<\/strong>&nbsp;&ndash; good for any 2D game, great support for physics<\/p>\r\n\r\n<p style=\"margin-left:40px\"><strong>Pixi.js<\/strong>&nbsp;is included, which is good for drawing (relatively&nbsp;simple) graphics<\/p>\r\n\r\n<p><strong>Three.js<\/strong>&nbsp;&ndash; amazing for 3D games right in your browser. But, as for anything that is 3D, it is also harder to learn and use than 2D engines.<\/p>\r\n\r\n<p><strong>Physijs<\/strong>&nbsp;is a phsyics library made exclusively for three.js - it uses the exact same syntax and all as three.js, with only a few minor differences at a few points. So once you&#39;ve learned three.js, you&#39;ve practically also already learned how to include physics (I wrote an extra tutorial on it though, do not fret)!<\/p>\r\n\r\n<p><strong>CreateJS<\/strong>&nbsp;&ndash; great for adding a nice touch to your games (mainly focusses on interactive, graphical, fluid experiences)<\/p>\r\n\r\n<p><strong>Construct and ImpactJS<\/strong>&nbsp;&ndash;&nbsp;Both are paid software for creating HTML5 games, no real coding knowledge is needed.<\/p>","slur":"getting-started-with-html5-games","cat":"Games","subcat":"HTML5 Games","video":"","diff":"2","quiz":""},
{"id":"2","title":"[Phaser] A Beginners Guide","post":"<p>Phaser is a JavaScript library, developed by Photonstorm (check him out, he&#39;s done cool things). It&#39;s completely free, and will always be. It&#39;s particularly good for simplifying the basics of creating an HTML5 game for you, and then creating a simple 2D game with physics. And the whole library is just a small .js (JavaScript extension) file.&nbsp;Amazing for the starters!<\/p> \r\n\r\n<h2>Basic needs for every game<\/h2>\r\n\r\n<p>A&nbsp;<strong>.html&nbsp;<\/strong>file &ndash; this is the game&rsquo;s page,&nbsp;this is where we bring together all the code in the end and the game is played.<\/p>\r\n\r\n<p>The&nbsp;<strong>phaser.min.js<\/strong>&nbsp;file &ndash; included in the html file<\/p>\r\n\r\n<p>A&nbsp;<strong>.js<\/strong>&nbsp;(javascript) file for every screen or scene in your game<\/p>\r\n\r\n<p>Perhaps some folders for your media, graphics, scenes, etc., if you&#39;re keen on keeping stuff organized.<\/p>\r\n\r\n<h2>The .html template<\/h2>\r\n\r\n<pre data-lang=\"html\">&lt;!DOCTYPE&gt; \r\n&lt;html&gt; \r\n    &lt;head&gt; \r\n        &lt;meta charset=&quot;UTF-8&quot; \/&gt; \r\n        &lt;title&gt;A title &ndash; displayed in the tab&lt;\/title&gt; \r\n        &lt;!-- Include the Phaser library --&gt; \r\n        &lt;script src=&quot;phaser.min.js&quot;&gt;&lt;\/script&gt; \r\n        &lt;!-- Include all the different scenes\/states of the game--&gt; \r\n        &lt;script src=&quot;Scenes\/menuScreen.js&quot;&gt;&lt;\/script&gt; \r\n        &lt;script src=&quot;Scenes\/mainGame.js&quot;&gt;&lt;\/script&gt; \r\n        &lt;script src=&quot;Scenes\/gameOver.js&quot;&gt;&lt;\/script&gt; \r\n    &lt;\/head&gt; \r\n\r\n     &lt;body&gt; \r\n    &lt;script type=&quot;text\/javascript&quot;&gt; \r\n    \/\/When the page loads, do the following \r\n    window.onload = function() { \r\n        \/\/Create a new Phaser game Object with properties: \r\n        \/\/(width,height,displayMethod (WebGL or Canvas),appendToHTMLElement,setPreservedFunctions \r\n        var game = new Phaser.Game(800, 600, Phaser.AUTO, &#39;&#39;, { preload: preload, create: create }); \r\n\r\n         \/\/Add all the states to the game we just created \r\n        game.state.add(&#39;Menu&#39;, Scenes.MenuScreen) \r\n        game.state.add(&#39;Main&#39;, Scenes.MainGame) \r\n        game.state.add(&#39;GameOver&#39;, Scenes.GameOver); \r\n\r\n         \/\/And start off with the first one \r\n        game.state.start(&#39;Menu&#39;); \r\n    }; \r\n    &lt;\/script&gt; \r\n    &lt;\/body&gt; \r\n&lt;\/html&gt;\r\n\r\n<\/pre>\r\n\r\n<p>It&rsquo;s a very basic html page (comments with explanation in the code itself).<\/p>\r\n\r\n<p>NOTE: In the &#39;appendToHTMLElement&#39; property you can give the ID of an HTML element where you&#39;d like the game to be created in. If you don&#39;t set anything, it&#39;s just created right after the &lt;body&gt; tag. The &#39;setPreservedFunctions&#39; property allows you to set your own custom functions for the ones Phaser uses (preload, create and update are the only essentials to a Phaser game).<\/p>\r\n\r\n<h2>A JavaScript file containing a scene (template):<\/h2>\r\n\r\n<pre data-lang=\"javascript\">\r\nScenes.MainGame = function(game) {\r\n\t\/\/set all your variables for this scene here (LOCAL)\r\n\tthis.time = 0;\r\n\tthis.playerSize = 200;\r\n};\r\n\r\nScenes.MainGame.prototype = {\r\n\r\npreload: function() {\r\n   \/\/This function is called first, and must contain every image\/spritesheet\/etc. to be loaded for this scene\r\n},\r\n\r\ncreate: function() {\r\n  \/\/In this function then every object with its properties is created\r\n},\r\n\r\nupdate: function() {\r\n  \/\/Finally, this function runs at 60 FPS and is used to update everything and play the actual game.\r\n},\r\n\r\n};<\/pre>\r\n\r\n<p>Above is the basic template for every scene. Remember when defining your variables, that you put&nbsp;<strong>this<\/strong>. before everything, to ensure the variable is part of the object and only available in this scene (and destroyed afterwards). However, you might have noticed we&rsquo;re putting objects into a certain &#39;master object&#39; called &lsquo;Scenes&rsquo;. You&rsquo;re right, we still need to define it! This is done at the top of the very<strong>&nbsp;first scene that is loaded<\/strong>, like this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar globalVar = 20;\r\nvar anotherGlobalOne = 30;\r\n\r\nvar Scenes = {};\r\n<\/pre>\r\n\r\n<p>Any&nbsp;<strong>global variables<\/strong>, to be used throughout the complete game (and not only this particular scene), can be set before defining this object that holds all the states (as you see). As you saw earlier, the&nbsp;<strong>local variables<\/strong>&nbsp;are created as part of the states&#39; object. This means you need to put&nbsp;<strong>this.<\/strong>&nbsp;before a local variable when using it, and nothing in front of a global variable.<\/p>\r\n\r\n<h2>Creating an actual game<\/h2>\r\n\r\n<p>Due to the fact that everything in the game is inside an object which is linked to the Phaser Game Object (created in the html page), we need to put the magical words&nbsp;<strong>this.<\/strong>&nbsp;in front of nearly everything we type (without different states we would just use &lsquo;game&rsquo; to refer to the game object).<\/p>\r\n\r\n<h5>Loading the media<\/h5>\r\n\r\n<p>First, you need to load all your media inside the preload function at the top. For example, loading images would be like this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/ Properties: ('name for reference', 'path to image to load')\r\nthis.load.image('star', 'star.jpg');<\/pre>\r\n\r\n<p>Inside the create function we setup our scene to be used and manipulated in the update function later on. If we for example want to create a sprite from our image we just loaded (including physics):<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/Initiate the physics system Arcade (There's also Ninja and p2 available)\r\nthis.physics.startSystem(Phaser.Physics.ARCADE);\r\n\r\n\/\/Make our player into a sprite (xPosition, yPosition, 'referenceName of image')\r\n\/\/Remember: 'player' must be loaded in the preload function\r\nthis.player = this.add.sprite(50,50,'player');\r\n\r\n\/\/Scale our player so he's 2 times as big\r\nthis.player.scale.setTo(2,2);\r\n\r\n\/\/Enable physics on our player (must be done after it has become a sprite)\r\nthis.physics.arcade.enable(this.player);\r\n\r\n\/\/Make the player collide with the edges of the game\r\nthis.player.body.collideWorldBounds = true;\r\n\r\n\/\/Make the player move 40px\/s in the x-direction\r\nthis.player.body.velocity.x = 40;\r\n\r\n\/\/Give the guy a 20% bounce off of other objects\r\nthis.player.body.bounce.setTo(0.2,0.2);<\/pre>\r\n\r\n<h5>Updating and playing<\/h5>\r\n\r\n<p>The update function is run 60 times per second, and is used for animating\/moving\/interacting - the game itself. Before we move on, let&#39;s first set our variables in the top of the file before we forget<\/p>\r\n\r\n<pre data-lang=\"javascript\">this.time = 0;\r\nthis.player = null;<\/pre>\r\n\r\n<p>We&#39;re going to use the&nbsp;<strong>time<\/strong>&nbsp;variable to make our player move slower every 3 seconds. This is what we put into the update function:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/Make time increment equal to the actual time (1 extra per 1 second)\r\nthis.time += (1\/60);\r\n\r\n\/\/If the value of time modula 3 equals zero, decrease player's velocity\r\nif(this.time%3 === 0) {\r\n   this.player.body.velocity.x -= 6;\r\n}\r\n\r\n\/\/(modula = the remainder when x can't be divided by y anymore,\r\n\/\/ e.g. 10%3 = 1, 12%3 = 0)<\/pre>\r\n\r\n<p>Done! Now you have your first HTML5 scene moving. Now go create awesome games (but first, follow the advanced tutorial!).<\/p>","slur":"phaser-a-beginners-guide","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"3","title":"[Phaser] An advanced guide","post":"<p>Assuming you&#39;ve read the beginners tutorial and want to know more...you&#39;ve come to the right place! In this post I&#39;ll cover the more advanced possibilities of Phaser (which are still pretty basic and fundamental really). Nevertheless, if you want to create a nice game, you better know these things.<\/p>\r\n\r\n<h2>Grouping<\/h2>\r\n\r\n<p>Phaser has created lots of&nbsp;support for&nbsp;<strong>grouping<\/strong>&nbsp;of objects, and for a good reason. Grouping objects (for example all the coins, platforms or enemies &nbsp;in a level) makes it easy for you to go through all the objects of a group and check for something. It also makes it possible to move, rotate, scale, destroy, etc. the complete group all at once. And next to that, it makes your code simpler and easier to read for yourself!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/First define it\r\nvar platforms = null;\r\n\r\n\/\/Add this in the create function\r\nplatforms = game.add.group();\r\n\r\n\/\/Enable physics bodies for all members (current and to be added in the future)\r\nplatforms.enableBody = true;\r\n\r\n\/\/Create a sprite in it (or remove it);\r\nplatforms.create(xPos,yPos, someThing);\r\nplatforms.remove(someThing);<\/pre>\r\n\r\n<p>NOTE: Groups don&#39;t have a physics body themselves. They&#39;re just an &#39;empty&#39; container object, containing all it&#39;s children&#39;s&nbsp;bodies.<\/p>\r\n\r\n<h2>Game vs World<\/h2>\r\n\r\n<p>In Phaser, a distinction is made between game and world.&nbsp;<strong>Game<\/strong>&nbsp;is the size&nbsp;of the canvas, the size&nbsp;of that rectangle&nbsp; you are viewing throughout the game.&nbsp;<strong>World<\/strong>&nbsp;is the size of the game world. This can be as big as you want, but you can give it a size with the&nbsp;<strong>width\/height<\/strong>&nbsp;properties, and optionally&nbsp;boundaries by setting the&nbsp;<strong>bounds<\/strong>&nbsp;property (nothing can go beyond these boundaries). By default its starting point is at (0,0) and it&#39;s as wide as the game is. But, if you for example made a sidescroller game, you would make the world a lot wider than the game.<\/p>\r\n\r\n<h2>Tips &amp; Tricks<\/h2>\r\n\r\n<p>For Phaser-specific tips &amp; tricks to improve your workflow and make things just a bit easier go to this tutorial:&nbsp;<a href=\"http:\/\/thehtml5guide.net84.net\/3-phaser-tips-tricks\/\" title=\"#3 Phaser – Tips &amp; Tricks\"><strong>Phaser Tips &amp; Tricks<\/strong><\/a><\/p>\r\n\r\n<h2>Physics all the way!<\/h2>\r\n\r\n<p>For an explanation of all physics systems in Phaser and how they work, see this overview:&nbsp;<a href=\"http:\/\/thehtml5guide.net84.net\/4-phaser-physics\/\" title=\"#4 Phaser – Physics!\"><strong>Phaser Physics Systems<\/strong><\/a><\/p>\r\n\r\n<h2>Nice Preloader<\/h2>\r\n\r\n<p>Another useful thing to know when your game grows bigger, is how to add a nice preloader:&nbsp;<a href=\"http:\/\/thehtml5guide.net84.net\/5-phaser-awesome-preloaders\/\" title=\"#5 Phaser – Awesome Preloaders\"><strong>Phaser Preloaders<\/strong><\/a><\/p>\r\n\r\n<h2>Different (Graphical) Possibilities<\/h2>\r\n\r\n<p>Whether you just want to test if something works, or you really want the fastest way to the best possible graphics:&nbsp;<a href=\"http:\/\/thehtml5guide.net84.net\/6-phaser-graphics-and-design\/\" title=\"#6 Phaser – Graphics and Design\"><strong>Phaser Graphics<\/strong><\/a>&nbsp;&nbsp;<\/p>","slur":"2-phaser-an-advanced-guide","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"4","title":"[Phaser] Tips & Tricks","post":"<p>When you&#39;ve just started learning Phaser, there a few things you don&#39;t know. It&#39;s once you really start using it for creating something, that you run into problems and learn that most of the time Phaser has a cool, easy way to do it...or that there&#39;s a certain workaround or different approach that is favourable. Anyway, here&#39;s the sequel to the advanced guide, the professional tips &amp; tricks!<\/p><p>NOTE: For some parts I assume you use different states in your game. If you don't, that's fine, you'll just have to adapt the examples  a bit to your specific situation.<\/p> \r\n\r\n<h2>Common mistakes and debugging<\/h2>\r\n\r\n<p>Here&#39;s a list of things that often go wrong with horrible results, without you realizing what the heck you did wrong this time. I&#39;ll also show you some ways to debug your code to find what causes the errors.<\/p>\r\n\r\n<h5>Common Mistakes<\/h5>\r\n\r\n<h6>Declaring and referencing functions<\/h6><p>If you&#39;re using states, often you&#39;ll get an error a certain function is undefined. This can have two reasons: the function is defined incorrectly, or it is called upon incorrectly. Let&#39;s say we call the function &#39;doStuff&#39; in the standard &#39;update&#39; function, it&#39;d go like this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">update: function() {\r\n\tthis.doStuff(aParameter);\r\n},\r\n\r\ndoStuff: function(aParameter) {\r\n\t\r\n},<\/pre>\r\n\r\n<h6>Declaring and referencing&nbsp;variables&nbsp;<\/h6><p>In the same way, there can be some trouble with variables. If a variable isn&#39;t defined or of the correct type\/value, it often throws vague errors or doesn&#39;t run your program at all. Remember this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/GLOBAL VARIABLES\r\n\/\/Either in index.html\r\nvar globalThing = value;\r\nvar game = new Phaser.Game(blablabla);\r\n\r\n\/\/Or at the top of your first state, outside of the states object\r\nvar Scenes = {};\r\nvar globalTime = 0;\r\n\r\n\/\/They are used as you'd expect! For example:\r\nglobalTime = 2;\r\n\r\n\r\n\/\/LOCAL VARIABLES\r\n\/\/Set inside the object class of the state\r\nScenes.Main = function(game) {\r\n   this.aVar = value;\r\n   this.anotherOne = false;\r\n}\r\n\r\n\/\/They are used with 'this.' in front. Always. Like this:\r\nthis.anotherOne = true;<\/pre>\r\n\r\n<p>NOTE: If you somehow forget to put &#39;var&#39; in front of your variables...It&#39;s actually no big deal, according to the JS compiler.&nbsp;What happens is: JS reads the variable, and thinks it has been declared earlier (because it has no var before it). However, it will not find this declaration, and will then continue to assign the variable to the highest level in the hierarchy of the game (which is the browser&nbsp;<em>window<\/em>&nbsp;in this case). So you&#39;ve basically created a global variable, without it really being a global variable. It can even be useful, but I highly recommend you just don&#39;t use it, for it can cause weird errors that are very hard to debug (and you should learn proper programming, of course).<\/p><h5>Mixing up syntax<\/h5>\r\n<p>Another error that can happen often, is that you&#39;re just in a flow, coding fast and happily, and without you realizing it you mix up different systems\/syntaxes. You for example mix the syntax of a while-loop with the one of a for-loop, you mix the syntax for setting properties of an object with the one for setting variables, you call an object and use it&#39;s paramaters while you forget to pass any to it, etc. This kind of error is very hard to realize yourself, once you&#39;ve made the mistake. So, now you know it, check it!<\/p>\r\n<h5>Forgetting some words<\/h5><p>Especially when working with JS libraries, like Phaser, there&#39;s a very long line of code needed sometimes. You might forget to put a word in there, you might add one dot too much, you might forget that this one actually calls a function and does not return a boolean, etc. For example, a few of the mistakes I often made at the beginning:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\/\/Adding a body to the player...WRONG\r\ngame.physics.enable(player);\r\n\/\/It's like this\r\ngame.physics.arcade.enable(player);\r\n\r\n\/\/Or forgetting the player already had a body...WRONG\r\nplayer.velocity.x = 20;\r\n\/\/It's like this\r\nplayer.body.velocity.x = 20;\r\n\r\n\/\/Or you might think you can quickly push a new object into an array...WRONG\r\nvar blockContainer = [];\r\nvar newBlock = this.add.sprite(50,50,'block');\r\nblockContainer.push();\r\n\/\/You forgot to actually push something into it..\r\nblockContainer.push(newBlock);<\/pre>\r\n\r\n<h5>Resetting variables when switching states&nbsp;<\/h5>\r\n<p>The Phaser&#39;s stateManager is quite powerful, and removes almost everything from a seen, but there might be some variables that are left over and remembered. If you need to come back to the same state within the same game (for example a Main Menu), you need to reset variables to the value they need to start with. For this, Phaser has a&nbsp;<strong>shutdown<\/strong>&nbsp;standard function (yes, next to preload, create and update). Within this function you can just set the variables you really need set to a certain value at the beginning of the scene.<\/p>\r\n\r\n<h5>Debugging<\/h5>\r\n\r\n<h6>Logging to the console<\/h6><p>If you&#39;re on chrome, hitting F12 will bring up the developer tools, and at the top you should see a few tabs, and the last of them is&nbsp;<strong>Console<\/strong>. This will display any errors it encounters loading your game, but it&#39;s also the place you can send information to test things. It&#39;s a simple as this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">console.log(\"I'm loggin' this!\");\r\nconsole.log(\"Player's x position: \" + player.x);<\/pre>\r\n\r\n<h6>Phaser&#39;s built in debugging system<\/h6><p>However, Phaser also has it&#39;s own built-in debugging system, to simplify matters a bit. It&#39;s basically the same as the console.log(), but it displays the result on the screen and updates in realtime. Just do:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Debug functions must be put inside a special render function that is called just before Phaser renders the game to the screen\r\nrender: function() {\r\n\tgame.debug.text(xPosition, yPosition, &quot;Our player&#39;s speed is &quot; + player.velocity.x);\r\n}\r\n<\/pre>\r\n\r\n<h5<Splitting up your code<\/h5><p>So, now you know how everything&#39;s running the show, but you still can&#39;t find where the error is in those 30 new lines of code you just wrote? Well, the simplest method to find the culprit, is to simply comment out parts of your code, until you don&#39;t have the error anymore. This approach works better if you divide the block of code in two halves every time, instead of taking for example 5 lines every time.<\/p>\r\n<h5>Display your game&#39;s FPS<\/h5><p>One thing you might need to display, is the FPS (Frames per Second) of your game. This shows you when or whether the game is lagging a bit, which can help you in making your game faster and your code more efficient. It goes like this:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Set this flag to true in the create function\r\nthis.time.advancedTiming = true;\r\n\r\n\/\/Then read the FPS in the update function\r\nthis.time.fps\r\n\r\n\/\/For example: display it with Phaser's debugging system\r\ngame.debug.text(50,100,this.time.fps);<\/pre>\r\n\r\n<h2>Phaser&#39;s useful properties\/attributes and functions added to (almost) everything<\/h2>\r\n\r\n<p>Everything in Phaser has a bunch of properties you can read and set, which are pretty mandatory for creating anything.<\/p>\r\n\r\n<pre data-lang=\"javascript\">var player = this.add.sprite(100,100,'playerImage');\r\n\r\n\/\/The x and y position\r\nplayer.x, player.y\r\n\r\n\/\/The rotation\r\nplayer.rotation\r\n\r\n\/\/The anchor (center point), (0 -&gt; 1) in percentages of complete sprite\r\nplayer.anchor.x, player.anchor.y\r\n\r\n\/\/The scale\r\nplayer.scale.x, player.scale.y\r\n\r\n\/\/The width and height\r\nplayer.width, player.height\r\n\r\n\/\/The name \r\nplayer.name\r\n\r\n\/\/Check if it exists\r\n\/\/If false, it is invisible. If true, it is visible\r\nplayer.exists\r\n\r\n\/\/Check if it's alive\r\n\/\/If false, the game pretends it's not there. If true, it does affect gameplay like usual\r\nplayer.alive\r\n\r\n\/\/Fix it to the camera (boolean)\r\nplayer.fixedToCamera\r\n\r\n\/\/Check if it's in the game camera or game world (boolean, readonly)\r\nplayer.inCamera, player.inWorld\r\n\r\n\/\/Kill it when it's outside of the game world's bounds\r\nplayer.checkWorldBounds = true;\r\nplayer.outOfBoundsKill = true;\r\n\r\n\/\/For controlling something's health\r\nplayer.health\r\n\r\n\/\/Set a lifespan (in ms) until something's killed\r\nplayer.lifespan\r\n\r\n\/\/Check whether it is being destroyed (boolean, readonly)\r\nplayer.destroyPhase<\/pre>\r\n\r\n<p>NOTE: Because phaser sprites are objects, you can always attach your own custom properties to it. Like&nbsp;<strong>player.roleInTeam,&nbsp;<\/strong><strong>player.bulletsLeft<\/strong>, etc.<\/p>\r\n\r\n<p>NOTE2: With any property that has an&nbsp;<strong>x<\/strong>&nbsp;and&nbsp;<strong>y&nbsp;<\/strong>value, you can also just use the following:&nbsp;<strong>.setTo(xVal, yVal);<\/strong>&nbsp;Next to this (yes, there is more, more awesomeness!) there are also some standard methods useful for a lot of things.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Crop the player's sprite into the rectangle specified\r\nplayer.crop(rect);\r\n\r\n\/\/If the player's health property is set, the specified amount will be substracted from it\r\nplayer.damage(amount);\r\n\r\n\/\/Destroy the sprite. This completely removes the sprite, never to be seen again.\r\n\/\/ The destroyChildren boolean determines whether or not the sprite's children (if it were a group or container) should be destroyed too\r\nplayer.destroy(destroyChildren);\r\n\r\n\/\/Kill the sprite. This simply makes the sprite invisible, frozen and indetectable, but it can be revived\r\nplayer.kill();\r\n\r\n\/\/Check if this sprite overlaps with the 'someObject'\r\nplayer.overlap(someObject);\r\n\r\n\/\/Completely reset something, giving it only a new x,y position and health value to start again with\r\nplayer.reset(x,y,health);\r\n\r\n\/\/If a player was killed, you can revive it this way!\r\n\/\/(and setting an health along the way, but that's purely optional)\r\nplayer.revive(health);\r\n<\/pre>\r\n\r\n<p>So, one important thing to remember is, that killing and destroying something is a different activity. Killing a sprite, will set &#39;<strong>alive<\/strong>&#39; to false and &#39;<strong>exist<\/strong><strong>s<\/strong>&#39; to false (and therefore &#39;<strong>visible<\/strong>&#39; to false). But, the sprite will live on, and can be revived at any time. However, destroying a sprite, will remove all of it, forever, never to be seen again.<\/p>\r\n\r\n<h2>About efficiency and CPU-friendliness<\/h2>\r\n\r\n<p>This brings us to our next topic: efficiency of resources. The fact is: HTML5 games are not as powerful as PC or console games. We have to be extra careful with how we use our resources. Therefore, it&#39;s a good idea to look at what you really need, and what not. If you need something the first time, you of course need to create it. But if you for example need lots and lots of instances of bullets, but the bullets often fly off screen, you can reuse the bullets flying off screen as new ones. This can be done by&nbsp;<strong>kill()<\/strong>ing it, and later&nbsp;<strong>revive()<\/strong>ing it. If you don&#39;t need something anymore, you&#39;re better off completely&nbsp;<strong>destroy()<\/strong>ing it so it doesn&#39;t take up any more CPU.<\/p>\r\n\r\n<h2>Input: mouse, keyboard, touch, watever you like<\/h2>\r\n\r\n<p>We&#39;ve actually got a nice seperate tutorial on all the input possibilities!&nbsp;<strong><a href=\"http:\/\/thehtml5guide.net84.net\/8-phaser-input-mouse-keyboard-touschreen\/\" title=\"#8 Phaser – Input (mouse, keyboard, touschreen!)\">Check it out<\/a><\/strong><\/p>","slur":"3-phaser-tips-tricks","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"5","title":"[Phaser] Physics!","post":"<p>In the beginners tutorial, you&#39;ve seen the Arcade physics system in action (only a tiny little bit, though). Phaser however takes physics to a whole new level, and brings 2&nbsp;different systems with it: <em>Arcade, p2<\/em>.<\/p> \r\n\r\n<p><strong>Arcade:<\/strong>&nbsp;the arcade physics system is the easiest of them all (which also means the most limited), and as you might have guessed: best suitable for arcade games. It has simple collision and overlap checks for rectangle&nbsp;bodies (called AABB), and features like giving bodies velocity, gravity, friction, bounce, etc.<\/p>\r\n<p style=\"margin-left:40px;\">Learn all about it in the <a href=\"http:\/\/thehtml5guide.net84.net\/phaser-physics-arcade-system\/\"><strong>Arcade Physics Tutorial<\/strong><\/a>&nbsp;<\/p>\r\n\r\n<p><strong>p2:&nbsp;<\/strong>the p2 physics system is the most advanced system. It does everything arcade does too, but can do a whole lot extra. It&#39;s very realistic yet easy to implement. The p2 system is well suited for the complex physics in a game (realistic falling\/bouncing of objects, chains, thrusts, springs, constraints, etc.).<\/p>\r\n<p style=\"margin-left:40px;\">Learn all about it in the <a href=\"http:\/\/thehtml5guide.net84.net\/phaser-physics-p2-system\/\"\"><strong>p2 Physics Tutorial<\/strong><\/a><\/p>\r\n\r\n<p>&nbsp;<\/p>","slur":"4-phaser-physics","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"6","title":"[Phaser] Physics ARCADE System","post":"<p>The Arcade system was the first system implemented by Phaser, because it is the most basic and simple one, and will do perfectly for any 'arcade games'. This tutorial will teach you how to initiate the system and use it for some very useful tasks.<\/p> \r\n<h2>Starting the system<\/h2>\r\n<p>Initiating the system is as simple as putting this at the top of the create function:<\/p>\r\n<pre data-lang=\"javascript\">game.physics.startSystem(Phaser.Physics.ARCADE);<\/pre>\r\n<h2>Adding bodies to the system<\/h2>\r\n<p>If you want something to be part of the system, and thus have a body and physics applied, you need to tell it to Arcade yourself.<\/p>\r\n<pre data-lang=\"javascript\">\/\/INDIVIDUAL SPRITES\r\ngame.physics.arcade.enable(sprite1);\r\ngame.physics.arcade.enable([sprite2,sprite3,sprite4]);\r\n\r\n\/\/FOR GROUPS\r\n\/\/For example, a group that holds all the platforms in a platformer\r\nvar platforms = game.add.group();\r\nplatforms.enableBody = true;<\/pre>\r\n<p>Remember, only sprites can be made part of the physics system!<\/p>\r\n<h2>Manipulating the bodies<\/h2>\r\n<p>Now, you can do all sorts of things with the bodies. Below are the ones you'll use the most (but not all):<\/p>\r\n<pre data-lang=\"javascript\">\/\/The player's velocity in either direction in px\/s\r\n\/\/maxVelocity and minVelocity are also available, using the same syntax\r\nplayer.body.velocity.setTo(x, y);\r\n\r\n\/\/The player's gravity (downwards on y, to the left on x) in px\/s\r\nplayer.body.gravity.setTo(x, y);\r\n\r\n\/\/The player's drag or friction in either direcion in px\/s\r\nplayer.body.drag.setTo(x, y);\r\n\r\n\/\/How much the body is bounced off of objects (0 -&gt; 1, in percentages of collisionforce)\r\nplayer.body.bounce.setTo(x, y);\r\n\r\n\/\/Whether or not the body moves when hit by something (boolean)\r\nwall.body.immovable = true;\r\n\r\n\/\/Whether or not the body can move out of the world (otherwise it just stops at the edges)\r\nplayer.body.collideWorldBounds = true;\r\n\r\n\/\/Acceleration of the object in either direction in px\/s\r\nplayer.body.acceleration.setTo(x, y);\r\n\r\n\/\/Setting an angularVelocity (again, px\/s), with angular drag\r\nplayer.body.allowRotation = true;\r\nplayer.body.angularVelocity = someRadianValue;\r\nplayer.body.angularDrag = someRadianValue;\r\n\r\n\/\/Some useful READONLY values\r\n\/\/For getting speed, position, previous position, where the body is facing\r\nplayer.body.speed, player.body.position, player.body.prev, player.body.facing\r\n<\/pre>\r\n<h2>Checking for collisions!<\/h2>\r\n<p>Now that everything has a body which behaves in its own way, we want to make sure the right things collide with each other, and we do actions based on that at the right time.<\/p>\r\n\r\n<p>NOTE: For this, we move out of the create function, and into the update function!<\/p>\r\n\r\n<p>First, although you've set the bodies up, nothing seems to hit anything. To make it do so, we need to tell objects to <strong>collide<\/strong> with each other.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Making stuff collide (2 sprites, sprite+group, 2 groups, whatever you like)\r\n\/\/collide(object1, object2, collideCallback, processCallback, callbackContext)\r\ngame.physics.arcade.collide(player, platforms, hitPlatform(), isPlatformSolid(), this);\r\n\r\n\/*collideCallback: the function you specify here is executed every moment the objects collide\r\nprocessCallback: the function you specify here, must return true for the collision to work. \r\n\t\tIf the function returns false, the two objects will not collide\r\ncallbackContext: forget about this, either omit it or set it to 'this'\r\n\r\nNOTE: Both the collideCallback and processCallback functions are passed two parameters, the first object and the second respectively.\r\n*\/\r\n<\/pre>\r\n<p>Simple enough. However, sometimes we want objects that don't collide, but still detect whether or not they overlap. For this we have <strong>overlap<\/strong>.<\/p>\r\n<pre data-lang=\"javascript\">\/\/overlap(object1, object2, collideCallback, processCallback, callbackContext)\r\ngame.physics.arcade.overlap(player, coins, collectCoin(), null);<\/pre>\r\n<p>Now that we know that, we can get even more funky, and check what side of a certain object is hitting\/<strong>touching<\/strong> something. This is for example useful if you want your player to jump only if it's touching something beneath it.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Is the player touching anything?\r\nplayer.body.touching\r\n\/\/Was the player just touching anything?\r\nplayer.body.wasTouching\r\n\r\n\/\/(this can be applied to both) Is it touching up\/right\/down\/left?\r\nplayer.body.touching.up, player.body.touching.right, player.body.touching.down, player.body.touching.left<\/pre>\r\n<h2>Useful functions of the Arcade system<\/h2>\r\n<p>Last, but not least, the arcade has some fancy built-in functions to simplify some tasks for you! Below are the ones I use most:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Accelerate object to certain x and y coordinates\r\ngame.physics.arcade.accelerateToXY(object, x, y, speed, maxSpeedX, maxSpeedY);\r\n\r\n\/\/Move the object to the x and y coordinates\r\n\/\/maxTime: the maximum amount of time it should take the object to reach the destination,\r\n\/\/the speed is adjusted by the system to achieve this!\r\ngame.physics.arcade.moveToXY(object, x, y, speed, maxTime);\r\n\r\n\/\/Get the angle between an object and x,y coordinates\r\ngame.physics.arcade.angleToXY(object, x, y);\r\n\r\n\/\/Get the distance between an object and x,y coordinates\r\ngame.physics.arcade.distanceToXY(object, x, y);\r\n\r\n\/\/Automatically set x and y velocity according to the angle you want to move in (velocityFromRotation also available)\r\ngame.physics.arcade.velocityFromAngle(angle, speed);\r\n\r\n\/\/A simple check for if two bodies intersect - it returns a boolean value (true\/false)\r\ngame.physics.arcade.intersects(body1, body2)<\/pre>","slur":"phaser-physics-arcade-system","cat":"Games","subcat":"Phaser","video":"","diff":"3","quiz":""},
{"id":"7","title":"[Phaser] Physics P2 System","post":"<p>The p2 system implemented in Phaser, is the most powerful and broad one. It allows for very realistic collisions, has some useful extras (like chains, constraints, springs, thrust, etc.), and all of this without it being too hard to understand. However, due to the great size of this system, I will not cover all of it, just the fundamentals.<\/p>  \r\n<h2>Initiating the P2 system<\/h2>\r\n<p>This is the syntax for initiating the system, and below that the syntax for enabling physics to be used on a certain sprite.<\/p>\r\n<pre data-lang=\"javascript\">\/\/ adding P2 physics to the game\r\ngame.physics.startSystem(Phaser.Physics.P2JS);\r\n\r\n\/\/ Enabling a body (=making physics available) on a certain sprite\r\ngame.physics.p2.enable(sprite1);<\/pre>\r\n<h2>Creating different bodies<\/h2>\r\n<p>Now that you know this, you want to create the bodies for your game. By default P2 will simply create a rectangle around your sprite, but that's not always what you want. You can tell P2 to draw a certain shape as a body for your sprite like this:<\/p>\r\n<pre data-lang=\"javascript\">\/\/All shapes are added to the anchor point of the body, which is automatically set to (0.5,0.5) = the exact center.\r\n\r\n\/\/Add a capsule shape (you know, a mix between an ellipse and a (rounded) rectangle)\r\nsomeSprite.body.addCapsule(length, radius, offsetX, offsetY, rotation);\r\n\r\n\/\/Add a circle\r\nsomeSprite.body.addCircle(radius, offsetX, offsetY, rotation);\r\n\r\n\/\/Add a line (running from [-length\/2,0] to [length\/2, 0])\r\nsomeSprite.body.addLine(length, offSetX, offsetY, rotation);\r\n\r\n\/\/Add a rectangle\r\nsomeSprite.body.addRectangle(width, height, offsetX, offsetY, rotation);\r\n\r\n\/\/Add a polygon\r\nsomeSprite.body.addPolygon(options, points);\r\n\r\n\/*'options' is an object (optionally) asking for three things:\r\noptimalDecomp (boolean): whether or not to optimally calculate physics (increases CPU load)\r\nskipSimpleCheck (boolean): set to true if you want to skip checking if the polygon intersects itself\r\nremoveCollinearPoints (boolean): set to true if you want to remove them\r\n\t\tcollinear points is the middle point when three points lie in a straight line, and is basically useless\r\n\r\n*\/\r\n\r\n\/*'points' is an array containing arrays with x,y values, like this:\r\n[[0,2],[2,3],[4,1],[6,6]]\r\n\r\nand it of course represents the points\/vertices\/corners of this polygon\r\n*\/\r\n\r\n\/\/The function for clearing all shapes from the body, use it when you want to add a single different body than the default rectangle that's added to it\r\n\/\/Because, you might have noticed, every method above 'adds' to the body.\r\nsomeSprite.body.clearShapes();<\/pre>\r\n<h2>Useful body attributes<\/h2>\r\n<p>Now that you've initiated the system and enabled a body with the correct shape(s) on your sprite, you want to do stuff with them (I think, I can't read your mind).<\/p>\r\n<pre data-lang=\"javascript\">\/\/Set damping (friction), velocity and force\r\nsomeSprite.body.damping, someSprite.body.force, someSprite.body.velocity\r\n\/\/This can also be applied to object's rotation, simply: \r\nangularDamping, angularVelocity, angularForce\r\n\r\n\/\/But, you can also tell it to just never rotate:\r\nsomeSprite.body.fixedRotation = true;\r\n\r\n\/\/Set the gravity\r\nsomeSprite.body.gravity = someValue;\r\n\r\n\/\/Make the body collide with the world bounds\r\nsomeSprite.body.collideWorldBounds = true;\r\n\r\n\/\/Set the mass\r\nsomeSprite.body.mass = someValue;\r\n\r\n\/\/set the angle (same as rotation, but set in radians, which is more efficient)\r\nsomeSprite.body.angle = someValue;\r\n\r\n\/\/Allow sleep on a body\r\n\/\/Sleepingstate is turned on when a body is not\/barely (see sleepSpeedLimit) doing anything. This helps save resources, because a lot of checks and functions don't need to be called by the system\r\nsomeSprite.body.allowSleep();\r\nsomeSprite.body.sleepSpeedLimit = someValue;\r\n\r\n\/\/Make a body kinematic or static (default is dynamic)\r\n\/\/Kinematic: general physics don't apply (e.g. gravity), but it still can collide\r\nsomeSprite.body.kinematic = true;\r\n\r\n\/\/Static: the body just cannot move, but everything else can bump into it\r\nsomeSprite.body.static = true;<\/pre>\r\n<p>Knowing that, you can do pretty much everything. But, to simplify matters, there's a few standard functions:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Moving backward, forward, left, right, up, down\r\nmoveBackward(speed), moveForward(speed)\r\nmoveLeft(speed), moveRight(speed)\r\nmoveUp(speed), moveUp(down)\r\n\r\n\/\/Rotate left or right\r\nrotateLeft(speed), rotateRight(speed)\r\n\r\n\/\/Thrust and reverse (move forward or backward in the direction you're looking at)\r\nthrust(speed);\r\nreverse(speed);<\/pre>\r\n<h2>Mighty Methods and Easy Events<\/h2>\r\n<p>In P2, there's a lot of events you can listen for. Most of them keep track of when things are added\/removed or when something begins\/ends. Therefore, unlike the other systems, there are no 'global' collide and overlap functions available where you give the function two objects and they collide. This time, this functionality exists on a body itself.\r\n\r\nBut, another thing p2 handles differently, is the fact that you can only collide objects with one or multiple <strong>collision groups<\/strong>. This means that everything you want the physics world to interact with, must be part of a certain collision group. This might seem unnecessary some times, but this helps speed up p2 and might even help you organize your game\/code. So, basic collision detection goes like this:<\/p>\r\n<pre data-lang=\"javascript\">\/\/A script for colliding a ship (our player) with rocks\r\nvar ship;\r\n\r\nfunction create() {\r\n    \/\/  Enable P2\r\n    game.physics.startSystem(Phaser.Physics.P2JS);\r\n\r\n    \/\/  Turn on impact events for the world, without this we get no collision callbacks\r\n    game.physics.p2.setImpactEvents(true);\r\n\r\n    \/\/  Create our collision groups. One for the player, one for the rocks\r\n    var playerCollisionGroup = game.physics.p2.createCollisionGroup();\r\n    var rockCollisionGroup = game.physics.p2.createCollisionGroup();\r\n\r\n    \/\/Create rocks at random positions\r\n    var rocks = game.add.group();\r\n    rocks.enableBody = true;\r\n    rocks.physicsBodyType = Phaser.Physics.P2JS;\r\n\r\n    for (var i = 0; i &lt; 8; i++)\r\n    {\r\n        var rock = rocks.create(game.world.randomX, game.world.randomY, 'rock');\r\n        \/\/  Tell the rock to use the rockCollisionGroup \r\n        rock.body.setCollisionGroup(rockCollisionGroup);\r\n\r\n        \/\/  Make the rocks collide with other rocks, and the player\r\n        rock.body.collides([rockCollisionGroup, playerCollisionGroup]);\r\n    }\r\n\r\n    \/\/  Create our ship sprite (give it a circle as collision body, don't allow it to rotate\r\n    ship = game.add.sprite(200, 200, 'ship');\r\n    game.physics.p2.enable(ship, false);\r\n    ship.body.setCircle(28);\r\n    ship.body.fixedRotation = true;\r\n\r\n    \/\/  Set the ships collision group\r\n    ship.body.setCollisionGroup(playerCollisionGroup);\r\n\r\n    \/\/ When our player\/ship hits one of the rocks, a function is fired (hitrock)\r\n    \/\/ And if it happens, reduce the rock's alpha value\r\n    ship.body.collides(rockCollisionGroup, hitrock, this);\r\n\r\n}\r\n\r\nfunction hitrock(body1, body2) {\r\n\r\n    \/\/  body1 is the body that owns the callback (the ship)\r\n    \/\/  body2 is the body it impacted with (our rock)\r\n    \/\/  As body2 is a Phaser.Physics.P2.Body object, you access its owner (the sprite) via the sprite property:\r\n    body2.sprite.alpha *= 0.9;\r\n\r\n}\r\n<\/pre>\r\n<p>You might think that's an awful lot of code for such a simple thing. But, I've included some extras here to give you a better idea of how this works, because it's very important to understand that.<\/p>\r\n\r\n<p>Now that you know this, you might have noticed that the possibility to check if two things overlap (which is equally important as the collide() function) isn't discussed. Well, that's because that is hidden between the Phaser Signals \/  Event Listeners you can call on the P2 system.<\/p>\r\n\r\n<p>This is discussed more thoroughly in another post, but a short summary: Phaser has built in methods that create so called 'phaser signals' when a certain event happens. All you have to do then, is pick up these signals and hand them a function to execute.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Basic syntax for listening for events\r\n\/\/The context parameter is optional, and determines what defines the word 'this'\r\ngame.physics.p2.&lt;someEvent&gt;.add(functionToCall, context);\r\n\r\n\/\/These are all the possible events to listen for\r\nonBeginContact, onEndContact\r\nonBodyAdded, onBodyRemoved,\r\nonContactMaterialAdded, onContactMaterialRemoved\r\nonConstraintAdded, onConstraintRemoved,\r\nonSpringAdded, onSpringRemoved<\/pre>\r\n<p>However, although I said that those simple 'collide'\/'overlap' functions don't exist here, there is an alternative that can be used sometimes, that checks if there's any body under a certain point in the world (most common use: checking all the bodies under your mouse pointer).<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.hitTest(worldPoint, bodies, precision, skipStatic);\r\n\/\/Worldpoint: the point (x,y) in this world we'll check against\r\n\/\/Bodies (optional, array): a list of bodies to check against, if not set, it checks for all the bodies in the world\r\n\/\/Precision (optional, number): for checking very small objects (like lines)\r\n\/\/skipStatic (optional,boolean): whether or not to include static bodies when hitTesting\r\n\r\n\/\/This function returns an array of bodies that hit that point in the world. To access the sprites attached to them, use .parent.sprite<\/pre>\r\n&nbsp;\r\n<h2>Extra possibilities<\/h2>\r\n<p>Next to almost pixel-perfect collision, p2 offers some extra features to help speed up your game making process.<\/p>\r\n<h5>ContactMaterials<\/h5>\r\n<p>ContactMaterials are what p2 uses for calculating what happens when two materials collide. With the system, you can create several materials, and assign them to objects. Then, you can say 'hey, if this material and that one collide, I want this to happen'. An implementation:<\/p>\r\n<pre data-lang=\"javascript\">function create() {\r\n\r\n    \/\/  Enable p2 physics\r\n    game.physics.startSystem(Phaser.Physics.P2JS);\r\n\r\n    \/\/Set overall world gravity\r\n    game.physics.p2.gravity.y = 300;\r\n\r\n    \/\/  Add a sprite\r\n    var player = game.add.sprite(200, 200, 'dude');\r\n    game.physics.p2.enable(player);\r\n    player.body.fixedRotation = true;\r\n\r\n    \/\/Create a material for the player (second paramater tells the game to automatically assign this material to the player's body)\r\n    var spriteMaterial = game.physics.p2.createMaterial('spriteMaterial', player.body);\r\n    \/\/Create another material\r\n    var worldMaterial = game.physics.p2.createMaterial('worldMaterial');\r\n\r\n    \/\/ And assign this one to the world (4 trues for left\/right\/top\/bottom faces)\r\n    game.physics.p2.setWorldMaterial(worldMaterial, true, true, true, true);\r\n\r\n    \/\/Create a contact material and set it to the two materials we created earlier\r\n    \/\/ Whenever the player touches the world's edges, the following happens\r\n    var contactMaterial = game.physics.p2.createContactMaterial(spriteMaterial, worldMaterial);\r\n\r\n    contactMaterial.friction = 0.0;     \/\/ Friction to use in the contact of these two materials.\r\n    contactMaterial.restitution = 0.0;  \/\/ Restitution (i.e. how bouncy it is!) to use in the contact of these two materials.\r\n    contactMaterial.stiffness = 1e7;    \/\/ Stiffness of the resulting ContactEquation that this ContactMaterial generate.\r\n    contactMaterial.relaxation = 0;     \/\/ Relaxation of the resulting ContactEquation that this ContactMaterial generate.\r\n    contactMaterial.frictionStiffness = 1e7;    \/\/ Stiffness of the resulting FrictionEquation that this ContactMaterial generate.\r\n    contactMaterial.frictionRelaxation = 3;     \/\/ Relaxation of the resulting FrictionEquation that this ContactMaterial generate.\r\n    contactMaterial.surfaceVelocity = 0.0;        \/\/ Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right.\r\n\r\n}<\/pre>\r\n<h5>Springs<\/h5>\r\n<p>Adding a spring, is as easy as coding gets:<\/p>\r\n<pre data-lang=\"javascript\">\/\/  The parameters are: createSpring(sprite1, sprite2, restLength, stiffness, damping)\r\nvar spring = game.physics.p2.createSpring(sprite1, sprite2, 150, 5, 1);<\/pre>\r\n<h5>Constraints<\/h5>\r\n<p>A constraint basically defines a relation between two bodies: either a fixed distance, limits to their movement or rotation, fixing them to a certain point(\/body) in space, reverse rotation between them (for gears for example), etc. This can't be done with one constraint function, therefore there are multiple ones covering all of the above: <strong>LockConstraint, <\/strong><strong>DistanceConstraint, GearConstraint, PrismaticConstraint, RevoluteConstraint.<\/strong><\/p>\r\n\r\n<h6>LockConstraint<\/h6>\r\n\r\n<p>This is the most simple one: simply puts a fixed x and y offset between two bodies. It's almost the same as adding a body as a child of another body, so it moves in the exact same way, but the advantage of the lockconstraint is that you can keep the seperate bodies and easily specify distance.<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.createLockConstraint(bodyA, bodyB, offset, angle, maxForce);\r\n\/\/BodyA and BodyB = the two bodies being constraint\r\n\/\/offset: The offset between 'em\r\n\/\/angle: The angle between 'em\r\n\/\/maxForce (optional): the maximum force the physics system is allowed to use when pulling them together. Too low: constraining takes too long, too high: you get some supernatural speeds in your game<\/pre>\r\n<h6>DistanceConstraint<\/h6>\r\n\r\n<p>A distanceConstraint keeps two bodies at the same distance from each other, but allows all other types of movement. This means that for example one body can circle around the other, staying at the same distance the whole time.<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.createDistanceConstraint(bodyA, bodyB, distance, maxForce);<\/pre>\r\n<h6>GearConstraint<\/h6>\r\n\r\n<p>A gear constraint doesn't constrain distance, but rotation\/angle. This type sets the relative rotation between two bodies (so, if one body would rotate 180 degrees, and the relative rotation would be 0.5, the other one would rotate 90 degrees).<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.createGearConstraint(bodyA, bodyB, relativeAngle);<\/pre>\r\n\r\n<h6>RevoluteConstraint<\/h6>\r\n\r\n<p>A revolute constraint is a more difficult one to understand. It connects two bodies at given points, and let's them rotate relative to each other around this point. Sounds complicated, but you can better think of these as a hinge or pivot joint. One body is the hinge itself of which the center represents the pivot point of the second body. The second body then has all the physics applied, but can only rotate around this fixed point.<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.createRevoluteConstraint(bodyA, pivotA, bodyB, pivotB, maxForce);\r\n\/\/bodyA &amp; bodyB = the two bodies being constrained\r\n\/\/pivotA, pivotB -&gt; the point relative to the center of the body which it is constrained to\r\n     \/\/In case of a hinge, the first body could be a circle with it's pivot point at its center (so pivotA = (0,0))\r\n     \/\/The second one is the body (let's say rectangle) to rotate around that spot, which has it's pivotB set to the upper corner ( (-width\/2, -height))<\/pre>\r\n<h6>Prismatic Constraint<\/h6>\r\n\r\n<p>This one's even harder to understand (well, at least I thought it was difficult). Basically, a prismatic constraint forbids bodies any movement along one axis, and makes it able to freely translate along the other.<\/p>\r\n<pre data-lang=\"javascript\">game.physics.p2.createPrismaticConstraint(bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce)\r\n\/\/bodyA, bodyB = the two bodies being constrained\r\n\/\/NOTE: the rest of the parameters is completely optional\r\n\/\/lockRotation (boolean) = whether or not the bodies are allowed to rotate\r\n\/\/anchorA, anchorB = the bodies' anchor point (set relative to its own local frame)<\/pre>\r\n\r\n<h5>Limits to constraints<\/h5>\r\n<p>If you've managed to figure out the type of constraint you want, and you applied it perfectly, you sometimes want to limit their behavior. This goes the same for all types, like this:<\/p>\r\n<pre data-lang=\"javascript\">someConstraint.upperLimit = someValue;\r\nsomeConstraint.lowerLimit = someValue;\r\n\r\n\/\/You can add a motor to constraints:\r\n\/\/Set the speed\r\nsomeConstraint.setMotorSpeed(12);\r\n\r\n\/\/Enable it: this makes the motor do its job\r\nsomeConstraint.enableMotor() \r\n\r\n\/\/Disable it: motor falls quiet, object follows gravity and all other basic physics rules again\r\nsomeConstraint.disableMotor()<\/pre>\r\n\r\n<h5>Chains<\/h5>\r\n<p>P2 doesn't have an easy function for creating chains, but using some revoluteConstraints we can easily simulate them. And as seen that chains are something you often need in physics games, I'll elaborate a bit on it! (the code below is for a big part taken from Phaser's Examples page, and only a bit modified to make it easier to understand (I hope))<\/p>\r\n<pre data-lang=\"javascript\">function preload() {\r\n    \/\/Load a spritesheet here\r\n    \/\/Two frames: first with one link of the chain from the front, second with one link of the chain from the side\r\n    game.load.spritesheet('chain','.\/assets\/sprites\/chain.png',16,26);\r\n}\r\n\r\n\r\nfunction create() {\r\n   \/\/Start physics system, apply world gravity\r\n    game.physics.startSystem(Phaser.Physics.P2JS);\r\n    game.physics.p2.gravity.y = 1200;\r\n\r\n    \/\/Call the createRope function we're going to create below\r\n    createRope(40,400,100);  \/\/ (length, xAnchor, yAnchor)\r\n};\r\n\r\n\r\n\r\nfunction createRope(length, xAnchor,yAnchor){\r\n    \/\/Variable containing the last link, so we can fix the new one to it\r\n    var lastRect;\r\n    \/\/Width and height of the physics body (height is less than the actual image, to make it look better)\r\n    var height = 20;\r\n    var width = 16;\r\n    \/\/The force that holds this chain together\r\n    var maxForce =20000;\r\n    \/\/Create as many links as the length variable demands\r\n    for(var i=0; i&lt;=length; i++){\r\n        \/\/Set x and y anchor: the rope is straight down, so x doesn't change, y does with 'height' amount\r\n        var x = xAnchor;\r\n        var y = yAnchor+(i*height);\r\n        \/\/Switch between frame 0 and 1 (and bring the last created piece on top, for prettier visuals)\r\n        if (i%2==0) {\r\n            newRect = game.add.sprite(x, y, 'chain',1)\r\n        } else {\r\n            newRect = game.add.sprite(x, y, 'chain',0); \r\n            lastRect.bringToTop();\r\n        } \r\n        \/\/Enable a body on the new rectangle\r\n        game.physics.p2.enable(newRect,false);\r\n        \/\/Set a custom rectangle for the body (for same reason that height is less than the actual image)\r\n        newRect.body.setRectangle(width,height);\r\n\r\n        \/\/If this piece is the first one, make it static =&gt; anchor it to the xAnchor and yAnchor provided.\r\n        if (i==0) {\r\n            newRect.body.static=true; \r\n        } else {  \r\n            \/\/If not, give the piece a push (just to show you the effect of the rope)\r\n            newRect.body.velocity.x = 100;\r\n            \/\/Reduce mass for every element (why? because the lower you get, the less gravitational energy is applied)\r\n            newRect.body.mass =  length\/i;\r\n        }\r\n        \/\/From our second element on, we want to create a constraint between this one and the last one\r\n        if(lastRect) {\r\n            \/\/Top of the new rectangle (0,-10), locks in with the bottom of the last rectangle (0,10)\r\n            game.physics.p2.createRevoluteConstraint(newRect, [0,-10], lastRect, [0,10], maxForce);\r\n        }\r\n        \/\/Update the last rectangle created!\r\n        lastRect = newRect;\r\n    }; \r\n}<\/pre>\r\n&nbsp;\r\n\r\n&nbsp;","slur":"phaser-physics-p2-system","cat":"Games","subcat":"Phaser","video":"","diff":"4","quiz":""},
{"id":"8","title":"[Phaser] Awesome Preloaders","post":"<p>As your game reaches larger and larger sizes (due to more media and lots of code added), it's going to take a while to load. However, you don't want to wait 10 seconds, watching a black screen doing nothing, before a new screen loads. Therefore, implementing a preloader can be nice!<\/p>\r\n\r\n<p>When implementing this preloader, you actually want 2 states before the main menu: <strong>Boot <\/strong>and <strong>Preloader<\/strong>.<\/p>\r\n\r\n<p><strong>Boot.js<\/strong>: this state loads the images needed for the preloader (the loadingBar, shouldn't take more than a second).<\/p>\r\n\r\n<p><strong>Preloader.js:<\/strong> this state displays the loadingBar, while loading the media for the game.<\/p> \r\n\r\n<h2>Boot.js<\/h2>\r\n<p>In Boot.js, you can do the following:<\/p>\r\n<pre data-lang=\"javascript\">var Scenes = {};\r\n\r\n\/\/Receiving the game variable\r\n\/\/Another option: set the game variable as a global variable in the main html file\r\nScenes.Boot = function (game) {\r\n\tthis.game = game;\r\n};\r\n\r\nScenes.Boot.prototype = {\r\n\r\n\tpreload: function () {\r\n\t\t\/\/Load images for a full loader and the empty one\r\n\t\tthis.load.image('loaderFull', 'assets\/UI\/loaderFull.png');\r\n\t\tthis.load.image('loaderEmpty', 'assets\/UI\/loaderEmpty.png');\r\n\t},\r\n\r\n\tcreate: function () {\r\n\t\t\/\/Start the preloader-state\r\n\t\tthis.game.state.start('preloader',Scenes.Preloader);\r\n\t},\r\n\t\r\n}<\/pre>\r\n<p>NOTE: This would also be the place to adapt (scale) your game to which device is using it. Learn about that in the <a title=\"#7 Phaser – Multiple Devices\" href=\"http:\/\/thehtml5guide.net84.net\/7-phaser-multiple-devices\/\"><strong>Phaser Multiple Devices Tutorial<\/strong><\/a><\/p>\r\n\r\n<p>NOTE2: Learn about all the media (image, spritesheet, audio, etc.) you can load in the <a title=\"#6 Phaser – Graphics and Design\" href=\"http:\/\/thehtml5guide.net84.net\/6-phaser-graphics-and-design\/\"><strong>Phaser Graphics\/Design Tutorial<\/strong> <\/a><\/p>\r\n\r\n<h2>Preloader.js<\/h2>\r\n<p>Then, in Preloader.js:<\/p>\r\n<pre data-lang=\"javascript\">Scenes.Preloader = function (game) {\r\n    this.game = game;\r\n};\r\n\r\nScenes.Preloader.prototype = {\r\n    preloadBar: Phaser.Sprite,\r\n    loaderEmpty: Phaser.Sprite,\r\n\r\n    preload: function () {\r\n    \t\/\/Display an empty loader\r\n        this.loaderEmpty = this.add.sprite(300, 300, 'loaderEmpty');\r\n\r\n        \/\/Create the full loader\r\n        this.preloadBar = this.add.sprite(300, 300, 'loaderFull');\r\n        \/\/And let Phaser adjust it's size according to the loading progress\r\n\t\tthis.load.setPreloadSprite(this.preloadBar);\r\n    },\r\n    \r\n    create: function () {\r\n    \t\/\/Start the main menu once done loading        \r\n        this.game.state.start('mainMenu', Main.MainMenu);\r\n    },\r\n\r\n}<\/pre>\r\n<p>And now you should have a well working preload-system. The user knows it's loading, how much is already loaded, and it looks great. Well, assuming you use great-looking art work, obviously<\/p>","slur":"5-phaser-awesome-preloaders","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"9","title":"[Phaser] Graphics and Design","post":"<p>There are multiple ways to load or display something, each with their own advantages and disadvantages<\/p>\r\n<h2>Graphics<\/h2>\r\n<p>With Phaser, you can (dynamically) create simple shapes\/drawings (like rectangles, lines, points, circles, arcs, etc.). These shapes can't be made into a sprite or given physics, so all you they do is just stand tall and proud in your game.<\/p> \r\n\r\n<p>However, these graphics can be dynamically created, destroyed and in a few clever ways altered. This makes them the ideal candidate for some game design that doesn't have much interactivity, for they are faster to create, more dynamic and more efficient than creating images and putting them into sprites for every piece of your design.<\/p>\r\n<pre data-lang=\"javascript\">function create() {\r\n\r\n    var graphics = game.add.graphics(0, 0);\r\n\r\n    \/\/ set a fill (color,alpha)\r\n    graphics.beginFill(0xFF3300,1);\r\n    \/\/ and a line style (width, color,alpha)\r\n    graphics.lineStyle(10, 0xffd900, 1);\r\n    \r\n    \/\/ draw any shape\r\n    \/\/moveTo: defines first\/starting point of the shape\r\n    graphics.moveTo(0,50);\r\n\r\n    \/\/every lineTo: defines the next point\r\n    graphics.lineTo(250, 50);\r\n    graphics.lineTo(100, 100);\r\n    graphics.lineTo(0, 50);\r\n\r\n    \/\/end this fill = end the shape\r\n    graphics.endFill();\r\n    \r\n    \/\/ draw a rectangle\r\n    graphics.lineStyle(2, 0x0000FF, 1);\r\n    graphics.drawRect(50, 250, 100, 100);\r\n    \r\n    \/\/ draw a circle\r\n    graphics.lineStyle(0);\r\n    graphics.beginFill(0xFFFF0B, 0.5);\r\n    graphics.drawCircle(470, 200,100);\r\n    \r\n    \/\/draw a line\r\n    graphics.lineStyle(20, 0x33FF00);\r\n    graphics.moveTo(30,30);\r\n    graphics.lineTo(600, 300);\r\n\r\n}<\/pre>\r\n<h2>BitmapData<\/h2>\r\n\r\n<p>When something is of the type bitmapData, it basically means \"we have this rectangle, and you can have control over every pixel inside of it, and you can either paint 'em or leave 'em alone\".<\/p>\r\n\r\n<p>So, it's basically the same as the graphics discussed before, but we now only have a certain field to work in, and we have limited options. So what's the upside of this? We can make them into a sprite!<\/p>\r\n<pre data-lang=\"javascript\">\/\/A Square\r\n\/\/Create a piece of bitmapData of 20x20\r\nvar aSquare = game.add.bitmapData(20,20);\r\n\/\/Create a rectangle in there, from (0,0) to (20,20)   (relative to the (0,0) of the bitmapData piece, not those of the game world)\r\naSquare.rect(0,0,20,20,'rgba(100, 255, 100,0.6)');\r\n\r\n\/\/A Circle\r\nvar aStar = game.add.bitmapData(20,20);\r\n\/\/Create a circle with center (10,10)\r\naStar.circle(10,10,10,'rgba(255, 255, 100,0.6)');\r\n\r\n\/\/Create a sprite from the square\r\nvar ourPlayer = game.add.sprite(50,50,aSquare);<\/pre>\r\n<p>This is great and all, but there's also an alternative method of drawing in a bitmapData, and this requires knowledge of traditional JavaScript canvas-drawing methods. Here's a square with a stroke, created by using the bitmapData's context:<\/p>\r\n<pre data-lang=\"javascript\">var smth = this.add.bitmapData(100,100);\r\nsmth.context.fillStyle = 'blue';\r\nsmth.context.strokeStyle = 'green';\r\nsmth.context.rect(0,0,100,100);\r\nsmth.context.fill();\r\nsmth.context.stroke();\r\ngame.add.sprite(50,50,smth);<\/pre>\r\n<h2>Different Media Types<\/h2>\r\n<p>But, next to that, there are also a few types of media you can load in the preloader function:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Images\r\ngame.load.image('name (for reference)','path (to file)');\r\n\r\n\/\/Audio\r\n\/\/Note: you can set an array of paths to the same audio file with different extensions, for not every browser supports the same type of file\r\ngame.load.audio('name','path');\r\n\r\n\/\/BitmapFont\r\n\/\/The two parameters set to null are not very useful (they're for loading XML for your font\r\ngame.load.bitmapFont('name','path',null,null, xSpacing, ySpacing);\r\n\r\n\/\/Spritesheets\r\ngame.load.spritesheet('name','path','width of one frame','height of one frame','amount of frames','margin between frames','spacing between frames');\r\n\r\n\/\/atlas, JSON and tilemaps are also supported, but not important enough right now to talk about here.<\/pre>\r\n<h2>Spritesheets<\/h2>\r\n<p>Spritesheets are an incredibly useful way to animate characters\/objects in your game.<\/p>\r\n\r\n<p>A spritesheet is basically a long image (horizontally), with all the different frames or states of the character pasted next to each other. Every frame is of the same width and height and represents the character as idle, walking, jumping, crawling, exploding, watever.<\/p>\r\n\r\n<p>Once you've loaded your spritesheet, you have to create animations out of it. Then you assign those to the player, and then (at the appropriate moment) you play them...like this:<\/p>\r\n<pre data-lang=\"javascript\">player = game.add.spritesheet(x, y, 'reference to loaded spritesheet');\r\n\r\n\/\/Add animations to player for walking left and right\r\n\/\/add(\"name\", [frames to display after each other], how many frames to play per second, whether to loop the animation or not)\r\nplayer.animations.add('left', [0, 1, 2, 3], 10, true);\r\nplayer.animations.add('right', [5, 6, 7, 8], 10, true);\r\n\r\n\/\/Then, at any time, you can start and stop them.\r\nplayer.animations.play('left');\r\nplayer.animations.stop();\r\n\r\n\/\/Or pick one frame for the moment\r\nplayer.frame = 4;<\/pre>\r\n<h2>Fonts and Text!<\/h2>\r\n<p>Having text in your game is of course very important for the menus, buttons, score and health displayer, game over screen, and what not.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Add text to the screen - (xPosition, yPosition, textToDisplay, fontToUse);\r\n\/\/A bitmapFont you loaded earlier\r\ngame.add.text(50,50,\"GAME OVER\",'namehere');\r\n\r\n\/\/A font you specified in your CSS\r\ngame.add.text(50,50,\"Game Over\",{ font: '30px GaramondPro'});\r\n\r\n\/\/The same font, with more properties:\r\ngame.add.text(50,50,\"GameOver\", {\r\n                font: \"128px GaramondPro\",\r\n                fill: \"#ff0044\",\r\n                align: \"center\"\r\n            });\r\n\/\/Other properties include:\r\n\/\/fontWeight, lineSpacing, shadowBlur, shadowColor, shadowOffsetX, shadowOffsetY, stroke, strokeThickness\r\n\r\n<\/pre>\r\n<p>What's a bitmap font, you say? A bitmap font, is just an image of letters. The font can 't be scaled (which is why it doesn't require a size when initializing it), but has the advantage that it loads much much faster.<\/p>","slur":"6-phaser-graphics-and-design","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"10","title":"[Phaser] Multiple Devices","post":"<p>The big advantage of HTML5 games is that they can be played on any device. But, to really make the most of it, we also want it to display perfectly on every screen, with every size. Now you could of course go on and create a few different versions of every variable and code snippet for different screen sizes, but that's not really the easiest way to go. No, we're going to use Phaser's Scale Manager!<\/p> \r\n<h2>Deciding how you want it scaled<\/h2>\r\n<p>So, you've created a game in your own browser, the dimensions were always 1200x900, and every number is adjusted to that. Then it would be a real pain in the ass to make every number dependent of width\/height. So, we better use the scale manager to scale the size of the game, while at the same time scaling the game itself, making it work exactly the same everywhere. However, there are different ways you may want to have your game scaled, and there are different methods to achieve that - sadly enough, there's not one best and proven method provided at the moment.<\/p>\r\n\r\n<p>What you probably want though is that your game is resized to fill as much of the screen as possible, but still maintains its own proportions (so it isn't stretched or distorted). We'll focus on that here.<\/p>\r\n<h2>Setting your basic requirements<\/h2>\r\n<p>So, the first thing you want to do is add a piece of code in the &lt;head&gt; of your game's html page. This is the meta viewport tag, which was originally invented for better rendering of websites on mobile screens.<\/p>\r\n<pre data-lang=\"html\">&lt;meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width, height=device-height, target-densitydpi=device-dpi\" \/&gt;<\/pre>\r\n<p>This makes it impossible for the user to scale the game, sets the game's width and height properly, and adjusts it's pixel representation according to the dpi of the device.<\/p>\r\n\r\n<p>Also in the game's html page, you need to set the width and height that are perfect for your game:<\/p>\r\n<pre data-lang=\"javascript\">var WIDTH = 1200;\r\nvar HEIGHT = 900;\r\nvar game = new Phaser.Game(WIDTH, HEIGHT, Phaser.AUTO, '');<\/pre>\r\n\r\n<h2>Scaling<\/h2>\r\n<p>Now we can start scaling the game. I'm assuming you're using different states for your game, and you should put this code in the first one (in the create function). If you're not using states, replace 'this' with 'game', and put the code at the top of your code.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Set the scale mode to SHOW_ALL (explained in a second)\r\nthis.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n\r\n\/\/Align the center of the game with the center of the screen\r\nthis.scale.pageAlignHorizontally = true;\r\nthis.scale.pageAlignVertically = true;\r\n\r\n\/\/Force landscape (optional of course)\r\nthis.scale.forceLandscape = true;\r\n\r\n\/\/Make the game scale!\r\nthis.scale.setShowAll();\r\nthis.scale.refresh();\r\n\r\n\/\/In case you want limitations to your scaling!\r\nthis.scale.minWidth = someValue;\r\nthis.scale.minHeight = someValue;\r\nthis.scale.maxWidth = someBiggerValue;\r\nthis.scale.maxHeight = someBiggerValue;<\/pre>\r\n<h2>This should do the trick!<\/h2>\r\n<p>But, you might be wondering: why? what the hell? what are we doing here?! Calm down, answers are coming your way.<\/p>\r\n\r\n<p>First, we set the scaleMode. There are 3 different scale modes:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>NO_SCALE:<\/strong> Don&#39;t scale. Ever.<\/li>\r\n\t<li><strong>SHOW_ALL:<\/strong> Show the complete game, but don&#39;t stretch it (so, some borders\/margins might appear on screens with weird proportions)<\/li>\r\n\t<li><strong>EXACT_FIT:<\/strong> No matter what happens, glue the game exactly to the screen<\/li>\r\n<\/ul>\r\n\r\n<p>We then set some optional properties, and finally tell the game to actually scale itself! We tell it to do a SHOW_ALL with the properties we assigned to it, and refresh it just in case something has gone wrong or has resized, and then we're done.<\/p>\r\n<h2>But, what if the user resizes the screen?<\/h2>\r\n<p>We got you covered! Add this somewhere in that window.onLoad function in your game's html page:<\/p>\r\n<pre data-lang=\"javascript\">\/\/This function is called when the browser resizes\r\nvar resizeGame = function () {\r\n     \/\/Refresh the scaling of the game!\r\n     game.scale.setShowAll();\r\n     game.scale.refresh();\r\n}\r\n\r\n\/\/Add an event lister to the browser window - if it resizes, call the resizeGame() function\r\nwindow.addEventListener('resize', function(event){\r\n     resizeGame();\r\n});<\/pre>\r\n<h2>But, what if I want different scale modes for different devices?<\/h2>\r\n<p>Phaser checks that too. Like this:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Check with if statements, what device the user's on\r\n\/\/Desktop\r\ngame.device.desktop\r\n\/\/Android\r\ngame.device.android\r\n\/\/Apple devies\r\ngame.device.iOS\r\ngame.device.iPad\r\ngame.device.iPhone\r\n\r\n\/\/Check browsers\r\ngame.device.chrome\r\ngame.device.firefox\r\ngame.device.ie\r\ngame.device.safari\r\n\r\n\/\/Check OS\r\ngame.device.macOS\r\ngame.device.windows<\/pre>\r\n<p>And there's even more, but I think this is already more than you need.<\/p>","slur":"7-phaser-multiple-devices","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"11","title":"[Phaser] Input","post":"<p>In Phaser, there is of course a built-in support for all different input systems. There are basically three groups: <strong>mouse, keyboard  <\/strong>(only computers) <strong>and touchscreen<\/strong> (mobile, iPad, etc.).<\/p>\r\n<h2>Methods available in all groups<\/h2>\r\n<p>Every input object has the following events you can listen for, or properties you can access:<\/p>  \r\n<pre data-lang=\"javascript\">\/\/If either just pushed down, let go (pushed up), tapped or being held: call the doSomething function\r\ngame.input.onDown.add(doSomething,this);\r\ngame.input.onUp.add(doSomething,this);\r\ngame.input.onTap.add(doSomething,this);\r\ngame.input.onHold.add(doSomething,this);\r\n\r\n\/\/These things can also be done without event listeners: just an if-statement checking if true or false\r\n\/\/But, the difference here is, that it doesn't check an activity (like letting go), but just a state (being up)\r\ngame.input.isDown\r\ngame.input.isUp\r\n\r\n\/\/Last but not least, this points to the most recently active pointer (mouse or touch event)\r\ngame.input.activePointer\r\n\/\/And this points to that pointer's x and y coordinates\r\ngame.input.x, game.input.y<\/pre>\r\n<h2>Mouse only<\/h2>\r\n\r\n<p>There's really only one thing specific to the mouse, and that is:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Get the mousePointer (you can apply the methods described above afer it, of course)\r\ngame.input.mousePointer\r\n\r\n\/\/Get its x and y\r\ngame.input.mousePointer.x\r\ngame.input.mousePoiner.y<\/pre>\r\n<h2>Touch only<\/h2>\r\n<p>We have 10 fingers. And what's so useful about that information, you say? Phaser also has 10 pointers, reserved for touchevents.<\/p>\r\n\r\n<p>We have <strong>game.input.pointer1<\/strong> all the way to <strong>game.input.pointer10 <\/strong>objects. Phaser will start 2 of them (pointer1, pointer2) by default, but if you want to make the user able to use more than 2 fingers, you can start more of them.<\/p>\r\n\r\n<p>Pointers are always trying to fill in the pointer object with the smallest number, which means that when you for example have two fingers placed on the screen(pointer1+pointer2), and you place a third one, it gets the pointer3 object.<\/p>\r\n\r\n<p>However, if you then remove the second finger, pointer2 will be left empty and any finger you'll put on after that will first use the pointer2 object.<\/p>\r\n\r\n<p>NOTE: To add more than those standard two pointers (the mousePointer excluded), you simply do <strong>game.input.addPointer(); <\/strong>as many times as you want (well, with a maximum of 10).<\/p>\r\n<h2>Keyboard only<\/h2>\r\n<p>The keyboard of course offers the largest array of possible inputs, but most of the times all you really need are the arrow keys. Phaser has a fast way to get them working quickly:<\/p>\r\n<pre data-lang=\"javascript\">\/\/In the create function\r\nvar cursors = game.input.keyboard.createCursorKeys();\r\n\r\n\/\/In the update function\r\nif (cursors.left.isDown) {\r\n    \/\/move player left\r\n} else if (cursors.right.isDown) {\r\n    \/\/move player right\r\n}\r\nif(cursors.up.isDown) {\r\n\t\/\/make the player jump\r\n} else if (cursors.down.isDown) {\r\n\t\/\/make the player crouch\r\n}<\/pre>\r\n<p>However, if you want more, this is the way to do it:<\/p>\r\n<pre data-lang=\"javascript\">\/\/The keyboard can be accessed through\r\ngame.input.keyboard\r\n\r\n\/\/Then, any method you call on it, needs to be passed which key we're listening for\r\n\/\/Pause the game when P is pressed\r\nif(game.input.keyboard.isDown(Phaser.Keyboard.P)) {\r\n\t\/\/pause game\r\n}\r\n\r\n\/\/Start new level when SPACE is pressed\r\nif(game.input.keyboard.isDOwn(Phaser.Keyboard.SPACE)) {\r\n\t\/\/start new level\r\n}<\/pre>\r\n","slur":"8-phaser-input-mouse-keyboard-touschreen","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"12","title":"[Phaser] Extraordinary Events","post":"<p>Phaser also has a few built-in events ready for anything, think of them as the Event Listeners you find in many languages.<\/p> \r\n\r\n<p>First, to save CPU, every event is set to false and is not checked. The event sends of 'Phaser signals' and waits for them to be picked up by something. If we want our game to recognize them, we simply add a listener with our function it should call to it. Like this:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Here's how you attach an event to any object (let's take our player sprite)\r\nplayer.events.&lt;THE EVENT HERE&gt;.add(yourFunctionToCall(), this);\r\n\r\n\/\/And these are all the events that are possible, which I thought were quite self-explanatory \r\n\/\/(so, substitute any of them with '&lt;THE EVENT HERE&gt;', and you're good to go)\r\n\r\nonAddedToGroup\r\nonRemovedFromGroup\r\nonKilled\r\nonRevived\r\nonOutOfBounds\r\nonEnterBounds\r\n\r\nonInputOver\r\nonInputOut\r\nonInputDown\r\nonInputUp\r\nonDragStart\r\nonDragStop\r\n\r\nonAnimationStart\r\nonAnimationComplete\r\nonAnimationLoop<\/pre>\r\n<h2> So Easy?!<\/h2>\r\n<p>Yes. Well, the input events require some extra work, for input detection is turned off by default. To make them work, you have to:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Make it detect any input on the object\r\nsprite.inputEnabled = true;\r\n\r\n\/\/Make dragging available for the object\r\nsprite.enableDrag();<\/pre>\r\n&nbsp;","slur":"9-phaser-extraordinary-events","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"13","title":"[Phaser] Tweens","post":"<p>Tweens are used for smoothly transitioning between certain values for an object, basically a dynamic animation. You simply create a new tween by doing the following:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create tween someTween, to control the object someObject\r\nvar someTween = game.add.tween(someObject);<\/pre>\r\n<p>Then, to create a basic tween, you want to set a start and end point, which values to influence, and then start it.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Properties: a JS object containing the the things to be tweened, like Sprite.x, Sound.Volume\r\n\/\/Duration and delay before it starts in milliseconds\r\n\/\/Ease parameter requires a function that eases the tween\r\n\/\/autoStart is a boolean that's automatically set to false\r\n\/\/Repeat determines the number of repeats\r\n\/\/Setting the yoyo boolean to true gives the tween a yoyo effect\r\nsomeTween.from(properties, duration, ease, autoStart, delay, repeat, yoyo);\r\nsomeTween.to(properties, duration, ease, autoStart, delay, repeat, yoyo);\r\n\r\n\/\/All these things can also be set seperately, like this (without &lt; &gt; of course):\r\nsomeTween.&lt;theParameter&gt;(&lt;theValue&gt;)\r\n\r\n\/\/start, stop, pause and resume\r\nsomeTween.start(); someTween.stop(); someTween.pause(); someTween.resume();<\/pre>\r\n<p>As simple as that! However, if you want even more functionality out of it, there's also these methods you can use:<\/p>\r\n<pre data-lang=\"javascript\">\/\/A boolean that returns true if the tween is running\r\nsomeTween.isRunning;\r\n\r\n\/\/Set the tween to loop\r\nsomeTween.loop();\r\n\r\n\/\/These are all simple Phaser Signals!\r\n\/\/For non-looping tweens (when done\/completed)\r\nsomeTween.onComplete\r\n\/\/For looping tweens (is called every time a new iteration starts)\r\nsomeTween.onLoop\r\n\/\/When the tween starts\r\nsomeTweem.onStart<\/pre>\r\n&nbsp;","slur":"10-phaser-tweens","cat":"Games","subcat":"Phaser","video":"","diff":"2","quiz":""},
{"id":"14","title":"[Three.js] A Beginners Guide","post":"<p>Three.js is an amazing javascript library that makes creating WebGL (= 3D in the browser) games much, much easier. It's available as a single, minified javascript file to include in your html page. From there on, you can use all of its useful features to create your 3D game (or application). However, you obviously can't just include the file and expect magic things to happen, you have to learn how to use and work with the engine! Well, you've come to the right place, as this is the tutorial that will get you up and running.<\/p> \r\n\r\n<p>- Get the Three.js library <a href=\"http:\/\/threejs.org\/build\/three.min.js\" target=\"_blank\">here<\/a> (click it, save the page as 'three.min.js', and you're good to go!)<\/p>\r\n<h2>3D? That sounds amazing...but difficult<\/h2>\r\n<p>Well yes, and no. The world of 3D is one dimension larger than the 2D one, and that requires quite a bit of extra stuff to take care of and keep in mind when creating your game (cameras, lightning, materials, etc.). Creating something in 3D, especially if you're completely new to games, requires from you to acquire the proper mindset: you can't just drop a square into the world, and all will be alright. The square needs (x,y,z) positions, dimensions, material, shaders, shadows, a camera pointed at it, lightning to actually show it, etc.<\/p>\r\n<p>But, if you want to achieve any type of realistic or POV look, trying to fake it using 2D methods is much harder than just taking the extra time and using native 3D<\/p>\r\n<h2>Creating a basic 3D scene<\/h2>\r\n<p>This might all sound scary, but luckily, setting up a basic scene with Three.js is actually very, very easy. To display any 3D-program on a computer, you need a few things:<\/p>\r\n<ul>\r\n\t<li>A renderer: something that renders the complete 3D scene<\/li>\r\n\t<li>A scene: a space where everything is created and takes place<\/li>\r\n\t<li>A camera: a camera through which we view the world<\/li>\r\n<\/ul>\r\n<h2>Creating the .html file<\/h2>\r\n<p>Any HTML5 game can be accessed by simply going to its website\/page. Therefore, the first thing you do with any browser game, is create its HTML webpage.<\/p>\r\n<pre data-lang=\"html\">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n\t&lt;head&gt;\r\n\t\t&lt;title&gt;Some Cool 3D Game&lt;\/title&gt;\r\n\t\t&lt;style&gt;canvas { width: 100%; height: 100% }&lt;\/style&gt;\r\n\t&lt;\/head&gt;\r\n\t&lt;body&gt;\r\n        &lt;!-- Include the javascript library --&gt;\r\n\t\t&lt;script src=\"js\/three.min.js\"&gt;&lt;\/script&gt;\r\n        &lt;!-- Here goes all our game's code --&gt;\r\n\t\t&lt;script&gt;\r\n\t\t\t\r\n\t\t&lt;\/script&gt;\r\n\t&lt;\/body&gt;\r\n&lt;\/html&gt;<\/pre>\r\n<h2>Creating the basics for any HTML5 game<\/h2>\r\n<p>Any HTML5 game has a loop at its core, its heart that keeps beating, that works like this: we tell JavaScript to call a certain function about 60 times per second (depends on the framerate you choose or what your system can handle). Every time the function is called, the complete screen is cleared of all objects, and then the whole game is drawn again with the updated positions\/rotations\/objects\/etc. Luckily, the good people creating JavaScript, have created a function for just that.<\/p>\r\n<pre >function render()\r\n{  \r\n\t\/\/Loop this render function we're in at 60 frames\/second\r\n\t\/\/Also, when we're not focussed on this webpage, this pauses our game (useful!)\r\n    requestAnimationFrame(render);\r\n\r\n\t\/\/All the logic for your game comes here, this is where all the magic happens\r\n    ...\r\n\r\n    \/\/And once the magic has happened, we tell THREE.JS to update the scene according to the new standards\r\n    \/\/'renderer' is a variable we'll define in the next part\r\n    renderer.render(scene, camera);\r\n}\r\n\r\n\/\/And last but not least, don't forget to call the function ONCE\r\nrender();<\/pre>\r\n<h2>Creating the basics of a Three.js 3D scene<\/h2>\r\n<p>Now that the game's webpage is created, and we're sure we're looping our game at a comfortable framerate, we need to initiate Three.js and create a basic scene we can do stuff with later on. As stated earlier, we're going to need a few different things for it to work. Put this just after the &lt;script&gt; tag, before your render() function:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Set the size of the game\r\n\/\/If you want it fullscreen, use window.innerWidth and window.innerHeight\r\nvar WIDTH = 400,\r\n  HEIGHT = 300;\r\n\r\n\/\/Set the attributes for our camera (field of view, aspect ratio, near point, far point)\r\n\/\/Near and far point specify in which area things will be rendered in front of the camera\r\n\/\/Set them to values closer to each other if you want a more efficient game, otherwise just leave it this way\r\nvar VIEW_ANGLE = 45,\r\n  ASPECT = WIDTH \/ HEIGHT,\r\n  NEAR = 0.1,\r\n  FAR = 10000;\r\n\r\n\/\/Create the renderer (WebGLRenderer is standard, there are others, but those are just automatic fallbacks for older browsers)\r\nvar renderer = new THREE.WebGLRenderer();\r\n\r\n\/\/Create the camera using our predefined variables\r\nvar camera =\r\n  new THREE.PerspectiveCamera(\r\n    VIEW_ANGLE,\r\n    ASPECT,\r\n    NEAR,\r\n    FAR);\r\n\r\n\/\/Create the scene\r\nvar scene = new THREE.Scene();\r\n\r\n\/\/Add the camera to it, and pull it back a bit, because it starts at (0,0,0)\r\nscene.add(camera);\r\ncamera.position.z = 20;\r\n\r\n\/\/Set the size of the renderer\r\nrenderer.setSize(WIDTH, HEIGHT);\r\n\r\n\/\/Assuming you've created an element with id 'gameCanvas' you want to put your game in..\r\n\/\/Get this element, and append the renderer to it, to start things off\r\nvar c = document.getElementById(\"gameCanvas\");\r\nc.appendChild(renderer.domElement);<\/pre>\r\n<h2>Okay...nice I guess?<\/h2>\r\n<p>Now you should see no errors, and there should be a 3D scene loaded into your canvas. However, nothing is actually in the scene, so there's really nothing to see. Now would be the time to start putting objects or so-called <em>geometries<\/em> into the scene. I'll demonstrate the regular simple box\/cube.<\/p>\r\n<h2>It's a cube!<\/h2>\r\n<p>The code explains itself (this still needs to be put before the render() function, because we're simply creating something, and not updating anything).<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create geometry for the object (a cube with dimensions (1,1,1))\r\nvar geometry = new THREE.BoxGeometry(1,1,1);\r\n\/\/Create a material for it\r\n\/\/The MeshBasicMaterial is one of the materials included, and is a material that doesn't care about lightning or anything,\r\n\/\/but is useful for testing out things\r\nvar material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n\r\n\/\/Create the cube, by telling Three.js to create a new mesh, providing it with our cube's geometry and material\r\n\/\/NOTE: This means, that you can create a more complex geometry, and then only call THREE.Mesh once to draw 'em all, which reduces CPU load!\r\nvar cube = new THREE.Mesh( geometry, material );\r\n\r\n\/\/Finally add the cube to the scene\r\nscene.add(cube);\r\n<\/pre>\r\n<p>The reader who's been paying attention might now ask the question 'but, there's no light, why do we see the cube?'. When we don't give THREE.js a light, it just lights the whole scene with an universal, global light. This might be useful in some cases, but looks horrific in most cases.<\/p>\r\n<h2>I like to move it move it<\/h2>\r\n<p>The last piece of this beginners tutorial will be showing you how to make the cube actually do something. Put this in the render() function, right between the requestAnimationFrame, and the renderer call:<\/p>\r\n<pre data-lang=\"javascript\">cube.rotation.x += 0.1;\r\ncube.rotation.y += 0.1;<\/pre>\r\n<h2>What now?<\/h2>\r\n<p>It would be wise, to continue with our advanced tutorial. This covers the extra basic possibilities of Three.js, some extra features you will find useful, and links to more specific tutorials on Three.js subjects.<\/p>","slur":"1-three-js-a-beginners-guide","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"15","title":"[Three.js] An Advanced Guide","post":"<p>Now that you've read the beginners guide, you want more! And you get more. Learning how to create the very basics of a 3D scene is exciting, but not even close to enough to be able to create your game. In this advanced guide I'll walk you through everything you'll need to create an actual game. I will not cover everything that is possible, only the 'advanced basics' so to speak - how to create any object, how to make the whole set of objects in the scene look good, and how to make these extras work and do their tasks properly.<\/p> \r\n<h2>Purposeful Properties!<\/h2>\r\n<p>Every object in a Three.js world inherits from a certain master object called 'Object3D'. This object contains some very useful properties you'll have to use for pretty much everything. Specific objects add their own extra properties, but these are the ones you can use on anything:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Updating or Reading the position, rotation and scale\r\nsomeObject.position\r\nsomeObject.rotation\r\nsomeObject.scale\r\n\r\n\/\/Everything has the properties x,y,z to set them individually, like this:\r\nsomeObject.position.x = 20;\r\n\r\n\/\/To set them all at once, use..\r\nsomeObject.position.set(20,60,10);\r\n<\/pre>\r\n<p>And if you've created a mesh (like the cube from the previous tutorial), there are also these extra properties you might find useful:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Get geometry of a mesh\r\nsomeMesh.geometry\r\n\r\n\/\/This contains the vertices and faces\r\n\/\/Which are all stored in an array you can loop through\r\nsomeMesh.geometry.vertices\r\nsomeMesh.geometry.faces<\/pre>\r\n<h2>Please Note<\/h2>\r\n\r\n<p>To save lots of resources, Three.js by default turns off any changes on anything. If you've changed the geometry of an object, you need to tell the system that you did so:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Make the geometry dynamic, so it allows updates\r\nsomeMesh.geometry.dynamic = true;\r\n\r\n\/\/You get the idea..\r\nsomeMesh.geometry.verticesNeedUpdate = true;\r\nsomeMesh.geometry.facesNeedUpdate = true;\r\nsomeMesh.geometry.normalsNeedUpdate = true;\r\n\r\n\/\/As an alternative, you can set these flags on the object once at the beginning, to notify the system this will need constant updating..\r\nsomeMesh.__dirtyVertices = true;\r\nsomeMesh.__dirtyEdges = true;\r\nsomeMesh.__dirtyFaces = true;<\/pre>\r\n<p>What I've just told you, isn't everything there is: there are more common properties, methods, etc.  - but these ones are the most common and useful.<\/p>","slur":"2-three-js-an-advanced-guide","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"16","title":"[Three.js] Lighting","post":"<p>Just like in the real world, there are multiple types of lighting in Three.js. If you don't create one, everything in the scene renders 'flat\/unlit' (that's Three.js's standard lightning). If you create one or more, those lights take over everything. The following are available: <strong>PointLight, SpotLight, DirectionalLight, HemisphereLight, AmbientLight<\/strong>. I've ordered these types in terms of how much of an impact they have. I'll also explain each of them with a bit of code.<\/p>\r\n\r\n<h2>PointLight<\/h2>\r\n\r\n<p>A light source that emits light in all directions, like a light bulb.<\/p>\r\n<pre data-lang=\"javascript\">\/\/PointLight(color of the light, intensity, max distance)\r\nvar light = new THREE.PointLight( 0xff0000, 1, 100 );\r\n\r\n\/\/Give it a better x,y,z position\r\nlight.position.set( 50, 50, 50 );\r\n\r\n\/\/Add it to the scene\r\nscene.add( light );<\/pre>\r\n<h2>SpotLight<\/h2>\r\n\r\n<p>A SpotLight makes its light originate from a certain specified point, and move outward in a coned direction (using the angle you specified). It is almost identical to a spotlight you see in the real world.<\/p>\r\n<pre data-lang=\"javascript\">\/\/SpotLight(color, intensity, distance, angle (radians), rapidity of falloff of light)\r\nvar light = new THREE.SpotLight( 0xff0000, 1, 100,Math.PI\/5,10);\r\n<\/pre>\r\n<h2>Directional Light<\/h2>\r\n\r\n<p>A directional light is the opposite of a spotlight: it's a light which produces parallel rays (as if the light is infinitely far away, like the sun) that shine in a certain, single direction.<\/p>\r\n<pre data-lang=\"javascript\">\/\/DirectionalLight(color, intensity);\r\nvar light = new THREE.DirectionalLight(0xff0000, 1);\r\n\r\n<\/pre>\r\n<p>'We don't need to set a direction?' you might wonder. No, the light always points towards the absolute center (origin) of the scene, so setting it to for example x = -100 makes it shine towards the right, and setting y = 100 makes it shine from the top to the bottom.<\/p>\r\n\r\n<h2>HemisphereLight<\/h2>\r\n\r\n<p>This light is positioned directly above the screen, and behaves like a sun at noon. Its shape is that of sphere, which means that this light emits downwards from every possible direction.<\/p>\r\n<pre data-lang=\"javascript\">\/\/HemisphereLight(skyColor, groundColor, intensity);\r\nvar light = new THREE.HemisphereLight(0x0000ff, 0x00ff00, 1);<\/pre>\r\n<h2>AmbientLight<\/h2>\r\n\r\n<p>And last, but not least, the ambient light, which of course creates some ambience! It doesn't originate from a certain position, or move in a certain direction: it just lights the complete scene with the specified color - like a subtle color overlay for the scene.<\/p>\r\n<pre data-lang=\"javascript\">var light = new THREE.AmbientLight( 0x404040 ); \/\/ soft white light<\/pre>\r\n<h2>Keep in mind the Shadows!<\/h2>\r\n<p>If you now were to create a nice light, and a cube, you would be surprised to see that no shadows appear! That's normal. Again, to save resources, we need to enable a few things that are turned off by default by Three.js. First of all, every light doesn't cast shadows automatically, we need to set that boolean to true:<\/p>\r\n<pre data-lang=\"javascript\">someLight.castShadow = true;\r\n\/\/NOTE: Ambience lights can't cast shadows<\/pre>\r\n<p>Second of all, for every object, you can set whether it <em>casts<\/em> shadows or not, and also if it <em>receives<\/em> shadows from other objects or not.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Casting and receiving\r\nsomeObject.castShadow = true;\r\nsomeObject.receiveShadow = false;\r\n\r\n\/\/Optionally, you can set the darkness of an objects' shadows\r\nsomeObject.shadowDarkness = 0.5;<\/pre>\r\n<p>And last of all, the renderer needs to know if we're using shadows <em>at all<\/em> in our game:<\/p>\r\n<pre data-lang=\"javascript\">renderer.shadowMapEnabled = true;\r\n\/\/If you want soft shadow maps (which is almost always the preferred type)\r\nrenderer.shadowMapType = THREE.PCFSoftShadowMap;<\/pre>","slur":"3-three-js-lighting","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"17","title":"[Three.js] Shapes and Geometries","post":"<p>Although it's possible to create any shape\/geometry\/mesh you want in Three.js, there are a few basic ones ready for immediate use, that will prove sufficient most of the time. We've already seen the box briefly, but there's so much more to it!<\/p>\r\n\r\n<h2>Box<\/h2>\r\n\r\n<p>A BoxGeometry can be used for any type of cuboid (3D square, rectangle, etc.). <\/p> \r\n<pre data-lang=\"javascript\">var geometry = new THREE.BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments);<\/pre>\r\n<h2>Sphere<\/h2>\r\n\r\n<p>A sphere is the other obvious basic shape: a 3D circle\/ball.<\/p>\r\n<pre data-lang=\"javascript\">var geometry = new THREE.SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)\r\n<\/pre>\r\n<p><em>What are those last 4 parameters<\/em> <em>about?<\/em> you might ask. Well, these are useful if you want incomplete spheres. The <strong>phi<\/strong> start and length determine the amount of vertices sweeping around the Y-axis. The <strong>theta<\/strong> start and length determine those around the Z-axis.<\/p>\r\n\r\n<h2>Plane<\/h2>\r\n\r\n<p>The third basic 3D object that's always mentioned, is the plane. A plane simply is a ground or wall - a flat square. If you for example want to create a grid-based game, the plane's your man!<\/p>\r\n<pre data-lang=\"javascript\">var geometry = PlaneGeometry(width, height, widthSegments, heightSegments)<\/pre>\r\n<h2>Polyhedrons (multi-planes)<\/h2>\r\n\r\n<p>In this category, we have multiple tastes: <em>tetrahedron, octahedron, icosahedron, polyhedron. <\/em>The first three are simpler ways to create common polyhedrons, the last one can be used to create anything.<\/p>\r\n<pre data-lang=\"javascript\">var geom = new THREE.TetrahedronGeometry(radius, detail)\r\n           new THREE.OctahedronGeometry(radius, detail)\r\n           new THREE.IcosadhedronGeometry(radius, detail)\r\n\r\n           new THREE.PolyhedronGeometry(vertices, faces, radius, detail)\r\n\r\n\/\/The radius specifies the radius of the geometry\r\n\/\/Detail adds more vertices, setting this to more than 0 makes it technically not a polyhedron anymore\r\n\r\n\/\/And the polyhedron requires you to set the amount of vertices and faces it will build the geometry from<\/pre>\r\n<h2>Cilinders and Tubes<\/h2>\r\n\r\n<p>You know them: those shapes with a circle at the bottom,  and at a certain height the same circle straight above it. And tubes have the same, but with a hole in it.<\/p>\r\n<pre data-lang=\"javascript\">var geom = new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)\r\n\r\n\/\/You can set a different radius for top and bottom\r\n\/\/Specify a height\r\n\/\/Determine the amount of segments (setting it to a high value will make it appear to be a circle, lower values make for other shapes)\r\n\/\/openEnded: boolean determining if the end is open or capped, default is capped (=false)<\/pre>\r\n<p>The tube works a bit differently:<\/p>\r\n<pre data-lang=\"javascript\">var geom = new THREE.TubeGeometry(path, segments, radius, radiusSegments, closed)\r\n\r\n\/\/Set a path and rotate it around radius with the amount of segments specified.\r\n\/\/And you can determine if you want it closed or open.\r\n\/\/(documentation on this one is practically non-existent, sorry)<\/pre>\r\n<h2>LatheGeometry<\/h2>\r\n\r\n<p>And last but not least, the lathe. You can set a path, and it will rotate this path around an axis, creating a radially symmetrical object (read: good for apples, oranges, vases, donuts, pipes, etc.).<\/p>\r\n<pre data-lang=\"javascript\">var geom = new THREE.LatheGeometry(points, segments, phiStart, phiLength)\r\n\r\n\/\/Points: An array of Vector3s. Since Lathe rotates around the Z-axis, Y-values can be set to 0.\r\n\/\/Amount of segments (again, determines how smooth it looks)\r\n\/\/Starting angle, and length (default is 0 and 2PI, a full circle)<\/pre>\r\n<h2>TextGeometry<\/h2>\r\n\r\n<p>A nice 3D beveled text every now and then looks really nice. And you can make them, very easily.<\/p>\r\n<pre data-lang=\"javascript\">var geom = new THREE.TextGeometry(text, parameters)\r\n\r\n\/*\r\ntext: The text that needs to be shown. \r\nparameters: Object that can contain the following parameters.\r\n\tsize — Float. Size of the text.\r\n\theight — Float. Thickness to extrude text. Default is 50.\r\n\tcurveSegments — Integer. Number of points on the curves.\r\n\tfont — String. Font name.\r\n\tweight — String. Font weight (normal, bold).\r\n\tstyle — String. Font style (normal, italics).\r\n\tbevelEnabled — Boolean. Turn on bevel. Default is False.\r\n\tbevelThickness — Float. How deep into text bevel goes. Default is 10.\r\n\tbevelSize — Float. How far from text outline is bevel. Default is 8.\r\n*\/<\/pre>\r\n<h2>However..<\/h2>\r\n\r\n<p>If all of that doesn't suit your needs, you can just go the traditional way, and model something in a 3D program (try Blender, it's free, and just as good as the others) and import it to Three.js<\/p>","slur":"4-phaser-shapes-and-geometries","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"18","title":"[Three.js] Material Madness!","post":"<p>Three.js comes with a few basic materials that will, most of the time, fit your needs. But if you need special shaders, you can write them yourself in GLSL ((Web)GL Shader Language), and hand those to the engine.<\/p> \r\n<h2>MeshBasicMaterial<\/h2>\r\n<p>This material shades geometries in a flat or wireframe way. With this material, you can basically give a 3D object a certain color, and it will just be that color, nothing more (no shadows\/reflection\/gradient\/whatever). And if you set the wireFrame property to true, it will render the wireframe of the object instead (which is typically used for debugging).<\/p>\r\n<pre data-lang=\"javascript\">var material = new THREE.MeshBasicMaterial( parameters )\r\n\r\n\/\/Parameters is an object which can have a lot of properties, but you'll probably only need:\r\n\/\/color: the color of the material\r\n\/\/wireframe: set to true if you want to display the wireframe of the geometry<\/pre>\r\n<h2>MeshLambertMaterial<\/h2>\r\n<p>Unlike the basic one, this material is capable of shading an object based on light sources and shadows.<\/p>\r\n<pre data-lang=\"javascript\">var material = new THREE.MeshLambertMaterial( parameters )\r\n<\/pre>\r\n<h2>MeshPhongMaterial<\/h2>\r\n<p>The phong material is especially useful for shiny surfaces.<\/p>\r\n<pre data-lang=\"javascript\">var material = new THREE.MeshPhongMaterial( parameters )\r\n\r\n\/\/This material has one special property to set in the parameters object:\r\n\/\/shininess: a number, default is 30<\/pre>\r\n<h2>MeshFaceMaterial<\/h2>\r\n<p>This takes an array of materials, and puts each on a single, seperate face!<\/p>\r\n<pre data-lang=\"javascript\">var materials = \/\/some array containing all sorts of materials...\r\nvar cubeMaterial = new THREE.MeshFaceMaterial(materials);<\/pre>\r\n<h2>Common properties among materials<\/h2>\r\n<p>Despite the fact that every material does something else completely, there are lots of common properties among the materials (they all inherit from the parent Material class). Among them are:<\/p>\r\n<pre data-lang=\"javascript\">\/\/We've already covered color and wireframe!\r\n.ambient\r\n\r\n\/\/Ambient color of the material, multiplied by the color of the AmbientLight. Default is white.\r\n\r\n.specular\r\n\r\n\/\/Specular color of the material, i.e., how shiny the material is and the color of its shine. Setting this the same color as the diffuse value (times some intensity) makes the material more metallic-looking; setting this to some gray makes the material look more plastic. Default is dark gray.\r\n\r\n.shading\r\n\r\n\/\/How the triangles of a curved surface are rendered: as a smooth surface, as flat separate facets, or no shading at all.\r\n\/\/Options are THREE.SmoothShading (default), THREE.FlatShading, THREE.NoShading.\r\n\r\n.fog\r\n\r\n\/\/Define whether the material color is affected by global fog settings. Default is true.\r\n\r\n.reflectivity\r\n\r\n\/\/How much the environment map affects the surface; also see \"combine\".\r\n\r\n.refractionRatio\r\n\r\n\/.The index of refraction for an environment map using THREE.CubeRefractionMapping. Default is 0.98.\r\n\r\n.combine\r\n\r\n\/\/How to combine the result of the surface's color with the environment map, if any.\r\n\/\/Options are THREE.MultiplyOperation (default), THREE.MixOperation, THREE.AddOperation. If mix is chosen, the reflectivity is used to blend between the two colors.\r\n\r\n.bumpMap\r\n\/\/Bump maps can be generated from textures, and when included with the original one, gives a flat 2D texture a very realistic 3D look without having to model the 3D object to it.<\/pre>\r\n<p>If you want anything regarding <em>transparency<\/em> for your object, you need to remember to set two things:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Set the transparent flag to true\r\nsomeMaterial.transparent = true;\r\n\r\n\/\/A value between 0.0 and 1.0 for opacity (= alpha= transparency)\r\nsomeMaterial.opacity = someValue;<\/pre>\r\n<h2>Is that all we can do?<\/h2>\r\n<p>No, that's not all. You can write your own shaders\/materials in any way you like! However, for this you need to learn a new programming language; <em>GLSL<\/em>. This will be discussed later in this course.","slur":"5-three-js-material-madness","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"19","title":"[Three.js] Tutorial for Professionals!","post":"<p>If you've read the beginner and advanced tutorials, you can create all basic types of objects and make them appear via lightning and materials. Here I'll teach you how to take it one step further and create some more varied visuals.<\/p> \r\n<h2>Fog<\/h2>\r\n<p>Fog applied throughout the whole world:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Fog(color of the fog, min distance to apply fog, max distance)\r\nscene.fog = new THREE.Fog( hex, near, far )<\/pre>\r\n<h2>Different Cameras<\/h2>\r\n<p>Next to the perspective camera we've introduced earlier, there's also an <strong>orthographic camera<\/strong>. This displays the world as though it was 2D, so it's best use would be for a 2D game or the 2D GUI\/HUD of a game.<\/p>\r\n<pre data-lang=\"javascript\">\/\/ left, right, top, bottom, near, far\r\nvar camera = new THREE.OrthographicCamera( width \/ - 2, width \/ 2, height \/ 2, height \/ - 2, 1, 1000 );\r\n\r\nscene.add( camera );<\/pre>\r\n<p>And last but not least, cameras come with the useful feature <strong>lookAt<\/strong> to make it look at certain points (Vector3's) in the world or objects.<\/p>\r\n<pre data-lang=\"javascript\">\/\/It's useful to first set the 'up' value for the camera, to make sure it's properly rotated\r\ncamera.up = new THREE.Vector3(0,0,1);\r\n\r\n\/\/Then make it look at the origin\r\ncamera.lookAt(new THREE.Vector3(0,0,0));<\/pre>\r\n<h2>Textures<\/h2>\r\n<p>Every material has a certain <strong>.map<\/strong> property, which you can assign a certain texture you loaded earlier (you'll learn about loading stuff in a second). Like this:<\/p>\r\n<pre data-lang=\"javascript\">var cubeTexture = \/\/some image loaded here.. (you'll learn that in a few paragraphs)\r\nvar cubeMaterial = new THREE.MeshLambertMaterial({ map: cubeTexture });<\/pre>\r\n<p>Another possibility is to draw something using JavaScript's canvas and then assign that as a texture. The following code draws a canvas with black\/white stripes alternating and then creates a texture from it:<\/p>\r\n<pre data-lang=\"javascript\">var canvas  = document.createElement( 'canvas' );\r\ncanvas.width = 32;\r\ncanvas.height    = 64;\r\nvar context = canvas.getContext( '2d' );\r\n\r\ncontext.fillStyle = '#ffffff';\r\ncontext.fillRect( 0, 0, 32, 64 );\r\n\r\nfor( var y = 2; y &lt; 64; y += 2 ){\r\n  for( var x = 0; x &lt; 32; x += 2 ){\r\n      var value   = Math.floor( Math.random() * 64 );\r\n      context.fillStyle = 'rgb(' + [value, value, value].join( ',' )  + ')';\r\n      context.fillRect( x, y, 2, 1 );\r\n  }\r\n}\r\n\r\nvar texture  = new THREE.Texture(canvas);<\/pre>\r\n<h2>Loaders<\/h2>\r\n<p>There are a few things you're most likely to be loading throughout your Three.js career: images, materials and 3D objects made in external software.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Images\r\nnew THREE.ImageLoader.load(url, onLoad, onProgress, onError);\r\n\r\n\/\/Materials\r\nnew THREE.MaterialLoader.load(url, onLoad, onProgress, onError);\r\n\r\n\/\/3D Objects\r\n\/\/You'll most likely need an exporter for your 3D software to export your creations to JSON (JavaScript Object Notation, used a lot in HTMl5 games)\r\nnew THREE.JSONLoader.load(url, onCompleteCallback, pathToTexture);<\/pre>\r\n<h2>Particles<\/h2>\r\n<p>Particles are very small parts of something that you need a whole bunch of (like snow, rain, glitters, confetti, etc.). To make this as efficient as possible, we need to put all the particles in one geometry, so we need to only make one call to Three.js to create a particle system out of it.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create an empty geometry object\r\nvar particles = new THREE.Geometry;\r\n\r\n\/\/Add 2000 'particles' at random positions, and pass them to the geometry as standalone vertices\r\nfor (var p = 0; p < 2000; p++) {\r\n    var particle = new THREE.Vector3(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 500 - 250);\r\n    particles.vertices.push(particle);\r\n}\r\n\r\n\/\/Create a basic particle material, setting color and size\r\nvar particleMaterial = new THREE.ParticleBasicMaterial({ color: 0xeeeeee, size: 2 });\r\n\r\n\/\/Create a system from geometry and material (just as with meshes)\r\nvar particleSystem = new THREE.ParticleSystem(particles, particleMaterial);\r\n\r\n\/\/Add the system to the scene\r\nscene.add(particleSystem);\r\n\r\n\r\n\/\/And for the sake of this example, put this in the looping render function to make it all rotate\r\nparticleSystem.rotation.y += 1\/60;<\/pre>\r\n<h2>Rays<\/h2>\r\n<p>Rays are an often overlooked, but really really useful and essential part of 3D gaming. A ray is basically an invisible line from a certain point, in a certain direction, through the scene. This line then checks which objects it collides with, and you can do something with that information (often used for getting 3D coordinates in a world from a 2D mouse position, or for checking whether or not there's something in front of an AI enemy, so it doesn't bump into everything all the time).<\/p>\r\n<pre data-lang=\"javascript\">var rayCaster = new THREE.Raycaster();\r\nrayCaster.set(startingPosition, direction);\r\n\r\n\/\/startingPosition can be any array of x,y coordinates, or simply playerMesh.position\r\n\/\/direction is a Vector3(x,y,z). Often though, if you see it's not working, you'll need to .normalize it\r\n\r\n\/\/Check for intersection (returns array of all objects)\r\n\/\/obstacles is a group of objects it must check collision with\r\nvar collidingWith = rayCaster.intersectObjects(obstacles);<\/pre>\r\n<h2>Input<\/h2>\r\n<p>Sadly, Three.js doesn't come with some useful built in methods or functions for handling user input. But, lucky us, there's some genius out there (Jerome Etienne) who's made all sorts of Three.js plugins (which he calls THREEx).<\/p>\r\n<h5>Mouse\/Touch Events<\/h5>\r\n<p>Get the THREEx Dom Events Extension <a href=\"https:\/\/github.com\/jeromeetienne\/threex.domevents\/blob\/master\/threex.domevents.js\">at this page<\/a><\/p>\r\n\r\n<p>Then you need to include it at the top of your page:<\/p>\r\n<pre data-lang=\"html\">&lt;script src='threex.domevent.js'&gt;&lt;\/script&gt;<\/pre>\r\n<p>First, instantiate a new DOM Events layer:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Requires the current camera and renderer\r\nvar domEvents   = new THREEx.DomEvents(camera, renderer.domElement)<\/pre>\r\n<p>The extension works just like event listeners: you can add an event on a function, and if you don't need it anymore you can remove it.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Add an event listener for a click on a certain object\r\nsomeMesh.on('click', function(){\r\n    \/\/Execute code block here\r\n    someMesh.scale.x *= 2;\r\n});\r\n\r\n\/\/To remove it, simply use...\r\nsomeMesh.off('click', callback);\r\n\r\n\/\/Currently supported events:\r\nclick, dblclick, mouseup, mousedown, mouseover and mouse out<\/pre>\r\n<h5>Keyboard events<\/h5>\r\n<p>Again, download the plugin <a href=\"http:\/\/learningthreejs.com\/data\/THREEx\/THREEx.KeyboardState.js\">here<\/a><\/p>\r\n\r\n<p>Include it with your page's header:<\/p>\r\n<pre data-lang=\"html\">&lt;script src='THREEx.KeyboardState.js'&gt;&lt;\/script&gt;<\/pre>\r\n<p>Then, instantiate it:<\/p>\r\n<pre data-lang=\"javascript\">var keyboard = new THREEx.KeyboardState();<\/pre>\r\n<p>Then check whether a key (or combination of keys is pressed)!<\/p>\r\n<pre data-lang=\"javascript\">\/\/Combination of SHIFT and P\r\nif(keyboard.pressed(\"shift+P\")) {\r\n     pauseGame();\r\n}\r\n\r\n\/\/Just P\r\nif(keyboard.pressed(\"P\")) {\r\n    drawPistol();\r\n}\r\n\r\n\/\/If you don't need it anymore, destroy the listener\r\nkeyboard.destroy();<\/pre>\r\n<h5>Trackballcontrols<\/h5>\r\n<p>Trackballcontrols? Trackballcontrols. It's an extra script from the Three.js author himself that you can include, and it enables you to zoom in\/out and pan and move around the scene with the camera. It's not enormously useful in most games, but invaluable when debugging.<\/p>\r\n\r\n<p>Get the trackballscript <strong><a href=\"https:\/\/raw.githubusercontent.com\/mrdoob\/three.js\/master\/examples\/js\/controls\/TrackballControls.js\">here<\/a> <\/strong>(and include it, you know the drill)<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create new controls variable containing the trackballcontrols, applied to a certain camera\r\n\/\/Then set some properties, and that's it!\r\ncontrols = new THREE.TrackballControls( camera );\r\n\r\ncontrols.rotateSpeed = 1.0;\r\ncontrols.zoomSpeed = 1.2;\r\ncontrols.panSpeed = 0.8;\r\n\r\ncontrols.noZoom = false;\r\ncontrols.noPan = false;\r\n\r\ncontrols.staticMoving = true;\r\ncontrols.dynamicDampingFactor = 0.3;\r\n\r\ncontrols.addEventListener( 'change', render );<\/pre>\r\n<h3>Math<\/h3>\r\nTO D: Sprites. Beziercurves and splines. Animations.","slur":"6-three-js-tutorial-for-professionals","cat":"Games","subcat":"Threejs","video":"","diff":"4","quiz":""},
{"id":"20","title":"[Three.js] Physics with Physijs!","post":"<p>There are many great javascript physics engines out there, but PhysiJS was made specifically for Three.js, so I think it's the best fit.<\/p>\r\n<h2>Setup<\/h2>\r\n<p>First, get the necessary file(s) <a href=\"http:\/\/chandlerprall.github.io\/Physijs\/\">on GitHub<\/a><\/p> \r\n\r\n<p>To add Physijs to a Three.js project, you simply need to follow a few easy steps.<\/p>\r\n\r\n<p>But first of all, don't forget to add a &lt;script&gt; tag that points to the physi.js file.<\/p>\r\n<h2>Requiring core libraries<\/h2>\r\n<p>That header sounds intriguing, but it's nothing more than including the following two lines in your code (PhysiJS depends on the famous ammo.js javascript physics library):<\/p>\r\n<pre data-lang=\"javascript\">Physijs.scripts.worker = '\/js\/physijs_worker.js';\r\nPhysijs.scripts.ammo = '\/js\/ammo.js';<\/pre>\r\n<h2>Some small alterations<\/h2>\r\n<p>Then, instead if initiating a Three.js scene like you always do, create a Physijs scene (this is exactly the same as a Three.js scene, but with a physics layer built on top of it):<\/p>\r\n<pre data-lang=\"javascript\">scene = new Physijs.Scene();<\/pre>\r\n<p>And when you're creating a mesh, instead of calling any of the THREE.Mesh types, call one from the Physijs ones, for example:<\/p>\r\n<pre data-lang=\"javascript\">\/\/ Box\r\nbox = new Physijs.BoxMesh(\r\n   new THREE.CubeGeometry( 5, 5, 5 ),\r\n   new THREE.MeshBasicMaterial({ color: 0x888888 })\r\n);\r\nscene.add( box );<\/pre>\r\n<h2>Make it all work!<\/h2>\r\n<p>And last but not least, next to the render call for the Three.js renderer, we need to call the physics system to make its usual iterations and check for collisions and what not.<\/p>\r\n<pre data-lang=\"javascript\">scene.simulate();<\/pre>\r\n<h2>Scene configuration<\/h2>\r\n<p>When creating the Physics scene, you can configure it a little. When calling new Physijs.scene(), you can pass in an object as the parameter. This object can have these properties:<\/p>\r\n<pre data-lang=\"javascript\">var scene = new Physijs.Scene({fixedTimeStep: (1\/60), blabla});\r\n\r\n\/\/Attributes to pass in the object\r\nfixedTimeStep (default 1 \/ 60) \/\/How much time one simulation step takes to simulate\r\nreportsize (default 50) \/\/If you know how much objects your world will have, you can set this to optimize\r\n\r\n\/\/Methods to call on it\r\nsetGravity (default Vector3( 0, -10, 0 ) ) \/\/Sets the direction and strength of the gravity\r\nsetFixedTimeStep \/\/Resets the timestep dynamically (do not call it every frame!)\r\n\r\n\/\/The simulation call also can take a parameter:\r\n\/\/The maximum steps\/iterations the physics system is allowed to perform (more = even more accurate collisions, but slower performance)\r\nscene.simulate({ maxSteps: someValue});<\/pre>\r\n<h2>Please note!<\/h2>\r\n<p>There are a few things you need to keep in mind all the time when adding those physics to your Three.js Here's a small list:<\/p>\r\n\r\n<h5>No scaling after creation<\/h5>\r\n\r\n<p>Once you've created a physics mesh from some geometry, you cannot scale it afterwards. However, before that moment, you can scale it anyway you like.<\/p>\r\n\r\n<h5>Notify the system when things have changed outside the physics system<\/h5>\r\n\r\n<p>If an object needs to change position or rotation manually, you need to tell the system you've just changed it. Don't worry, Position\/rotation change from the Physijs engine (like bouncing, gravity, etc.) is taken care of already. You need to set these flags to true:<\/p>\r\n<pre data-lang=\"javascript\">mesh.__dirtyPosition = true;\r\nmesh.__dirtyRotation = true;<\/pre>\r\n\r\n<h5>Creating static objects<\/h5>\r\n\r\n<p>Objects that are always going to be static, simply need to have their mass set to 0.<\/p>\r\n\r\n<p>Objects that will sometimes be static, and other times be dynamic, need to have the following applied:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Completely freeze an object\r\nobject.setAngularFactor = THREE.Vector3(0,0,0);\r\nobject.setLinearFactor = THREE.Vector3( 0, 0, 0 );\r\n\r\n\/\/You can also clear any velocities the same way (setting them to a 0 vector3)\r\nobject.setAngularVelocity\r\nobject.setLinearVelocity\r\n\r\n\/\/To reset, simply change the factors back to Vector3(1,1,1);<\/pre>\r\n<p>Now you can go on to the second part of the 3D Physics section!<\/p>","slur":"7-three-js-physics-with-physijs","cat":"Games","subcat":"Threejs","video":"","diff":"4","quiz":""},
{"id":"21","title":"[Three.js] More Physics!","post":"<p>Now it's time to create your first meshes with a fully functional physics body! (and more of course)<\/p>\r\n<h2>Basic Shapes<\/h2>\r\n<p>Below are the most common shapes Physijs currently supports (there are a few more, but those are not important right now)<\/p>\r\n\r\n<ul>\r\n\t<li><code>Physijs.PlaneMesh<\/code> - infinite zero-thickness plane<\/li>\r\n\t<li><code>Physijs.BoxMesh<\/code> - matches <code>THREE.BoxGeometry<\/code><\/li>\r\n\t<li><code>Physijs.SphereMesh<\/code> - matches <code>THREE.SphereGeometry<\/code><\/li>\r\n\t<li><code>Physijs.CylinderMesh<\/code> - matches <code>THREE.CylinderGeometry<\/code><\/li>\r\n\t<li><code>Physijs.ConeMesh<\/code> - matches <code>THREE.CylinderGeometry<\/code> (tapered)<\/li>\r\n\t<li><code>Physijs.CapsuleMesh<\/code> - matches <code>THREE.CylinderGeometry<\/code>, except has two half spheres at ends<\/li>\r\n<\/ul> \r\n<p>To use these, you'd simply replace <strong>THREE.Mesh<\/strong> with one of the Physijs equivalents you'd like to use. Then, as usual, you'd supply the <strong>geometry and material,<\/strong> and later <strong>add it to the scene. <\/strong><\/p>\r\n<p>Do note though, that<strong> THREE.PlaneMesh<\/strong> and <strong>Physijs.PlaneMesh<\/strong> are not completely analagous - the plane from Physijs is infinite. If you really want a Three.js plane with physics, use a very thin BoxMesh.<\/p>\r\n<p>Also, <code>Physijs.CapsuleMesh<\/code> is usually good for humanoid player characters. Just saying.<\/p>\r\n\r\n<h2>Collisions<\/h2>\r\n<p>Checking for collisions, is as simple as adding a collision event listener to a mesh.<\/p>\r\n<pre data-lang=\"javascript\">mesh.addEventListener( 'collision', function( other_object, relative_velocity, relative_rotation, contact_normal ) {\r\n    \/\/ `this` has collided with `other_object` \r\n    \/\/ with an impact speed of `relative_velocity` and a rotational force of `relative_rotation` \r\n    \/\/and at normal `contact_normal`\r\n});<\/pre>\r\n<p>However, there's always a certain problem when dealing with computer physics. It's possible that an object moving with a very high velocity collides with another object inbetween iterations\/steps, and therefore no collision is detected. For performance reasons, the solution for this is automatically turned off by the physics system. But if you know some mesh will be moving with an enormous speed, you can turn it on and off yourself:<\/p>\r\n<pre data-lang=\"javascript\">\/\/ Enable CCD Motion Clamping if the object moves more than 1 meter in one simulation frame\r\nmesh.setCcdMotionThreshold(1);\r\n\r\n\/\/ The object gets an sphere inside of it to use for CCD, you can set the radius here (must be smaller than the object)\r\nmesh.setCcdSweptSphereRadius(0.2);<\/pre>\r\n<h2>Collision Materials<\/h2>\r\n<p>Physijs can give some extra properties to a material, and thus to an object. These attributes are <strong>friction <\/strong>and <strong>restitution (bounciness)<\/strong>. These need to be set in a special Physijs material:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Values between 0.0 and 1.0\r\nvar friction = .8;\r\nvar restitution = .3;\r\n\r\n\/\/Physijs Material - a three material\/shader, friction, restitution\r\nvar material = Physijs.createMaterial(\r\n    new THREE.MeshBasicMaterial({ color: 0x888888 }),\r\n    friction,\r\n    restitution\r\n);\r\n\r\n\/\/Just apply it to the mesh like you always do\r\nvar mesh = new Physijs.BoxMesh(\r\n    new THREE.BoxGeometry( 5, 5, 5 ),\r\n    material\r\n);<\/pre>\r\n<h2>Callbacks &amp; Events<\/h2>\r\n<p>Because Physijs runs on a different thread than your main application, there is no guarantee that it will be able to iterate the scene every time you call <code>scene.simulate<\/code>. Because of this, you may want to attach an event listener to the scene that is triggered whenever the physics simulation has run.<\/p>\r\n\r\n<pre data-lang=\"javascript\">var scene = new Physijs.scene;\r\nscene.addEventListener( 'update', function() {\r\n    \/\/ the scene's physics have finished updating\r\n});<\/pre>\r\n<p>Additionally, if your scene is complex or has a lot of objects, the physics simulation can slow down to the point where adding new objects can become a lot of work for the application. To help alleviate some of the pain this may cause, objects have a <\/span><code style=\"color: #333333;\">ready<\/code> event which is triggered after the object has been added to the physics simulation. <\/p>\r\n<pre data-lang=\"javascript\">var readyHandler = function() {\r\n    \/\/ object has been added to the scene\r\n};\r\nvar mesh = new Physijs.SphereMesh( geometry, material );\r\nmesh.addEventListener( 'ready', readyHandler );\r\nscene.add( mesh );<\/pre>\r\n<h2>Compound Shapes<\/h2>\r\n<p>If you want to mix multiple shapes together into one object, which is used more often than you think, that can be done quite easily. It works exactly the same as in Three.js: you create the parent, then the child you want to add to it, and then you add this little line of code:<\/p>\r\n<pre data-lang=\"javascript\">parent.add( child );\r\nscene.add( parent );\r\n\r\n\/\/Remember, add all childs before adding the parent!\r\n\/\/And, child's positions are local\/relative to the parent<\/pre>\r\n<h2>Constraints<\/h2>\r\n<p>There's a very good (and long...) wiki page on constraints by the creator of Physijs himself, and I didn't find a way to simplify and\/or expand on it in this tutorial, so you can just go the the page here: <a href=\"https:\/\/github.com\/chandlerprall\/Physijs\/wiki\/Constraints\">Constraints Physijs<\/a><\/p>","slur":"8-three-js-more-physics","cat":"Games","subcat":"Threejs","video":"","diff":"4","quiz":""},
{"id":"22","title":"[Three.js] Animation\/Movement!","post":"<p>Now that you've learned a lot about creating all sorts of things and setting them up in Three.js, you'll want to know how to perform actions on these objects!<\/p> \r\n<h2>The Basic Setup<\/h2>\r\n<p>In the first few tutorials of this series you already learned to set up a render loop in JavaScript. The part between <em>requestAnimationFrame()<\/em> and <em>renderer.render()<\/em> is where you'll put all your code from this lesson.<\/p>\r\n\r\n<p>The way this works is that the loop runs at the highest FPS your browser can handle at that moment (with maximum at 60), and every time the loop runs, your code is executed. That means that for a FPS of 60, your scene is updated 60 times per second.<\/p>\r\n\r\n<p>So if you wanted to move a cube 100 units in world space along the x-axis (depends on from where you're viewing how much pixels this is!), you'd put into the render frame:<\/p>\r\n<pre data-lang=\"javascript\">theCube.position.x += (100\/60);<\/pre>\r\n<h2>But, the FPS can change right?<\/h2>\r\n<p>Yes, I've already mentioned that FPS depends on how much is in the scene and how much your computer can handle. Therefore, it's unwise to use a fixed number for FPS.<\/p>\r\n\r\n<p>Instead, Three.js provides a <strong>clock <\/strong>class. How it works is: you create a clock object, and start it at the start of your program. Then every rendered frame, you can get the amount of seconds that has passed from the clock.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create clock, set autostart to true\r\nvar clock = new THREE.Clock(true);\r\n\r\n\/\/Within the render() function\r\n\/\/Get the seconds elapsed since last getDelta call\r\nvar timeElapsed = clock.getDelta();\r\n\/\/Or get the amount of time elapsed since start of the clock\/program\r\nvar timeElapsed = clock.getTimeElapsed();<\/pre>\r\n<p>Once that is all set up, you can change your cube-moving code to:<\/p>\r\n<pre data-lang=\"javascript\">theCube.position.x += 100 * timeElapsed;<\/pre>\r\n<h2>Tweening<\/h2>\r\n<p>The previously mentioned techniques creates linear motion\/animation for your objects, and that's not always what you want. For creating nice tweened animations, there is a tiny, awesome extra JS library called <strong><a href=\"https:\/\/github.com\/sole\/tween.js\">tween.js<\/a>.<\/strong>. We are going to work with that here.<\/p>\r\n\r\n<p>Don't forget to include the library before you test any of the code!<\/p>\r\n<pre data-lang=\"html\">&lt;script type='text\/javascript' src='tween.js'&gt;&lt;\/script&gt;<\/pre>\r\n<h5> Create basic tween<\/h5>\r\n<pre data-lang=\"javascript\">\/\/Set position and target coordinates\r\nvar position = { x : 0, y: 300 };\r\nvar target = { x : 400, y: 50 };\r\n\r\n\/\/Tell it to tween the 'position' parameter\r\n\/\/Make the tween last 2 seconds (=2000 milliseconds)\r\nvar tween = new TWEEN.Tween(position).to(target, 2000);\r\n\r\n\/\/Now update the 3D mesh accordingly\r\ntween.onUpdate(function(){\r\n    mesh.position.x = position.x;\r\n    mesh.position.y = position.y;\r\n});\r\n\r\n\/\/But don't forget, to start the tween\r\ntween.start();\r\n\r\n\/\/And also don't forget, to put this into your looping render function\r\ntween.update();<\/pre>\r\n<h5> Do even more awesome stuff<\/h5>\r\n<pre data-lang=\"javascript\">\/\/Delay the start of the tween\r\ntween.delay(500);\r\n\r\n\/\/Set a different tweening (easing) function\r\ntween.easing(TWEEN.Easing.Elastic.InOut);\r\n\r\n\/\/Create a chain of tweens\r\n\/\/For example: this one loops between firstTween and secondTween\r\nfirstTween.chain(secondTween);\r\nsecondTween.chain(firstTween);\r\n<\/pre>\r\n<p>A list of all the different easing functions can be found here: <a href=\"http:\/\/sole.github.io\/tween.js\/examples\/03_graphs.html\">31 Easing Functions<\/a><\/p>\r\n<h2>Other Types of Animation<\/h2>\r\n\/\/todo","slur":"11-three-js-animationmovement","cat":"Games","subcat":"Threejs","video":"","diff":"3","quiz":""},
{"id":"23","title":"[Three.js] Beginners GLSL Tutorial","post":"<p>GLSL stands for (Open)GL Shading Language. It's the programming language used for OpenGL\/WebGL shading, and it's incorporated into the Three.js library. Of course, this language is also applicable anywhere else you intend to use WebGL, but I'm focusing on Three.js here. It's kinda like C, but specialized in shaders (so a lot of functions for vectors).Basically, what you can do with GLSL is determine what the shader does when it is run on a certain geometry. And what a shader does, can be nearly anything.<\/p> \r\n<h2>The Shading Pipeline<\/h2>\r\n<p>When we're shading a 3D scene, there are multiple different stages in the pipeline. We're able to completely modify two of these stages, the <em>vertex shader<\/em> and the <em>fragment shader<\/em>. This image presents a basic overview of the pipeline:<\/p>\r\n\r\n<img src=\"media\/ShaderPipeline-01.png\" \/>\r\n\r\n<p>As you see, first the basic code is loaded on the CPU's part. Then, it passes on the geometries for all objects (and camera\/light info) to the GPU.<\/p>\r\n\r\n<p>This GPU receives them, and send each vertex through the <strong>vertex shader<\/strong>. Here you can modify them in any way you like.<\/p>\r\n\r\n<p>Then the modified vertices are send back, and some operations are performed to determine which object is in front, clipping occurs outside of the camera's view, etc. What's left then, is send to the<strong> fragment shader<\/strong>, which basically gets a lot of triangles, and has to determine the colors for each pixel in them. These are sent back and properly displayed on the monitor.<\/p>\r\n<h2>Uniform, varying and attribute<\/h2>\r\n<p>What's also shown in the diagram, are weird types of variables. These are three different types of variables (like local, global, static, etc. - but different) used in GLSL.<\/p>\r\n\r\n<ul>\r\n\t<li><em>Uniform<\/em>, is a variable that is the same for both shaders.&nbsp;For example, the light&#39;s position and color. Therefore, it is also read-only.<\/li>\r\n\t<li><em>Varying<\/em>, is &nbsp;passed in to the vertex shader, then&nbsp;<strong>modified<\/strong>, and then the new value is passed to the fragment shader. For example, if you change the positions of vertices, you also have to change their normals (which are given to and used by the fragment shader) so shading works correctly.<\/li>\r\n\t<li><em>Attribute<\/em>, is only available in the vertex shader, and is read-only: they are standard variables for a vertex&#39; position, normal, etc.<\/li>\r\n<\/ul>\r\n\r\n<h2>A Basic Shader<\/h2>\r\n<p>The most basic shader you can get, simply leaves the vertex positions as they are and gives the whole object one overall color.<\/p>\r\n\r\n<p><strong><em>Vertex Shader <\/em><\/strong><em>(gl_Position)<\/em><strong><em>:<\/em><\/strong><\/p>\r\n<pre data-lang=\"glsl\">\/\/Here's the space for variables\r\n\r\n\/\/The built-in main function\r\nvoid main() {\r\n  \/\/Every vertex shader must eventually set 'gl_Position'\r\n  \/\/And in this case, we multiply the vertex position with the camera view and screen matrix to get the final output.\r\n  gl_Position = projectionMatrix *\r\n                modelViewMatrix *\r\n                vec4(position,1.0);\r\n}<\/pre>\r\n<p><em><strong>Fragment Shader <\/strong>(gl_FragColor)<strong>:<\/strong><\/em><\/p>\r\n<pre data-lang=\"javascript\">\/\/Again, space for variables\r\n\r\nvoid main() {\r\n  \/\/Just as vertex shader, fragment shader must in the end set this variable (gl_FragColor)\r\n  \/\/We set it to a pink color.\r\n  gl_FragColor = vec4(1.0,  \/\/ R\r\n                      0.0,  \/\/ G\r\n                      1.0,  \/\/ B\r\n                      1.0); \/\/ A\r\n}<\/pre>\r\n<p>This shader simply displays the object with a color, nothing more, nothing less. The vertex shader leaves the position as it is, and gives it to the fragment shader. This one gives the fragments their colors and we're done!<\/p>\r\n<h2>But, where do we put shader code?<\/h2>\r\n<p>Good question! There are multiple possibilities, but the one that's used the most is by putting the shader code into '&lt;script&gt;' tags, and using jQuery to get the text out of it and use it for the material.<\/p>\r\n<pre data-lang=\"html\">\/\/Vertex Shader Code\r\n&lt;script id=\"cubeVertexShader\" type=\"x-shader\/x-vertex\"&gt;\r\n    \/\/codehere...\r\n&lt;\/script&gt;\r\n\r\n\/\/Fragment Shader Code\r\n&lt;script id=\"cubeFragmentShader\" type=\"x-shader\/x-fragment\"&gt;\r\n    \/\/codehere...\r\n&lt;\/script&gt;\r\n\r\n&lt;script&gt;\r\n\/\/Getting the text out of it\r\nvar vShader = $('#cubeVertexShader').text();\r\nvar fShader = $('#cubeFragmentShader').text();\r\n\r\n\/\/Or, for non-jQuery kind of people\r\nvar vShader = document.getElementById('cubeVertexShader').innerHTML;\r\nvar fShader = document.getElementById('cubeFragmentShader').innerHTML;\r\n&lt;\/script&gt;\r\n<\/pre>\r\n<h2>And the final bit: add it to the scene<\/h2>\r\n<p>Last but certainly not least: we must add the shaders together into a material Three.js can use.<\/p>\r\n<pre data-lang=\"javascript\">\/\/Create a new Shader Material with our code powering it\r\nvar itemMaterial = new THREE.ShaderMaterial({\r\n    \/\/Optional, here you can supply uniforms and attributes\r\n    vertexShader: vShader,\r\n    fragmentShader: fShader,\r\n});\r\n\r\n\/\/Create a new item with our material\r\nvar item = new THREE.Mesh(new THREE.CubeGeometry(100, 10, 10), itemMaterial);<\/pre>\r\n<h2>That's...the basics.<\/h2>\r\n<p>You haven't really accomplished much. I'm not saying this to make you feel bad about yourself, I mean: we've just recreated what can also be done with a Three.js standard material. Now, it's time to start adding lots of more fun, and we do exactly that in the next part.<\/p>","slur":"9-three-js-complete-glsl-tutorial","cat":"Games","subcat":"Threejs","video":"","diff":"4","quiz":""},
{"id":"24","title":"[Three.js] GLSL Advanced Tutorial","post":"<p>In the previous tutorial, you learned all about setting up GLSL and how it works (the fundamentals). Now, I'll show you how you can do special things with it!<\/p> \r\n<h2>Define variables<\/h2>\r\n<p>At the top of a shader, above the <i>main<\/i> function, we define the different variable types I mentioned earlier (varying and uniform). If you define a variable in one shader, you have to define it in the exact same way in the other shader as well! When creating a new variable in GLSL outside of the main function you have to state its GLSL-type and its normal\/usual type. This sounds weird, but that basically means: uniform\/varying\/attribute + float\/int\/vec3\/etc. Like this:<\/p> \r\n<pre data-lang=\"glsl\">\/\/This bit is the same in vertex and fragment shader\r\nvarying vec3 vNormal;\r\nuniform vec3 uLightDirection;\r\n\r\nvoid Main() {\r\n    \/\/blabla..\r\n}<\/pre>\r\n<p>It's common practice, to put a little 'v' or 'u'  in front of varyings and uniforms respectively, so you know what type something is by looking at the name. If you then define variables inside the Main function, it works the same way, but you just leave out the first bit (varying\/uniform).<\/p>\r\n\r\n<p><strong>NOTE:<\/strong> If you create a <em>float<\/em> variable, it wants all its input in float numbers! So don't use a 1 or 0, use 1.0 and 0.0<\/p>\r\n\r\n<h2>Do something with 'em!<\/h2>\r\n<p>I'm just going to show you how this works with an example. This example creates some 'fake' shading on an object. We first pass the normal for every vertex to the fragment shader (this works because interpolation of normals occurs between the two), and then use that and a custom light we set to create shading.<\/p><p><strong>Vertex Shader:<\/strong><\/p>\r\n<pre data-lang=\"glsl\">\/\/This variable will contain the normal\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n  \/\/ 'normal' is a standard value provided by Three.js for every vertex\r\n  \/\/ just as 'position'\r\n  vNormal = normal;\r\n\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}<\/pre>\r\n<p><strong>Fragment Shader:<\/strong><\/p>\r\n<pre data-lang=\"glsl\">\/\/Declared in exactly the same way as Vertex Shader\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n  \/\/Create a vector to determine where light comes from \r\n  \/\/ (similar to directional light in this case)\r\n  vec3 light = vec3(0.5, 0.2, 1.0);\r\n\r\n  \/\/Normalize it \r\n  light = normalize(light);\r\n\r\n  \/\/Calculate 'dot product'\r\n  \/\/ and clamp 0-&gt;1 instead of -1-&gt;1\r\n  float dProd = max(0.0,\r\n                    dot(vNormal, light));\r\n\r\n  \/\/And output this color.\r\n  gl_FragColor = vec4(dProd, dProd, dProd, 1.0);  \/\/RGBA\r\n\r\n}<\/pre>\r\n<p><em>What's this <strong>dot product<\/strong>?<\/em> The dot product, is an often used (and therefore built-in) function that calculates the cosine between two vectors. If the normal and light vector are equal (point in same direction), this returns 1 (fully lit). If they are completely opposite, this returns -1 (which we make 0.0, and is completely dark).<\/p>\r\n\r\n<p><em>What's the <strong>normalize<\/strong> for?<\/em> Normalize shrinks all three values of the vector down to a value between 0 and 1. This must be done to calculate the dot product. If one of the vectors is not normalized, then the equation does not work properly. Now you should have a nicely shaded 3D object!<\/p>\r\n<h2>Passing through attributes<\/h2>\r\n<p>Now we've seen some uniforms and varyings in action, but where are those attributes? Well, those are usually passed in from the HTML page - you can also input uniforms from there. First you create a JS Object that will contain all the attributes, then inside that you create another new object for every attribute that holds the type and value. Then, you pass it into the Shader. Like this:<\/p>\r\n<pre data-lang=\"javascript\">\/\/Attributes\r\n\/\/Every element of the array corresponds with the vertex of the same index\r\nvar attributes = {\r\n  displacement: {\r\n    type: 'f', \/\/ a float\r\n    value: [] \/\/ an empty array\r\n  }\r\n};\r\n\r\n\/\/Uniforms\r\nvar uniforms = {\r\n  amplitude: {\r\n    type: 'f', \/\/ a float\r\n    value: 0\r\n  }\r\n};\r\n\r\n\/\/Create final ShaderMaterial\r\nvar shaderMaterial =\r\n    new THREE.MeshShaderMaterial({\r\n      uniforms:       uniforms,\r\n      attributes:     attributes,\r\n      vertexShader:   vShader,\r\n      fragmentShader: fShader\r\n    });<\/pre>\r\n<p>Then of course, you also need to define these variables at the top of the shader(s) so that they are properly received, and then within the Main function you can use them for whatever you want!<\/p>\r\n<h2>Data Types!<\/h2>\r\n<p>GLSL supports a few basic data types, and a few specifically useful ones when working with 3D graphics:<\/p>\r\n<ul>\r\n\t<li><strong>int<\/strong> integer (0,1,10,-5,etc.)<\/li>\r\n\t<li><strong>float<\/strong> floating point number (0.2, -0.5, 15.6, 4\/3, etc.)<\/li>\r\n\t<li><strong>bool<\/strong> boolean (true or false, 0 or 1)<\/li>\r\n\t<li><strong>vec2, vec3, vec4<\/strong>: vectors of length 2,3,4 respectively<\/li>\r\n\t<li><strong>mat2, mat3, mat4:<\/strong> matrices of 2x2, 3x3, 4x4 respectively<\/li>\r\n<\/ul>\r\n<p>GLSL is optimized for throwing vectors together, so for example a vec4 can be created by saying vec4(someVec3, 4thvalue). Also, you can multiply a vec3 with a single float variable (<em>scalar<\/em>) without the program throwing all sorts of errors. This will simply multiply each component of the vector seperately.<\/p>\r\n\r\n<p><i>How could there ever be a 4-dimensional vector?<\/i><\/p>\r\n\r\n<p>Well, any vec4 in GLSL has the properties RGBA or XYZW you can get\/set, depending on your interpretation.<\/p>\r\n\r\n<p>RGBA works for colors: a red, green and blue channel, and an <em>alpha<\/em> (opacity) channel).<\/p>\r\n\r\n<p>XYZW works for actual points and vectors: the x, y, z coordinate, and the fourth W value decides what type it is (because something with an x, y and z could be both  a vector and a point). Vectors have 0, points have 1. And then you might think 'why didn't they just create different functions for vectors and points?' Because using this fourth value helps a lot when it comes to using <i>matrices<\/i> (which is what the computer does a lot)..<\/p>\r\n<h2>Built-in methods<\/h2>\r\n<p>All the usual methods are built into GLSL: if\/else statements, for loops, do while loops, etc. However, I recommend you try to avoid if\/else statements as much as possible. They are (relatively) heavy on the GPU, and as seen that for now performance\/steady FPS is the major bottleneck in most 3D web apps, you'll want to optimize performance as much as possible. It also has the other standard (math) functions:<\/p>\r\n<ul>\r\n\t<li><strong>sin, cos, tan, atan<\/strong><\/li>\r\n\t<li><strong>pow, exp, log, exp2, log2, sqrt, inversesqrt<\/strong><\/li>\r\n\t<li><strong>abs, floor, ceil, mod, sign, min, max, clamp<\/strong><\/li>\r\n<\/ul>\r\n<p>(if you don't know some of these, look them up, they can really help you out sometimes.)<\/p>\r\n\r\n<p>Next to that, there are <strong><em>GLSL-specific (vector) functions<\/em><\/strong>. You've already seen <strong>normalize<\/strong> and <strong>dot product<\/strong>, and here's the rest:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Length<\/strong> (length()): Returns the length of the vector that&#39;s put into it.<\/li>\r\n\t<li><strong>Distance<\/strong>&nbsp;(distance()): Returns the distance between two points put into it.<\/li>\r\n\t<li><strong>Cross product<\/strong>&nbsp;(cross()): Returns the axis of rotation between two vectors, i.e. the vector&nbsp;that is perpendicular to both vectors.<\/li>\r\n\t<li><strong>Reflect<\/strong>&nbsp;(reflect()): Reflects a vector (needs the incoming vector, and a vector representing the normal of the surface).<\/li>\r\n\t<li><strong>Refract<\/strong>&nbsp;(refract()):<strong>&nbsp;<\/strong>Refracts a vector (needs the incoming vector, normal of surface, and ratio or refraction).<\/li>\r\n<\/ul>\r\n\r\n<h2>Textures!<\/h2>\r\n<p>To add textures to your shader, are multiple steps are required. First. you must use Three.js to load a texture to a variable. Then you pass this data as a uniform variable to the shader. Then within the shader you must pass the UV coordinates of every vertex to the fragment shader, so that the latter can use both variables (texture and UV) to access the correct part of the texture to display. Sounds complicated? Not really, just look at this code:<\/p>\r\n\r\n<p><b>For the main page\/javascript:<\/b><\/p>\r\n<pre data-lang=\"javascript\">var tex = THREE.ImageUtils.loadTexture('\/path\/to\/texture.png');\r\n\/\/optionally set some settings for it\r\n\/\/tex.magFilter = THREE.NearestFilter;\r\n\r\n\/\/Create the material, pass in the texture as a uniform with type 't'\r\nvar mat = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n        theTexture: {type: 't', value: tex}\r\n    },\r\n    vertexShader:vShader,\r\n    fragmentShader:fShader,\r\n    \/\/Set transparent to true if your texture has some regions with alpha=0\r\n    transparent: true\r\n});<\/pre>\r\n<p><b>Vertex Shader:<\/b><\/p>\r\n<pre data-lang=\"glsl\">\/\/A varying that gets the UV coordinates and gives them to the FS\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    \/\/Get UV coordinates\r\n    vUv = uv;\r\n    \/\/As always, keep position as is\r\n    gl_Position = projectionMatrix *\r\n                  modelViewMatrix * vec4(position, 1.0 );\r\n}<\/pre>\r\n<p><strong>Fragment Shader:<\/strong><\/p>\r\n<pre data-lang=\"glsl\">\/\/Same varying to retrieve UV coordinates \r\nvarying vec2 vUv;\r\n\/\/A uniform of type 'sampler2D' with the same name as was used in Three.js\r\nuniform sampler2D theTexture;\r\n \r\nvoid main() {\r\n    \/\/Get the color from the texture by using texture2D()\r\n    \/\/And as always, set it to the fragment's color\r\n    gl_FragColor = texture2D(theTexture, vUv);\r\n}<\/pre>\r\n<p>It's that simple! Well, for simple textures. If you want to go crazy, I suggest you pick up a good book on the math behind 3D computer graphics.<\/p>\r\n<h2>And now?<\/h2>\r\n<p>Now you've learned the basics of GLSL. But of course, there's much more! You could animate the uniforms you put into the shader, add normal and bump maps, create awesome materials, anything you like!<\/p>\r\n\r\n<p>However, I must leave you on your own here. Experiment yourself and create inspiring 3D graphics and shaders!<\/p>","slur":"10-three-js-glsl-advanced-tutorial","cat":"Games","subcat":"Threejs","video":"","diff":"5","quiz":""},
{"id":"25","title":"The Complete Soccer Guide","post":"<p>Soccer is a beautiful game. It's the most famous sport in the world, and for a good reason. There's an awful lot of possibilities in the sport, more than in any other. And isn't it just amazing to watch that ball bending into the upper ninety from far out?<\/p> \r\n\r\n<p>Well, it's even better if you shot that ball. And that's what this guide is for: to help you learn the basics\/fundamentals and technique for every aspect of soccer, to vastly improve your game. It's not a very long read, and it covers pretty much everything. And with pictures.<\/p>\r\n<h2>Overview of Contents<\/h2>\r\n<ol class=\"toc\">\r\n\t<li>The Very Basics<\/li>\r\n\t<li>Shooting & Passing Fundamentals<\/li>\r\n<li>Shooting<\/li>\r\n<li>Passing<\/li>\r\n\t<li>Ball Skills<\/li>\r\n\t<li>Headers<\/li>\r\n\t<li>Defending<\/li>\r\n\t<li>Off-the-ball movement<\/li>\r\n<\/ol>\r\n","slur":"the-complete-soccer-guide","cat":"Sports","subcat":"Soccer","video":"","diff":"1","quiz":""},
{"id":"26","title":"[Soccer] The Very Basics","post":"<p>This article will explain the basic structure we'll be working with in this course, and a bit of the terminology that will be applied.<\/p>\r\n<h2>Different play modes<\/h2>\r\n<p>When playing soccer, there are basically 3 different 'playing states' you can be in:<\/p> \r\n\r\n<ul>\r\n\t<li><strong>Defending:<\/strong>&nbsp;The opponent has the ball and is trying to score against you. You are trying to prevent this from happening.<\/li>\r\n\t<li><strong>Attacking:<\/strong> Your team has the ball, but not you. You&#39;re now trying to get into good positions to make sure your team keeps the ball and to keep the attack going<\/li>\r\n\t<li><strong>You have the ball:<\/strong> Your team is attacking, and now you have the ball. This is of course the most important moment to you, as you now need to decide whether to shoot, pass, or start dribbling\/running. Most of this guide will be about how you can improve your own skills, but never forget the importance of knowing what to do when the other two states are current.<\/li>\r\n<\/ul>\r\n\r\n<h2>Different touches<\/h2>\r\n<p>As you know, in soccer you're not allowed to use any part of both arms. The rest of the body can be used however you like. However, the parts most often used (as they provide the best control) are <strong>thighs, chest, head <\/strong>and of course your <strong>feet<\/strong>. You'll learn about using the other parts later (in 'receiving the ball'), now I'll just tell you all the different ways you can control or touch a ball with your foot.<\/p>\r\n\r\n<img src=\"media\/SoccerTouches.png\" \/>\r\n\r\n<ul>\r\n\t<li><strong>Inside<\/strong> The inside of your foot is the part most people learn to use as they grow up, as it is the easiest and most natural movement. The inside of your foot can be used for anything (passing, shooting, dribbling), as it is the most accurate touch (but slower than others).<\/li>\r\n\t<li><strong>Outside<\/strong> The outside of your foot is the hardest to learn and use. This too can be used for anything, it just makes the ball move and bend in the opposite direction.<\/li>\r\n\t<li><strong>Laces<\/strong> Your laces refer to the upper part of your shoe. Shooting with this part of the foot gives you a lot of power, but sacrifices in accuracy. With combination of laces+inside\/outside you can make a ball spin and go enormously fast at the same time.<\/li>\r\n<li><strong>Heel<\/strong> The heel is almost never used, because it requires some unnatural leg movement and much training to pull it off.&nbsp;You can do a backheel volley, but that&#39;s very hard, and it&#39;s best use is therefore a simple backheel pass on ground level.<\/li>\r\n\t<li><strong>Bottom<\/strong> The bottom of your foot is used for stopping and trapping a ball under your foot. It&#39;s often deployed to receive and control a pass, to protect the ball or as part of a certain trick to get past a defender. Also, in very tight situations in front of goal, you can slide or karate-jump towards the ball and hit it with the bottom. Success not guaranteed.<\/li>\r\n\t<li><strong>Toes<\/strong> You should never hit a ball with toes only, as that gives zero control or power, and it hurts very much. However, just as the bottom of the foot, it can be a decisive move to just slightly redirect the ball to get it where you want.<\/li>\r\n<\/ul>\r\n\r\n<h2>Some definitions<\/h2>\r\n<p>Before we continue, just a few things to clarify what we're talking about all the time:<\/p>\r\n<ul>\r\n<li><em>Kicking Foot: <\/em>The foot that swings and kicks the ball<\/li>\r\n\r\n<li><em>Standing Foot (Non-Kicking Foot): <\/em>The foot that stands still and next to the ball as the other one performs the kicking.<\/li>\r\n<\/ul>","slur":"soccer-01-the-very-basics","cat":"Sports","subcat":"Soccer","video":"","diff":"1","quiz":""},
{"id":"27","title":"[Soccer] Shooting & Passing Fundamentals","post":"<p>Shooting and passing is what you'll be doing 50% of the time. The other half is used by your ball skills. But, the one thing that decides matches, is goals, and you can't get those without shooting and passing. So I suggest, if you're really a beginner when it comes to soccer, you learn to pass and shoot really well before you continue to do anything else, because - if you have the ball, and you can shoot but not dribble, you can score goals or give the perfect pass to a teammate. If you can't shoot, but you can dribble...you can dribble all you want, it's not going to help.<\/p> \r\n<h2>Basics of every shot<\/h2>\r\n<p>Whatever type of shot you're going to pull off, you need to do a few thing:.<\/p>\r\n<ol>\r\n\t<li><strong>Give yourself some space.<\/strong> Find some open space, put the ball there in a nice position, and get your body aligned correctly as well. Also, already know and imagine where you want the ball to go and which kick you're going to use, if you decide or have doubts later on, you'll never perform well.<\/li>\r\n\t<li><b>Put down your planting foot<\/b>. Now place your non-kicking foot besides the ball, not too far away, but keep room for the swing. Make sure the planting foot is <b>pointing towards the target,<\/b> and your <strong>knee slightly bend. <\/strong>It depends on the type of shot how far before\/after the ball you should place your foot.<\/li>\r\n\t<li>(Optional, but very much recommended) <b>Get your arms out<\/b>. Get your arms out, any way you like. However, the common way, is to move the <b>non-kicking foot arm<\/b> diagonally <strong>back and up a bit<\/strong>. The <strong>other arm <\/strong>is diagonally <strong>down and forward<\/strong>. What do arms do? They give extra balance, extra momentum and keep away any defenders.<\/li>\r\n\t<li><strong>Initiate the swing (back).<\/strong> Actually, you should do that while planting your other foot firmly into the ground. As you put down the non-kicking foot, your kicking foot is already off the ground and swinging back (you can't run with two feet on the ground, can you?). Use this momentum to swing it back even more, because a lot of people are afraid to do this and tense up and do a very short swing, which isn't good at all. However, don't overdo it, as this will only hinder you and put you off balance.<\/li>\r\n\t<li><strong>Unleash the power.<\/strong> Now you start to quickly move your leg forward. Your upper leg should move first, until your knee is roughly above the ball. Then, you need to add even more power and start the actual shot by swinging your lower leg to the ball, using the desired touch. This two-step leg movement should be done in a fluent motion, and not look like some sort of robot.*<\/li>\r\n\t<li><b>Follow through.<\/b> Now, depending on the shot, comes the follow through. After your first contact with the ball you continue to move your kicking foot in a certain direction and to a certain extent, to add more power, levitate the ball, add curve, etc.<\/li>\r\n<\/ol>\r\n<p>*The advantage of this motion, is that it requires good swinging technique to do, and it adds more power and accuracy (because the moment you hit the ball, is the moment your leg is at full speed and locked). So, make sure you don't have a stiff leg when shooting, and you  don't hit the ball too early or late in your swing by following the tips!<\/p>\r\n<p>Of course, you can add your own little tweaks here and there, but try to stick to this basic, correct technique as much as you can. The next two posts will be about passing and shooting respectively, explaining all the different possibilities and types more in-depth.<\/p>\r\n\r\n","slur":"soccer-02-shootingpassing","cat":"Sports","subcat":"Soccer","video":"","diff":"1","quiz":""},
{"id":"28","title":"[Soccer] Passing","post":"<p>Passing is used to get the ball to your teammates, which means it shouldn't be too difficult for them to get to and control\/receive the ball you send their way. Therefore, good passing technique usually resides in giving the ball moderate speed and moderate (or no) spin. In theory, there are 3 methods used for passing: <strong>ground push<\/strong>, <strong>cross<\/strong>, <strong>air lob.<\/strong><\/p> \r\n\r\n<p>NOTE: When passing, the inside of the foot is almost always used. However, most people tend to quickly get their foot into normal (toe pointing forward) position when shooting, resulting in you hitting the ball with a weird combination of inside, toe and laces. So, remember to really keep your foot almost at a 90 degree angle with the normal position at the moment of hitting the ball.<\/p>\r\n\r\n<h2>Ground Push<\/h2>\r\n\r\n<p>This is the simplest and most used one. It isn't necessarily a shooting technique, as it's more like pushing the ball straight to your teammate. To do it, follow these steps:<\/p>\r\n<ol>\r\n\t<li>Place the planting foot right beside it, at a good distance (rather too close than too far away though).<\/li>\r\n\t<li>Swing to the ball, hit it with the <strong>inside of your foot<\/strong>, not really with your foot or toes, but with the <strong>part of your ankle<\/strong>. This keeps the ball as straight\/curveless and low as possible.<\/li>\r\n\t<li>Optional improvement detail: Move your foot a bit upwards, so that your toes point up. This really stops the ball from going up, and gives it that slight curve often seen in soccer.<\/li>\r\n\t<li>Follow through then doesn't really matter, but it's best to create the habit of always following through very well.<\/li>\r\n<\/ol>\r\n<h2>Cross<\/h2>\r\n\r\n<p>Crossing the ball is used when trying to get the ball from one part or side of the field to the other. Around midfield it's used to switch the play from left to right or vice versa, and sometimes from one side to the other AND forward (diagonally). Close to the opponent's goal however, it's used to swing the ball into the box from the left\/right, to the head or foot of your teammate. It goes like this:<\/p>\r\n<ol>\r\n\t<li>Run to the ball at an angle. Running straight to it, makes it very hard to create good spin and height, as you impede your own ability to swing.<\/li>\r\n\t<li>Crosses need to have height, either a bit or lots of it. Therefore, place your non-kicking foot a bit before the ball (closer to yourself), so that you lean back when you hit the ball. But remember to keep your shooting technique the same, so that you still get good contact. This leaning back, makes you scoop the ball a bit, and together with a nice follow through into the air, this gives the ball some nice height.<\/li>\r\n\t<li>Swing, and hit the ball with the <strong>inside<\/strong> of your foot. This time, you don't want to use the part close to your ankles, but rather the part of your foot <strong>between ankle and toes.<\/strong> This is the biggest part with the most surface and control.<\/li>\r\n\t<li>When you first hit the ball, you hit it more at the bottom, at the 'corner' closest to you. Then, as your swinging continues, you move your foot upwards to hit the top far-corner just before the ball is released from your foot. Because of the angle of the run-up and your touch, you should have enough contact time with the ball to do this. However, because we want some nice spin and height, follow through is really important here.<\/li>\r\n\t<li>As you're striking the ball, turn your whole (upper) body with your swing, so that at the end of the shot, you're facing your target in all ways possible.<\/li>\r\n\t<li>So, what your foot is basically doing, is curling around the ball while hitting it, so that the ball takes over this curve when it's struck. But, make sure you're not striking it too much to the side to get the curve, as this really messes up your shot.<\/li>\r\n\t<li>Additionally, you'll want to play around with the amount of curve and height. Hitting the ball more with the toes results in higher shots, with less curve. If you have a lot of curve, you might consider making your non-kicking foot point a bit beside the target to make up for it. If you don't get enough height, follow through more and lean back more.<\/li>\r\n<\/ol>\r\n<h2>Lob<\/h2>\r\n\r\n<p>A lob pass, is a straight pass through the air, with some backspin. So, it has no (sideways) curve, which makes it easier to predict and place well, and it has a bit of backspin to make it go quite high and down again quickly. '<em>Why don't they use this all the time then?', <\/em>you might wonder. Well, there are two sides to the story: being easier to predict, makes it easier to receive and control for your teammate, but also easier to defend or block. On top of that, it's a bit harder to pull off. So here it goes:<\/p>\r\n\r\n<p>There are actually two techniques, and one is often called <strong>chipping<\/strong> and the other <b>lobbing<\/b> the ball. With chipping, you count on hitting the ball with the right part and positioning your body correctly to make it succesfull. It also has <em>a lot<\/em> of backspin, and less speed. When doing a lob pass, you're basically trapping the ball between your toe and shin and taking it with you in the swing, and then releasing it when your follow through has ended. This creates a straight ball, high in the air, (relatively) very fast, and almost no spin. Both types have their advantages and disadvantages, you can decide for yourself which you like or use (chipping is discussed in the shooting section though).<\/p>\r\n<ol>\r\n\t<li>Lobbing requires a straight run up (or 90-degree turn towards the box when performing it if you're going for some cross-lob combination, but that's a lot harder to do).<\/li>\r\n\t<li>Place your planting foot right next to the ball. With a lob, you're going to want full control over the ball until you release it. Therefore, putting the non-kicking foot too much before it gives you a great chance of having the ball bounce off your foot when trying to perform it. At the other end, placing it too much behind the ball makes it impossible for you to get the ball up into the air.<\/li>\r\n\t<li>Now swing your leg at it, while your toes are pointing down. You'll want to control the ball with the <strong>laces<\/strong>. But, you don't want to shoot it, so try to get your toes back pointing forward once you've hit the ball, so that it stays on your laces.<\/li>\r\n\t<li>Then you follow through as much as you can and keep your toes pointing forward. At a certain moment (though the later, the beter), the ball will fly off your laces, and into the air.<\/li>\r\n\t<li>If you want the ball to go high, simply try to get your foot as high as possible on the follow through. If you want the ball to mainly go forward (and fast), lean forward a bit on the follow through, and land on your kicking foot to help yourself. You might also try keeping your toes pointed a bit more downward, but that might go wrong and result in a blazing fast shot.<\/li>\r\n<\/ol>\r\n&nbsp;","slur":"soccer-03-passing","cat":"Sports","subcat":"Soccer","video":"","diff":"2","quiz":""},
{"id":"29","title":"[Soccer] Shooting","post":"<p>Shooting is different from passing, in the sense that you want to give the ball a one-way ticket for a direct line towards the goal. You don't expect any teammate to touch it, and you don't want the goalkeeper or any defender to block or deflect it. Therefore, either enormously fast or greatly curved shots are preferred (or a combination, if you're getting really excited). Usually, goals are scored from inside the box or <em>just<\/em> outside it. However, it is perfectly possible to score from more distance, but then you'll need to be able to shoot very fast with lots of accuracy, and even some curve if you want to show off.<\/p> \r\n\r\n<p>If you have the time, your best bet will usually be to do a <strong>bending shot <\/strong>(curving\/spinning). This requires a bit of a setup, and isn't as fast as other shots, but it can curl the ball around the goalkeeper (and other obstacles) into the goal. Also, it makes it harder for the keeper to save, because he has to predict the curve of the ball.<\/p>\r\n\r\n<p>However, if you have a straight shot at goal, the best option would be a <strong>lace shot <\/strong>(driven\/instep). This is the fastest shot available, and can be shot in a perfectly straight line, and therefore be struck with great accuracy. In professional soccer though, most people also give the ball a nice swerving curve with this shot, which makes it seem like it's going into one corner, but it actually goes towards the other.<\/p>\r\n\r\n<p>And last but not least, there's the <strong>chip shot<\/strong>. This is used when the goalkeeper (and any last defenders) are a good distance away from goal and about halfway between you and the goal. This shot then simply lifts the ball over them, out of their reach, and makes it come down to get under the crossbar and score a goal for your team.<\/p>\r\n\r\n<p>Also, it's better to shoot wide than high. If the ball is too high, the ball will simply fly over the goal. If it's wide, there's a good chance the ball is deflected, pushed away by the keeper for a corner or that a teammate will pick the ball up. Furthermore, if you want to hit the upper ninety with your shot, it's better to keep the shot a bit lower and make it go in just below that sweet spot, than to just blast away and shoot the ball over the crossbar 90% of the time, with no chance of ever scoring.<\/p>\r\n\r\n<p>The best spots to strike your ball home to therefore, are actually the lower corners. It's hard for a goalkeeper to dive far when he has to do it on the ground, and there's more chance of the ball going into the net. After that, the most goals are scored by shooting the ball through the keeper's legs, or just past him. It's hard for a goalkeeper to reach to a ball that's very close to him (but not right at him), especially when he can't really see it coming. And only after that, are most goals scored by shooting it into the upper corners.<\/p>\r\n\r\n<h2>Bending shot<\/h2>\r\n\r\n<p>In the <em>passing<\/em> section we already discussed the <strong>cross<\/strong>. The cross is not much different from it, only in the fact that the bending shot usually gets more curve and speed. This is possible, because the shot shouldn't get much height, so the power of the kick goes into the other factors. Therefore, all you have to change is:<\/p>\r\n<ul>\r\n\t<li>Place your standing foot less behind the ball, and more next to it. You can also place it before it if you want a ball on the ground, but that can quickly result in inability to freely swing your leg.<\/li>\r\n\t<li>Try to get a bit more on your laces: lean into the ball\/forward a bit.<\/li>\r\n\t<li>And try some more curve: make your kicking foot go back to 'toes-forward mode' as quick as possible, but retain proper technique ( = the right touch). When done correctly, this adds more spin to the ball, but also gets the ball more onto the laces and moving forward, instead of going up.<\/li>\r\n\t<li>And if you've got that under control, you can try if you can put your momentum into the shot and make your leg swing so much inwards (in the follow through) that your whole body spins around with it.<\/li>\r\n<\/ul>\r\n<h2>Lace shot (and outside)<\/h2>\r\n\r\n<p>This shot is all about enormous power, but I recommend you first get the technique down really well, because even an only slightly misplaced touch can result in the ball flying all over the place with this shot. I'll split the shot into two seperate forms: straight ones, and curving ones struck with the outside of the foot. So pay attention now:<\/p>\r\n\r\n<h5>Straight<\/h5>\r\n<ol>\r\n\t<li>A straight run up, though an angle is perfectly possible.<\/li>\r\n\t<li>Place your standing foot right beside the ball, or even more forwards if you want to keep the ball low.<\/li>\r\n\t<li>Now swing your leg back, and while you swing forwards, <strong>keep your toes pointed down<\/strong> and <strong>lock your ankle<\/strong> for as long as you can. Hit the ball with your <strong>laces<\/strong>, and make sure you make full contact (and don't just poke it with the toes).<\/li>\r\n\t<li>Then follow through, still with toes pointing downwards, and then end this fluent motion with <strong>landing on your kicking foot<\/strong>.<\/li>\r\n\t<li>This should send the ball straight forward with enormous speed, and with some height (depending on how you place your standing foot, how much you lean forward\/backward and how long you keep your toes down).<\/li>\r\n\t<li>At first, many people hit the ball too much on the left or right side of the foot. This isn't useful at all - make sure you hit the ball with the center of your foot (or a bit to to the left of that if that's too difficult).<\/li>\r\n\t<li>Also, most people are afraid of injuring their foot (or mostly their toes) when doing this shot. This only increases bad shooting habits, like straining the leg, holding back, hitting it incorrectly - so don't be afraid. However, these fears are not totally unfounded - there's a chance your toes collide with the ground if you don't watch out. So, first practice shooting with minimum speed but with proper technique. Only after that go wild and make that ball fly.<\/li>\r\n<\/ol>\r\n<h5>Outside curving shot<\/h5>\r\n\r\n<p>This shot basically works the same, but with a few crucial differences:<\/p>\r\n<ul>\r\n\t<li>The run up is at an angle. Also, your standing foot will not really be pointing at the target, but a bit away from it (to allow room for the other leg to swing inwards).<\/li>\r\n\t<li>Then, it's a common misconception that you must hit the ball with the outside of the foot to make it curve that way. No, you must hit the <strong>outside of the ball<\/strong> with all of your <strong>laces<\/strong> (try to get as much contact as you can, but on the outside of the ball).<\/li>\r\n\t<li>So basically, you're swinging your foot inwards and hitting the outside of the ball with your laces, steering it into the other direction (almost perpendicular to your standing foot).<\/li>\r\n\t<li>Success with this type of shot relies on hitting the outside of the ball with as much as you can, without making it into a straight shot (there's a fine line there). And on following through (in the same direction as your standing foot is pointing) very well.<\/li>\r\n\t<li>Also, some people rotate their foot a bit towards the ball in the follow through, and 'scoop' it a bit and make it more into an outside foot lob shot. That's perfectly possible, but is harder to do than the standard method.<\/li>\r\n<\/ul>\r\n<h5>Chip shot<\/h5>\r\n\r\n<p>The chip shot is actually used 80% of the time in passing, and less in shooting. But, because there is a variant that is more useful for shooting than passing, I discuss both methods here in the shooting section. As stated earlier, the chip shot makes a ball go high into the air, and come back down quickly due to the backspin.<\/p>\r\n\r\n<h6>Variant 1 - Used most for passing<\/h6>\r\n<ol>\r\n\t<li>A slightly angled run up is useful.<\/li>\r\n\t<li>Place your standing foot a bit before the ball, so that you lean back when shooting.<\/li>\r\n\t<li>Then swing your kicking leg at it, and hit it with the <strong>inside<\/strong> of your foot, with the part of your <strong>toes<\/strong>. The more you can hit it with your 'big toe', while still remaining decent contact, the higher it will go.<\/li>\r\n\t<li>Then, instead of following through, you can just stop the motion after you've hit the ball. So basically with this shot, you drive your foot into the piece of grass right underneath the ball, and using the slope of the shoe at the contact part it will fly up into the air with a lot of backspin.<\/li>\r\n\t<li>The ball should go straight into the direction your standing foot is pointing. If it doesn't, your kicking foot is either angled inwards too much, or you hit it too much with other parts of the foot. If the ball doesn't get medium height when applying mediocre power, you're again hitting it with the wrong part of the foot or have positioned your standing foot too much ahead of the ball.<\/li>\r\n<\/ol>\r\n<h6>Variant 2 - Used most for shooting (chipping over the keeper, hard-to-get bouncy balls)<\/h6>\r\n<ol>\r\n\t<li>A straight run up.<\/li>\r\n\t<li>Then you place your standing foot <em>ahead<\/em> of the ball, but make sure you don't start leaning forward with this shot.<\/li>\r\n\t<li>Now, swing your kicking leg at it, and you actually want to hit the ball with the same part of your foot (inside toes), but do this while the ball is 'behind' you.<\/li>\r\n\t<li>Then, you have an awful lot of space to follow through, as you've already struck the ball early in your swing. Use this, as it creates lots of backspin on the ball (and not necessarily height) when done correctly.<\/li>\r\n\t<li>Because of the downward movement of the foot at the moment you hit the ball, you don't really send the ball into the air, but force it to pop forward with some height. Therefore, you can't really get this ball very far, but it can go over the keeper, and it has that nasty bounce that can make it hard to defend against (and with times, can make it bounce over a defender's foot).<\/li>\r\n<\/ol>","slur":"soccer-04-shooting","cat":"Sports","subcat":"Soccer","video":"","diff":"2","quiz":""},
{"id":"30","title":"[Soccer] Ball Skills","post":"<p>As said earlier, together with passing\/shooting, ball skills make up the other half of your individual soccer skills. And when I talk about ball skills, I'm talking about being able to do whatever you want with any ball that comes near you. Receive it, have a good first touch, start running with it, dribble with it when there are defenders near, and perhaps do a nice trick if you see the time and space.<\/p> \r\n<h2>Receiving<\/h2>\r\n<p>There are two ways to receive balls flying in the air: <strong>supporting <\/strong>and <strong>trapping<\/strong>. Receiving balls that just roll on the ground requires no specific or special technique, that's discussed further in the <em>first touch<\/em> section.<\/p>\r\n\r\n<p>Receiving can be done with the <strong>feet<\/strong>, <strong>thighs<\/strong> and <strong>chest<\/strong>. The foot can then receive it with either the inside, laces, or outside. Inside is the safest, outside is sometimes needed and looks more awesome, and the laces are used if you want to quickly move forward when receiving the ball.<\/p>\r\n\r\n<h5>Supporting<\/h5>\r\n\r\n<p>Supporting means that you make the ball land on you. You support the ball with some part of your body, so that you can let it drop dead to the ground after you've managed to receive it well. So here, you put your body underneath the ball, make it bounce up a bit, and land right in front of you for further use.<\/p>\r\n\r\n<h5>Trapping<\/h5>\r\n\r\n<p>Trapping the ball is the opposite of supporting it. You put some part of your body on top of the ball at the moment of contact, so that you deflect the ball towards the ground. With feet this gives you great control as the ball's got almost nowhere to go when you trap it, but with other parts of your body the ball can bounce off a bit more wildly.<\/p>\r\n\r\n<h2>Good first touch<\/h2>\r\n<p>A good first touch is more important than everyone thinks, because it allows you to immediately put the ball into the right spot for yourself, and it's the easiest way to go past one or two defenders near you. A good player can go any way with his first touch, which makes it hard to defend against.<\/p>\r\n\r\n<p>NOTE: The tips we gave you about receiving the ball earlier count here, this section only explains which way to move the ball on receiving it.<\/p>\r\n\r\n<p>Keep your eyes on the ball at all times, or you'll not even be aware of a ball coming to you. That's...mostly embarassing, I think. Last of all, always check for defenders near you before receiving a ball!<\/p>\r\n\r\n<h5>With open space in front of you (towards the opposition's goal)<\/h5>\r\n\r\n<p>On receiving the ball you'll want to immediately push it forward (either straight or a bit diagonally), as this makes the attack a lot faster. Even if you meet a few defenders only 10 meters further, you can simply pass to somebody else or backwards, and you'll have gained a little bit more ground on the opponent's half of the pitch.<\/p>\r\n\r\n<h5>When your back is turned (towards the opposition's goal)<\/h5>\r\n\r\n<p>If that's the case, I first have to say to you: don't ever let this happen! Always try to stand in such a way that you see the ball, but at the same time the other side of the pitch (often this means standing on the sideline if you're a winger, or standing diagonally). But if it happens, turn <em>before<\/em> you receive the ball. If you see the ball coming, already turn a bit one way or another, and turn even more with the ball once it's come to you. Of course, if you see there are defenders near as you turn, the ball is usually quickly passed back to where it came from.<\/p>\r\n\r\n<h5>With defenders behind you<\/h5>\r\n\r\n<p>Move your arms out, to defend the ball and feel where the defenders are. If you notice the ball is moving a bit slowly, move towards the ball yourself, or your defender will be there before you and intercept the pass.<\/p>\r\n\r\n<p>Then, once you've received the ball, there's two things you can do on your first touch. Either make it go left or right and hope you're faster than your defender, or immediately stop the ball and shield it (while you wait for some passing options, or you're preparing your next amazing trick).<\/p>\r\n\r\n<h5>In every other situation<\/h5>\r\n\r\n<p>In situations where there's some defenders, and some open space, you'll have to decide the best course of action yourself. If you see a gap somewhere, it's best to exploit it on your first touch. If you see a teammate running in good position, pass it immediately on first touch. If you see no way, it's better to pass the ball backwards or to the sides than trying to squeeze yourself through the opposition's defense.<\/p>\r\n<h2>Dribbling<\/h2>\r\n<p>Dribbling is a vague term, as it means 'moving with the ball, without actually moving it much'. It sits between protecting the ball\/standing still and running with the ball. What players often do, is run with the ball, and then some time before they hit a defender, they slow down and start dribbling. They do some fancy movements, slowly move the ball into different directions, until they think they see space and blast past a defender or give that golden pass. Dribbling is basically the simplest way to give yourself space and time and to get past defenders, while tricks are the harder way. So, how is it done?<\/p>\r\n<ul>\r\n\t<li>Firstly, you must remember to keep the ball underneath your body (not in front or behind it) at all times. It's tempting to keep it behind you so the opponent cannot reach it, or to have it in front of you because you can see it easier that way, but don't do that. That simply makes it harder for you to reach the ball.<\/li>\r\n\t<li>Then, you must learn to only use <strong>sideways lace touches<\/strong>. Never dribble the ball while touching it with the toes, or inside, or outside, or full laces. No, you want to use a combination of <strong>inside+lace<\/strong> for going left, and <strong>outside+lace<\/strong> for going right. This is achieved by pointing your toes down a bit, but not fully (like with the lace shot). And, you can rotate the foot a bit in the right direction, but there's generally not much room for movement in that part of the foot. These touches give more control over speed and direction<\/li>\r\n\t<li>However, sometimes you're more in the mood for some straightforward dribbling, but then you'll be surprised that this is also done with these touches. Either you can angle your foot more, so that instead of left\/right it goes almost straight, or you can use the <strong>standard dribbling technique<\/strong>. I recommend the latter.<\/li>\r\n\t<li>Standard dribbling technique means using a variation of left\/right to move in a certain direction. If you're varying your touches with inside\/outside while moving straight, you can go left\/right any moment. This makes it hard for a defender to get you, because if he steps in to tackle, you're able to dodge it easily.<\/li>\r\n\t<li>Then, make sure that you <strong>touch the ball <\/strong>every time you move your foot. So, if you take the ball to the left, and then you need to take a few steps without touching it (because it's too far away), that's bad, because that's the moment the defender can easily step in and take the ball away. Prevent this, by moving the ball a bit every time you touch it, so that you move as though the ball was glued to your foot.<\/li>\r\n\t<li>Optional, but highly recommended: Learn to do the basic movements with your <em>weak foot<\/em> as well. Lots of professional soccer players can only pass and shoot with their right foot, but dribble\/run\/receive with their weak foot also. Why is this so useful? You're unpredictable, and it allows for the <strong>two-foot-touch<\/strong>. This technique is simply starting with the ball around one foot, and then passing the ball to the other foot, and then quickly dribbling the other direction with the other foot. This gives you two times the normal movement in about the same amount of time.<\/li>\r\n\t<li>And then some simple logic: if there's a defender on your right side, move and dribble with the ball on your left (and vice versa). If there's a defender in front of you, put the ball through its legs or burst to the left or right.<\/li>\r\n<\/ul>\r\n<h2>Running<\/h2>\r\n<p>When I say running (with the ball), I don't mean dribbling at full speed. Dribbling at full speed can be very fast and disastrous for the opponent, but I already explained how to do that (all you need to do is perfect the technique and get fast).<\/p>\r\n\r\n<p>First, let's discuss running without the ball. In soccer, at any moment, you may have to bend your run, receive a ball, jump into the air to perform a header, etc. Therefore, you need to have balance and control at any time. Running in soccer means that you keep your (upper)<strong> body straight<\/strong> all the time and at the same time <strong>look at the ball<\/strong>. When in open space you make extremely long strides, when more people are around you must take smaller steps. While running, <strong>move your arms<\/strong> with you. This can create room around you, and it gives you more balance and speed.<\/p>\r\n\r\n<p>Another action that calls for great running technique is em>counter attacking<\/em>. Say you've just received the ball and have an enormous amount of space to run into.  Remember you still need to keep the ball underneath you, but this time you can hit it with <strong>laces only<\/strong>. This sends it straight, and fast. Then, once in about two or three steps you touch the ball again. To make yourself able to run this way with your body in perfect position, you'll have to run on your toes really and with ankle locked while your foot is in the air.\r\n<h2>Tricks<\/h2>\r\n\/\/Todo","slur":"soccer-05-ball-skills","cat":"Sports","subcat":"Soccer","video":"","diff":"3","quiz":""},
{"id":"31","title":"[Soccer] Headers","post":"<p>Many people don't realize how important headers are in the soccer game. But the truth is, that lots of passes, crosses and goal kicks fly up into the air and are to be headed. Heading is a skill that is harder to learn than you might think, but it's also the one of the most valuable ones to learn. Heading doesn't involve just striking the ball with the right part of the body, no, you'll also have to win duels with defenders, jump high, get enough power, and give it the right direction.<\/p> \r\n\r\n<p>NOTE: Before I move on, I must say that heading is very dangerous when done wildly and incorrectly!<\/p>\r\n\r\n<p>Heading doesn't mean just putting your head against a ball, no, there's a lot of technique involved:<\/p>\r\n<ol>\r\n\t<li>First, you'll notice the ball is coming at you, and you'll estimate when it will be at the right level for you to head it. You move to that spot (if you've never done this before, getting a ball in the face is not unheard of - it's important to get this part about positioning right). Depending on how high the ball is, and whether or not there are defenders near you, you may decide to do a jumping header, for which you have to position yourself a little closer to the ball.<\/li>\r\n\t<li>Now, load your weapons! Just as with shooting, you have to swing or pull something back, in order to get power once released. So, <strong>keep your neck and head straight<\/strong>, and move your <strong>upper body backwards.<\/strong><\/li>\r\n\t<li>Once you think it's the right time to head the ball (you need to keep your eyes open and fixed on the ball, otherwise you'll probably be too early), you move your upper body forward (and your head with it of course), and hit the ball with your <strong>forehead<\/strong>.<\/li>\r\n\t<li>And now, if you want to give the ball some direction, you need to rotate your neck towards your target (rotating your body doesn't necessarily help), while the ball is still touching your head.<\/li>\r\n\t<li>Now you should have performed a nice and clean header!<\/li>\r\n\t<li>You'll need to keep in mind that any ball that hits your forehead will move upwards, so keep\/move your head a bit down if you want the ball to go low, which is mostly useful for scoring (very often, headers from corners go over the crossbar because of the lack of proper technique).<\/li>\r\n<\/ol>\r\n<p>Now you know how to perform a header, but what if there's people around you that also want the ball for themselves? Use these tips:<\/p>\r\n<ul>\r\n\t<li>Get your arms out - make yourself big and stand on the ground firmly. Make sure that your opponent can't get in front of you, but also can't push (or pull) you in any direction.<\/li>\r\n\t<li>In the case of a goal kick (or another slow but very high ball) you want to stand <strong>behind<\/strong> your opponent. This is because these balls are quite impossible to control, so standing behind the other player either makes the ball fly back a lot towards the opposition's side of the pitch, or it simply flies into your territory and possession.<\/li>\r\n\t<li>In any other case though, you want to either be <strong>in front<\/strong> of your opponent, or you want to <strong>jump higher\/above<\/strong> him.<\/li>\r\n\t<li>When close to the opponent's goal, there will be defenders pushing and pulling you. You need to either shake them off of you by running around a lot, or be strong enough to get them off your back. Then, once the ball comes, use the technique I described earlier to score.<\/li>\r\n\t<li>When defending in front of your own goal, you want to head the ball high and away (and of course, now you're the one pushing the other players). Preferably, you want to head the ball towards the sides, because if you deflect it to somewhere in front of goal, there's a chance an opponent picks it up and shoots the ball into the net.<\/li>\r\n\t<li>However, keep in mind: it's never allowed to put elbows\/arms into other player's faces, or to lean or jump onto them in any way. Although, it depends a lot on the type of arbiter and how intense the game is.<\/li>\r\n<\/ul>","slur":"soccer-06-headers","cat":"Sports","subcat":"Soccer","video":"","diff":"3","quiz":""},
{"id":"32","title":"[Soccer] Defending","post":"<p>Usually, the casual soccer player defends by just running to the guy with the ball at his feet and trying to get his leg in between there somehere. Though part of this technique can be useful, it's of course not the best way to go. It drains the energy from you (you're running all the time), you can easily make fouls, and the opponent can even more easily dodge you and have free space to run into.<\/p> \r\n\r\n<p>There are a few things a defender must be able to do: <strong>intercept\/block<\/strong>, a <strong>standing tackle<\/strong> and a <strong>sliding tackle.<\/strong> Of course, positioning and marking plays a big role here, but that's described in the 'off-the-ball movement' section.<\/p>\r\n\r\n<h2>Defending Fundamentals<\/h2>\r\n\r\n<p>So, you've got an attacker moving somewhere near you. First, you must learn to wait. Don't rush to him, try to <strong>estimate where he will end up<\/strong>, and get there moving at <strong>about the same speed as him<\/strong>. This makes you able to either perform a tackle, or quickly run with the attacker if he changes direction or does some sort of trick. If you run towards him too fast or too slow, the attacker will be able to dodge you or move past you with a simple acceleration. Also remember, to always <strong>stay on your toes, <\/strong>as this makes you able to quickly change direction.<\/p>\r\n\r\n<p>So, now you're running at the proper speed, and you're at the point where you're going to bump into the attacker. You'll now want to stand <strong>diagonally<\/strong>, between the player and the goal (blocking a straight line to the goal). Lower yourself a bit (a lower center of gravity gives you more balance, strength and agility - but less speed), and keep your eyes fixed on the ball, and the ball only, Whatever fancy moves the opponent makes, only the ball can truly show you where the ball is going.<\/p>\r\n\r\n<p>Now, the attacker has the option to try and move past you left or right (cutting outside or inside). If he moves too close to you, or waits too long, you can perform the <strong>standing tackle<\/strong>. Otherwise you'll have to run with him and either block his shot\/pass or get him off the ball with standing\/sliding tackle if he loses control over the ball for a second. You're allowed to use some of your strength and body to take the opponent off the ball, but not very much, because that results in you making a foul. Other moments where <strong>sliding tackles<\/strong> are preferred, are when you're coming from an angle at a player with high speed, and you see the opportunity for a clean sliding*, do it! Otherwise, it can be a last resort to block a pass or stop a player in dangerous position, but be careful with that.<\/p>\r\n\r\n<p>* This means: you're pretty sure where the ball is going to end up (and the player is not going to end up, which is the case when a player is running with the ball and can't change direction quickly.<\/p>\r\n<h2>Standing Tackle<\/h2>\r\n<p>The standing tackle is the easiest one. It can be executed if you're close enough to the ball to stick one foot out (while still standing on the other one) and kick the ball away or take it for yourself.<\/p>\r\n\r\n<p>Standing tackles are performed with the <strong>inside <\/strong>of the foot, as this is the strongest part with the most surface. Basically, all you need to do is put this part of the foot to the ball, and make it go in any other direction than the attacker who first had the ball wanted it to go.<\/p>\r\n\r\n<p>However, sometimes you'll make contact with the ball at the same time as your opponent, or he'll have enough space to move quickly and make it hard for you to get the ball. Then, you'll need to do everything to come out of this duel as the winner, because you're the defender!<\/p>\r\n\r\n<p>Therefore, you first need to learn to close in on the attacker. <strong>Make yourself big<\/strong>, and make sure that whatever direction the other player is going, he'll bump into you, or you'll be able to do a standing tackle with one of your feet. Then, once you see the opportunity, <strong>lean into the tackle<\/strong>. Move your whole body forward and use your mass to make sure the attacker doesn't simply push you away.<\/p>\r\n\r\n<p>And then, to give it a nice finishing touch, you can learn to determine the direction you want the ball to go after the tackle and quickly run there to get the ball for yourself. If you just tackle, most times the ball will bounce out of bounds (and you were the last one to touch it), or fly back to another player from the opposition. A good rule to follow here, is that you want the ball to diagonally move away from your goal. This moves the ball towards the sides, and not back into the feet of the attacker. This puts your team immediately into attacking mode, and you're less likely to lose the ball (with disastrous consequences) there.<\/p>\r\n<h2>Sliding Tackle<\/h2>\r\n<p>A sliding tackle is a bit harder to do, and also has a few variations you'll need to master. Before we go on, a few things on performing safe sliding tackles:<\/p>\r\n\r\n<p><strong>Keep your feet at ground level, always<\/strong>. Whatever you do, any foot that reaches the knee or even higher is not only a yellow or red card for you, but also a danger for the player receiving such a tackle.<\/p>\r\n\r\n<p><strong>Don't hit the ball with the bottom of the foot. <\/strong>You may be tempted to slide to the ball, and kick it away to the side with the bottom of your foot. But, that's not smart, and also dangerous. You want to use your <strong>laces<\/strong> (but not your toes, watch out for that) to kick a ball away.<\/p>\r\n\r\n<p><b>You don't always have to slide.<\/b> Although they look wonderful when done correctly, you don't have to do them all the time once you've mastered them. Most of the times simply running your man into dangerous territory or a standing tackle will suffice. Forcing the opponent to play the ball backwards is also a win.<\/p>\r\n\r\n<p>So, now we can go on to: <em>how is it done?<\/em><\/p>\r\n\r\n<p>Well, the first thing you must learn is of course the 'sliding' part. To slide, you need to have some speed, and then drop to the ground, sideways. While you do so, your <strong>lower leg<\/strong> (that's touching the grass), must be <strong>bend<\/strong> (so you're practically sliding on your knee\/thigh) to get a good sliding movement. The upper leg is then stretched out and used for the actual tackle.<\/p>\r\n\r\n<p>Another variation is where you do what I described above, but at the last moment you switch your lower leg to be stretched, and you upper leg to be bent backwards. This gives some extra power to the tackle, but has the disadvantage that you can only kick the ball far to the side this way.<\/p>\r\n\r\n<p>That brings us to our last variation, where you keep the ball in possession. While you perform the tackle, wrap your foot around the ball, and quickly get on your feet and pull the ball towards you. This results in the cleanest possible tackle, because you keep the ball afterwards, and your tackle must be perfectly on the ball for it to succeed.<\/p>\r\n\r\n<p>That's really all there is to it. Once you've got the basic technique, it just takes a lot of practice to get the timing, power and aiming right.<\/p>\r\n<h5>Intercepting\/blocking.<\/h5>\r\n<p>This isn't really that hard, as it just means you must estimate how the ball will be passed or shot, and then get in the way (either with your body or by sticking a leg out). However, there are a few tips and tricks:<\/p>\r\n<ul>\r\n\t<li>If the ball is shot from up close, keep your hands behind your back to prevent yourself from making hands.<\/li>\r\n\t<li>If the ball is shot from the side of the pitch, you can use your leg and body to stop or deflect it.<\/li>\r\n\t<li>However, if you're in front of goal, you want to stand still where you are once a ball is struck. This way the goalkeeper can see the ball all the way and correctly estimate where it will end up. If everyone just hopelessly tries to stop it, the ball might deflect, and that renders the goalkeeper useless.<\/li>\r\n\t<li>If you're trying to intercept a pass, don't stand precisely between the ball and the man you're marking, but a little bit further to your own goal. This forces the opponent to pass the ball behind the other player, stagnating their attack.<\/li>\r\n<\/ul>","slur":"soccer-07-defending","cat":"Sports","subcat":"Soccer","video":"","diff":"3","quiz":""},
{"id":"33","title":"[Soccer] Off-the-ball Movement","post":"<p>Whenever you're not on the ball, the game is still moving. That means, you should be moving too. Whatever position you're playing, you can't just go sit down for a few minutes because they're busy on the other side of the pitch. Let's go over the roles for every type of player real quickly:<\/p> \r\n\r\n<ul>\r\n\t<li><strong>Defender:<\/strong> You&#39;re the last barricade the opponent must break through before he can score. Therefore, your job is to make sure you&#39;re always behind the ball, that you position yourself well and always mark your man. Then if you&#39;ve stole the ball back for your team, it&#39;s your job to keep it and start building the attack.<\/li>\r\n\t<li><strong>Midfielder:<\/strong> The midfielders do a bit of defending and attacking. They must always be free to receive the ball, and run around a lot to achieve this. Whenever the ball is somewhere in their area, they must win it back or really put pressure on the opponent. And if&nbsp;you&#39;ve got the ball, you must be able to pass it perfectly.<\/li>\r\n\t<li><strong>Attacker:<\/strong>&nbsp;Attackers are of course good for one thing: tearing the opposition apart and score the goal much-needed for winning the game. Therefore, they will not really help with defending, and stay somewhere around the opponent&#39;s line of defenders. Once the ball is in their possession or comes their way, the attackers try to make clever runs or dribbles or perform awesome tricks and passes to get closer to the goal, and then one of them will shoot.<\/li>\r\n<\/ul>\r\n\r\n<h5>Positioning<\/h5>\r\n\/\/Todo\r\n\r\n<h5>Marking<\/h5>\r\n\/\/Todo\r\n\r\n<h5>Clever Runs<\/h5>\r\n\/\/Todo\r\n\r\n<h5>Team Tactics<\/h5>\r\n\/\/Todo","slur":"soccer-08-off-the-ball-movement","cat":"Sports","subcat":"Soccer","video":"","diff":"3","quiz":""},
{"id":"34","title":"Complete Card Magic Guide","post":"<p>So, you want to impress friends, family, your crush, and anyone else with magic tricks? Well, you've come to the right place. Card tricks are the best ones to start with, because there are so many different tricks you can do with them, and all you need is a standard deck of cards (usually without jokers). What people usually do is teach you a complete card trick, from start to finish. But, what I will try to do, is teach you all the different components and basic tricks you can use with card magic, so you can assemble your own trick! However, if you just want to learn a trick from start to finish, I've got that covered as well.<\/p> \r\n<h2>What do we need?<\/h2>\r\n<p>A standard 54-deck of cards. You can decide for yourself if you want to keep the joker(s) in there. Nothing else, the rest of it is just your own skill. There are, I must note, a lot of beginner card tricks that involve glue and pieces of paper and cards cut in half....but I find those the ugliest tricks ever, I only teach 'clean' tricks here. Not only does this make you a better magician, it also saves you a lot of work and money. And, you can perform your tricks with any deck given to you.<\/p>\r\n\r\n<p>And of course, you need the right attitude! Learning proper card magic requires a lot of practice from your side. Cards may fall out of your hands, they can slip, tricks can go wrong because you accidentally did an actual shuffle (instead of a fake one)...it all happens, you just need to go on until you got it perfectly right. And when you've got it perfectly right, you can study a bit about <em>misdirection<\/em> to cover up the secret even more.<\/p>\r\n<h2>The Basic Setup<\/h2>\r\n<p>For the people who've seen the movie \"The Prestige\", this quote may sound familiar:<\/p>\r\n<p style=\"margin-left:36.0pt;\">The first part of a trick, is called \"The Pledge\". The magician shows you something ordinary and asks you to inspect it.<br\/><br\/>The second part, is called \"The Turn\". The magician takes the ordinary thing, and makes it do something extraordinary.<br\/><br\/>But making something disappear, of course isn't enough. That's why every magic trick has a third act, the hardest part, \"The Prestige\".<\/p>\r\n<p>Well, sounds cool, but what's my point? That every card trick also has these three 'acts'. First, you show them the deck of cards so they see it's perfectly ordinary. You let them pick a card, study it, and put it back. Then, you do something extraordinary: you make the promise of retrieving the spectator's card. You shuffle the deck, make some cuts, perhaps do some other nice moves. And then comes the last part: you make the card come out of the deck! This can be in any way you like, by making it the top or bottom card, doing a nice reveal, letting the spectator grab the top card, etc. And that's the way you must also read this guide. I have tips and variations for every part...enjoy it!<\/p>\r\n<h2>A Basic Trick<\/h2>\r\n<p>But, to start you off, I present you a very basic trick you can already practice. For the spectators, it goes like this: they may choose a card, put it on top of the deck, you make a cut in the deck, and then you look into the deck and bring their card back! But for you, the magician, it goes like this:<\/p>\r\n<ul>\r\n\t<li>Shuffle the deck (really, no fake one).<\/li>\r\n\t<li>Let the spectator choose a card. But, while he does that, you look at the bottom card of the deck, and memorize it.<\/li>\r\n\t<li>Then, the spectator puts his card at the top of the deck, and you make a random cut. This means you cut the deck in half around the middle of the deck, and put the bottom half on top of the top one.<\/li>\r\n\t<li>What this does, is it places the bottom card on top of the top card (= the chosen card).<\/li>\r\n\t<li>Then, all you have to do, is turn around the deck and look through the cards until you find the card you memorized. The card before it is the card the spectator picked!<\/li>\r\n<\/ul>\r\n<p>Now of course, that is a very basic trick that anyone can see through after you've done it a few times. But it's a great example of how simple tricks can be, and it's an easy one to get you started with smooth card and audience control.<\/p>\r\n<h2>Basic 'Sleight of Hand' Techniques<\/h2>\r\n<p>There are several areas in 'sleight of hand' that can (and\/or must) be implemented into a trick, namely:<\/p>\r\n<ol class=\"toc\">\r\n\t<li>Fake Shuffles<\/li>\r\n\t<li>Location Markers<\/li>\r\n\t<li>Passes & Breaks<\/li>\r\n\t<li>Card Forcing<\/li>\r\n\t<li>Card Hiding<\/li>\r\n\t<li>Card Revealing<\/li>\r\n<\/ol>\r\n<p>Everything else essentially comes from these basic techniques, so let's get started!<\/p>\r\n\r\n<p>NOTE: We recommend you follow the guide in the order presented above, as we'll be heavily using some methods learned in earlier chapters in later ones.<\/p>","slur":"complete-card-magic-guide","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"1","quiz":""},
{"id":"35","title":"[Card Magic] Fake Shuffles","post":"<p>A trick in its simplest form, is having a spectator put a card on top (or bottom) of the deck, then shuffle it (fake one), and show the audience (to its surprise) that the card is still on top. However, to not make the audience suspect anything, you'll need to learn multiple of these fake shuffles.<\/p> \r\n<h2>Controlled Shuffle<\/h2>\r\n<p>The controlled shuffle makes you able to keep a card at the bottom or top. The rest of the deck is really shuffled. The controlled shuffle is almost the same as the basic shuffle everybody knows: hold the deck in your right hand, and take a portion from the back of the deck and throw them down at the other end, in groups. It works like this:<\/p>\r\n<ul>\r\n\t<li>If you want to <strong>keep a card on top:<\/strong> The first time, instead of taking only a portion from the back, lift the entire deck, except for the top card. The top card will fall back, and you can put the whole deck on top of it. If done quickly, it's unnoticable. Then, you can just finish this shuffle, for the card will be at the bottom of the deck. The second round, do it the traditional way, and grab the back portion of the back and throw them in front. When you come to the last few cards, release them one by one so that the bottom card ends on top.<\/li>\r\n\t<li>If you want to <strong>keep a card at the bottom:<\/strong> Do everything the normal way, but when you come to the last few cards, don't put them in front but simply return those few to the back. Again, this might seem obvious, but when done quickly it will not be noticed. A variation on this, is that you vary between putting cards at the front and at the back. It works the same way: simply keep the bottom card in your hand, and only release the other cards.<\/li>\r\n<\/ul>\r\n<h2>Perfect Cut<\/h2>\r\n<p>This technique, if done quickly, makes it seem like you're just cutting the deck at random places (because you are). But, the trick is in the fact that you return those bits of the deck in the exact same order you cut them, so that the complete order of cards in the deck remains exactly the same. Here it goes, step by step:<\/p>\r\n<ul>\r\n\t<li>Take  the deck of cards horizontally with both hands, thumbs on the back side (pointing towards you) and the rest of your fingers on the other side.<\/li>\r\n\t<li>Then, take about 1\/3 of the deck from the bottom with your right hand, and move it to the top. But, keep it seperated from the remaining cards in the other hand.<\/li>\r\n\t<li>Then, with your left hand, again take 1\/3 of the deck from the bottom and move it on top of the other 1\/3 you just moved. These don't need to be seperated. <em>(if you want to do the shuffle very quickly, it's wise to lift your index finger and already start with the next step)<\/em><\/li>\r\n\t<li>Then, move whatever's left in your right hand (seperated from the 2\/3 above it), on top of that, and your deck is in the exact same order as it was before.<\/li>\r\n<\/ul>\r\n<p>Do it quickly and multiple times, and people think the deck is completely shuffled, while it's EXACTLY the same.<\/p>\r\n<h2>Swivel Cut - Simple Flourish<\/h2>\r\n<p>This one looks awesome, whatever you use it for. And, it keeps the complete order of the cards.<\/p>\r\n<ul>\r\n\t<li>Take the deck into your right hand, vertically, thumb closest to you, the rest of your fingers at the side furthest from you. Your hand must be above the cards (so palm is facing the cards).<\/li>\r\n\t<li>Then, cut 1\/3 of the top of the deck and throw it into your left hand (<strong>A<\/strong>).<\/li>\r\n\t<li>Then cut the remaining deck in two, again creating two cuts of about 1\/3 <b>(B <\/b>and <strong>C<\/strong>, top and bottom).<\/li>\r\n\t<li>Then, switch <strong>A<\/strong> with C<strong>. <\/strong>So, C is now in your left hand and A underneath B in your right. Make sure to keep A and B seperate.<\/li>\r\n\t<li>Then comes the swivel: use the <strong>left index<\/strong> and <strong>right index<\/strong> to rotate <strong>B <\/strong>180 degrees while transporting it from your right to your left hand.<\/li>\r\n\t<li>Then throw the remaining cards in your right hand (A) on top of the ones in your left. And the order is restored to A,B,C.<\/li>\r\n<\/ul>\r\n<p>The swivel throws some nice style and elegance into the shuffle, and isn't too hard to learn.<\/p>\r\n<h2>One-handed cut<\/h2>\r\n<p>This method of cutting the cards serves two purposes: one is that it actually shuffles the cards and looks awesome, the other is that you can cut the cards quickly while distracting the audience with your other free hand. Here are the instructions for the <em>right hand.<\/em><\/p>\r\n<ul>\r\n\t<li>Keep the deck in your hand horizontally with index finger on the left side, middle and ring finger on the top side, pinky on the right side, and thumb on the bottom side.<\/li>\r\n\t<li>Cut the deck in two (we'll call them <strong>A<\/strong> and <strong>B<\/strong>, top and bottom), by applying only pressure to the top half of the deck with your thumb.<\/li>\r\n\t<li>Then release pressure from the index finger, and tilt your hand a bit so that <strong>B<\/strong> falls down into your palm, resting on your pinky.<\/li>\r\n\t<li>Then, use this free index finger to push <strong>B<\/strong> towards your thumb, so that B and A form a 90 degree angle.<\/li>\r\n\t<li>Once it's there, you can release your middle and ring finger so that <strong>A<\/strong> falls down into your palm.<\/li>\r\n\t<li>And then a little push with your thumb makes <strong>B<\/strong> fall down on top of <strong>A<\/strong>.<\/li>\r\n<\/ul>","slur":"card-magic-fake-shuffles","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"1","quiz":""},
{"id":"36","title":"[Card Magic] Location Markers","post":"<p>There are lots of different ways to mark the location of a card. There are two basic methods: marking the card itself, or marking the space\/cards surrounding it so you can easily find the card.<\/p> \r\n<h2>Spotting Card<\/h2>\r\n<p>The spotting card is the easiest: all you have to do is quickly look to the bottom of the deck and spot a card. While the audience is busy with something else (or you're using your misdirection skills), you simply take a quick look at the bottom and remember that card.<\/p>\r\n\r\n<p>There's two ways this can come in handy: you can later make sure the card the audience picked is right next to this card, so you can easily find it (you're using it as a location marker). Or, you somehow move the chosen card to the bottom of the deck, and quickly look so that you know exactly which card the spectator picked. Then, you can do anything you like to throw off your audience, because you already know the card.<\/p>\r\n<h2>Glide<\/h2>\r\n<p>The glide simply requires you to glide a card backwards\/out of the deck, so that you can easily move\/locate it. The common way is to use a glide on the bottom card of the deck, but it can be done on any card.<\/p>\r\n<ul>\r\n\t<li><em>Bottom Card<\/em>: Use your pinky or some pressure from the palm to slide the bottom card backwards, toward you. It can be extended quite a bit, the audience can't see it if you do it properly.<\/li>\r\n\t<li><em>Other Cards:<\/em> This is a bit harder. Subtly lift the cards on top of the one you need (with your left hand, deck lies in right hand), and use your thumb to slide the card backwards. The technique is often used to pretend to grab a certain card, but in fact you grab a different one. For example, if you glide the bottom card, you can now easily get the 2nd to bottom card of the deck, while the audience thinks it's the bottom one.<\/li>\r\n<\/ul>\r\n<h2>Keepsake<\/h2>\r\n<p>This move is in some way the same as the glide, but has some extras attached to it and usually serves a different purpose. What you do is, you make the card your 'victim' picked subtly stand out of the rest of the deck. To make this invisible to the audience, it's best to make it really stand out at the back of the deck (the part that's facing you), and keep the front the same as always. As you might have guessed, a <em>glide<\/em> is needed somewhere in that move. Here are some examples:<\/p>\r\n<ul>\r\n\t<li><em>Putting a card back into a <span style=\"font-weight: bold;\">fanned deck<\/span>:<\/em> You first let a spectator choose a random card from a fanned deck, (look at it), and then he must put it back somewhere in there. The trick is, to apply pressure with the thumb on the 'root' of the deck, so that the card can't be put back completely, a little bit sticks out. Then you can simply rotate the deck 180 degrees while squaring it (to cover this up). Then you have the card your spectator chose sticking out in the back.<\/li>\r\n\t<li><em>Putting a card back somewhere random in a deck: <\/em>This is the other way cards are often returned to the deck. When the spectator puts his card back, you simply perform a mid-deck glide: while you put the top half of the deck back, use the thumb of that hand to slide the top card of the bottom half (the chosen card) back a bit. You can also push the card a bit diagonally, so that the chosen card rests on top of your pinky for further use. This however is tricky, because a diagonal card in the deck is easier to spot.<\/li>\r\n<\/ul>\r\n<h2>Card Crimping<\/h2>\r\n<p>This is not exactly one of my favorites, but it is also an often executed method. What you do is, once you have the spectator's card isolated from the rest of the cards (using perhaps the methods above), you <em>fold the right corner at the back of the card<\/em> a bit. Then, you can just put the card back in the deck, and you can easily spot it. Be careful though, to grab the card at this corner when you display it to the audience. While you're pulling out the card, you can slide your fingers a bit to make the crimp undone.<\/p>\r\n<h2>Passes & Breaks<\/h2>\r\n<p>Besides all of these, there are a few location marking techniques that can used for other things as well, and are much quicker and more powerful. Those are discussed in the next chapter.","slur":"card-magic-location-markers","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"1","quiz":""},
{"id":"37","title":"[Card Magic] Passes & Breaks","post":"<p>Passes and breaks are essentially the same thing, but their relation is like this: a pass is created by doing a break. When you do a break, you subtly seperate two cards or two halves of a deck or whatever. When you seperate them, an open space is created (a <em>pass<\/em>age) for cards to be put in there or pulled out of it.<\/p> \r\n<h2>Pinky Break<\/h2>\r\n<p>This is the most common break, because it is easily hidden. The end result is always that you have a deck in your hand that looks normal to the audience, but at the back you have your pinky stuck between there to mark a certain spot. To get there, you can use multiple techniques.<\/p>\r\n\r\n<p>NOTE: For all pinky breaks, for them to look as natural as possible: tilt the deck a bit forward, put extra pressure on the top with your thumb, and don't put your whole pinky in between but only a 'bit of flesh' so to speak. This makes sure people mostly see the front and top of the deck and never notice that the back is a bit larger.<\/p>\r\n<ul>\r\n\t<li><span style=\"font-weight: bold;\">For seperating card(s) from the top. <\/span>Subtly move the top card(s) with your thumb towards your pinky. Lower the pinky to make the cards rest upon it, and then slide the cards back while holding the pinky between cards.<\/li>\r\n\t<li><em><span style=\"font-weight: bold;\">OR<\/span> <\/em> apply a lot of pressure with your thumb at the top right corner. Use your middle finger (and perhaps the pinky too) to keep the bottom cards down. This way, the top cards' bottom left corner will jump up in the back so you can put your pinky in that gap.<\/li>\r\n\t<li><span style=\"font-weight: bold;\">For seperating card(s) from the bottom. <\/span>Simply lower your pinky, while keeping the other fingers at their place to avoid raising suspicion, and use the part right under your nail to break as many cards as you like.<\/li>\r\n\t<li><span style=\"font-weight: bold;\">For seperating card(s) somewhere in the middle. <\/span>Often, you randomly cut the deck and ask the spectator to put his card in there. There's no trick there, the trick comes when you put back the top half of the deck. As you do this, move your pinky a bit inward and\/or apply inward pressure with it to keep a small break between the chosen card and the top half (doesn't have to be very large). Then all you need to do, is find a way to distract the audience and quickly move the bottom half to the top (make it look like your cutting\/shuffling), and you've already recovered the card!<\/li>\r\n<\/ul>\r\n<h2>Thumb Break<\/h2>\r\n<p>The thumb break is similar to the one with your pinky. Instead of having your thumb at the side of the deck, you want it at the back. Index and pinky are then on left and right, and middle and ring finger at the side opposite to the thumb. Your hand can be below or above the deck, but below is the more natural grip. Just as with the pinky break, you can use your thumb's flesh to create a break somewhere in the middle of the deck. To get cards from the top, you can do two things:<\/p>\r\n<ol>\r\n\t<li>Let all the other cards of the deck fall into your hand, and have only the remaining one or two cards from the top touching your thumb. This can be done quite smoothly.<\/li>\r\n\t<li>Use your other hand to do a quick<i> <\/i><em>countback<\/em>. This means that, if you for example need the top two cards, you place your left hand over the deck and grab a portion of the top cards and quickly drop them again until you feel there's two left between your fingers. You can then pick those cards up, or use your thumb from the right hand to hold the break at the back of the deck.<\/li>\r\n<\/ol>\r\n","slur":"card-magic-passesbreaks","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"2","quiz":""},
{"id":"38","title":"[Card Magic] Card Forcing","post":"<p>Card forcing is the act of letting the spectator think they are choosing their card at random, but you are forcing your card on them. There are two methods here: sleight of hand ones, and psychological ones. The sleight of hand are basically clever tricks to give the spectator the card that you want, while (s)he thinks it was the one she chose. Psychological ones require you to say and do things in a certain way so that the spectator starts to think of a certain card and eventually picks the one you've been forcing. However, keep in mind that most of these forces are tricky, and you need to be able to perform them smoothly or the trick is immediately done with.<\/p> \r\n<h2>Riffle Force<\/h2>\r\n<p>This one is the simplest to perform, yet is very effective.<\/p>\r\n<ul>\r\n\t<li>Before doing this, quickly spot the bottom card of the deck and memorize it. You're going to force this one.<\/li>\r\n\t<li>Take the deck into your hand, vertically, normal (dealer's) grip<\/li>\r\n\t<li>Then with your other hand, spread out the cards of the deck vertically, so the top cards are closer to you than the bottom card. This allows you to riffle.<\/li>\r\n\t<li>But, what the audience doesn't know, is that you don't move the bottom card, so basically that stays about as close to you as the top card. Or, you could use the thumb from your other hand to glide it back.<\/li>\r\n\t<li>Then, as you riffle through the deck (with the thumb, top to bottom), you ask a spectator to say stop.<\/li>\r\n\t<li>When he says stop, you take the portion you've riffled through off the top of the deck AND the bottom card you slided backwards. Because you've prepared for it, it's easy and unnoticable to take that bottom card with you.<\/li>\r\n\t<li>Then you quickly square this package up, and reveal the bottom card to be the spectator's chosen card.<\/li>\r\n<\/ul>\r\n<p>Simple, but with a bit of practice, nobody can see the bottom card is in your hand during the riffle and is included with the package when you're squaring it up. This was the first force I learned, and I stuck with it for a long time because it was so effective.<\/p>\r\n<h2>Hindu Force<\/h2>\r\n<p>If performed quickly, this one is just as simple but unnoticable.<\/p>\r\n<ul>\r\n\t<li>Before you start, spot the bottom card of the deck, that's the one you'll force.<\/li>\r\n\t<li>Take the deck between the thumb and middle finger of your right hand, with your hand above the deck (palm facing away from you).<\/li>\r\n\t<li>Then with the thumb and middle finger of the left hand, hand underneath the cards (palm facing you), take a small portion of the deck from the top. Let them fall into your left hand like you would normally hold cards (dealer's grip).<\/li>\r\n\t<li>Repeat this action, transporting a few cards from the right hand to the left every time, until the spectator says 'stop!'<\/li>\r\n\t<li>Then, you show them the bottom card from your right hand. This is still the same, because you've only been moving cards from the top of the deck. However, this is hidden by your left hand, so the audience doesn't suspect anything. And if you do it quickly, it even looks impressive.<\/li>\r\n<\/ul>\r\n<h2>Double Flip Force<\/h2>\r\n<p>The double flip force may seem somewhat strange to your audience, but works everytime. If you just talk smoothly while doing it, it should be alright.<\/p>\r\n<ul>\r\n\t<li>Spot the top card, that's the one you'll force.<\/li>\r\n\t<li>Hold the deck vertically in your right hand, thumb on top, and the other fingers supporting the bottom.<\/li>\r\n\t<li>Then use your left hand's thumb to riffle through the side of the deck from top to bottom.<\/li>\r\n\t<li>When the spectator says 'stop!' you turn the top portion you've gone through so far upside down (face up).<\/li>\r\n\t<li>Then you continue riffling with the cards underneath the portion you just turned around.<\/li>\r\n\t<li>When the spectator says 'stop!' you again turn around everything above the left thumb and take that portion off of the deck.<\/li>\r\n\t<li>Now you have a group of cards with the first half of them facing up, and the rest facing down. Go through the face-up cards until you meet the first face-down card. That's the one you pick, and give to the spectator.<\/li>\r\n<\/ul>\r\n<h2>Cross-Cut\/False Cut Force<\/h2>\r\n<p>The false cut force depends more on how well you can present your tricks than real sleight of hand. What you basically do, is cut the deck and mark a certain location as the chosen card, while in fact it's just the top card of the deck you've memorized.<\/p>\r\n<ul>\r\n\t<li>Show the audience it's a normal deck, while at the same time spotting the top card.<\/li>\r\n\t<li>Then go through the deck in any way you like. Perhaps let the spectator cut the deck in two, as long as you have two halves in your hands after this move.<\/li>\r\n\t<li>Then, place the half with the card you memorized on the table. Now place the other half on it, but perpendicular to it, to 'mark' the card the spectator chose.<\/li>\r\n\t<li>Now, you need to cover up that you actually just marked the top card by some smooth talk. 'Okay, you can all confirm that I gave the spectator a regular deck, and he cut it completely at random, and I now marked the card he chose?' It does well, because everything is the truth except for the last statement.<\/li>\r\n\t<li>Then, simply take the top card of the bottom half, which previously was the top card of the deck, and give it to your spectator.<\/li>\r\n<\/ul>\r\n<h2>Glide Force<\/h2>\r\n<p>The glide force only requires you to be smooth with the <em>glide<\/em>, the rest is easy yet very convincing.<\/p>\r\n<ul>\r\n\t<li>Spot the bottom card of the deck.<\/li>\r\n\t<li>Hold the deck in dealer's grip, face down.<\/li>\r\n\t<li>Ask the spectator to think of any number between 1 and 52. However, to make things a bit easier and faster, you can narrow it down to say 1 up to and including 15.<\/li>\r\n\t<li>While he's thinking, subtly glide the lower card a bit back.<\/li>\r\n\t<li>Now the spectator has said a number, e.g. 10.<\/li>\r\n\t<li>Then you tell them you're going to take 10 cards from the bottom of the deck, and the tenth card will be theirs.<\/li>\r\n\t<li>The first 9 cards you pick though, are actually the second to bottom card. Because you did a glide on the bottom card, it's easier to pick the second to bottom card and make it appear to be the bottom one.<\/li>\r\n\t<li>Then, for the last card, you pick the actual bottom card. Do this as quickly and swiftly as with the others, to not raise suspicion. Put it down on the cards you previously laid on the table, and then raise it and show\/give it to the spectator. If you give it to the spectator directly from your hand, they'll be focused on your hand, and might spot the difference.<\/li>\r\n<\/ul>\r\n<h2>Elimination Force<\/h2>\r\n<p>This one depends a lot on quick thinking and your showman skills. It's used more often than you think, in a lot of different ways, but it's also easy to get caught on. I'll try to show you a very abstract way to do it<\/p>\r\n<ul>\r\n\t<li>Say you have 6 groups of cards laying on the table, face down. You know that the spectator's card is on top of the 2nd group.<\/li>\r\n\t<li>Now you ask the spectator to select one group.<\/li>\r\n\t<li>If it's the correct group, simply say 'alright, let's magically turn the top card into your card!' You do some magical movements, and turn the top card over and reveal the spectator's card.<\/li>\r\n\t<li>If it's not the correct one, say 'alright, let's remove this one from the equation! So, select another one' (or something like that). And repeat.<\/li>\r\n\t<li>The reason it works is because people don't know what is done with the selected group. They just select one, and for all they know you're going to eat those cards.<\/li>\r\n\t<li>The reason it's tricky, is because if the audience first picks two wrong groups and then the correct one, how do you explain you now suddenly don't remove the group? Therefore, often either a small number of groups is chosen or an explanation is already thought of, just say something like 'this is the third one you've chosen, and third time is the charm, so let's make it appear on this one!'<\/li>\r\n<\/ul>\r\n<h2>Gravity\/Cull Force<\/h2>\r\n<p>This one requires a little more skill than the others, but looks much more like the normal way of letting someone choose a card. You slightly fan the cards, going through them until a spectator says stop. Then you show them the card, but you've actually forced the bottom card.<\/p>\r\n<ul>\r\n\t<li>Spot the bottom card.<\/li>\r\n\t<li>Take the deck in your right hand. Let it lie on your palm, with thumb on the right and the rest of the fingers on the left.<\/li>\r\n\t<li>Now, with the left hand, take the top AND bottom card and slide them a bit to the left and towards you (to conceil the bottom card).<\/li>\r\n\t<li>At the same time, turn the deck over so it's bottom now lies on the fingers of your right hand. Your right thumb should be able to go through the cards, and your left thumb should be able to catch them.<\/li>\r\n\t<li>Perform this motion, quite quickly, until someone says 'stop!'. You shouldn't do it too slow, because then you'll still be somewhere around the top of the deck, and the bottom card becomes too obvious.<\/li>\r\n\t<li>Now, take out the portion you've just gone through + the bottom card, in one swift motion. Square it up to conceil the secret even more, and then simply show the spectator the bottom card of those cards, and give it to him to inspect it (always takes the attention off of what you're actually doing).<\/li>\r\n<\/ul>\r\n<h2>Dribble Force<\/h2>\r\n<p>This one is the hardest of them all to do, but again looks more natural and convincing. What you do is <em>dribble<\/em> through the deck, until someone tells you to stop, and then you show them the card you've stopped at, which is exactly the card yu wanted them to pick. <em>Dribbling<\/em> through a deck of cards, means slowly dropping cards from your left hand down into your right hand. Like letting cards fall into your right hand, but in a more controlled way.<\/p>\r\n<ul>\r\n\t<li>Get a thumb break with your left hand somewhere around the middle of the deck.<\/li>\r\n\t<li>While you're still talking, spot the card you've cut at by subtly rotating the deck so it faces towards you.<\/li>\r\n\t<li>Now, dribble the cards from left to right. Keep your hands close together to not reveal too much (and make no mistakes), and let one or two cards fall at a time, at a constant rate. If you let a big chunk of cards fall every other second, it doesn't look as good and the force is easily noticed.<\/li>\r\n\t<li>When the spectator <em>starts saying<\/em> 'stop!', there's two possibilities:\r\n1) You've already gone past your thumb break, so an almost complete deck already lies in your right hand.\r\n2) Or you haven't reached that point yet.<\/li>\r\n\t<li>In case 1, simply drop all the cards remaining and tell him he was too late and start again.<\/li>\r\n\t<li>In case 2, now drop all the cards remaining until the thumb break. Then get the bottom card of the cards remaining in your left hand, which you've spotted earlier on, and show\/give it to the spectator<\/li>\r\n<\/ul>\r\n<p>The difficult part here is to learn to dribble nicely, the rest shouldn't be too hard.<\/p>","slur":"card-magic-card-forcing","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"2","quiz":""},
{"id":"39","title":"[Card Magic] Card Hiding","post":"<p>Hiding a card is very useful. There are multiple ways which you can use to make it seem like a card has disappeared or switched places, while in fact it hasn't. While your audience is already baffled because of the disappeared card, you can bring it back easily because you've been (for example) holding it in your other hand all the time.<\/p> \r\n<h2>Double Lift<\/h2>\r\n<p>A double lift is used <em>very very often<\/em>, and takes some practice to nail it down. However, if you can eventually perform the double lift, a whole world of tricks opens up for you!<\/p>\r\n\r\n<p>So, a double lift basically means grabbing two cards from a deck, while presenting it as one. This way you can pretend that a certain card is another one, which always comes in handy in magic.<\/p>\r\n<ul>\r\n\t<li>To do a double lift, you first need to have the two cards seperated from the rest of the deck. To just lift two cards from a deck like you'd do with one card is very hard.<\/li>\r\n\t<li>So, create a pinky break, a thumb break, or subtly slide two cards off the deck with your thumb. With all methods, make sure you can seperate them quickly, and just as quickly pick up the two cards.<\/li>\r\n\t<li>Now, you need to make sure both cards are squared up, but you want to handle the cards in about the same way you handle single ones. Here's a few options:\r\n<ol>\r\n\t<li>The easiest one is to pick up the double with multiple fingers, keeping the cards squared between them. With some training holding it between the thumb and index finger while keeping it squared should be possible. At that moment, you can bend the cards a bit or rotate them to give the audience the feeling you're just playing with a card.<\/li>\r\n\t<li>Another one is more fancy: fetch the card at the bottom left corner, and rotate it around at the base of the thumb. This way you have control over two points (top left and bottom right), which should keep the double squared. Then once you've turned it around you can keep it in your hands and later reverse the motion or drop it again on the deck and just do the whole thing again to turn them upside down.<\/li>\r\n\t<li>Another one that's often seen is where you don't really lift the cards in the air, so there's not much chance the two cards will split. For this, you fetch the card on the side with one or two fingers. Then slide it to the left until the right side of the double almost loses its touch with the deck. Now quickly turn it over and let it fall on the deck. Make sure to make it fall a bit to the side, so you can easily pick it up and turn it around again. If done quickly, this looks very convincing and is I think the method that's mostly used.<\/li>\r\n\t<li>This one also looks fancy, but isn't really much. Lift the double between your thumb and middle finger, letting your index finger put pressure around the center of the cards and bend them a bit. Then, release your thumb and the cards should jump upside down and you now hold them between your middle and index finger. Quickly put them down (and keep a pinky break in the back for turning them face down again).<\/li>\r\n<\/ol>\r\n<\/li>\r\n\t<li>One last tip: make your touch very light. Not only do the cards naturally stay together and putting pressure on them only makes them seperate, it also makes it look like you're handling a single card.<\/li>\r\n<\/ul>\r\n<h2>Palm Lift<\/h2>\r\n<p>The palm lift refers to the action of lifting the top card of a deck into the palm of your hand. Then at some later moment you can return it to the deck or reveal it.<\/p>\r\n<ul>\r\n\t<li>First, make sure the top card is seperated from the rest of the deck. Create a pinky break, slide it a bit sideways with your thumb, whatever you like.<\/li>\r\n\t<li>Then with your free hand, go over the deck and pretend to square it or start shuffling.<\/li>\r\n\t<li>Get the card between the first knuckle of your fingers and the first one of your thumb. Curl your hand a bit while lifting the card up to make bend the card and press it against your palm.<\/li>\r\n\t<li>Make sure your fingers are close together (so the card can't be seen through them) and no corner of the card sticks out.<\/li>\r\n\t<li>Then simply keep your palm out of sight, and direct the attention to somewhere else.<\/li>\r\n\t<li>You can do some fancy moves, and at any moment you can throw the deck into the hand that has the card palmed, and square it up quickly and the card is back on top again!<\/li>\r\n\t<li>Another thing that works well, is splitting the deck in two and grabbing the top half into the hand that has the card palmed. That way the card is also easily returned to the top of the deck.<\/li>\r\n<\/ul>\r\n<p>NOTE: Cards can sometimes retain their bend a bit when returned to the deck. Even out the card(s) before any spectator can ask questions!<\/p>\r\n<h2>Back Palm<\/h2>\r\n<p>The back palm is a technique that could be a trick on it's own. While holding a card in your palm, you can quickly move it to the back of your hand (making it disappear) and show the audience your hand's empty!<\/p>\r\n<ul>\r\n\t<li>Hold a card in your hand: thumb on one side, middle and ring finger on the other side. It's very important you hold it this way, and it also helps to hold the card at the bottom corner (instead of somewhere around the middle).<\/li>\r\n\t<li>Then, curl your middle and ring finger inwards, but keep the card in position, so now that card is between your thumb and the first knuckles of your middle+ring finger.<\/li>\r\n\t<li>Then, use your index finger and pinky (also curl them inwards) to get a hold of the top and bottom corner respectively. So now, you have the bottom corner of the card between your pinky and ring finger, and the top corner between the middle and index finger.<\/li>\r\n\t<li>Now simply, while keeping a good hold on the card's corners, curl your fingers back into their initial position. The cards is now at the back of your hand, only held by its corners.<\/li>\r\n<\/ul>","slur":"card-magic-card-hiding","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"3","quiz":""},
{"id":"40","title":"[Card Magic] Card Revealing!","post":"<p>Once you've got a spectator's card into a nice position, or you know which one it is, you can reveal it. However, simply grabbing the card and showing it doesn't feel very magic, so you can use some nice revealing methods.<\/p>\r\n\r\n<p>If you know someone's card (through a force, spotting the bottom card, whatever), you can do three things:<\/p> \r\n<ol>\r\n\t<li>Simply turn over the deck and search the deck for the card. This is of course very simple, but is okay if you make it look cooler with some fancy movements and talking.<\/li>\r\n\t<li>Pretend to be a psychic ('I see a five...no, looks like it, it's a nine! And black, it's black..it looks like hearts, but it's black, so it must be clubs! The nine of clubs!')<\/li>\r\n\t<li>Do a <i>Check your Pocket<\/i> (see below)<\/li>\r\n<\/ol>\r\n<p>If you have someone's card at the top, you can do a <em>Snap Change<\/em> or <em>Magic Finger<\/em>.<\/p>\r\n\r\n<p>If the card is at the bottom, you can do a <em>Slap the Deck <\/em> or <em>Say a Number<\/em>.<\/p>\r\n<h2>Check your Pocket<\/h2>\r\n<p>This one requires some work to set it up, but is of course the most impressive reveal.  You pick a certain card, we'll use the 2 of clubs.<\/p>\r\n\r\n<p>Before the show\/trick starts, you hide a 2 of clubs from another deck somewhere (in a spectator's pocket, in the box, glued to the ceiling, whatever you think is cool).<\/p>\r\n\r\n<p>Then, you simply force the 2 of clubs on a spectator. You let him put it into the deck, randomly. Then you need to make it disappear from the deck. You can palm the card, perform a double lift, or put all the cards back into the box (do some magical movements), and then take out the complete deck except for the 2 of clubs.<\/p>\r\n\r\n<p>You then ask the spectator to go through the deck and confirm the card has indeed vanished. Then you tell them 'well, why don't you check your pocket?'<\/p>\r\n<h2>Snap Change<\/h2>\r\n<ul>\r\n\t<li>Do a double lift so you have two cards in your hand: a random card and behind that the spectator's card.<\/li>\r\n\t<li>Then, take the double between your middle+index finger and thumb. Keep it horizontally, face towards your audience.<\/li>\r\n\t<li>Release pressure from the index finger, and use your middle finger to slide the front card downwards and backwards.<\/li>\r\n\t<li>When you're done, you should have the spectator's card between your index finger and thumb, and the other card behind that held by your middle finger and thumb.<\/li>\r\n\t<li>Do this quickly, and snap with your other hand to make it look even more awesome.<\/li>\r\n<\/ul>\r\n<h5>Magic Finger<\/h5>\r\n<ul>\r\n\t<li>Hold the deck in your left hand, between your thumb and middle finger. Hold it vertically, facing the audience, and keep the index finger for support on that side.<\/li>\r\n\t<li>Then, you tap on the deck with your right hand's index finger a few times before raising a card out of it as if it was magic! How's this done?<\/li>\r\n\t<li>Well, the last time you tap with the index finger you extend the pinky of that hand, and press it against the top card of the deck. You shouldn't put very much pressure on it. Then slowly move your hand up.<\/li>\r\n\t<li>Keep in mind though, that at a certain point the card will start to rotate. Just before that, stop making it rise, and simply grab it and show it to the audience.<\/li>\r\n<\/ul>\r\n<h2>Say a Number<\/h2>\r\n<p>This one is just like the glide force, but then as a reveal.<\/p>\r\n<ul>\r\n\t<li>Ask the spectator to say a number between 1-52 (you can make it 5-15 if you want, or anything else you think suits the trick best)<\/li>\r\n\t<li>While he thinks, glide back the bottom card (which is the spectator's card, and you know that).<\/li>\r\n\t<li>Then, let's say he says 10.<\/li>\r\n\t<li>You take the second to bottom card from the deck the first 9 times.<\/li>\r\n\t<li>And for the last time, you take the actual bottom card, and show it to the audience.<\/li>\r\n<\/ul>\r\n<h2>Slap the Deck<\/h2>\r\n<p>This requires some training to get the impact of the slap right, but if you can do that you can even put the cards into the hands of the spectator to make this reveal even more impressive.<\/p>\r\n<ul>\r\n\t<li>Take the deck between the knuckles of the middle and index finger. Though I recommend you somehow split the deck or take a smaller portion, because a complete deck for this reveal is a bit of an overkill.<\/li>\r\n\t<li>Then, simply slap the deck a few times, making sure you don't slap it too hard (or too softly), and move your slapping hand away from the other hand while you do it.<\/li>\r\n\t<li>This should release all cards, and make them fly in all directions - except for the bottom card!<\/li>\r\n\t<li><em>Why does this work? <\/em> The slap makes cards from the top of the deck slide off of it. You naturally want to keep a hold of the cards, so the best thing you can do after a few slaps is keep the bottom card in your hand. This is such a natural movement, it works every time.<\/li>\r\n<\/ul>","slur":"card-magic-card-revealing","cat":"Miscellaneous","subcat":"Card Tricks","video":"","diff":"2","quiz":""},
{"id":"41","title":"How to Sing","post":"<p>Welcome to the guide to proper vocal technique. Whether you just want to strengthen your voice, be able to hum with your favourite tunes, sing in a casual band or become a rockstar &ndash; good vocal technique is always an useful skill to carry with you. Not only does it make your singing voice sound better and cleaner, it also helps with making your speaking voice stronger and easier to understand.  Because singing doesn&rsquo;t require any extra tools or special circumstances, you can do it whenever and wherever you want, which basically makes it an extra tool to keep yourself entertained (and perhaps others) that you&rsquo;re always carrying with you!<\/p>\r\n\r\n<h2>What this guide does not do<\/h2>\r\n\r\n<p>There are large groups of people on the internet who claim to teach you tricks that will make you a singing success overnight. That&rsquo;s not going to happen. Singing is a very complex collaboration between all sorts of muscles around your mouth. Muscles need repetition and exercise to grow stronger and to remember certain movements and positions.<\/p>\r\n\r\n<p>Of course, there are exercises you can use and techniques you can try to implement that will make your voice immediately sound better, but that is only temporary &ndash; you don&rsquo;t want to spend the rest of your life thinking of all those tips &amp; tricks while singing, hoping they won&rsquo;t fail you this time. You want to be sure of what you can and can&rsquo;t do, and you want to be able to always sound the same.<\/p>\r\n\r\n<p>Also, many people say singing is like a sport. While it is true that your stamina needs to be very good, and you need to be in reasonably good shape, it is not necessary to put all your muscle power into singing. Singing should only ever make your abs tired. Nevertheless, if you&rsquo;ve been singing for a solid hour (or two) it is best to take a rest because if stressed long enough, your vocal chords will tire and your lungs will have reached their top capacity.<\/p>\r\n\r\n<h2>What this guide does teach you<\/h2>\r\n\r\n<p>This guide will teach you the basic principles of singing and good vocal technique. Then I&rsquo;ll give you some exercises that are also used by professional singers, that make sure you don&rsquo;t hurt your voice when singing. To finish it off I&rsquo;ll talk a bit about singing low notes, high notes, and different voice types, ranges and breaks.<\/p>\r\n\r\n<h2>DISCLAIMER<\/h2>\r\n\r\n<p>Never, ever, damage your voice. When you feel it is tiring or breaking, stop. Give it a rest, drink plenty of water, return the next day.<\/p>\r\n\r\n<p>When you feel something is tense, do some stretching, try to let it go, and if that doesn&rsquo;t help &ndash; give it a rest. Don&rsquo;t force anything, don&rsquo;t think that if you just try and push hard enough you&rsquo;ll get there. Your voice needs to grow and strengthen, your body needs to adapt to new vocal techniques, it takes time.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Fundamentals of Singing<\/li>\r\n\t<li>Good Vocal Technique<\/li>\r\n\t<li>The Mask<\/li>\r\n\t<li>Breathing exercises<\/li>\r\n\t<li>Vocal Exercises<\/li>\r\n\t<li>Middle (speaking) range<\/li>\r\n\t<li>Low Notes<\/li>\r\n\t<li>High Notes<\/li>\r\n\t<li>Voice Types, Ranges &amp; Breaks<\/li>\r\n<\/ol>\r\n","slur":"how-to-sing","cat":"Music","subcat":"Singing","video":"","diff":"1","quiz":""},
{"id":"42","title":"[Singing] Fundamentals of Singing","post":"<p>Singing is a wonderful thing. It could basically be called elegant exhaling. All you have to do is position your mouth, tongue and vocal box correctly and beautiful sounds will leave your body.<\/p> \r\n\r\n<p>Sounds simple, but the fact is that most people have over the years, as they grow up, stopped using the proper techniques to create sounds. When you were a baby, you could scream very loudly for hours on end, without your vocal chords tiring (which is quite annoying actually). When you were a toddler, you were always screaming and yelling and talking fast, loud and at high pitch, and still you never felt a sore throat. However, as you grow older, your voice changes (boys more dramatically than girls, but still), and you somehow lose that ability. Now I&rsquo;m not saying screaming or yelling is any good for the voice, but having a higher, clear and moderately loud voice is always better than having a soft, muddy, unclear, grungy one. It just improves your life, your image, so much.<\/p>\r\n\r\n<p>(By the way, there are lots of rock singers who do vocal exercises before shows, so that they can scream all they want without hurting their voice (very much). Screaming is never good, but good vocal technique can even help minimize the stress if you are that wild, so there's really no reason to be ashamed of doing vocal exercises!)<\/p>\r\n\r\n<h2>How does Singing Work?<\/h2>\r\n\r\n<p>Simply put, singing is making the air you exhale sound exactly how you want. You&rsquo;re modifying the air you exhale, so that they become sound waves at certain frequencies, which then again are interpreted as (beautiful) sounds. So, which components are involved in the process?<\/p>\r\n\r\n<img src=\"media\/MouthAnatomySinging.png\" \/>\r\n\r\n<ul>\r\n\t<li><strong>Vocal chords:<\/strong> Obviously, your vocal chords are the first thing that comes to mind. It&rsquo;s a group of two muscles, one left and one right, which work together to create sounds. When you simply breathe, they are far apart and they let the air fly through without obstruction. When you sing, they are pushed together to create pressured air waves (some parts are pressed together, some are stretched), which is the definition of sound. They can also be stretched out to create higher pitches.<\/li>\r\n\t<li><strong>Vocal box\/voice box (larynx):<\/strong> The part of your neck your vocal chords are in. It&rsquo;s called like this because it has the shape of a box, and can actually move up and down the neck. Men can easily spot it, as it&rsquo;s exactly where the Adam&rsquo;s apple is located.<\/li>\r\n\t<li><strong>Jaw:<\/strong> I&rsquo;d be tempted to say <em>mouth<\/em> here, but that would also include some other parts that have different functions, so I like to keep them separated. Lowering your jaw allows sound to come out of your mouth. Leaving it closed forces the air to move out through your nose, which honestly doesn&rsquo;t sound very well.<\/li>\r\n\t<li><strong>Tongue:<\/strong> Your tongue is responsible for creating vowels and consonants. Singing can only be done on vowels, which means that your tongue needs to be able to shift quickly between different sounds when singing.<\/li>\r\n\t<li><strong>Swallow Muscles:<\/strong> Those are located just below your jaw &ndash; basically on the bridge between your neck and your head. If you feel tension when singing, it is most likely to come from your swallow muscles engaging (too much).<\/li>\r\n\t<li><strong>Soft palate:<\/strong> The what now?! This is just a crucial spot on the roof of your mouth, around the back. At the front it is called the <em>hard palate<\/em>. This part also plays a role in eating\/swallowing, which means that you need to get this out of the way as well.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>That seems difficult.<\/h2>\r\n\r\n<p>I do agree, that this might be much to take in, let alone trying to control all of these at once when singing. Therefore, I recommend not trying to improve them all at once. Vocal exercises work a bit on all of them, so those are always good to do often. But, for example, desperately trying to force your jaw down while singing is not a good idea, just as it isn&rsquo;t wise to try to keep your tongue out of the way and at the same time trying to keep your soft palate up. Improve one thing until it can be done without tension and without thinking about it, then move on.<\/p>\r\n\r\n<h2>Some extra info on Vocal Chords<\/h2>\r\n\r\n<p>As seen that your vocal chords are the vital part of singing, extra attention needs to be paid to them.<\/p>\r\n\r\n<p>Your vocal chords work by using small muscles around it to push them together, and to stretch and shorten them. This means that there are no other muscles in your neck, shoulders or face needed to make them work! Low notes and high notes of course require different muscle tension, but that should be controlled by those small muscles only.<\/p>\r\n\r\n<p>The lowest note you can sing is determined by the minimum length of your vocal chords. That means, the length they have when not influenced by any muscles at all, when not stretched. This means that damaging your vocal chords, will create scars and weak spots on them, which in turn shortens them and lowers your voice. Therefore, you can&rsquo;t train to sing lower than you can, but you can train to make your lowest notes sound the best they can<\/p>\r\n\r\n<p>The highest note you can sing is determined by the maximum length of your vocal chords. Stretching them more creates a higher note. And just as with muscles in your arms or legs: regularly stretching them and working out is the only way to get a bigger vocal range. But do know that there is a limit, and that you will need to switch to falsetto and not desperately try to push higher in your regular voice.<\/p>\r\n","slur":"fundamentals-of-singing","cat":"Music","subcat":"Singing","video":"","diff":"1","quiz":""},
{"id":"43","title":"[Singing] Good Vocal Technique","post":"<p>Now, that&rsquo;s a thing to strive for! But before you start applying all sorts of tips and tricks at once, you need to know the path that is best to follow.<\/p>\r\n\r\n<h2>The 3 major vocal ranges<\/h2>\r\n\r\n<p>When talking about singing ranges, we often identify three different ones:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Low:<\/strong> Your low notes. They are lower than your speaking voice. Most often, there are far less low notes you can (comfortably) sing below your speaking voice, then there are high ones above it.<\/li>\r\n\t<li><strong>Mid:<\/strong> Your regular, middle range notes. They are around the pitch of your speaking voice. They are identified as being easy, painless and comfortable for you to sing, at any time.<\/li>\r\n\t<li><strong>High:<\/strong> Your high notes. This is everything from where it starts to feel outside of your comfort zone until you hit the highest pitch you can possibly get.<\/li>\r\n<\/ul>\r\n\r\n<p>I&rsquo;ve used a lot of positive words on the <strong>midrange<\/strong>, and for a reason. You should first master this range. Being able to sing all notes here gives you a good basic range to work from, and eliminates any tension or other problems with your speaking voice (so you don&rsquo;t hurt yourself when speaking).<\/p>\r\n\r\n<p>After you&rsquo;ve done that, I&rsquo;d actually recommend starting with the <strong>low notes<\/strong>. Although you can also start with mastering <strong>high notes<\/strong>, I have found starting low the best way. First of all, because trying to blast through low notes usually hurts your voice in a different, more negative way. It lowers your voice, until the point where those low notes become your midrange. Second of all, because they are easier to master, as they usually lie closer to your comfortable range and there&rsquo;s a lower tendency to create lots of tension.<\/p>\r\n\r\n<h2>Optimal positions for every part involved<\/h2>\r\n\r\n<p>In the previous chapter we&rsquo;ve discussed all parts involved in singing. Here I&rsquo;ll give you the optimal position for them, which means that if they are in that position, and you&rsquo;re still experiencing tension or vocal cracks, it&rsquo;s got nothing to do with that part.<\/p>\r\n\r\n<img src=\"media\/MouthPerfectPositionsSinging.png\" \/>\r\n\r\n<ul>\r\n\t<li><strong>Vocal chords:<\/strong> Their position is determined by their container, the larynx.<\/li>\r\n\t<li><strong>Vocal box\/voice box (larynx):<\/strong> This should be in the same position as it is when you&rsquo;re relaxed and just breathing in and out. This is usually a bit below the top of the neck. When singing high notes, it tends to move upwards. When singing low notes, it tends to move down. Keep it in roughly the same spot, always.<\/li>\r\n\t<li><strong>Jaw:<\/strong> Down and open. If you have a small mouth, a tendency to close your mouth or just a habit of speaking with only a narrow opening you might need to exaggerate this movement a bit. This doesn&rsquo;t mean forcing it down &ndash; this means letting it drop as far as it can. It&rsquo;s perfectly possible to sing with an only slightly lowered jaw, but opening it creates more volume, more resonance and forces some other parts to stay in place.<\/li>\r\n\t<li><strong>Tongue:<\/strong> As mentioned earlier, your tongue should be out of the way on vowels. This means that when singing vowels or any note that isn&rsquo;t extremely short, your tongue should be down and touching the back of your lower teeth. When singing consonants, your tongue should just be in the regular place for that consonant (which is usually a bit higher or even touching the upper teeth). However, you may need to exaggerate the consonants and vowels a bit to keep them distinct and not let the tongue make a mess of it and blur the sound.<\/li>\r\n\t<li><strong>Swallow Muscles:<\/strong> They should not be tensed up or engaged, but should be in their regular spot. Eating before or while singing is therefore never a good idea, and vocal exercises before singing should help relax them.<\/li>\r\n\t<li><strong>Soft palate:<\/strong> This should be <strong>raised<\/strong>. You might think that you don&rsquo;t really feel the difference, or don&rsquo;t know when it is up or down, but with practice you&rsquo;ll feel what I mean. When it is down, you&rsquo;ll notice that when you sing the sound feels like it resonates in your mouth. You feel tension, the sound is flat, muddy or hoarse, not what you want. When it is up, you feel the sound travel up and like it is resonating between your eyes\/in your head. Lowering your jaw usually opens it up a bit, but a good tongue position is most decisive in the matter.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Breathing properly &ndash; adding support<\/h2>\r\n\r\n<p>One thing I have not mentioned is your lungs. Why? Because if you&rsquo;re alive, it means they are working and you have nothing to worry about.<\/p>\r\n\r\n<p>But, because all sound starts with breathing or &lsquo;pushing air out&rsquo;, they also have their own preferred settings, so to speak.<\/p>\r\n\r\n<p>When we&rsquo;re talking about this, we usually call it <strong>support<\/strong>. That is because a good breathing technique supports your sound, while a bad one leaves all the technique to your vocal chords.<\/p>\r\n\r\n<p>We&rsquo;ll talk about this more in another chapter, but the key things to look out for now are these:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Maintain good posture: <\/strong>This means standing (or sitting) up straight, with a straight back, shoulders back, your neck straight up, and your face perfectly horizontal and looking straight forward. This is optimal for air flow, and also for singing in general.<\/li>\r\n\t<li><strong>Abdominal breathing:<\/strong> There are two ways to breathe, and one of them is actually very wrong but used by everyone and everywhere. This may seem strange,&nbsp; but we do it without noticing it, when we&rsquo;re stressed, tired, whatever.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Chest breathing<\/strong>: The wrong one. When inhaling, your shoulders lift a bit and the top of your chest may expand a bit. Your using all of your facial, neck and shoulder muscles to breathe in and out, and the air never fully reaches the rest of your body.<\/li>\r\n\t\t<li><strong>Abdominal breathing:<\/strong> The right one. When inhaling, you should feel no pressure at all in the upper are of your body, and you should feel your belly expand a bit outward. It should feel like the air drops right to the bottom of your longs when inhaling. You use your abs to control this type of air flow (hence the name), and that is also the only area that you should feel some pressure in. Or rather you should feel that there is something happening only there.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n","slur":"good-vocal-technique","cat":"Music","subcat":"Singing","video":"","diff":"2","quiz":""},
{"id":"44","title":"[Singing] The Mask","post":"<p>It sounds like some sort of superhero or supervillain, but I have to disappoint you. The mask is something that is used when teaching about <strong>vocal placement<\/strong>. The mask basically refers to the area you should <em>place<\/em> your sound, which means you should feel the sound resonate there.<\/p> \r\n\r\n<p>A good vocal placement not only makes your sound fuller, louder and clearer &ndash; it also makes the difference between hurting yourself and not getting any kind of normal sound, and singing freely.<\/p>\r\n\r\n<h2>Where is it?<\/h2>\r\n\r\n<p>The mask is exactly where the name suggests: &nbsp;at the front of your face, the area around your eyes.<\/p>\r\n\r\n<p>But, you must realize that the eyes are placed more to the back of the head than your mouth or nose. It is important to place your sound forward, but you shouldn&rsquo;t mistake it for placing the sound near your nose (as this creates a nasal, country-like tone). On the other hand, placing the sound all the way in the back of your throat is also not exactly preferred.<\/p>\r\n\r\n<h2>Balance<\/h2>\r\n\r\n<p>As you see, it is kinda tricky to get the placement right, but you&rsquo;ll know it when you have it. It just feels free, relaxed and strong. You should feel the sound resonate around the mask area, and nowhere else.<\/p>\r\n\r\n<h2>How do I get the sound there?<\/h2>\r\n\r\n<p>Practice, exercises and good vocal technique will in the long run get the sound more towards the spot.<\/p>\r\n\r\n<p>But, there are tricks that help some people out. Not all of them, and you should not use them if they create too much tension:<\/p>\r\n\r\n<ul>\r\n\t<li>Weirdly enough, some people can just put the sound there. You can just imagine the sound being pushed into that area, a bit up and a bit forward. Then you can just push the sound a bit towards that spot. I don&rsquo;t really recommend it, but it works for some.<\/li>\r\n\t<li><strong>Singing to the top of your head:<\/strong> Put a hand on your head (or not, if you think that looks too embarrassing). Now try to sing to your hand\/the top of your head, without forcing it. Just try to let the air go more towards the top of your head, and you should feel it resonate more and your soft palate should lift. Once you get the right feeling, you know what it feels like and can use it to determine when your placement is wrong and when it is right.<\/li>\r\n\t<li><strong>Singing falsetto:<\/strong> Singing in a light falsetto that is comfortable for most people requires the sound to be in the mask area.<\/li>\r\n<\/ul>\r\n","slur":"singing-mask","cat":"Music","subcat":"Singing","video":"","diff":"3","quiz":""},
{"id":"45","title":"[Singing] Breathing Exercises","post":"<p>People who sport quite often usually already know how to do this, but for some people this is very strange. These breathing exercises will let you use the <em>abdominal breathing technique<\/em> discussed a few chapters ago, and it allows you to control your breath more. When you&rsquo;ve just exercised, you just woke up, or you&rsquo;ve eaten recently, your breathing is usually a bit off and not ready for singing. Breathing exercises will also help with getting the air flow on the right track before starting to sing.<\/p> \r\n\r\n<h2>Abdominal Breathing Technique<\/h2>\r\n\r\n<p>If you&rsquo;re having trouble trying to breathe only by expanding and contracting your belly, or engaging and releasing your abs, it usually helps to do this:<\/p>\r\n\r\n<ul>\r\n\t<li>Lie on your back, make sure you&rsquo;re comfortable.<\/li>\r\n\t<li>Put a book, or something moderately heavy on your abdomen.<\/li>\r\n\t<li>Now try to move the book up and down with only your abdomen.<\/li>\r\n\t<li>If you manage to get it to move up and down regularly with simply breathing, you&rsquo;re on the right track.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Controlled Air Flow<\/h2>\r\n\r\n<p>This one&rsquo;s for extending how much air you can use ( = how long you can hold a note), and for &lsquo;resetting&rsquo; the air flow.<\/p>\r\n\r\n<ul>\r\n\t<li>Quickly inhale as much as you can. Try to do this properly and not create any tension anywhere.<\/li>\r\n\t<li>Put your teeth together, push your tongue against them, and create a simple snake-like &lsquo;<strong>sssssss&rsquo;<\/strong> sound.<\/li>\r\n\t<li>Do it as loud as you can, and try to keep the note for as long as you can.<\/li>\r\n\t<li>Repeat a few times until you can do this for a relatively long time, and in a relaxed manner.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Tips to keep in mind<\/h2>\r\n\r\n<p>You should feel the air drop lower, even below your belly button. Visualizing the air to be heavy can sometimes help. The only tension should be in your abs, and even that should not be too extreme. Remember that singing is a relaxing activity, and adding good support should only add to that smoothness.<\/p>\r\n","slur":"singing-breathing-exercises","cat":"Music","subcat":"Singing","video":"","diff":"2","quiz":""},
{"id":"46","title":"[Singing] Vocal Exercises","post":"<p>This topic's importance cannot be overestimated. If you&rsquo;re experiencing any kind of vocal problems, I&rsquo;d go as far as to say this is the most important part. Vocal exercises are basically activities you can do that engage your vocal chords and everything else just as usually would happen, but do so in a way that doesn&rsquo;t hurt you. They can only be done (properly) if your technique is perfect and everything is in their optimal position. This might seem very hard, but these exercises were designed to make it easy for you to do exactly that.<\/p> \r\n\r\n<p>Repeating them every day, for at least 15 minutes, not only improves your technique, but also strengthens your voice and makes sure it is not damaged (much).<\/p>\r\n\r\n<h2>Vocal Damage<\/h2>\r\n\r\n<p>When I talk about damage, I mean anything that is not normal or healthy for your vocal chords. They are muscles, and their boundaries should be respected. They are very small and flexible, yet used all day every day. Therefore, if you damage them in any way, you <em>really<\/em> need to take a rest to let it heal or it will become permanent. This sounds like an easy thing to do, but it isn&rsquo;t. You should really tell yourself to stop and take a break whenever you&rsquo;re forcing too much or feeling something happening in your throat.<\/p>\r\n\r\n<p>The bad news is though, that damage can also be done by things other than bad vocal technique or too much pressure. Some types of foods (such as dairy products) create <em>mucus<\/em>, which hinders your vocal tone. When you wake up, your voice\/mouth has usually done some resting and growing and has thrown out any waste from that process. Both of these contribute to a rasp or uncontrollable vocal chords, due to the fact there&rsquo;s actual stuff in your throat obstructing the air flow<\/p>\r\n\r\n<p>The good news is that this can be solved if you&rsquo;re careful. Any extra stuff you get from eating can be resolved by drinking water and swallowing. When you wake up, you should <em>always<\/em> do vocal exercises to remove anything that could damage your voice.<\/p>\r\n\r\n<p>Of course, there are factors outside of these two that play a huge role, such as smoking, drinking alcohol, vocal abuse by coughing and screaming all the time. If you want a good singing voice, abandon all of these, please. A rough voice may sound sexy, but only for the 5 or 10 years that it may last.<\/p>\r\n\r\n<h2>The Lip-Roll<\/h2>\r\n\r\n<p>This is perhaps the most famous and most effective of vocal exercises. I therefore recommend to always start with this one, and perfect the technique on this one before moving on to anything else. The idea is that singing the way I&rsquo;ll describe makes it much easier to shift between pitches and to sing over any difficult notes. Therefore, using this technique you can sing notes you can&rsquo;t normally (so you can strengthen them without forcing it), and it relaxes the face.<\/p>\r\n\r\n<ul>\r\n\t<li>Keep your mouth closed (don&rsquo;t force it, just your normal mouth shut).<\/li>\r\n\t<li>Create a <strong>&lsquo;brrrrr&rsquo;<\/strong> sound with your lips.<\/li>\r\n\t<li>While doing that, sing any note.<\/li>\r\n\t<li>You shouldn&rsquo;t feel any tension in your mouth, and you shouldn&rsquo;t push too much air to make your lips roll. Instead, you should have a light feeling above those brr-ing lips, around the nose and eyes.<\/li>\r\n\t<li>Once you&rsquo;re comfortable with a few notes in your midrange, you can try going up and down, and even moving into falsetto and back should be easy with a bit of practice.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Humming<\/h2>\r\n\r\n<p>Some people can naturally hum very well, some people have lots of trouble with it. The thing is, humming is another way of creating sounds without opening your mouth, but it is more natural and normal than the lip-roll. It is therefore a bit harder to do, but you need perfect vocal technique to hum all notes of your range, so this is by far the best way to get there. It removes most tongue and all jaw movement (because you&rsquo;re not singing different vowels\/consonants), so you can really focus on the rest.<\/p>\r\n\r\n<ul>\r\n\t<li>Keep your mouth closed, tongue down.<\/li>\r\n\t<li>Create a simple &lsquo;hmm&rsquo; or &lsquo;mmm&rsquo; sound. Like when you want to say yes or indeed, but your mouth is full because you&rsquo;re eating, and say &lsquo;mm-mm&rsquo; instead.<\/li>\r\n\t<li>You should again feel the sound resonate around the area of your eyes. If you feel it resonate in your mouth\/too low, you&rsquo;re not humming correctly and doing the exercise that way will not bring you any good.<\/li>\r\n<\/ul>\r\n","slur":"vocal-exercises","cat":"Music","subcat":"Singing","video":"","diff":"2","quiz":""},
{"id":"47","title":"[Singing] Middle (Speaking) Range","post":"<p>This should be the first thing you try and perfect. If you can&rsquo;t get this right, there&rsquo;s no use in putting your training into low and\/or high notes, because you can&rsquo;t really reach them or connect them.<\/p> \r\n\r\n<p>Singing notes in this range, means singing notes that are comfortable and around the pitch of your speaking voice. You should not feel much tension, and your larynx shouldn&rsquo;t rise.<\/p>\r\n\r\n<p>But, there might still be a lot wrong with your technique (think of placement or your tongue being in the way). Therefore, it&rsquo;s best to try to get this range of maybe 5 or 6 notes perfect.<\/p>\r\n\r\n<h2>What to Do<\/h2>\r\n\r\n<p>Vocal exercises inside this range should help a lot, and you should always start with them.<\/p>\r\n\r\n<p>Besides that, pay attention to your speaking voice and make sure that isn&rsquo;t hurting you. Of course, speaking and singing is different and should not sound or work exactly the same, but you should at least be able to get a clear, moderately loud, understandable tone out of your mouth as you speak.<\/p>\r\n\r\n<p>Last but not least, when you feel confident you can try singing songs with a small vocal range, here are a few examples:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>100 Suns<\/strong> by <strong>30 Seconds to Mars<\/strong> (less than an octave)<\/li>\r\n\t<li><strong>Into my Arms<\/strong> by <strong>Nick Cave<\/strong> (less than an octave)<\/li>\r\n\t<li><strong>These Boots are Made for Walking<\/strong> by <strong>Nancy Sinatra<\/strong> (exactly one octave)<\/li>\r\n\t<li><strong>Sweet Dreams<\/strong> by <strong>Eurythmics<\/strong> (exactly one octave)<\/li>\r\n\t<li><strong>Here Comes the Rain Again<\/strong> by <strong>Eurythmics<\/strong> (exactly one octave)<\/li>\r\n<\/ul>\r\n\r\n<p><em>Why do I give songs with one octave vocal range?<\/em> Because you can transpose these songs, down or up to your comfortable midrange level, and from there on sing through the whole sing without having to strain or hit difficult notes.<\/p>\r\n","slur":"singing-middle-speaking-range","cat":"Music","subcat":"Singing","video":"","diff":"2","quiz":""},
{"id":"48","title":"[Singing] Low Notes","post":"<p>Low notes are usually forgotten or just plain ignored when learning vocal technique. I think that is very wrong, as seen that low notes also matter a lot, and well sung low notes sound beautiful. On the other hand, not being able to sing a healthy low note will seriously damage your vocal capabilities.<\/p> \r\n\r\n<h2>What to Do<\/h2>\r\n\r\n<p>Vocal exercises, start from your lowest note and move to the top.<\/p>\r\n\r\n<p>Also, we tend to look downwards and drop our larynx (too much) when singing low notes. Try to keep your face straight up, and your larynx at the same place. If that is difficult for you, it helps to imagine the sound traveling\/resonating more into the top of your head, or to <em>sing upwards<\/em> as you could call it. Usually the problem with low notes is in the fact that people place the sound too much in their mouth, and drop everything too much, which makes it all loose and uncontrollable.<\/p>\r\n\r\n<p>Thirdly, low notes require <strong>more air<\/strong> than higher ones. That doesn&rsquo;t mean you should blast everything you have into it, it just means that you should learn to take deeper breaths and support the note with more air <em>if<\/em> you are having problems with support.<\/p>\r\n\r\n<p>If you feel confident, you can start singing songs. You could transpose any existing song so that its lowest note matches your lowest note. If you don&rsquo;t feel like doing that, you could search for songs that include (lots of) low notes in their verses.<\/p>\r\n\r\n<p>Don&rsquo;t try to sing very high yet, focus on singing the low and midrange perfectly.<\/p>\r\n","slur":"singing-low-notes","cat":"Music","subcat":"Singing","video":"","diff":"3","quiz":""},
{"id":"49","title":"[Singing] High Notes","post":"<p>Now that you have a solid range of presumably more than one octave, it is time for you to get the high notes right and increase your range. High notes are usually more preferred in pop and rock songs than low ones, and people often label a singer as good or bad depending on how well (s)he can hit the high notes. While I don&rsquo;t really agree with that, it is true that a bigger vocal range creates more possibilities and more varied songs. And it can really demonstrate your vocal abilities.<\/p> \r\n\r\n<h2>What to Do<\/h2>\r\n\r\n<p>Vocal exercises. Start from your lowest note and move to the top. Then start at the top and move to the lowest note. Usually, moving upwards is harder than going down, but you should be able to do both.<\/p>\r\n\r\n<p>Also, we tend to look upwards and raise our larynx (too much) when singing high notes. Try to keep your face straight up, and your larynx at the same place. If that is difficult for you, it helps to imagine the sound traveling a little more downwards, or<em> singing downwards<\/em>. Make sure though that your vocal placement is still right.<\/p>\r\n\r\n<p>Opening your jaw a bit more also helps with opening up the mouth and creating room for the higher notes. Don&rsquo;t stress it too much though.<\/p>\r\n\r\n<p>And last but not least, usually singers start to increase their volume and push more breath when singing high notes. While it helps most people to sing higher notes with lots of power, there&rsquo;s actually <strong>less air<\/strong> needed to sing them. Therefore, if you want to sing powerful and punchy high notes, you need to contract your abs to control the air flow. If you just want high notes, you shouldn&rsquo;t blast that much air.<\/p>\r\n\r\n<p><em>What about falsetto?<\/em> While falsetto is the highest you can go, much higher than your regular voice in most cases, I am going to discuss that in a later chapter. But, it follows these same rules to a certain extent, so practicing with falsetto is also a great idea.<\/p>\r\n\r\n<p>And if you&rsquo;re confident, you can start singing songs. Most songs include some high notes at least (in the chorus and bridge), but you could try singing songs that have high notes all the time if you think you can do it. If you can&rsquo;t however, you shouldn&rsquo;t, and you should keep practicing until you can.<\/p>\r\n","slur":"singing-high-notes","cat":"Music","subcat":"Singing","video":"","diff":"3","quiz":""},
{"id":"50","title":"[Singing] Voice Types, Ranges & Breaks","post":"<p>This chapter I will not give you any more exercises or techniques, but I will explain a bit about what a voice can and can&rsquo;t do, what people usually struggle with and the different voice ranges. These tips will help you determine what type of voice you have so you can find songs that perfectly match that range, but it might also answer some leftover questions you have about your voice or singing in general<\/p> \r\n\r\n<h2>Voice Types<\/h2>\r\n\r\n<p>While I sometimes use these interchangeably with voice ranges, I will try to make the distinction clear here. With voice types I mean the different bits of your voice that you can use at certain ranges:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Chest Voice:<\/strong> Your regular voice. Encompasses your speaking range and the bits below that. It sounds clear and strong.<\/li>\r\n\t<li><strong>Mixed Voice: <\/strong>The part between the chest voice and head voice. It contains semi-high notes for you. By that I mean that it is the range of notes that are just above your speaking zone, which usually sound a bit different. They are usually a bit louder and have less of a resonance or vibrato to them. With good vocal technique you solve these problems.<\/li>\r\n\t<li><strong>Head Voice:<\/strong> The part that contains your highest notes (that are not falsetto). These notes are usually a bit louder, clear, strong and feel fuller and more substantial than falsetto. It is basically the high chest voice, but not <em>exactly<\/em> the same.<\/li>\r\n\t<li><strong>Falsetto: <\/strong>Your highest notes. It is a different kind of singing, as your vocal chords are not exactly connected but only touch lightly. It is therefore a bit harder to control, and it should be seen differently. Most people know how it sounds or can switch to some falsetto notes &ndash; boys switch to it all the time when their voice changes during puberty. But because the technique is different, you should look at your falsetto as a range on its own: your lowest falsetto notes should have the same technique and feeling as low notes (even though they are much higher, because they are falsetto). Falsetto is trained best by going through all of the notes you can hit with <strong>lip-rolls<\/strong>.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Voice Ranges<\/h2>\r\n\r\n<p>Everybody is born with a different set of vocal chords, which means everybody can (naturally) sing in a different range. While you can extend your range with more higher notes, your lowest note can&rsquo;t be altered, and there&rsquo;s always a limit to how far you can stretch your range. These voice ranges are available:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Bass: <\/strong>E2 &ndash; E4<\/li>\r\n\t<li><strong>Baritone: <\/strong>G2 &ndash; G4<\/li>\r\n\t<li><strong>Tenor: <\/strong>C3 &ndash; C5<\/li>\r\n\t<li><strong>Alto: <\/strong>G3 &ndash; G5<\/li>\r\n\t<li><strong>Mezzo-soprano: <\/strong>A3 &ndash; A5<\/li>\r\n\t<li><strong>Soprano: <\/strong>C4 &ndash; C6<\/li>\r\n<\/ul>\r\n\r\n<p><strong><em>What do these letters and numbers mean?<\/em><\/strong> The letter specifies the note, and the number the octave. Usually, C3 or C4 is called <strong>middle C<\/strong>, because it is the note in the center of a piano, and the center of the vocal ranges. While this list assumes a vocal range of two octaves, it&rsquo;s more common to have 1 or 1.5 max if you&rsquo;re not a trained singer, and 2.5 to 3 max if you&rsquo;re a trained singer.<\/p>\r\n\r\n<p>Most men are born with a baritone range, while women are born with the mezzo-soprano.<\/p>\r\n\r\n<p>This again leads to the question <strong><em>are these the only ranges? <\/em><\/strong>No, for example, most pop and rock singers have an extended range and are <strong>Low Tenors<\/strong> or <strong>High Tenors<\/strong>.<\/p>\r\n\r\n<p>If you can indicate your range, you can find songs that fit. It also helps when auditioning for a musical (or even opera), as they usually need to know your voice range to see which part(s) you can play.<\/p>\r\n\r\n<h2>Breaks (passagios)<\/h2>\r\n\r\n<p>I&rsquo;ve discussed the several parts of the voice, but that doesn&rsquo;t mean they just magically transform into one another on a certain note. There are always a few notes that form the bridge between the two worlds, and those are called a <strong>break<\/strong> or <strong>passagio<\/strong>. Often times, those are the most difficult notes to sing (even if they&rsquo;re not particularly high or low), because your voice doesn&rsquo;t really know what to do with them and just tries its best. This might result in no sound at all, a weak or broken sound, or the voice constantly shifting between different notes when trying to hold a certain note for a long time.<\/p>\r\n\r\n<p>Breaks are smoothened or <em>ironed out<\/em> by doing vocal exercises. With those you can sing them easily and in the correct way. You can&rsquo;t immediately use that in actual singing, but with time and patience you&rsquo;ll get used to the right way to sing those notes.<\/p>\r\n\r\n<p>The break that is the hardest to overcome is the one between head voice and falsetto. They are just two completely different ways of singing, and you feel like you need to tense up or replace your whole singing system when switching between them. Again, vocal exercises and scales help a lot, but it also helps to do exercises starting from your highest falsetto note and then going down. Moving downwards gives you a sense of relieving pressure, and if you remember that feeling when moving up in your range, you should see improvement.<\/p>\r\n","slur":"voice-types-ranges-breaks","cat":"Music","subcat":"Singing","video":"","diff":"3","quiz":""},
{"id":"51","title":"Become a Foosball\/Table Soccer Champion","post":"<p>Welcome to the guide on how to become better at foosball. Whether you&rsquo;ve always wanted to be better than the average random person at this great game, want to impress some people or are eager to join foosball tournaments &ndash; this guide is for you.<\/p> \r\n\r\n<p>I&rsquo;ll start with explaining a bit about the table and the game itself; the rules, setup, playing conventions. Then I will move on to explaining the fundamentals of attacking as well as defending, and finish it off with tips &amp; tricks. I will include the most common shots or techniques with every section, but using the basic rules and possibilities I explain you will be able to perhaps make up your own special trademark shot.<\/p>\r\n\r\n<h2>How to use this guide<\/h2>\r\n\r\n<p>You can use it any way you like, but I think there is a certain order and strategy which will yield the best results.<\/p>\r\n\r\n<p>Usually with a game, I would recommend starting with defending and then moving on to attacking. With table soccer however, how you defend really depends on your knowledge of the attacking skills of your opponents and attacking in general.<\/p>\r\n\r\n<p>On top of that, foosball is a wild game. Especially if not everyone knows what they&rsquo;re doing, people can start just shooting the ball randomly and as fast as they can. Defence doesn&rsquo;t have much use in these circumstances, and whether you win or not depends more on how well you can control the ball and how great your attacking skills are.<\/p>\r\n\r\n<p>I have therefore put all the posts in the order that I think is the best, and I recommend you read through them in that way.<\/p>\r\n\r\n<h2>But always remember<\/h2>\r\n\r\n<p>Practice, is the magic word. If you&rsquo;ve got a soccer table at home, or anywhere else where you can play alone, I strongly recommend putting in some hours to get your technique perfect. Even then, the game is unpredictable and you will never get a 100% success rate, but that shouldn&rsquo;t keep you from trying the best you can. Even a few hours of extra, specific training can make a huge difference.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol>\r\n\t<li>Fundamentals &amp; Rules<\/li>\r\n\t<li>Ball Control<\/li>\r\n\t<li>Passing<\/li>\r\n\t<li>Shooting<\/li>\r\n\t<li>Defending with goalkeeper + defenders<\/li>\r\n\t<li>Defending with midfield + attackers<\/li>\r\n\t<li>Tips &amp; Tricks<\/li>\r\n<\/ol>\r\n","slur":"become-football-table-soccer-champion","cat":"Sports","subcat":"Foosball","video":"","diff":"1","quiz":""},
{"id":"52","title":"[Foosball] Fundamentals & Rules","post":"<p>Before we can start having fun, it is important to know the general rules and basic structure of a foosball table<\/p>\r\n<p>A foosball table consists of a <em>soccer field<\/em>, with a <em>goal on each side<\/em>, and the rest of it are <em>walls (slightly sloped)<\/em> and <em>4 rods<\/em> for each team (1 keeper, 2 defenders, 5 midfielders, 3 attackers).<\/p> \r\n\r\n<img src=\"media\/Foosball01.png\" \/>\r\n\r\n<p>NOTE: If you're looking for a foosball table to buy, or how to maintain them, here's an article I recommend: <a href=\"http:\/\/www.foosballzone.com\/foosball-table\/\">Foosballzone | Foosball Tables<\/a><\/p>\r\n\r\n<p>Of course, one team&rsquo;s defenders are facing the other team&rsquo;s attackers, and the midfield-rods are facing each other. You most often play with 2 players in each team: one to defend (holding the goalkeeper-rod and the defenders-rod), one to attack (holding the midfield-rod and the attacker-rod). Playing alone against one person can also be done, but is less fun in my opinion.<\/p>\r\n\r\n<p>The goalkeeper-rods can move only from the left corner of the goal to the right corner, all other rods can be moved up and down until one of the men hits the wall. All rods can be rotated a full 360 degrees.<\/p>\r\n\r\n<p>The best <strong>position to stand in<\/strong> is therefore: standing far enough from the table so that you can comfortably pull both your rods all the way down, and standing solid on your own two feet (which means: do not lean on your rods, this damages the rods, and this only makes playing harder for you). Also, standing diagonally with your left foot forward and your right foot at the back helps: this is because your right hand needs more space to move freely. Grab the handles of your rods as if you are about to shake hands with them, your thumb diagonally facing up.<\/p>\r\n\r\n<p>The idea obviously is to win the game by scoring goals yourself, and making sure your opponent does not score goals.<\/p>\r\n\r\n<h2>The Rules<\/h2>\r\n\r\n<p>The rules for official tournaments have a lot in them that&rsquo;s pretty useless (i.e. you only have a time span of mere seconds on a particular rod within which you have to shoot) if you just want to play and have fun (at school or work for example), so I&rsquo;ll give you the rules as they are applied in casual play:<\/p>\r\n\r\n<ul>\r\n\t<li>NO SPINNING. Spinning occurs when you spin your rod 360 degrees without touching the ball. The easiest way to never spin, is to never let go of your rod\/handle (and to just always hit the ball). Spinning might get you a lot of power behind your shot, but it will also make you miss the ball or goal 9 out of 10 times. It&rsquo;s just stupid and boring.<\/li>\r\n\t<li>Every new ball can be put into the field in different ways. Most tables have a hole on the side through which you put the ball. If they don&rsquo;t, usually the ball is rolled from the middle to the midfielders of the team that was scored against.<\/li>\r\n\t<li>All rods are allowed to score. However, if you score using your midfielders, the next ball will be worth 2 points (and this ball none).&nbsp; If you score the last ball with the midfield, you lose.\r\n\t<ul>\r\n\t\t<li>An alternative is that midfield goals don&rsquo;t count.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Whatever happens, as long as the ball ends up in the goal of the opposition, you are awarded a point. The opponent may slightly touch the ball, or the ball might go in via the walls, et cetera, we don&rsquo;t care: in is in.<\/li>\r\n\t<li>The rule is: &lsquo;attacker is king&rsquo;. If an attacker shoots a ball, and it first hits some other things and then goes in, it&rsquo;s always a goal from the attacker. However, if for example your defenders shoot a ball, and it hits the midfield and then it goes in, it&rsquo;s a midfield goal.<\/li>\r\n\t<li>If someone scores a goal, but the shot was so fast that the ball comes out of the goal back into play (a &lsquo;clinker&rsquo;), the team that scored is awarded 2 points and playing continues.\r\n\t<ul>\r\n\t\t<li>An alternative is that the team that scored gets only one point, but the opposition has one point removed. And yes, counting below zero is allowed.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>(optional, to make every match more exciting) When a team loses having scored 0 goals, the team must &lsquo;crawl&rsquo;: crawl under the table from left to right. This is to humiliate them for being rubbish.<\/li>\r\n<\/ul>\r\n\r\n<p>The official rules also say the following things, which you can decide for yourself whether you want them as rules in your game:<\/p>\r\n\r\n<ul>\r\n\t<li>NO JARRING. Jarring (or &lsquo;sawing&rsquo;, because it is the same movement you would make with a saw in your hands) is when a player slams his rods to the sides of the foosball table. This can be done to make the opponent lose&nbsp; possession&nbsp; of the ball, or just as a method of defending; whatever your reasons, most players hate this and forbid this.<\/li>\r\n\t<li>If the foosball lies dead between 2 rods (no rod can get to the ball, and the ball isn&rsquo;t moving anymore), the ball needs to be served again.&nbsp; If you think that&rsquo;s boring, then you can lift the table a bit until the ball rolls back into someone&rsquo;s possession.\r\n\t<ul>\r\n\t\t<li>If the ball cannot be reached by neither <em>defenders<\/em> nor the <em>opponents attackers<\/em>, the ball automatically goes to the defenders.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>If a ball is, whatever the cause, lifted (it jumps away from the table, or it hits the head of one of the men, et cetera) the ball needs to be served again. However, if the ball is still on the field, I recommend you just play on. This is because a ball flying through the air only makes things more fun (and really good players are actually able to pass or shoot the ball through the air, and that&rsquo;s beautiful to see and do).<\/p>\r\n","slur":"foosball-table-soccer-fundamentals-rules","cat":"Sports","subcat":"Foosball","video":"","diff":"1","quiz":""},
{"id":"53","title":"[Foosball] Ball Control","post":"<p>Ball control is a very important aspect of foosball, which is why it&rsquo;s sad that most people forget about it. Most new players exploit the method of just trying to shoot every ball that comes near their rod at goal very fast, but that&rsquo;s wrong. Against another newbie it might score quite a lot of goals, but once you play a bit longer you&rsquo;ll notice it&rsquo;s not the best way.<\/p> \r\n\r\n<p>What you need to learn before you can do anything, is being able to quickly control any ball that comes near your rod. This not only means that you can efficiently defend any ball coming towards you, but it also makes you able to set up certain kinds of shots or passes.<\/p>\r\n\r\n<p>In ball control, we can distinguish 2 styles. The one is just moving the men around the ball so that it stays in your possession, the other one is called &lsquo;pinning&rsquo;. When you pin a ball, you trap the ball between the toe (or heel) of your man and the field, so that in a split second the ball is stopped completely. Many people recommend you learn this method first, but actually I&rsquo;m against it.<\/p>\r\n\r\n<p><em>Why?<\/em> Because pinning a ball is a one-chance thing. If you miss your pin, the ball just continues to move towards your goal\/opponent at the same speed. And to make it worse, the defender of your team probably expected you to have the ball, but you don&rsquo;t, so that&rsquo;s one goal against you. Therefore I recommend that you first develop a feeling for how much pressure to put on a ball, and how a ball moves and behaves with different touches.<\/p>\r\n\r\n<p>But remember: ALWAYS keep a ball in your possession. Once you have a ball, never let go of it, because in foosball your opponent can score from any part of the table. In real soccer, losing a ball to your opponent is already quite bad, but imagine what could happen in the dangerous game of table soccer&hellip;<\/p>\r\n\r\n<h2>Ball Control Exercises<\/h2>\r\n\r\n<h5>1. Knowing where the ball will end up.<\/h5>\r\n\r\n<p>The first skill in ball control is, of course, actually getting the ball in your possession. To be able to do so, you must be able to instantly put your men where the ball will end up. This requires some training, for which we have the following exercises:<\/p>\r\n\r\n<ul>\r\n\t<li>(randomly) Passing the ball back and forth between two of your rods. Of course, if you can&rsquo;t pass at all this is good because then the ball is moved in random directions. However, once you get better this exercise is useless, as people can&rsquo;t be completely random. One way to fix this though, is to put a small book or something under one of your table&rsquo;s legs, so that every ball you shoot is curved into a certain direction, making everything a bit harder (and more random).<\/li>\r\n\t<li>Ask someone to shoot balls at goal, and try to save them.<\/li>\r\n\t<li>Push\/shoot the ball against the wall with your man. This way the ball bounces off in a random direction, and then it&rsquo;s your turn to quickly stop that ball.<\/li>\r\n\t<li>Something a bit more advanced: ask someone to shoot at your goal from their defense. Try to position your midfield and attackers in such a way that you can stop every ball.<\/li>\r\n<\/ul>\r\n\r\n<p>A tip: angle your men a bit backward, so that a ball is slowed down very much when it hits your players, that way it&rsquo;s easier to control the ball and it doesn&rsquo;t bounce away.<\/p>\r\n\r\n<h5>2. Keeping a ball in your possession<\/h5>\r\n\r\n<p>The next thing you want to learn is keeping the ball in your possession after you&rsquo;ve had your first touch.<\/p>\r\n\r\n<p>The basic rule is that you always keep in mind where a ball will go. If a ball from the right is stopped by your man, it will of course bounce back to the right a bit. If a ball is traveling diagonally downwards the table, you know that once you hit the ball it won&rsquo;t just neatly bounce back in front of you, so prepare for that.<\/p>\r\n\r\n<p>A really good defender will always be able to make any ball coming towards him bounce off in such a way that (s)he keeps the ball. For example, I once played against a really good defender, and every angled ball that hit his defenders, would bounce off vertically to his other defender, so that he almost always immediately had an open shot at goal.<\/p>\r\n\r\n<ul>\r\n\t<li>Put the ball down before the feet of one of your man. Now just start moving the ball back and forth, left and right a bit, but keep it in possession. If you feel really kinky today, try moving the ball from one of your men to another (still making sure the ball is never lost!)<\/li>\r\n\t<li>Ask someone else to shoot balls at you (or try to roll them in yourself, but it&rsquo;s quite hard to do properly), from all possible angles. Your task is to immediately adequately stop a ball.<\/li>\r\n<\/ul>\r\n\r\n<p>A tip: there are basically 2 ways to keep a ball in your team. The first one is the safest one, the second one is harder but much more difficult for the opposing team to handle.<\/p>\r\n\r\n<p>The first method can be applied to all types of shots: angle your men backward, and just follow the path of the ball until it stopped at your feet.<\/p>\r\n\r\n<p>The second method is different for every shot.<\/p>\r\n\r\n<ul>\r\n\t<li>Shots coming from the side (angled shots): hit the ball with the side of your man, so that it is immediately passed to another men of yours.<\/li>\r\n\t<li>Straight shots: these can be shot back immediately. Why? Because usually when somebody shoots a straight shot, performing the shot doesn&rsquo;t keep his men in the same position. Therefore, if you&rsquo;re quick, there should be some easy shots (either straight or slightly angled (most shots aren&rsquo;t perfectly straight)) you can just shoot.<\/li>\r\n<\/ul>\r\n\r\n<h5>3. Pinning a ball<\/strong><\/h5>\r\n\r\n<img src=\"media\/Foosball02.png\" \/>\r\n\r\n<p>Once you&rsquo;ve mastered the basic controls, and you (almost) never lose any balls anymore, it&rsquo;s time to go advanced, and make sure every ball coming towards you is immediately in your possession. This is where pinning comes into play.<\/p>\r\n\r\n<p>As said earlier, pinning is when you trap the ball between the toe\/heel of your man and the field. As long as you don&rsquo;t lift your man, the ball isn&rsquo;t going anywhere. Therefore, if executed properly this is the best way to catch any ball and then keep it in the team. However, at first it&rsquo;s very hard to get the right timing when trying to pin, but with the following exercises you should be able to master this craft!<\/p>\r\n\r\n<ul>\r\n\t<li>Move the ball back and forth on one of your men. Choose a man, and put the ball under it in &lsquo;back pin&rsquo; position. Now try to let go of the pin, and move the ball a bit forward. While doing so, rotate your man and do a front pin. Now do the same thing but backwards. Repeat.<\/li>\r\n\t<li>Shoot the ball from any rod on the table to your next rod. Try to immediately pin the ball on the receiver side. NOTE: Try it from both sides. For example, first shoot with your midfield to your attackers (and let your attacker pin the ball with a front pin). Then shoot from your attackers to your midfield (and let the midfield do a back pin). Why should you try it both directions? Because the first direction is for when you&rsquo;re attacking, and the other way is useful for when you&rsquo;re defending.<\/li>\r\n<\/ul>\r\n","slur":"foosball-table-soccer-ball-control","cat":"Sports","subcat":"Foosball","video":"","diff":"2","quiz":""},
{"id":"54","title":"[Foosball] Passing","post":"<p>Now that you&rsquo;re able to catch a ball and keep it in your team, it&rsquo;s time for you to do something useful with it (like scoring some goals). Many people who start playing foosball only know how to shoot. In fact, they think all you do in foosball is very rapidly shoot balls towards the opponent&rsquo;s goal. But the truth is: learning to pass the ball is perhaps more important than being able to score a goal out of it. Why? Properly passing a ball will create a lot of chances in front of goal for you. Then it doesn&rsquo;t matter how good your opponent is at defending, at least a few of your big amount of chances should go in.<\/p> \r\n\r\n<h2>Two different ways to pass that ball<\/h2>\r\n\r\n<p>Passing a ball in foosball is a very subtle thing. Overpowering a pass almost never does you any good, at least not if you&rsquo;re a world class player. There are 2 types of passes, which we can categorise as&nbsp; <strong>vertical (on the same rod)<\/strong>&nbsp; and&nbsp; <strong>horizontal<\/strong>&nbsp; <strong>(between the different rods)<\/strong>.<\/p>\r\n\r\n<p><strong>Vertical<\/strong>&nbsp; passing means passing from one man to another on the same rod. How to do this? Pushing or pulling the ball with the side of your man. Then receive that ball with the side of one of the other men on the rod. Why is this useful? Constantly passing on the same rod will make it difficult for the opponent to keep following and defending you. Therefore it creates holes through which you can then horizontally pass to the next rod.<\/p>\r\n\r\n<p>Some tips: it&rsquo;s hard to pass vertically and perfectly straight. Therefore from time to time a ball will roll a bit away from the rod. Then it&rsquo;s your turn to show the world your ball control skills, and keep that ball in possession.<br \/>\r\nAlso, receiving a ball with the side of your man is quite hard, because a ball can easily bounce off in weird directions. Therefore, when passing vertically it&rsquo;s best to slowly slow down a ball. This means that the receiver follows the direction of the ball for a about an inch so that the ball is eventually stopped right before his feet.<\/p>\r\n\r\n<p><strong>Horizontal&nbsp; <\/strong>passing means passing from one rod to another (usually forward, but in some situations it could be quite surprising to suddenly pass backwards, I must say). Passing this way, the ball usually moves a bit slower than actual shooting, which means that a straight pass is easily intercepted by the opponent. Therefore, for horizontal passing we use the&nbsp; <strong>brush pass<\/strong>&nbsp; method.<\/p>\r\n\r\n<p><img src=\"media\/Foosball03.png\" \/><\/p>\r\n\r\n<p>When you brush pass, you gently brush the ball in a certain direction. This gives you almost 100% certainty that the ball will go in the direction you wanted. The only downside is that the ball moves a bit slower, so against really good opponents you should try to do it faster, but most of the time brush passes aren&rsquo;t easily defended against.<\/p>\r\n\r\n<p>Of course, the whole thing can be reversed to pass the ball downwards. The ball can also be shot via the walls of the table if you like (which is awesome, you should train yourself to be able to do so!).<\/p>\r\n","slur":"foosball-table-soccer-passing","cat":"Sports","subcat":"Foosball","video":"","diff":"2","quiz":""},
{"id":"55","title":"[Foosball] Shooting","post":"<p>With shooting it is really a trade-off between accuracy and power. You can shoot a ball blazing fast, but then you lose control and won&rsquo;t be able to aim it accurately. On the other hand, there are shot types that have a certain speed limit, but are very hard to defend against yet easy to place in the corner.<\/p> \r\n\r\n<h2>Three different ways to shoot that ball<\/h2>\r\n\r\n<p>There are 3 main ways to shoot a ball:<strong>&nbsp; wrist flick<\/strong>,&nbsp; <strong>handle roll<\/strong>&nbsp; and&nbsp; <strong>backflip<\/strong>.<\/p>\r\n\r\n<p>The&nbsp; <strong>wrist flick<\/strong>&nbsp; is the most standard shot that everybody knows. It&rsquo;s basically just throwing\/flicking your wrist down while holding the handle, which makes the handle quickly rotate.<\/p>\r\n\r\n<p>NOTE: Do not flick your hand down, as this just puts pressure on the rod and makes twisting it harder. Think of it as turning your wrist until it can&rsquo;t be rotated further, it &lsquo;locks&rsquo;. This might sound dangerous, but it really isn&rsquo;t. So when doing the wrist flick, just rotate your wrist with all the power you have until it can&rsquo;t go any further.<\/p>\r\n\r\n<p>This is the easiest one to execute and the easiest one to keep control over the ball with, but it&rsquo;s also the slowest one.<\/p>\r\n\r\n<p>The&nbsp; <strong>handle roll<\/strong>&nbsp; can, if trained properly, be executed just as quick and precise as the wrist flick, but it&rsquo;s a much faster shot. A handle roll means, as the name implies, rolling the handle in your hand. For this to happen, you need to partially let go of the handle, and only let the palm of your hand touch it. Now, without losing touch, you can roll the handle, making your man swing. This can be done very quickly, the only difficulty here is switching from your normal grip to a handle roll (but as I said, training is the key).<\/p>\r\n\r\n<p>The&nbsp; <strong>backflip<\/strong>&nbsp; is a blazing fast shot, but requires a lot from a player to be executed properly. You need to switch to a difficult grip, the timing is different, and control is almost impossible without <em>a lot<\/em> of practice. Anyhow, the fun thing about backflips is that they are so fast that the opponent could never react in time, and even if you miss it makes the ball do unexpected things. To do one, your hand needs to let go of the handle, and only let your wrist touch it. If you then quickly move your hand up, until you&rsquo;re able to grab the handle again, your man should have made a full flip. This is allowed, as seen that it hits the ball just before the full flip is done.<\/p>\r\n\r\n<h2>Shooting (on goal): a few examples<\/h2>\r\n\r\n<p>Once you know the different techniques available, it&rsquo;s time for you to start being creative. There are numerous ways to shoot on goal, which mostly depend on your position on the field and your opponent&rsquo;s defence.<\/p>\r\n\r\n<p>We shall first discuss the possibilities for your&nbsp; <strong><em>ATTACKER<\/em><\/strong>&nbsp; rod:<\/p>\r\n\r\n<p><em>The&nbsp; <strong>black<\/strong>&nbsp; arrows indicate shots that can be taken immediately at goal.<\/em><br \/>\r\n<em>The&nbsp; <strong>brown<\/strong>&nbsp; arrows indicate that you can of course always pass to another man.<\/em><br \/>\r\n<em>The&nbsp; <strong>red<\/strong>&nbsp; arrows indicate that you can also move (pull\/push) the ball a bit and then shoot.<\/em><\/p>\r\n\r\n<p>Please note: the size of the men is a bit bigger in the drawings than in real life, and the blue men in the drawings are just an example of a possible defence.<\/p>\r\n\r\n<p><strong>The Middle Man (of the 3-rod)<\/strong><\/p>\r\n\r\n<p><img src=\"media\/Foosball04.png\" \/><\/p>\r\n\r\n<p><strong>The Outer Man (of the 3-rod)<\/strong><\/p>\r\n\r\n<p><img src=\"media\/Foosball05.png\" \/><\/p>\r\n\r\n<h2>Famous Shots<\/h2>\r\n\r\n<p>The&nbsp; <strong>push shot<\/strong>: using the middle man, move a bit up and then shoot the ball straight into the upper corner of the goal.<br \/>\r\nThe&nbsp; <strong>pull shot:<\/strong>&nbsp; reverse of the push shot. Move the middle man down and shoot the ball straight into the lower corner of the goal.<\/p>\r\n\r\n<p>The&nbsp; <strong>pull-kick:<\/strong>&nbsp; starting with the upper-man of the 3-rod, pull the ball to the middle man, and then rapidly shoot with that man.<br \/>\r\nThe&nbsp; <strong>push-kick:<\/strong>&nbsp; reverse of pull-kick. Start with the lowest man of the 3-rod, push the ball to the middle man, and shoot.<\/p>\r\n\r\n<p>The&nbsp; <strong>snake shot:<\/strong>&nbsp; start with the ball in front pin for your middle man. Then slightly move either left or right, lifting your man off the ball in the process, and then at a certain moment (usually you&rsquo;re your man is as far right or left as it can be) shoot straight at goal. Can be done with a backflip as well.<br \/>\r\nThe&nbsp; <strong>push\/pull shot<\/strong>&nbsp; (using your outer man): start with one of the men on the outside of the 3-rod, and the ball inwards. Then move the ball towards the middle a bit (keep the ball close to your man!), and then shoot at an angle (towards the far post) or straight (into the near post).<\/p>\r\n\r\n<p>The&nbsp; <strong>spray shot:<\/strong>&nbsp; any angled shot is called a &lsquo;spray shot&rsquo;. Angled shots are very hard to defend against, but are also very hard to master as an attacker. The angle of a shot is determined by the angle a ball&rsquo;s traveling in the moment it&rsquo;s released from the man. Once the ball is released, it will always keep traveling in the same direction until it hits something. That is, unless a certain effect is put on the ball, but it&rsquo;s very very hard to consciously put an effect on the ball.<\/p>\r\n\r\n<p><img src=\"media\/Foosball06.png\" \/><\/p>\r\n\r\n<p>And now that that&rsquo;s discussed, you of course also want to know what the possibilities are for your&nbsp; <strong><em>DEFENDERS<\/em><\/strong>&nbsp; rod to score:<\/p>\r\n\r\n<p><img src=\"media\/Foosball07.png\" \/><\/p>\r\n","slur":"foosball-table-soccer-shooting","cat":"Sports","subcat":"Foosball","video":"","diff":"3","quiz":""},
{"id":"56","title":"[Foosball] Defending with goalkeeper + defenders","post":"<p>A great defending team always wins a foosball match. Because, if a team effectively takes away all the possibilities for the opponent to score, they will not get any goals scored against them, which in turn automatically makes winning a lot easier. And in foosball, every moment the other team has the ball, you should be defending.<\/p> \r\n\r\n<p>Many people make the mistake thinking that only the <em>goalkeeper + defenders<\/em> are for defence, and they rely completely on those to save every shot. But truth is, those two just can&rsquo;t save every shot. Plus, the earlier you intercept the ball, the earlier you can start attacking&nbsp;<\/p>\r\n\r\n<p>What I&rsquo;m saying is: the person holding the midfield and attackers has an equally important defensive position as the person holding the goalkeeper and defenders. Below I will show you different situations in the game and the best way for the defending player to behave\/move. The attacking player&rsquo;s duties will be discussed next chapter.<\/p>\r\n\r\n<h2>Defending against opponent&rsquo;s goalkeeper + defenders<\/h2>\r\n\r\n<p>If you&rsquo;re holding the defending rods, you should always be alert. Wherever the ball is in the field, there&rsquo;s always a good chance it will come flying towards goal. Your goal as a defender is: any ball that comes near your 2-rod (the defenders) should be stopped and controlled there. Most of the time, a shot will end up hitting the wall next to your goal or hitting your keeper and bouncing off, and then you need to be able to keep that ball in possession in the defensive area.<\/p>\r\n\r\n<p>In short, what you have to do is: check out which possibilities the opponent has to score, and try to cover the easiest shots (when you&rsquo;re able to draw a line from the ball directly into your goal, that shot is so-called &lsquo;open&rsquo;). This way you either force your opponent to shoot a ball which will never get into the goal or to try and shoot a very difficult shot (which will most of the time also just make the ball end up in your defensive zone because he failed).<\/p>\r\n\r\n<p>When the ball is somewhere around midfield or further up the field, there&rsquo;s the following setup ( = set of rules for yourself) you can use as a defender:<\/p>\r\n\r\n<p>If the defender&rsquo;s vertical position is within the range of your goal, there are straight shots available which you need to defend. This can be done by placing your men about one cm apart, and aligning this gap with the straight shot the opponent can make. This gap looks like an open shot, but is too small for a ball to actually go through it.<\/p>\r\n\r\n<p>Now there are only a few options left for the opponent: shooting a quite difficult angled shot precisely into the corner of the goal, or pulling\/pushing the ball and then shooting it straight (which is even harder to do), or shooting it via the walls (which is almost impossible). However, most options are blocked, and if your midfield + attacker rods are also defending, the opponent should never be able to score from this position.<\/p>\r\n\r\n<p>NOTE: It depends a bit on your qualities and your playing style whether you should rotate your men a bit on this one or not. Why? If you rotate your front man a bit backward, so that its toe is pointing forward, the man has a bigger range of shots it will intercept, but if it hits the ball, the ball will most likely bounce off to the opponent&rsquo;s 3-rod. If you rotate your front man a bit forward, with toe pointing at your own goal, it has a smaller interception range, but each ball it intercepts will stay in your possession. You have to ask yourself the question: are my reflexes quick enough to make up for that loss of range?<\/p>\r\n\r\n<p><img src=\"media\/Foosball08.png\" \/> <img src=\"media\/Foosball09.png\" \/><\/p>\r\n\r\n<p>(The vague dark green men in the picture show the best setup for if the ball is on the lower part of the table) If the opponent has no straight option available, it can only try angled shots at goal. In that case, defending the near post is always the best option, as seen that getting the ball there is much easier than in the far corner. There&rsquo;s also an option available for the opposing team to shoot between your 2 men, but this is an almost impossible shot from that far.<\/p>\r\n\r\n<p>In this case though, pushing\/pulling the ball is a much easier thing to do, and many goals are scored this way from the defensive line. With the setup shown above a lot of these push\/pulls are guarded, but you still need to keep an eye open for these kind of shots. Those shots are usually a bit slower, so if you see one coming you should have enough time to move one of your men to that ball. Any other shot: do not move your defences.<\/p>\r\n\r\n<h2>Defending against the 3-rod<\/h2>\r\n\r\n<p>Now, if the ball is on the opponent&rsquo;s 3-rod (attackers), things get a little bit trickier. The distance between the 3-rod and your goal is not so big anymore, which makes a lot of &lsquo;easy&rsquo; shots available. Though, the techniques described above are still the best way to defend, so you&rsquo;ll also need to apply those when defending against the 3-rod.<\/p>\r\n\r\n<p>Therefore, the only way to really excel in defending here, is to first of all have great reflexes and positioning, but most of all use&nbsp; <strong>psychological defense<\/strong>.<\/p>\r\n\r\n<p>Why the reflexes? Well, with every change of position of the men, or the ball, you need to instantly know what to do and setup your defences correctly.<\/p>\r\n\r\n<p>But, a better way to defend is to not let your attacker control you, but make the attacker do as you wish. This is called psychological defence, and it takes some experience (and a bit of poker face) to get used to it.<\/p>\r\n\r\n<p>What usually happens when the attacker receives the ball on the 3-rod is this: they get the ball, they control the ball, they look at an opening in your defence, they set up the ball, they shoot.<\/p>\r\n\r\n<p>While they get the ball and control it, you need to get your defensive men in the best positions (as described above). Then the attacker will look at your defence, and now it&rsquo;s your job to accurately estimate when the attacker is done looking at your defence and is setting up the shot.<\/p>\r\n\r\n<p>Because once your opponent has seen your defence, he probably won&rsquo;t look again and will start looking for a different shot than a straight one. That will give you an opportunity to stop covering the straight shots (which is what your goalkeeper is doing), and start covering all other shots (with that same goalkeeper of course).<\/p>\r\n\r\n<p><img src=\"media\/Foosball10.png\" \/><\/p>\r\n\r\n<p>NOTE: This of course only works for the middle man of the 3-rod, all other men on the rod don&rsquo;t have any straight options available, and are less likely to score, which is why a somewhat professional attacker most of the time brings the ball to the middle man.<\/p>\r\n\r\n<h2>An example<\/h2>\r\n\r\n<p>First you see the best possible position for your men to be in, and an attacker with (roughly) all its scoring opportunities. If someone has checked out your defence and saw that a straight shot is hopeless, he&rsquo;ll soon spot an open gap and try to get it there. That&rsquo;s the moment where you subtly move your keeper to the other side (and your defender a little bit upwards to make it look like the straight shot is still covered, just in case), so that almost all holes are covered. And the attacker probably won&rsquo;t see the straight one.<\/p>\r\n\r\n<p>The reverse is also possible: make it look like a very easy shot can be made, but in reality have it covered. An example of this could be where you leave a certain shot just open, and when the attacker shoots you quickly close it (and because it was &lsquo;just&rsquo; open you can do this very rapidly, because you don&rsquo;t have to move much).<\/p>\r\n","slur":"foosball-table-soccer-defending-goalkeeper","cat":"Sports","subcat":"Foosball","video":"","diff":"4","quiz":""},
{"id":"57","title":"[Foosball] Defending with midfield + attackers","post":"<p>Your midfield has 5 men on it, your attacking zone has 3. A quick calculation shows that the majority of your men are in that part of the field. Therefore, if you position both rods correctly, you should be able to block any dangerous shots on goal.<\/p> \r\n\r\n<p><img src=\"media\/Foosball11.png\" \/><\/p>\r\n\r\n<p>The idea is, just as with defence, that you don&rsquo;t cover the same hole twice. Therefore, your attacker should always be right in front of the opponent&rsquo;s defensive man, and your midfield should always have 2 people covering the holes next to your attacker. If your opponent is shooting from the side of the table a bit, it&rsquo;s wise to place your attacker a little bit closer to the goal (so it has a slight angle with the defenders), as any shot taken from the side at goal is angled.<\/p>\r\n\r\n<p>But, what&rsquo;s perhaps even more important, is your control over the midfield. Once the ball is around the opponent&rsquo;s midfield, that&rsquo;s your best chance to stop the attack from the other team and start attacking yourself. Why? Because the midfield is hard to control, but &lsquo;easy&rsquo; to defend (as seen that you have 5 men).<\/p>\r\n\r\n<p>Let&rsquo;s first tell you how you don&rsquo;t lose the ball in midfield (<strong><em>attacking<\/em><\/strong>). Earlier, we told you everything about the so-called&nbsp; <strong>Brush Pass<\/strong>&nbsp; (a soft pass that can be very accurately angled), and that&rsquo;s the way to go when passing with the midfield (really, master that skill). Once you can do that quickly and swiftly, you can learn passing the ball around on your 5-rod, as this will force the opponent to reposition all the time, and that&rsquo;s hard to do with the 5-rod. Also, performing a brush pass via the walls almost always throws off an opponent&nbsp;<\/p>\r\n\r\n<p>When we take&nbsp; <strong><em>defending<\/em><\/strong>&nbsp; with the midfield into concern, we see that the best way to do this is not by rotating the man to make the toe point forwards, but to make the toes point backwards. Why? Angling the toe to the front gives you a better chance at intercepting the ball, but almost always immediately gives the ball back to your opponent, which you don&rsquo;t want to happen. If you angle them the other way around, every ball intercepted will stop and be in your possession thereafter.<\/p>\r\n\r\n<p>But, how do we intercept that ball? Well, just assume that your opponent can do brush passes just like you. Move your midfield a bit (up\/down) all the time, kind of circling around all the options the opponent has (though, keep changing speed and range all the time, otherwise the opponent can predict when you will leave which hole uncovered). If he&rsquo;s lucky, he&rsquo;ll sneak a ball past you, but otherwise every possible pass should be intercepted. Once the ball is in your possession, pass it quickly!<\/p>\r\n","slur":"foosball-table-soccer-defending-midfield","cat":"Sports","subcat":"Foosball","video":"","diff":"3","quiz":""},
{"id":"58","title":"[Foosball] Tips and Tricks","post":"<p>Okay, once you know all this, you&rsquo;re left with a lot of different things you can do and techniques you can use, but that still doesn&rsquo;t completely make your game. What you should develop is a professional playing style, which can be achieved by trying to implement the following tips &amp; tricks:<\/p> \r\n\r\n<p>First of all, keep in mind&nbsp; <strong>pace and surprise<\/strong>. What can really throw off other players are changes in speed and action. Sometimes you can take it very <em>very<\/em> slow, and then suddenly accelerate. You can slowly pass the ball between men for a few seconds, and then suddenly shoot. Or the other way around, quickly tic-tac the ball and then do a slow angled (\/spray) shot. And perhaps you&rsquo;ve been doing the same shot 10 times this match, now try something else to surprise the others. Just know that, playing with a different&nbsp; rhythm than your opponent, basically forcing the opponent to follow your rhythm instead of their own, can help a great deal in winning (psychologically).<\/p>\r\n\r\n<p>Try to&nbsp; <strong>read the enemy<\/strong>: try to figure out their playing style, their best or favourite tricks, their way of defending &ndash; and then adapt. For example, I&rsquo;ve taught you the best defensive positioning, but a smart player will see that you constantly use these tactics, and won&rsquo;t even bother trying some shots anymore, but will move straight on to the few shots that do work!<\/p>\r\n\r\n<p>And last but not least: there are many little things, little tips and tricks for yourself, that you learn on the way, just playing and trying out. Always try to improve your game.<\/p>\r\n","slur":"foosball-table-soccer-tips-tricks","cat":"Sports","subcat":"Foosball","video":"","diff":"4","quiz":""},
{"id":"59","title":"How to Mix & Master Audio","post":"<p>Mixing audio has become a somewhat popular term lately, just as lots of people have a job during the day and are a DJ at night. While audio mixing is especially vital to that kind of music, it actually plays an important role everywhere in the music industry. If you want to produce your own album, or maybe just want a single song you&rsquo;ve written to be recorded professionally, you&rsquo;ll have to learn what makes the audio mixing and mastering business tick.<\/p> \r\n\r\n<p>This guide will try to give you the best options for your tools and software, but most of its articles will be spend on basic theory of sound and the core mixing tools and strategies. These are universally represented, which means you should be able to adapt them to your own situation without any problems.<\/p>\r\n\r\n<p>The first chapter will be all about what software and hardware you need, so I recommend you read through that (or have your own choice of setup installed) before doing anything else.<\/p>\r\n\r\n<h2>Overview of Contents:<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Choosing a DAW &amp; Tools<\/li>\r\n\t<li>Audio and Sound Waves Theory<\/li>\r\n\t<li>Terminology &amp; Common Practices.<\/li>\r\n\t<li>Monitoring<\/li>\r\n\t<li>Core Controls &ndash; Volume &amp; Panning<\/li>\r\n\t<li>Core Controls &ndash; Timing &amp; Automation<\/li>\r\n\t<li>Compression<\/li>\r\n\t<li>EQ<\/li>\r\n\t<li>Delay &amp; Reverb<\/li>\r\n\t<li>Tips &amp; Tricks<\/li>\r\n<\/ol>\r\n","slur":"how-to-mix-master-audio","cat":"Music","subcat":"Music Mixing","video":"","diff":"1","quiz":""},
{"id":"60","title":"[Mixing] Choosing a DAW & Tools","post":"<p>DAW stands for <strong>Digital Audio Workstation<\/strong>, and is basically software that enables you to work with audio files &ndash; edit them, mix them, etcetera. There are multiple ones out there, and most of them have quite a high price attached to them, but there is a free tool if you&rsquo;re not ready to spend that much.<\/p> \r\n\r\n<ul>\r\n\t<li><strong>(Free) Audacity<\/strong>. It has existed for a long time, and is the most popular DAW for people just starting out with recording their own songs or compositions. It has a vast amount of features (especially for a free tool), and can be your first step into the business. You can play around with it a bit to get a feeling of what the world of audio mixing is like, but after a while you&rsquo;ll notice the limits of the software and will need to upgrade. It is your decision whether you want to first learn audacity&rsquo;s workflow and interface.<\/li>\r\n\t<li><strong>(I use this one) PreSonus Studio One<\/strong>. The interface, overall look and workflow are better than in any DAW I&rsquo;ve ever tried. It has all the features you will ever need, but still makes it easy for beginners to start using it to its full capacity.<\/li>\r\n\t<li><strong>Ableton Live<\/strong>. Another big player in the industry, and is most known for creating instrumental tracks. It does support recording audio\/vocals, but it was originally meant as a software for live mixing, and it still has the best feature set if you want to create dubstep or dance music.<\/li>\r\n\t<li><strong>Propellorhead Reason<\/strong>. Doesn&rsquo;t support audio recording, but is focused on instruments. It is therefore by far the best tool if you are creating instrumental tracks and want all possible options and variations in the world.<\/li>\r\n\t<li><strong>Cubase<\/strong>. It is cheaper and more abstract\/difficult for newcomers, but its lower price tag and long-time existence makes lots of people use it.<\/li>\r\n\t<li><strong>Pro Tools<\/strong>. I&rsquo;ve never used it, and I&rsquo;ve seen lots of people migrate from this one to studio one. It does however offer roughly the same amount and type of features, and is often called the Windows equivalent of Logic Pro. It has the biggest use rate amongst professional studios that don&rsquo;t use Apple devices.<\/li>\r\n\t<li><strong>(I&rsquo;ve used this one) Logic Pro<\/strong>. Mac only. If you own a Mac, there&rsquo;s usually already a small sort of DAW installed that is called <strong>GarageBand<\/strong>. It is perfect for people playing around with mixing and mastering, and people who don&rsquo;t need a lot of special options. If you do want more professionalism, you can use Logic Pro, which looks, feels and works mostly the same as GarageBand. I can recommend it, I only stopped using it because my Mac died.<\/li>\r\n<\/ul>\r\n\r\n<h2>Choosing your tools<\/h2>\r\n\r\n<p>With tools, I mean what you&rsquo;re going to record with. What you&rsquo;re using to listen to the sound is also important, but that is discussed in another chapter (monitoring).<\/p>\r\n\r\n<p><strong>Microphone<\/strong>. A microphone is needed to record any audio, like vocals, guitar strumming, etc. The proper ones start from a price of about 100-150 euros, and I have one in that range that has worked well for me for more than six years now.<\/p>\r\n\r\n<p><strong>MIDI Device. <\/strong>Usually, it&rsquo;s a keyboard, but there are alternatives. It is basically a device where you can press buttons and turn around switches and all, and it will send those signals to the computer. Then your DAW will interpret them as the tones of an instrument, and that&rsquo;s how you can emulate lots of instruments. A good keyboard usually also starts from about 100 euros.<\/p>\r\n\r\n<p><strong>Audio Device or Audio Interface.<\/strong> For a small setup, this is not needed. Your computer or laptop probably has enough USB ports to plug in the necessary items, or you can just swap them whenever you need one. However, if you want to record multiple things at the same time, or you want to have a setup where you never need to change or fiddle with it, you need an audio device. It&rsquo;s a big heavy box that has lots of inputs, and (sometimes lots of) outputs. It also has some buttons on them with which you can already edit, alter and mix some of the sounds before or while they are put into the DAW.<\/p>\r\n\r\n<h2>Getting ready to Roll!<\/h2>\r\n\r\n<p>Now that you have all the tools you need, you might be tempted to think you can immediately start recording. But I have to disappoint you. Music mixing does not mean &lsquo;magically making audio sound amazing&rsquo;. You can use MIDI instruments if you&rsquo;re okay with the way they sound, but if you for example want to record vocals, you&rsquo;ll need to practice singing the song before pressing the big record button. With some effects, you can make your voice stronger, fuller and correct some very tiny mistakes in pitch &ndash; but that&rsquo;s absolutely as far as you can go.<\/p>\r\n\r\n<p>For example, for recording guitar, the sound of strumming and switching between notes or chords is also needed to create a proper recording. All I&rsquo;m saying is: you&rsquo;ll still need instruments and some skill with them to create a song.<\/p>\r\n\r\n<p>Now you are ready to go! The first few chapters are about terminology and theory behind mixing &amp; mastering &ndash; if you&rsquo;re going to read something, at least read that. There&rsquo;s a chapter about monitoring, but if you don&rsquo;t have the money to spend on high quality monitoring systems you can skip the smaller section about that as well.<\/p>\r\n","slur":"choosing-DAW-tools","cat":"Music","subcat":"Music Mixing","video":"","diff":"1","quiz":""},
{"id":"61","title":"[Mixing] Audio and Sound Waves Theory","post":"<p>You&rsquo;ve probably already seen some of this at high school physics class, and thought &lsquo;well, what is this useful for?&rsquo; at the time. This is the moment you&rsquo;ve been waiting for.<\/p> \r\n\r\n<p>When mixing audio, you&rsquo;ll be working with audio files. Audio files are files that have 0&rsquo;s and 1&rsquo;s in them that represent a sound wave. There&rsquo;s certain aspects we can change with the computer, and some that we just simply can&rsquo;t &ndash; or at least not without a lot of special effects. To understand why this is, and to understand why certain actions have a certain effect, you&rsquo;ll need to know the theory behind audio.<\/p>\r\n\r\n<h2>Sound Waves<\/h2>\r\n\r\n<p>In its purest form, a sound can be represented as a sine wave. Sound is a longitudinal wave, which means it has spots where the air molecules are pressed together alternating with spots that have more space between them. These differences in pressure are interpreted by our ears as sound.<\/p>\r\n\r\n<p>But, trying to easily represent a wave made of compressed and not-so-compressed parts is hard, so we use the normal representation of waves: a sine graph.<\/p>\r\n\r\n<p><img src=\"media\/SoundSineWave-01.png\" \/><\/p>\r\n\r\n<p>A sine wave has two important properties:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Amplitude:<\/strong> How far away from the centerline the highest (and lowest) points are. A greater amplitude means a louder sound.<\/li>\r\n\t<li><strong>Frequency <\/strong>(in <strong>Hz<\/strong>)<strong>:<\/strong> How many times it loops through (or &lsquo;completes&rsquo;) a full period, per second. A higher frequency, means a higher pitch.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Decibel Scale<\/h2>\r\n\r\n<p>The decibel scale (dB) is used to represent how loud a sound is. However, it is not a convenient linear scale:<\/p>\r\n\r\n<ul>\r\n\t<li>+3 dB means that the power of the wave is multiplied by 2<\/li>\r\n\t<li>+10 dB means the power of the wave is multiplied by 10<\/li>\r\n<\/ul>\r\n\r\n<p><em>Power of the sound wave?<\/em> A wave basically transports energy. The power of a wave is the amount of Joules it transfers per second. Every sound therefore has a different perceived loudness which is based on its power. The formula is:<\/p>\r\n\r\n<p>Power = log( W ) - 12<\/p>\r\n\r\n<p>The take away from this is that you can&rsquo;t easily relate a change in decibel to a change in power\/volume. For example, say your track is at a level of 35 decibel, and you increase it with 3 decibel. Then the power of your sound isn&rsquo;t multiplied with (38\/35), but it increases logarithmically. You must therefore be careful with dB increases and decreases, and a track that&rsquo;s too loud may permanently damage someone&rsquo;s audio system, while a track that&rsquo;s too soft can only be increased in volume by a limited amount until the recording becomes nothing but noise. Record and mix at appropriate levels.<\/p>\r\n\r\n<h2>Frequencies<\/h2>\r\n\r\n<p>A regular human being can hear frequencies between 20 and 20,000 Hz. This seems like quite a lot, but there&rsquo;s one thing you should know &ndash; frequencies also are a logarithmic scale.<\/p>\r\n\r\n<p>If you for example increase a sound&rsquo;s pitch from 20 Hz to 40 Hz, you&rsquo;re not just making it a little higher, you&rsquo;re actually moving upwards a whole octave! Therefore, subtle differences in low frequency ranges are much more important (or disturbing) than ones in higher ranges.<\/p>\r\n\r\n<p>In order to mix music properly, you&rsquo;ll need to know what range a certain instrument can play, and you&rsquo;ll need to be able to quickly guess what frequencies you&rsquo;re hearing. If you&rsquo;re listening to your recording and you&rsquo;re hearing some notes in the low or high end you don&rsquo;t like and want to cancel out, you don&rsquo;t want to search for 30 minutes until you&rsquo;ve found it &ndash; you want to be able to fix it within minutes.<\/p>\r\n\r\n<h2>Actual Audio<\/h2>\r\n\r\n<p>I&rsquo;ve just described some very basic theory behind sounds, but that&rsquo;s not how it works in the real world. You never hear only one pure sound wave.<\/p>\r\n\r\n<p>When you strum a guitar, you&rsquo;re pressing the strings with your fingers to create a certain note. You might think &lsquo;hmm, I am playing an E, it sounds like an E, great!&rsquo;, but you&rsquo;re hearing much more than that. The guitar is one big <em>resonance box<\/em>, and what such a box does is create a space for your sound waves to bounce around in. When sounds are deflected off the walls of your wooden guitar, they increase in frequency and create so-called <em>overtones<\/em> or <em>harmonics<\/em>. Those are what create a full and beautiful sound. The same thing also happens with your voice: when you sing (with some proper vocal technique at least), you sing the note you want, and the sound travels into your skull and resonates there to create extra frequencies, and that creates a fuller, louder and nicer sound.<\/p>\r\n\r\n<p>So in reality, every sound you hear is a collection of a basic note (the <em>tonic<\/em>) that is the most prominent, and a collection of overtones surrounding it to give it some more life.<\/p>\r\n\r\n<p>What this has to do with mixing audio, is that you sometimes don&rsquo;t want these overtones or you want certain ones to be more prominent. If you&rsquo;ve recorded a guitar solo but it sounds too muddy or lifeless to you, you might have accidentally recorded some lower notes that you didn&rsquo;t want. That&rsquo;s what mixing is for: cutting out what you don&rsquo;t want, and enhancing what sounds great to you.<\/p>\r\n","slur":"audio-sound-waves-theory","cat":"Music","subcat":"Music Mixing","video":"","diff":"2","quiz":""},
{"id":"62","title":"[Mixing] Terminology & Common Practices","post":"<p>Before we can continue, I feel it is necessary to explain a lot of jargon that surrounds the music editing industry. Lots of difficult or seemingly irrelevant words are used for simple and basic concepts, and not knowing those can make it much harder for you to find your way around a DAW.<\/p> \r\n\r\n<p>I&rsquo;ll also include what I think is the best and most common way to setup new projects, master an album when you already have a collection of songs and optimal workflow.<\/p>\r\n\r\n<h2>Terminology<\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Monitoring.<\/strong> Listening to certain parts (or the whole) composition, with the intention of hearing whether there are any mistakes or if you like how it is now.<\/li>\r\n\t<li><strong>Track.<\/strong> A single part of the composition. The track can have an instrument fixed to it, or several audio files on it. A track can be <strong>muted<\/strong> (you don&rsquo;t hear it), <strong>solo&rsquo;d<\/strong> (you only hear this one) and be <strong>record enabled<\/strong> (if you press record, record the audio to this track).<\/li>\r\n\t<li><strong>Layers or Takes<\/strong>. These are not the same as tracks. They can be used if you have different recordings of the same piece of the song, and want to save them all. Most DAW&rsquo;s allow you to quickly cycle through them and pick some piece out of each to assemble the best possible audio for that part.<\/li>\r\n\t<li><strong>Envelope.<\/strong> A channel that is on almost every track\/instrument\/effect, that sits around it &lsquo;like an envelope&rsquo;. It is usually represented by two lines above and below (the track), and you can drag them around to determine volume at certain parts, in what ear to play the current track, etc.<\/li>\r\n\t<li><strong>Bus. <\/strong>A track that gets other tracks as input and can then apply something to all of them. You can see it as a way to group music-wise connected tracks, so you can apply the same effect on all of them.<\/li>\r\n\t<li><strong>Automation.<\/strong> Animating with keyframes. This means nothing more than setting different levels for certain settings within the same piece of audio\/midi.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Mono vs Stereo<\/h2>\r\n\r\n<p>Mono means that a sound is output on a single channel. If you have multiple speakers, both will output exactly the same sound, at every spot. Stereo is when the sound is output using two channels, LEFT and RIGHT. As most people nowadays have earplugs or headphones that support this, it is used most of the time, as it provides a much better experience.<\/p>\r\n\r\n<p>The rule here is: if your song sounds good in mono, it will sound good in stereo. If your song sounds good in stereo, you will need to check mono because you can&rsquo;t be sure. And while we&rsquo;re on the subject: checking a composition in mono is always a good idea, as it points out mistakes or things that just don&rsquo;t sound quite right yet.<\/p>\r\n\r\n<h2>Audio vs MIDI<\/h2>\r\n\r\n<p>These are the two main ways to record and create music. They both have their own purpose and workflow, and I&rsquo;ll touch on those only lightly here:<\/p>\r\n\r\n<p>Audio is recorded with a microphone. It represents raw recordings or something you sang or played in front of that mic. It is usually represented in the software by a sound wave with amplitudes showing volume at certain spots. Computers can&rsquo;t really analyze this, so you have to listen to hear what frequencies are in there, what the tempo is, etc. Audio is therefore best for vocals and guitar-like instruments (and drums, if you have multiple mics to record every piece separately).<\/p>\r\n\r\n<p>MIDI is recorded with a midi device, usually midi keyboard. It&rsquo;s a collection of notes, played at certain moments and for a certain amount of time. It is usually represented in the software by lots of small rectangles at different heights and with different lengths. Because the data is so basic, it can be applied to any instrument within your DAW. If you&rsquo;ve recorded a composition with your MIDI keyboard, you can assign a Grand Piano to the track and it will sound like it was played on that kind of instrument. MIDI is therefore best for creating artificial\/non-natural sounds or using instruments you don&rsquo;t have in your possession.<\/p>\r\n\r\n<img src=\"media\/AUDIOvsMIDI.png\" \/>\r\n\r\n<h2>Common Practices<\/h2>\r\n\r\n<p>First of all, it is recommended to start every project completely fresh &ndash; don&rsquo;t import or use a template, as it is most likely to hinder your creative process, or it will at least make all your productions sound the same.<\/p>\r\n\r\n<p>When you&rsquo;ve done that, I think it is wise to create <strong>buses.<\/strong> Create one for every group you&rsquo;re going to use (drums, bass, string, piano, guitars, etc.). If your DAW allows it, you can also create actual groups inside the software for them and put every track where it should be. If it doesn&rsquo;t however, just create all the tracks in a logical order.<\/p>\r\n\r\n<p><em>What is a logical order?<\/em> Well, it depends on your song, but it is always said that you should <strong>start with the most prominent or important instrument(s)<\/strong>. If your song has drum in it, start with that to get the rhythm right. If there&rsquo;s bass (which there almost always should be), use that to get the very basic notes and melodies right. If the main chord progression is played by a piano, bring that into play now. If there&rsquo;s some guitar melodies and a solo in there, only now start to add that.<\/p>\r\n\r\n<p>There is however some space for your own decisions here. If that guitar solo lasts 2 minutes and is the turning point of your song, you might want to start earlier in getting it right. If the chord progression on piano is playing through the whole song and always prominent, you might want to start earlier with that. It&rsquo;s up to you how you balance prominence and importance of instruments.<\/p>\r\n\r\n<p>I recommend color coding and correctly labeling all your tracks, as it gets messy before you know it. I also recommend first creating the optimal settings and effects for every <strong>bus<\/strong> before going in and tweaking individual instruments.<\/p>\r\n\r\n<h2>Wait until you&rsquo;re finished<\/h2>\r\n\r\n<p>Of course, while recording you want to make sure the recording is of a good quality, nothing went wrong, and you might want tweak it a little bit.<\/p>\r\n\r\n<p>But, I recommend you stop there and wait until you&rsquo;re finished recording everything before starting the mix process. Tweaking a single track to sound great is useless, if it sounds bad when playing along all the other instruments. First look at the track as a whole, and mixing that should make the song sound good enough to be produced. Then go in and tweak the little, subtle things to make it the best quality you can possibly get.<\/p>\r\n","slur":"mixing-mastering-terminology-common-practices","cat":"Music","subcat":"Music Mixing","video":"","diff":"2","quiz":""},
{"id":"63","title":"[Mixing] Monitoring","post":"<p>As explained earlier, monitoring is nothing more than listening to what you&rsquo;ve created (or specific parts of it), and trying to hear what is good and what is not. It is a vital part of the mixing process, as the room you&rsquo;re in and the speakers you use to listen to the music can modify the sound a lot. But what may be even more important, is improving your ability to correctly judge your own sound work.<\/p> \r\n\r\n<h2>Objective Listening<\/h2>\r\n\r\n<p>Obviously, listening to music and\/or playing an instrument yourself gives you a better musical hearing. But that is not all I&rsquo;m talking about here.<\/p>\r\n\r\n<p>Mixing music is all about optimizing recordings to sound good together. If you can&rsquo;t identify when something&rsquo;s wrong and what may be the cause, you&rsquo;ll just be randomly guessing at what could work. There isn&rsquo;t just a set of rules you can follow for this, it is all about experience and experimenting.<\/p>\r\n\r\n<p>Whenever you&rsquo;ve just edited something, play through the whole piece of audio. Preferably with your eyes closed and no other distractions. Don&rsquo;t try to listen for that specific, just let the sound reach you. Once you&rsquo;ve finished listening, you should decide for yourself: is this what I want? Is this better than what I previously had? Is this an improvement? Why is this an improvement, or why not? Answering these questions will give you more insight into what works well for you and what not.<\/p>\r\n\r\n<p>Also, as they work more and more on a song, people have a tendency to focus too much on a single thing and overlook others. If you&rsquo;ve been trying to get a specific piece of audio <em>just right<\/em> for a couple of <em>hours<\/em>, then that might indicate that you&rsquo;re being too harsh on yourself and it was fine a lot of versions ago. If you&rsquo;ve been editing a single instrument all day, you might be overdoing it or just doing things that aren&rsquo;t necessary, and you should stop and work on something else or listen to the song as a whole to get the complete picture again.<\/p>\r\n\r\n<h2>Speakers<\/h2>\r\n\r\n<p>All computers have a set of speakers, but those are generally not ultra-high quality. While they will do the job if you&rsquo;re just playing around a bit and trying stuff out, if you want to come close to any really professional mixing you will need to buy a new set of speakers.<\/p>\r\n\r\n<p>I won&rsquo;t give you a list of recommendations, just a few things to keep in mind:<\/p>\r\n\r\n<ul>\r\n\t<li>Yes, speakers cost quite a lot of money. Don&rsquo;t be tempted to buy cheap ones just because they look good or sound fine for all you know. If you listen to cheap ones, and then to the pricier ones, you will hear the difference.<\/li>\r\n\t<li>However, there&rsquo;s two things that can change with a price increase: the speaker will be able to play <strong>louder sounds<\/strong>, or the speaker will be able to play <strong>more sounds, more balanced<\/strong>. Working from your own room or studio, you don&rsquo;t need speakers that can produce the volume needed for a festival concert. You need the ones that have a more balanced output, and a higher range of frequencies it can play beautifully.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Room Reflections<\/h2>\r\n\r\n<p>While a nice acoustic is a desired attribute of a room when recording, you want to listen to music with the least reverb from your own room possible.<\/p>\r\n\r\n<p>If you put the speakers as far as you can from any walls (facing towards the center of the room), you&rsquo;ll already notice some difference. However, there&rsquo;s still objects in the room (you, your chair, your table, tools, microphone, etc.) that might influence it. You can&rsquo;t just remove them if you need them, so put them out of the sound&rsquo;s way as much as possible.<\/p>\r\n\r\n<p>But that still won&rsquo;t cut it. There will always be reverb from regular walls, sitting in a bigger room won&rsquo;t help (because sound travels extremely fast). If you can afford it, put foam or other isolation material on all three walls directly affected by the sound from your speakers.<\/p>\r\n","slur":"mixing-monitoring","cat":"Music","subcat":"Music Mixing","video":"","diff":"2","quiz":""},
{"id":"64","title":"[Mixing] Core Controls &ndash; Volume & Panning","post":"<p>The <strong>core controls<\/strong> is a term I use for the attributes that every track and every piece of audio have, and that in the end play the most important role in making the song sound the way you want.<\/p> \r\n\r\n<p>The members of this core group are: <strong>volume, panning, timing, tempo (&amp; metronome) <\/strong>and <strong>automation. <\/strong>While not really in the same category, I will I also mention some things about <strong>record <\/strong>and <strong>monitor enabled.<\/strong> But that is all for the next chapter, let&rsquo;s first go over the two most important ones: volume and panning.<\/p>\r\n\r\n<h2>Volume (or gain)<\/h2>\r\n\r\n<p>Every track has a big vertical slider (or button) for volume. This is by far the most important button, as you probably don&rsquo;t want all instruments (or any instrument at all) at the same volume. The fact that it&rsquo;s impossible to record every instrument at the <em>exact<\/em> same level of loudness, and that you only want a few instruments to take the lead in your mix, make volume adjusting a very necessary tool.<\/p>\r\n\r\n<p>Because of that, changing volume can usually be done in lots of places in the software (or audio interface itself, but I recommend only changing stuff in the software). And all you have to do is pull a slider down to make the sound softer, and push it up to crank up the volume.<\/p>\r\n\r\n<p>NOTE: DAWs have an at first sight unusual way of representing the volume: in negative dB. When you record a something, the track is set to a volume level of 0 dB. This means the standard operating volume of the system you&rsquo;re working on. You can see that the volume slider in software is usually about (1\/3) down the slider by default, with a 0 next to it. This means that there is a small amount of dB you can increase your track, but I will never allow you to do that!<\/p>\r\n\r\n<p>Instead, if you want something to be more prominent, you should lower other instruments that overwhelm it. That&rsquo;s the reason that most tracks are set to a negative decibel level, which only means that it is a certain amount softer than the standard volume, and not that it creates some sort of anti-sound or whatever.<\/p>\r\n\r\n<p><em>Why should we lower other instruments if we want one to be heard more?<\/em> Well, because increasing volume if you want something louder in the mix is a never-ending process. You might think &lsquo;hmm, let me increase the volume on the guitar a bit&rsquo;, and then think &lsquo;well, now I cannot hear the piano anymore, lets increase that one too&rsquo;, and so it goes on and on. When you can&rsquo;t hear something, it is usually not because it isn&rsquo;t loud enough, but because there are other instruments fighting for their spot which should be tamed.<\/p>\r\n\r\n<p>A last general volume guideline: if you can hear the bass, it&rsquo;s probably too loud.<\/p>\r\n\r\n<h2>Panning<\/h2>\r\n\r\n<p>Panning is <em>the control<\/em> making the difference between mono and stereo sound. With mono sound, every instrument is panned to the same spot: center. With stereo sound, you get the possibility to place certain instruments or tracks more to the right and\/or more to the left.<\/p>\r\n\r\n<p>Usually, this can be done moving a horizontal slider to the left or right, and notation for panning level is <strong>L <\/strong>or <strong>R<\/strong>, followed by the amount of panning (higher is further to the side).<\/p>\r\n\r\n<p>Here are some general panning guidelines:<\/p>\r\n\r\n<ul>\r\n\t<li>The base drum and snare should be dead center. All other parts of the drum kit can be spread out a bit to the right and a bit to the left, just like a real-life drum kit.<\/li>\r\n\t<li>The bass line and lead vocals should also be dead center.<\/li>\r\n\t<li>The rest of the instruments and audio can be distributed left and right, although it is preferred to have them in a logical position. For example, if you have one track that plays low piano notes and one that plays the high ones, it is somehow more pleasant to have them distributed left and right respectively, because that is also their place on a real piano.<\/li>\r\n\t<li><strong>Balance <\/strong>is key here. Your left and right sides should be balanced, preferably by using the same amount of instruments. If that is somehow not possible, you can pan all instruments on one side more away from the center than on the other side to compensate.<\/li>\r\n<\/ul>\r\n","slur":"mixing-core-controls-volume-panning","cat":"Music","subcat":"Music Mixing","video":"","diff":"2","quiz":""},
{"id":"65","title":"[Mixing] Core Controls &ndash; Timing & Automation","post":"<p>Continuing on the subject of the last chapter, I will talk about the other core controls here: timing, tempo, automation and record\/monitor enabling.<\/p> \r\n\r\n<h2>Timing<\/h2>\r\n\r\n<p>This one seems obvious, but I still want to say something about it. Timing is about when to start a piece of audio and when to stop it.<\/p>\r\n\r\n<p>Everybody&rsquo;s intuition is telling them to start recording at the spot you should start playing, and stop it immediately when this part is done. While this is not wrong, there are better ways to do it.<\/p>\r\n\r\n<p>First of all, to not create weird jumps in your audio you want to play through a connected piece of audio in one run. If there&rsquo;s an intro of about thirty seconds where you are continuously playing guitar, it is not smart to record the first 15 seconds, and then the last 15 seconds. Playing through it in one continuous recording already makes it sound nicer, cleaner and more connected. Don&rsquo;t be ashamed to do multiple takes on such a long piece of audio.<\/p>\r\n\r\n<p>Besides that, there&rsquo;s usually a small bit before the actual part where you fade in or start your playing. If you start exactly at the moment your part starts, you&rsquo;ll miss your &lsquo;introduction&rsquo; and it will seem like your instrument just fell into the song out of nowhere.<\/p>\r\n\r\n<p>And lastly, it is hard to immediately get into the groove or exact rhythm of a song. Every DAW has a <strong>metronome<\/strong> built in, which you can set to the correct tempo and use for one or two bars before your part starts to get the tempo right. Which brings us to the next subject&hellip;<\/p>\r\n\r\n<h2>Tempo<\/h2>\r\n\r\n<p>Most songs have one single, continuous tempo through the whole song. The most universally used tempo is 120 BPM (beats per minute). BPM is the common way to denote a song&rsquo;s tempo, and BPM can be swapped for &lsquo;quarter notes per minute&rsquo;. A tempo of 120 BPM means that one bar takes 2 seconds.<\/p>\r\n\r\n<p><em>What is a bar?<\/em> A bar is a set of 4 quarter notes. Most songs can be divided into an exact amount of bars, and even verses and choruses follow the pattern of being built out of bars. The start of a bar, or halfway through the bar are the usual places to start new instruments\/song pieces or to stop existing ones. If you&rsquo;re going for a more complicated melody, you can divide a bar into 16 equal pieces (16<sup>th<\/sup> notes) and use them as starting and stopping points for notes.<\/p>\r\n\r\n<p>While most DAWs allow a change of tempo even after creating the project, it is of course wise to know and set the tempo beforehand. The tempo is the lifeline of your song, and if even one instrument is not timed correctly the whole mix can feel messy and out of place. It is therefore important to know your tempo, and set your grid and metronome accordingly.<\/p>\r\n\r\n<p>NOTE: Of course, having a certain note or vocal just out of tempo can create an artistic effect, but use it sparingly or you&rsquo;ll just sound like you don&rsquo;t know what you are doing.<\/p>\r\n\r\n<p>NOTE 2: Tempos can be changed within a song, but it is a drastic change and should be a challenge that is taken on with care. If the two tempos are too close together, it will sound like a mistake rather than an artistic choice. If the switch is too abrupt, it will sound like something is missing in your song.<\/p>\r\n\r\n<h2>Metronome<\/h2>\r\n\r\n<p>I&rsquo;ve already mentioned it a few times, but it is important enough to have its own section.<\/p>\r\n\r\n<p>All DAWs support enabling a metronome to click to the tempo of your song. You can usually set it to only make click sounds one or two bars before you start recording, but you can also let it click while you are playing. I recommend always using a metronome. Every instrument being timed perfectly is one surefire sign of a professionally recorded song. You might think you can just imagine the tempo in your head, but just enable that metronome to be sure and not waste time.<\/p>\r\n\r\n<h2>Automation<\/h2>\r\n\r\n<p>Automation is the music industry&rsquo;s way of saying <strong>animation<\/strong>. It got this special name and place, because people usually tend to talk bad about it, even though it has some great uses and advantages.<\/p>\r\n\r\n<p>The reason why it is this way, is because if you mix and master your audio correctly using the other core controls, you shouldn&rsquo;t have to use it. People think that using it means you screwed up somewhere and want to put a bandage on the wound instead of fixing it.<\/p>\r\n\r\n<p>While they have a point, automation is very well implemented in every DAW and should be used in some cases.<\/p>\r\n\r\n<p>You can use automation to animate anything: volume levels, panning, effects, etcetera. I personally only use it for one thing: <strong>(cross) fading<\/strong>.<\/p>\r\n\r\n<p>Sometimes you want an instrument to fade in or out, and it can&rsquo;t be achieved by playing it softer. That&rsquo;s when you use automation to animate the volume and create a fade.<\/p>\r\n\r\n<p>There are also times when you create a part of the song using pieces of audio from different takes, or different recordings of that part. This can sometimes create weird, unnatural transitions between them, often with a click noise going with it. Using a cross-fade between the two pieces can smoothen it out, so much that somebody else will never notice there were different pieces. Most DAWs have a shortcut for this.<\/p>\r\n\r\n<h2>Record\/Monitor Enabling<\/h2>\r\n\r\n<p>If you have an audio interface that can accept multiple inputs, you want to know about and use <strong>record enabling<\/strong>. Record enabling a track means nothing more than making the track record everything a certain input receives. Usually with standard settings, the track you&rsquo;ve selected will automatically be record enabled. If you have only one input, it is simple: if a track is record enabled it will record everything from that input. If you have multiple inputs, you need to set which input to record for every track, and record enable\/disable the correct ones.<\/p>\r\n\r\n<p>Say you&rsquo;re recording a new, acoustic song, and you just want to sing and play guitar at the same time, and do the whole song without stopping. Then you could put one mic for your vocals, and one mic for your guitar, and record both at the same time as you play and sing. This way you actually perform the song, but you can still edit and mix the individual tracks later on.<\/p>\r\n\r\n<p>If you monitor your mixes via headphones or a special system, then you especially want to know about monitor enabling. When you monitor enable a track, it means that you want to hear what is on the track <em>while you record<\/em>. You&rsquo;ll have to make sure the correct output is set on the track to receive the sound where you want, which is probably your headphones (because the audio from those are not picked up by mics). If you want to hear yourself loud and clear as you would sound in the song, you want to enable it. If you just want to play and hear it in the natural way (coming from the instrument), you need to disable it.<\/p>\r\n","slur":"mixing-core-controls-timing-automation","cat":"Music","subcat":"Music Mixing","video":"","diff":"2","quiz":""},
{"id":"66","title":"[Mixing] Compression","post":"<p>Compression is the first technique you apply to a track, if it is needed of course. The name comes from the fact that you&rsquo;re <strong>compressing<\/strong> the <strong>dynamic range<\/strong> of an instrument.<\/p> \r\n\r\n<p>The <strong>dynamic range<\/strong> of an instrument is the range between the note with the lowest volume and the one with the highest volume. Note that this has nothing to do with frequencies &ndash; only volume. While a great dynamic range adds a lot of variety, in a digitally recorded mix it usually doesn&rsquo;t sound or work as well.<\/p>\r\n\r\n<p><em>Why? <\/em>Because there is a limit to your volume, and there are other tracks trying to also get some attention. If your instrument has a huge dynamic range, there&rsquo;s not much room for you to increase or decrease the volume. Because if you do, you&rsquo;ll soon enough hit the top or bottom of the volume slider, and if you go beyond that &ndash; your track will be filled with noise. On top of that, a subtle change in volume of perhaps 1 or 2 dB might make the difference between not hearing the instrument at all, and hearing it at exactly the right level.<\/p>\r\n\r\n<p><em>When would I use it?<\/em> Mostly with audio recorded with a microphone. If you are for example recording a guitar chord progression, you might start with lots of energy (and thus volume), but as you play on drop that spirit and play a bit softer. That is the moment you&rsquo;d use compression to bring those volume levels closer together.<\/p>\r\n\r\n<h2>How to Apply Compression<\/h2>\r\n\r\n<p>Compression is often included as an <strong>effect <\/strong>or <strong>insert<\/strong>, which you can add to a track. Some DAWs have a special button for it, but those are still only shortcuts to it. It is an effect, because compression doesn&rsquo;t change the original audio file. It just changes how it outputs its volume levels.<\/p>\r\n\r\n<p>Compressions work from the top. You can set a volume level, and if anything gets higher than that, it will be cut off so that it is underneath that level. This doesn&rsquo;t mean that everything will just be reduced to the exact same level. Every note is scaled down accordingly, so that there are still smooth transitions between them.<\/p>\r\n\r\n<p>And then when you have compressed your track, its dynamic range is much smaller, and you can turn up or down the gain to get it at the level you want again.<\/p>\r\n\r\n<h2>The Different Options<\/h2>\r\n\r\n<p>The compression interface in every piece of software is different, but it always has these options:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Threshold:<\/strong> this is the max volume level I just talked about. Every note that goes beyond this is lowered and compressed.<\/li>\r\n\t<li><strong>Ratio:<\/strong> this determines how much those notes are lowered. A ratio of 1:1 means that it is lowered exactly the amount which it is too much (so it becomes the threshold&rsquo;s volume level).\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Between 2:1 and 5:1 is fine for most things.<\/li>\r\n\t\t<li>Lower ratios give a warmer and thicker feeling to an instrument<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Attack:<\/strong> How fast the notes will be lowered. When the compression detects a note that is too loud, it will bring it down to the desired level in the amount of time you specified here.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>A higher attack rate will let the first note of an instrument or first word of a vocal punch through as it starts. This is sometimes what you want.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Release:<\/strong> How fast it turns the volume back up for notes that are below the threshold. Opposite of attack.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>The regular settings are almost always fine, but you can play around with it to see what happens otherwise.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Gain:<\/strong> While this can also just be set from the track settings, it is often also included within the compression effect. Turning it up simply makes the whole compressed dynamic range louder.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Golden Rules of Compression<\/h2>\r\n\r\n<p>Never, ever, do a low threshold with a high ratio.<\/p>\r\n\r\n<p>Your compression effects window should have something called a <strong>gain reduction meter<\/strong> (GR). As you play a track with compression on it, this should display how much the volume is reduced at that specific moment.<\/p>\r\n\r\n<p>The rule here is: if this meter doesn&rsquo;t return to 0 several times a bar (remember, four quarter notes), you&rsquo;re using too much compression. If it doesn&rsquo;t return to 0, you&rsquo;re compressing <em>every note in the dynamic range<\/em>, and that is just plain wrong.<\/p>\r\n","slur":"mixing-compression","cat":"Music","subcat":"Music Mixing","video":"","diff":"3","quiz":""},
{"id":"67","title":"[Mixing] EQ","post":"<p>EQ is short for <strong>equalizer<\/strong>. The name comes from the fact that it is used to balance all the different frequencies in a track. Not only is this useful to make a single instrument sound clearer and cleaner, it is also used to make sure certain frequencies from different instruments don&rsquo;t clash or are too loud\/soft.<\/p> \r\n\r\n<p>After compression, this is usually what is applied. However, EQ is a subtle balancing practice, which means that you should always aim for the least EQ adjustments possible. If you don&rsquo;t think a track needs EQ, don&rsquo;t use it. If you think a certain frequency is being pushed away by others, you shouldn&rsquo;t boost the frequency on this one but cut it off from the others.<\/p>\r\n\r\n<h2>How does EQ Work?<\/h2>\r\n\r\n<p>EQ is an effect that makes it easy to alter volumes of specific frequencies. Humans can hear from 20 Hz to 20,000 Hz, but that is not the range an EQ can work. Most instruments don&rsquo;t go that high, so EQs usually work from 20 to 16,000 Hz.<\/p>\r\n\r\n<p>What an EQ can do, is boost or cut one specific frequency point. But, because it is impossible to pinpoint the <em>exact<\/em> frequencies that are bothering you, moving one point also moves the ones around it slightly up or down. In graph form, that would mean that boosting a point creates a hill, and cutting it a valley. Within the EQ effect you can set the width of those adjustments to determine how much you want to take with you.<\/p>\r\n\r\n<p>There are also special versions of these points, called <strong>filters<\/strong> or <strong>cuts<\/strong>, that just completely remove frequencies at the low or high end.<\/p>\r\n\r\n<h2>Different EQ Options<\/h2>\r\n\r\n<p>While the look is different in every DAW, there are still the same options with the same names:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Graph<\/strong>. There is always a graph that displays the current EQ adjustments. When you&rsquo;ve just added the effect, this graph is a perfectly horizontal line at 0 dB. A few circles are on the line, which represent the following ranges:<\/li>\r\n\t<li><strong>LF, LMF, MF, HMF, HF:<\/strong> These are just abbreviations for low, low-mid, mid, high-mid and high frequencies. These are the five points you can alter and move around. This makes the job a lot easier, because you can think &lsquo;this guitar needs more high frequencies&rsquo;, and you can just go to that specific range and boost it. Usually this can be done via the buttons\/sliders, but also by dragging the points in the graph itself.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Freq:<\/strong> this determines the center frequency of a range<\/li>\r\n\t\t<li><strong>Q:<\/strong> this determines the width of the boost or cut in that range, but you should remember it as the narrowness of it. That is because a higher Q means a narrower (less wide, more specific) area of adjustment.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Enable\/Disable:<\/strong> All these ranges have a small button near them, with a minus sign in them or on\/off. Don&rsquo;t forget to turn these on when you make changes (it might not happen automatically). You might think:<em> &lsquo;why is that button there? Why would somebody make changes and then turn off the changes he just made?&rsquo;<\/em>. Well, it is just a quick way to test the difference between what the audio used to be and what it is after applying your changes. Turning ranges on\/off can help you with quickly determining if a change was needed, if it is an improvement, if it still needs some adjustment, etc.<\/li>\r\n\t<li><strong>LPF &amp; HPF <\/strong>or <strong>HC &amp; HL:<\/strong> These stand for <strong>Low-Pass Filter<\/strong> and <strong>High-Pass Filter<\/strong>. Their alternative names are <strong>High Cut <\/strong>and <strong>Low Cut <\/strong>respectively. They mean the same, but the opposite use of low and high can cause confusion:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Low-Pass Filter \/ High Cut:<\/strong> Let&rsquo;s the lower frequencies pass through, which means it cuts off the high frequencies. By default, its value is 16,000 Hz. You can only move that value down, and it does what you think it does: everything above its value gets cut off. But again, this is done gradually and you should see a smooth curve in your graph at the right-hand side.<\/li>\r\n\t\t<li><strong>High-Pass Filter \/ Low Cut:<\/strong> Let&rsquo;s the higher frequencies pass through, which means it cuts off the low frequencies. By default, its value is 20 Hz. You can only move that value up, and it works the same as the Low-Pass Filter: everything below its value is smoothly cut off<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Gain<\/strong> or <strong>Input\/Output:<\/strong> Decreases or increases volume on all frequencies. This is useful if you want to completely cut off some frequency in the mid-range, or boost a frequency <em>a lot<\/em>. If you for example lower the gain, there is more room above the 0 dB line for you to boost frequencies. Use it with care though.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Golden Rules of EQ<\/h2>\r\n\r\n<p>When you <strong>boost<\/strong> frequencies leave the <strong>Q<\/strong> low (the boost area is wide and smooth), when you <strong>cut<\/strong> frequencies make the <strong>Q <\/strong>high (the cut area is narrow and precise).<\/p>\r\n\r\n<p>For everything else than bass, kick drum and sometimes snare you often want to use a <strong>HPF<\/strong> (or <strong>LC<\/strong>). Most instruments (and vocals) don&rsquo;t need or even produce low frequencies, but they can still slip in somehow and be more prominent than you like. Using a filter on the LF range removes a lot of noise and muddy sounds.<\/p>\r\n\r\n<p>Equalizing is about <strong>balance<\/strong>. If you boost something, something else should be cut to keep the overall sound level the same. Remember that less is more.<\/p>\r\n\r\n<h2>EQ Cheat Sheet \/ Frequency Chart<\/h2>\r\n<img src=\"media\/FrequencyEQChart.png\" \/>\r\n\r\n<h2>The (Important) EQ Bands<\/h2>\r\n\r\n<p>Here I&rsquo;ll give you a list of all the different sections within the whole frequency spectrum, including how they sound, what they are useful for, and nasty side-effects they have.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>50 &ndash; 60 Hz<\/strong>\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Essential to kick drum and low (booming) bassline.<\/li>\r\n\t\t<li>Mostly used in dubstep and reggae<\/li>\r\n\t\t<li>If used too much, you&rsquo;ll mostly hear and feel the bass and not much else<\/li>\r\n\t\t<li>If used too little, a song will not have enough depth or weight (no fundamental notes it is built on top of)<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>100 &ndash; 200 Hz<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Essential to snare<\/li>\r\n\t\t<li>Adds a certain richness or warmth to most instruments<\/li>\r\n\t\t<li>If used too much, things will sound muddy, too much of the same and dull<\/li>\r\n\t\t<li>If used too little, you&rsquo;ll hear thin and cold sounds<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>200 &ndash; 500 Hz<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Essential in guitars, piano and vocals for warmth and weight<\/li>\r\n\t\t<li>If used too much, things will sound muddy again and like your stuffing too much into a single mix<\/li>\r\n\t\t<li>If used too little, you&rsquo;ll hear thin and weak sounds<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>500 &ndash; 1000 Hz<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>A difficult range to work with<\/li>\r\n\t\t<li>Is the mid-range for many instruments: creates some weight, body and tone, but is not essential<\/li>\r\n\t\t<li>If used too much, instruments sound pale or hollow<\/li>\r\n\t\t<li>If used too little, you&rsquo;ll hear thin and harsh sounds<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>1,000 &ndash; 2,000 Hz <\/strong>(2 kHz)\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Adds aggression, urgency and loud clarity<\/li>\r\n\t\t<li>Gives some crunch, edge or punch to (electric) guitars and vocals<\/li>\r\n\t\t<li>If used too much, your mix will be overaggressive and painful for the ears<\/li>\r\n\t\t<li>If used too little, your mix will sound like it is muted, way too soft or lacking of life<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>5 &ndash; 10 kHz<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Important for the higher parts of a drum kit, especially the very important snare<\/li>\r\n\t\t<li>Creates clarity, a sense of freshness and freedom, and life<\/li>\r\n\t\t<li>If used too much, your mix will sounds like it is grinding or scratching<\/li>\r\n\t\t<li>If used too little, your mix will lack any energy, importance or presence<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>10 &ndash; 16 kHz<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Very high, nearing the limit of our hearing capabilities, but still absolutely present<\/li>\r\n\t\t<li>Adds some areal, sparkling, spacy, heavenly sounds<\/li>\r\n\t\t<li>If used too much, your mix will sound artificial, too electronic or like an enormous group of female angels is singing it acapella<\/li>\r\n\t\t<li>If used too little, the mix will sound muted, dull, muddy, like it was forbidden to really come to life.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n","slur":"mixing-EQ-equalizer","cat":"Music","subcat":"Music Mixing","video":"","diff":"3","quiz":""},
{"id":"68","title":"[Mixing] Delay & Reverb","post":"<p>Most people are confused about the difference between delay and reverb. It is true that they both basically repeat your sound to make it sound like an echo are as if it&rsquo;s in a great concert room, but they do it in a different way.<\/p> \r\n\r\n<h2>Delay<\/h2>\r\n\r\n<p>A delay does exactly what its name promises: it adds multiple <em>delayed<\/em> versions of your audio. For example, if I press a key on a piano with delay on it, I will hear the exact same key again every few milliseconds. It depends on your settings if it is slowly fading out, or kept at the same volume.<\/p>\r\n\r\n<p>But, what essentially happens, is that the exact same sound is reproduced with a delay.<\/p>\r\n\r\n<p><em>What would I use it for?<\/em> Its most common use, is for echoing a specific (prominent) note at the same rhythm or tempo of the song. You just play the note once, at the right time, and then later you put a delay on it to repeat it in the groove of the song. This is used a lot in the dance industry. But, you can also use it in other types of songs to create a certain spacy, open and free effect.<\/p>\r\n\r\n<p>Another very common use is for vocals. When you record vocals, you usually stand really close to the mic and get it on there as clean as you can. That&rsquo;s good, but when thrown into the mix it sounds as if the singer is about to jump out of your speakers and the vocals are not cooperating with the other instruments. Adding a (small and subtle) delay creates some space around it, without the complexity of a reverb. The delay must be close to 0 milliseconds though, otherwise it will interfere with the vocal itself.<\/p>\r\n\r\n<h2>Reverb<\/h2>\r\n\r\n<p>It&rsquo;s the more complicated brother of delay. With reverb there is an extremely vast array of options available, and there are lots of different types.<\/p>\r\n\r\n<p>Reverb is different from delay in the sense that it doesn&rsquo;t just repeat your sound, but it simulates the deflection of the sound off the room, other instruments, etc. When you add a reverb to something, its sound is not send directly to the speakers, but the software calculates the different sound waves and volumes that would be present if your room had a certain acoustic and sends those instead.<\/p>\r\n\r\n<p><em>What would I use it for? <\/em>A lot. Reverb adds some space to instruments, it backs them off from the speakers and puts them all together as if they were played at the same time, in the same room, and then recorded. On top of that, reverb adds some extra tones, some extra depth and weight that would also naturally occur.<\/p>\r\n\r\n<p>You can use reverb however you want on all separate instruments, but I suggest using a subtle reverb on <em>everything<\/em> (<strong>global reverb<\/strong>), and then using another one on every bus ( = group of instruments that belong together) to really place every instrument at its own spot in the room.<\/p>\r\n\r\n<h2>All Delay Options<\/h2>\r\n\r\n<p>As usual, some DAWs have slightly different names, but at least all the options I will discuss are there. Also, most effects or instruments have a small delay section built-in. This is helpful because it is quick and very specific, but it usually has fewer options than a full-fledged delay effect.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Feedback (FB):<\/strong> What volume very delayed repetition should have. For example, setting it to 50% means that the delayed signal is exactly the same note but only half the volume.<\/li>\r\n\t<li><strong>Low Cut (Low): <\/strong>Set to a certain frequency level. Every frequency below that is not included in the delay.<\/li>\r\n\t<li><strong>High Cut (High): <\/strong>Same idea as low cut, but for the highest frequencies.<\/li>\r\n\t<li><strong>Tempo (1\/4):<\/strong> For how much time it is delayed. Setting this to the tempo of the song is usually preferred, the button\/slider usually has indicators at the side for 1\/4<sup>th<\/sup> notes.<\/li>\r\n\t<li><strong>Dry\/Wet (Mix or Blend):<\/strong> If a delay is dry, it means that its effect is negligible. If a delay is wet, you&rsquo;re using the maximum effect it allows. As the names &lsquo;mix&rsquo; and &lsquo;blend&rsquo; suggest, this determines whether (and how much) the delay blends with the original sound.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>All Reverb Options<\/h2>\r\n\r\n<p>There&rsquo;s really too many different plugins, effects, extras and options when it comes to the world of reverb to cover here. So I will give you the options that a small reverb section included with most instruments\/effects has, and that are the most important. I&rsquo;ll also talk a bit about the different types that exist.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Pre-delay (Pre):<\/strong> Determines the amount of time it takes for the first reflection to start. A small pre-delay is often used to offset the reverb from the original track a bit, to prevent clashing. A large pre-delay is used to simulate a large room. Standard value is usually 0 milliseconds.<\/li>\r\n\t<li><strong>Damping:<\/strong> Determines how much higher frequencies are damped\/softened\/removed. A high damping value will remove the edge from a sound and make it warmer and brighter. A small value gives a sound more air.<\/li>\r\n\t<li><strong>Low Cut &amp; High Cut (Low &amp; High):<\/strong> Same as with delay, they determine whether really low or high frequencies are used in the reverb.<\/li>\r\n\t<li><strong>(Room) Size or Decay Time:<\/strong> As you would expect: it&rsquo;s a value, set in milliseconds, that determines for how long the reverb will keep going. A large value is used if you want to simulate a large room (a big pre-delay helps there). Big reverbs are also useful for soloed instruments, but when multiple instruments are playing together you want to have a much smaller size.<\/li>\r\n\t<li><strong>Dry\/Wet (Mix or Blend):<\/strong> The same as with delay, it determines how prominent the reverb is for the track.<\/li>\r\n<\/ul>\r\n\r\n<p>Usually, a distinction is made between <strong>natural reverbs<\/strong> and <strong>the rest<\/strong>.<\/p>\r\n\r\n<p>There&rsquo;s the <strong>hall reverb<\/strong> and the <strong>room reverb<\/strong> that belong to the natural group. That simply means that they try to be as close to how it works in real-life as possible. They try to simulate your instruments actually being in a hall or room.<\/p>\r\n\r\n<p>And then there&rsquo;s the <strong>plate reverb, spring reverb <\/strong>and <strong>convolution reverb<\/strong>. The plate reverb simulates the sound being reflected by a single, straight metal plate. Spring reverbs emulate mechanical reverbs for a metallic sound, while convolution reverbs can load an impulse file that defines the room&rsquo;s characteristics. These belong to <strong>the rest<\/strong>, because they don&rsquo;t create a natural reverb. They are used for electronic, artificial sounds and effects.<\/p>\r\n\r\n<h2>Golden Rules for Delay &amp; Reverb<\/h2>\r\n\r\n<ul>\r\n\t<li>Turn the reverb up until you notice it, then turn it down slightly. If you can really hear the reverb, it&rsquo;s too much and it needs to be pushed back (usually by about 10-15%).<br \/>\r\n\t<br \/>\r\n\tThat&rsquo;s where another difference with delay comes into play: delay is an effect you usually want people to actively notice, unless you&rsquo;re using it with a very small time difference to give vocals or instruments some more weight.<\/li>\r\n\t<li>Remove the high end. 90% of the time, delays and reverbs sound bad because there&rsquo;s too much high frequencies flying around and interfering with the sound you want. Use a high cut to remove them, usually around 5 kHz is good.<\/li>\r\n\t<li>Watch out for the low end. While this may seem the polar opposite of #2, I mean that leaving the very low end in will make an already low sound seem like it is drowning in muddiness. In that case, also cut some of the low end, but <strong>not<\/strong> as much as with the high end.<\/li>\r\n\t<li>Create a stereo sound. If you have an instrument panned to the left, you can create a delay of about 10-50 milliseconds on the right-hand side to make a wide, stereo sound.<br \/>\r\n\t<br \/>\r\n\tYou can also use automation and delay to animate moving a sound left to right (or vice versa), which can be an awesome effect to add. But, it is much more noticeable and disturbing if used where it isn&rsquo;t needed, so be cautious.<\/li>\r\n\t<li>Match it to tempo. Although already discussed before, matching delays to the tempo (or 16<sup>th<\/sup> notes of the tempo) is way better than just randomly picking something.<\/li>\r\n<\/ul>\r\n","slur":"mixing-delay-reverb","cat":"Music","subcat":"Music Mixing","video":"","diff":"3","quiz":""},
{"id":"69","title":"[Mixing] Tips & Tricks","post":"<p>Having this set of rules and basic theory is great, but there&rsquo;s much more to explore. Even ignoring the rules on purpose can make or break your mix, but I think that should only be done if you want that little something special that you can&rsquo;t get by following the rules.<\/p> \r\n\r\n<p>Because this basic course is already running a bit long, and I&rsquo;ve told you almost everything I know and use daily, the list of tips and tricks will be short:<\/p>\r\n\r\n<ul>\r\n\t<li>Know your frequencies. I&rsquo;ve given you an overview of all the different EQ bands and their purposes, and it helps a lot if you know them. Also remember that the difference between 50 and 100 Hz is the same (soundwise) as between 5 kHz and 10 kHz.<\/li>\r\n\t<li>That brings me to the next point: be careful with drums and bass, and low frequencies in general. Good low frequencies should not be the most prominent or loud ones, but should give your mix some solid ground to work from. Start by getting the low frequencies right, and then when you start adding more and more instruments, cut off the low ends with a low cut or high-pass filter.<\/li>\r\n\t<li>Already touched on in the first few chapters: it&rsquo;s best to create buses and folders\/groups for every type of instrument in your mix, and first apply any effects there. Only if it still doesn&rsquo;t feel right, go in and tweak little details on single instruments or tracks.<\/li>\r\n\t<li>The <strong>Note Taking<\/strong> method. Once in a while, grab a pen and piece of paper, and sit down comfortably with a table in front of you. Play your mix, all the way from start to finish, and take notes about what you like, what you don&rsquo;t like, what you notice, etc. Don&rsquo;t stop, just write down as it plays. Do it a few times, and you should be left with a piece of paper full of items that need to be changed, and you&rsquo;ve provided yourself with a To-Do list for your mix. It is easier to work crossing off list items, than to randomly seek for something to improve or do now.<\/li>\r\n\t<li>Take a break. This is true for everything, and therefore also audio mixing. Give yourself a break, every (half) hour. Go do something fun, something relaxing, do some sports, play some music just for fun (no recording), etc. When you come back to the working table, you feel energized, fresh and full of new ideas or ways to solve your current problem.<\/li>\r\n<\/ul>\r\n\r\n<h2>Where to go from here<\/h2>\r\n\r\n<p>Now is the time you start practicing with all the information I&rsquo;ve just given you. Do a few mixes, make mistakes, try things out, try to get these fundamentals right. Many people are tempted to start trying out lots of plugins, effects, extras or other specialties &ndash; that&rsquo;s not necessary. All these extras are rarely used by professionals, because they usually have only a few specific purposes, and that&rsquo;s the only time you can use them to make your mix into magic.<\/p>\r\n\r\n<p>Practice and experiment, try to mix someone else&rsquo;s songs or create your own album, and see how far you can get. Good luck!<\/p>\r\n","slur":"mixing-tips-tricks","cat":"Music","subcat":"Music Mixing","video":"","diff":"3","quiz":""},
{"id":"70","title":"The Guide to Personal Hygiene","post":"<p>Welcome to the guide that will hopefully help you with creating good habits regarding hygiene. Lots of people get to know things as they grow up by trying them out, seeing their siblings do it or friends telling them. But not everyone, and certainly not everything there is to know.<\/p> \r\n\r\n<p>Keeping good personal hygiene should not take you more than 30 minutes a day. This guide may seem a bit long, but that is because it also explains why something is good or bad, and not only the fundamentals, tips and tricks.<\/p>\r\n\r\n<p>The guide has been written by a man, which means that there are some sections specifically for men with their female equivalents missing. I hope someone can fill in the gaps for me someday soon.<\/p>\r\n\r\n<h2>Overview of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Showering and Washing<\/li>\r\n\t<li>Cutting your nails<\/li>\r\n\t<li>Brushing your Teeth (and Bad Breath)<\/li>\r\n\t<li>Sweat and Smell<\/li>\r\n\t<li>Washing your Hair<\/li>\r\n\t<li>Shaving<\/li>\r\n\t<li>Tips &amp; Tricks<\/li>\r\n<\/ol>\r\n","slur":"guide-to-personal-hygiene","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"71","title":"[Hygiene] Showering and Washing","post":"<p>When talking about hygiene, taking a shower or washing yourself usually comes to mind first. That&rsquo;s for a good reason: a shower cleans your whole body, all of your skin is washed, as opposed to a subtle hygiene habit having to do with your nails for example. Therefore, I want to start the guide with this subject. You can groom yourself better than anyone has ever done, but if all of your skin is dirty and you smell &ndash; it&rsquo;s not going to help.<\/p> \r\n\r\n<h2>Showering vs Bathing<\/h2>\r\n\r\n<p>Some people like showers, some people like relaxing baths. But, we definitely recommend <strong>showering <\/strong>and not bathing. That is for multiple reasons.<\/p>\r\n\r\n<p>First of all, because it is better for the environment. If you shower less than 10-15 minutes, you will always have used less gallons of water than if you were to take a bath. People also tend to throw all sorts of oils into their bath, which also aren&rsquo;t very eco-friendly.<\/p>\r\n\r\n<p>Second of all, because it&rsquo;s just better at cleaning your skin. If you sit in a bath, you can give yourself lots of time to let the water around you pull the dirt from your skin. But, you&rsquo;ll still be sitting in dirty water for the rest of your bathing session. When showering, the water just runs straight down your body, pushing all dirt into the sink. It is also harder to scrub and clean yourself in a bath, as you can&rsquo;t see really see yourself or reach certain parts while sitting.<\/p>\r\n\r\n<h2>Washing<\/h2>\r\n\r\n<p>On top of showering regularly, you should also wash your <strong>hands<\/strong> and <strong>face<\/strong>. Anytime you have done something and move on to some other activity somewhere else, you should wash your hands. This doesn&rsquo;t mean that you should go crazy and wash them like every 5 minutes. It just means that if you&rsquo;re for example going inside after having sat outside for a while, you should wash your hands. You may not have done anything, they may not seem dirty, but just wash them just to be sure and keep them clean.<\/p>\r\n\r\n<p>Together with your hands, your face is the part that is used most often during the day, and looked at by other people. Keeping your face clean is therefore very important for your overall appearance. The fact that it gets filthy faster makes it necessary to <strong>clean your face<\/strong> at least <strong>twice a day.<\/strong><\/p>\r\n\r\n<h2>Best Showering Practices<\/h2>\r\n\r\n<p><em>How often should I shower?<\/em><\/p>\r\n\r\n<p>Whenever you&rsquo;re dirty. Most people have a habit of showering every day, either before they go to bed or just after they&rsquo;ve woken up. They also take an extra, shorter shower if they&rsquo;ve done some exercise.<\/p>\r\n\r\n<p>While there&rsquo;s nothing really wrong with that, there&rsquo;s still some things to be said and improved.<\/p>\r\n\r\n<p>First of all, showering relaxes your body, but you still need to stand up and be alert. Therefore, taking a shower and then going straight to bed isn&rsquo;t the best idea &ndash; you&rsquo;ll lie awake for at least an hour. On the other hand, showering after you&rsquo;ve woken up means you go to bed without a wash, which means your bed becomes dirty faster and you sleep in a mess.<\/p>\r\n\r\n<p>That problem could be solved by showering twice, in the evening and in the morning.<\/p>\r\n\r\n<p>But, there is such a thing as <strong>showering too much<\/strong>. Showering removes dirt, but also oils created by your own skin to protect it and keep it smooth. If you shower too often, your skin will become dry, bare and look unhealthy.<\/p>\r\n\r\n<p>Therefore, to conclude this section, you should shower at least <strong>once every 2 days<\/strong>, and take an extra shower only if you&rsquo;ve <strong>exercised, had a long working day<\/strong> or need to look good for a <strong>date or professional appointment<\/strong>.<\/p>\r\n\r\n<p><em>How long should I shower?<\/em><\/p>\r\n\r\n<p>Really up to you, but just as long as it takes to clean yourself. No staying underneath it for 15 minutes because it just feels good, just put the absolute maximum for yourself at <strong>10 minutes<\/strong>. If it&rsquo;s your second or third shower of the day, keep it much shorter at a maximum of <strong>2 &ndash; 3 minutes.<\/strong><\/p>\r\n\r\n<p><em>Anything I should do or pay special attention to?<\/em><\/p>\r\n\r\n<p>A few things. Your basic idea of showering is probably just standing under the showerhead, letting the water flow all over your body. That&rsquo;s good, but you should also do the following things:<\/p>\r\n\r\n<ul>\r\n\t<li>Scrub your <strong>armpits<\/strong>, <strong>face<\/strong> and &lsquo;<strong>intimate area&rsquo;<\/strong>.<\/li>\r\n\t<li>People usually forget their <strong>feet<\/strong>, but those are not going to get clean from just standing there. Also scrub the bottom of your feet.<\/li>\r\n\t<li>Just before you get out of the shower, for 15-30 seconds, turn the water <strong>cold<\/strong>. This takes some getting used to, but it has all sorts of positive effects. It energizes you, makes sure you don&rsquo;t sweat after you&rsquo;ve stepped out of the shower (which would defeat the whole purpose) and leaves your skin less vulnerable.<\/li>\r\n\t<li>Don&rsquo;t use the towel too aggressively. Your skin can only withstand a limited amount of pressure or roughness until it gets scratches, small wounds or other unhealthy side-effects.<\/li>\r\n<\/ul>\r\n","slur":"hygiene-showering-washing","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"72","title":"[Hygiene] Clipping your Nails","post":"<p>You were given 20 nails, which will never stop growing. Long nails have all sorts of disadvantages: they look bad, they are sharp and can hurt yourself or other people, they collect lots of dirt underneath them, and they can seriously hinder you in doing your daily tasks.<\/p> \r\n\r\n<p>It is therefore very wise to keep your nails short and clean.<\/p>\r\n\r\n<h2>Basic Rules on Trimming&nbsp;Nails<\/h2>\r\n\r\n<p>Nails grow at a different rate for each person, so there&rsquo;s no standard rule for when to cut them. But, on average, you will need to cut them once in every two weeks. If you are experiencing trouble with long nails, or they are collecting too much dirt, you should definitely cut them earlier.<\/p>\r\n\r\n<p>Sometimes, your nails will collect lots of dirt without being long at all (mostly because you&rsquo;re work means getting your hands dirty). Then you shouldn&rsquo;t cut them, but pay special attention to them at least twice a day. You can do this when taking a shower, or washing your hands or face.<\/p>\r\n\r\n<p>Don&rsquo;t bite your nails! It doesn&rsquo;t look good if other people see it, and your nails get rough, uneven edges. And it&rsquo;s not exactly healthy.<\/p>\r\n\r\n<p>Don&rsquo;t try to clean your nails by scratching the dirt away with another one. Just clean them properly.<\/p>\r\n\r\n<p>If you&rsquo;ve accidentally cut a nail uneven, don&rsquo;t try and try to fix your mistake. It&rsquo;s a never-ending process that will make your nails too short. There&rsquo;s also a chance of nails <strong>growing in<\/strong>, which is painful and most of the times requires a doctor to get it on the right track again. Instead, try to even your nails out by using a <strong>nail file<\/strong>.<\/p>\r\n\r\n<p><em>How far or how much should I cut the nails?<\/em><\/p>\r\n\r\n<p>When you look at your nails, you should see two parts. A pink-ish part near the finger, and a white part at the growing end. The white part is the part of the nail that sticks out, and its color is created by the oxygen it is collecting. You want to cut the complete white part, and nothing more.<\/p>\r\n\r\n<h2>Your Hands<\/h2>\r\n\r\n<p>These ones grow a bit faster than your toes, and are seen by other people (contrary to the ones on your toes which are usually hidden), so these need the most care. You should cut the nails <strong>round\/curved<\/strong>, so that its end follows the roundness of your fingertips.<\/p>\r\n\r\n<h2>Your Feet<\/h2>\r\n\r\n<p>These ones grow slower, but are much stronger. People usually cut them less often, but you can do them at the same time as you do your hands. The difference is mostly that you need to cut these <strong>straight<\/strong>. Of course, it can be curved a little, but you want the end to mostly be a straight horizontal line.<\/p>\r\n","slur":"hygiene-clipping-trimming-nails","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"73","title":"[Hygiene] Brushing your Teeth (and Bad Breath)","post":"<p>Another very important part of your hygiene are your teeth. They get dirty all the time, and have loads of bacteria surrounding them. Keeping a clean mouth not only makes your teeth whiter, cleaner and last longer, but also reduces the amount of bad breath.<\/p> \r\n\r\n<p>Not so long ago, people thought that brushing your teeth once a day was more than enough. The quality of their teeth shows that they were wrong. Brushing your teeth once a day is the <strong>absolute minimum<\/strong> you should do.<\/p>\r\n\r\n<p>These days there are four main tools to keep a clean mouth: <strong>regular toothbrush<\/strong>, <strong>electric toothbrush, dental flossing <\/strong>and <strong>toothpicks<\/strong>.<\/p>\r\n\r\n<h2>Regular vs Electric<\/h2>\r\n\r\n<p>The electric toothbrush has become more and more popular, and for a good reason. All you have to do is turn it on (sometimes with the correct settings), move it along both rows of teeth, and you are sure of a clean mouth. There&rsquo;s no chance of applying too much or too little pressure, it will reach all the hard-to-reach spots, and the very fancy ones even have timers to help you.<\/p>\r\n\r\n<p><em>Why doesn&rsquo;t everybody use it then?<\/em> Because a decent one that will last for quite some time is rather expensive, and some people just want to stay in control. If you do all the work yourself, you know for sure what has been done and to what extent. Regular toothbrushes are also easier to carry with you if you travel or stay over at someone&rsquo;s place, and are less heavy (for some people it really makes a difference).<\/p>\r\n\r\n<p>I will therefore not try to push you to one side or another, just use this information to choose which one to use for yourself.<\/p>\r\n\r\n<h2>How often should I brush my teeth?<\/h2>\r\n\r\n<p>Most people do it <strong>twice a day<\/strong>. After they&rsquo;ve had breakfast and are about to go to work, and after they&rsquo;ve had their dinner (or last snacks) before they go to bed. This is good, and you are assured of healthy teeth if you can keep up this habit. It&rsquo;s not disastrous if you sometimes drop this to once a day due to problems or certain circumstances, but never do it less than that!<\/p>\r\n\r\n<h2>How to Brush your Teeth<\/h2>\r\n\r\n<p>The whole point of brushing your teeth is first of all to get rid of any food leftovers on your teeth, and second of all to put fluoride on the teeth to make them strong and provide a layer of protection.<\/p>\r\n\r\n<p>Therefore, before you brush, first clean your teeth by drinking some water (and moving that around in your mouth), or brushing with only water on your toothbrush.<\/p>\r\n\r\n<p>Then, for about <strong>2 minutes<\/strong>, subtly move around your brush on every area of your mouth in a slow circular motion. Pay special attention to the gums, as cleaning those is very important, but rubbing too hard will hurt them and cause serious problems.<\/p>\r\n\r\n<p>Also <strong>scrub your tongue<\/strong>, as it also contains some food leftovers, and not including it with your routine kind of defeats the whole purpose.<\/p>\r\n\r\n<h2>Floss vs Toothpick<\/h2>\r\n\r\n<p>They are becoming more and more popular, as they really do work and are necessary to use regularly. They booth reach for the space between your teeth, and rid that of any harmful bacteria. They literally put something through that space (floss wire or the toothpick itself), which can&rsquo;t be achieved by a brush.<\/p>\r\n\r\n<p>It is therefore recommended to use one of them once a day, but even using it once every week will make a difference. Whichever you use doesn&rsquo;t matter: some dentists promote toothpicks, some promote dental floss. I will provide you with a small how-to on both.<\/p>\r\n\r\n<h2>How to Floss<\/h2>\r\n\r\n<p>Most floss wires come in a little plastic box. Before you start flossing, take out a piece of floss wire about the length of your arm. Then take one or two inches of the wire between your hands.<\/p>\r\n\r\n<p>Place one end in your mouth, and the other just in front of it. Slowly move the floss wire (in a sawing motion) through the areas between your teeth. Be careful though to not try and floss some piece of tooth.<\/p>\r\n\r\n<p>Because a floss wire is in between two teeth, there are two affected by its presence. It is recommended to sort of <em>hug<\/em> one tooth in a C-shape while going up, and then do the same with ther other tooth when moving down again.<\/p>\r\n\r\n<p>When you&rsquo;re done with one space, get a new small piece of clean floss by moving the wire between your hands, and quickly move on.<\/p>\r\n\r\n<h2>How to use a Toothpick<\/h2>\r\n\r\n<p>The correct way to use them is to stick them between your teeth as far as you can. Trust me, it doesn&rsquo;t hurt. If it does hurt a lot, you are going too far or hitting a painful spot and should stop.<\/p>\r\n\r\n<p>If your toothpick has one straight and one curved side (which most have), then the curved side should be pointing towards the center of your mouth.<\/p>\r\n\r\n<p>If things start to bleed a little inside your mouth the first few times, don&rsquo;t worry, it&rsquo;s normal and should happen.<\/p>\r\n\r\n<h2>Best Teeth Brushing Practices<\/h2>\r\n\r\n<p>Don&rsquo;t brush too hard or fast, you do not need to put enormous amounts of pressure on your toothbrush or move back and forth like a madman. Doing this will only hurt your teeth and gums, and not have the desired effect. It&rsquo;s important that you brush every part of your mouth <em>well<\/em>, not <em>as quick as you can<\/em>.<\/p>\r\n\r\n<p>Don&rsquo;t use too much toothpaste. It isn&rsquo;t healthy (if you swallow any of it), and you don&rsquo;t need very much either (putting a bubble the size of a pea on your brush should do just fine).<\/p>\r\n\r\n<p>It&rsquo;s best to brush the front of your teeth in a small circular motion, the top\/bottom (chewing sides, the ones pointing towards each other) in a linear motion and the back with the toothbrush going up and down vertically.<\/p>\r\n\r\n<p>If you have the chance, drink or eat foods with a lot of calcium in it or chew gum (these will strengthen your teeth and keep the mouth moist). Also, try drinking beverages that are bad for your tooth (&lsquo;sugarbombs&rsquo;) with a straw. Or avoid them altogether.<\/p>\r\n\r\n<p>Replace your toothbrush every 3 months, though if you brush subtly you might be able to keep one longer without the hairs falling out.<\/p>\r\n","slur":"hygiene-brushing-teeth-bad-breath","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"2","quiz":""},
{"id":"74","title":"[Hygiene] Sweat and Smell","post":"<p>Even if you&rsquo;ve done everything you can to get your skin clean and your teeth shining, there could still be a smell hanging around you that drives everyone away. There might even be some nasty-looking spots under your armpits because of sweat. Or even worse, you meet someone new, but your hands are sweaty for no reason, so you awkwardly try to avoid the handshake.<\/p> \r\n\r\n<p>There are some things we simply can&rsquo;t control or stop. You can&rsquo;t exercise for an hour and expect to still be perfectly clean and smelling nice, but there are easy ways to mask any bad smell or sweating problems.<\/p>\r\n\r\n<h2>Deodorants vs Anti-Perspirants<\/h2>\r\n\r\n<p>They do something completely different, although often used for the same reason.<\/p>\r\n\r\n<p><strong>Deodorants<\/strong> are chemical solutions that smell really nice. Spraying some under your armpits doesn&rsquo;t stop any sweat or smell, but masks or hides it by creating a second, nicer one.<\/p>\r\n\r\n<p><strong>Anti-Perspirants<\/strong> try to stop or obstruct the sweating altogether. They try to make your body sweat far less, and dry up any sweat against your skin so the smell is not released and it can&rsquo;t be seen through your clothes.<\/p>\r\n\r\n<p>Spraying a bit of deodorant are usually more than enough. If you suffer from excessive sweating, anti-perspirants will help you out, but I wouldn&rsquo;t advise you use them otherwise. Your body transpires for a good reason, and you shouldn&rsquo;t try to make it stop doing that. Sporting in different clothes, showering or washing after any activity that may make you sweat, is the way to go.<\/p>\r\n\r\n<h2>How often should I use deodorant?<\/h2>\r\n\r\n<p>Usually, people spray it on before they leave for work or school. If you come home, and then later the same day have to attend something else, it is also good to spray some on. If it is a very hot day, or you&rsquo;re experiencing troubles with sweat in general, its best to keep it with you and spray it on regularly (when you go to the toilet for example).<\/p>\r\n\r\n<p>However, do not overuse deodorant (or cologne for that matter). Use it to mask bad body smell, and perhaps give yourself a very subtle nice smell, but don&rsquo;t go further than that.<\/p>\r\n\r\n<h2>Sweaty hands<\/h2>\r\n\r\n<p>A very annoying problem. Some people just have it a lot, some people don&rsquo;t. Washing your hands with cool water regularly usually helps a lot, otherwise you can try an anti-perspirant. Sweaty hands of course also give off a bit of a smell, but that is hardly noticeable and isn&rsquo;t your biggest problem.<\/p>\r\n\r\n<p>Some people also suffer from the opposite: cold hands. The remedy for this is the opposite: wash your hands with warmer water, try to use them a lot and rub them against each other to keep them warmer.<\/p>\r\n","slur":"hygiene-sweat-smell","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"75","title":"[Hygiene] Washing your Hair","post":"<p>Your face is the most important aspect of your appearance. We&rsquo;ve already covered washing it and keeping your teeth\/mouth clean, but there&rsquo;s one hugely important thing we still haven&rsquo;t discussed: that great hair of yours.<\/p> \r\n\r\n<p>Hair just keeps on growing, for some people more than for others, but you should at least get it cut by a professional hairdresser every 6-8 weeks. This keeps your hair fresh and good-looking.<\/p>\r\n\r\n<p>But in the meantime, you should also care for your hair. Over time, your hair gets more and more greasy, and starts looking bad, off model and like somebody decided to throw some butter on it.<\/p>\r\n\r\n<h2>How to Wash the Hair on your Head<\/h2>\r\n\r\n<p>This is the simple part, and is usually done while showering.<\/p>\r\n\r\n<p>First, you moisturize your hair. Then you rub shampoo into it for a minute. Let it sink in for another minute. Then was it out until all of it is gone.<\/p>\r\n\r\n<h2>Best Practices<\/h2>\r\n\r\n<p>Don&rsquo;t use too much shampoo, and make sure you wash out all of it. Otherwise, some of it is left behind, which makes your hair unhealthy and certainly not good-looking.<\/p>\r\n\r\n<p>When drying your hair, first shake your head to remove most of the water. Then gently move your towel in the same direction as your hairs. Just carelessly rubbing the towel around every spot can damage your hair. And <strong>don&rsquo;t<\/strong> use a hairdryer. It kills hairs. And they make a lot of noise.<\/p>\r\n\r\n<p>Also, the more often you go through your hair with your hands, the more you need to wash it. The same is true when you use hair gel.<\/p>\r\n\r\n<h2>How to Wash the rest of your Hair<\/h2>\r\n\r\n<p>Although not seen as much, the rest of the hairs on your body also need some love. But, they also don&rsquo;t need such a thorough treatment as your scalp hair. As you wash the hairs on your head, just put a bit of shampoo on the other hairs and later let the water flow past it. It&rsquo;s small, but it makes a difference.<\/p>\r\n","slur":"hygiene-washing-your-hair","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"76","title":"[Hygiene] Shaving","post":"<p>And last but not least, having a certain type of beard (or no beard) makes a huge difference in your appearance. It seems like it&rsquo;s more of a looking-good thing than actually about personal hygiene, but that&rsquo;s not true. While the style of beard you choose is all about how you look, not grooming it will make it the perfect place for harmful bacteria to live and grow in.<\/p> \r\n\r\n<p>On top of that, there are other parts of your body where there&rsquo;s hair you can shave. While there are several people who like some hair, your best bet is to keep the amount small and the length short.<\/p>\r\n\r\n<h2>Caring for The Beard<\/h2>\r\n\r\n<p>Some people shave only when their facial hair becomes too long and too rough. It Is the method that takes the least effort and time, but you guessed it: it&rsquo;s not the right way to do it.<\/p>\r\n\r\n<p>Take care of your beard every day. Preferably make it the first thing after or before you take a shower. If you want to keep a beard, simply trim it or only work on it a little. If you want a clean look, just complete shave it off every day.<\/p>\r\n\r\n<p>Allowing it to grow too long, and then cutting it off all at once has a high chance of creating small wounds in your skin, which will eventually result in spots where there&rsquo;s no hair but a rash.<\/p>\r\n\r\n<p>On top of that, wash the beard (if you have one) under the shower. To keep reminding yourself to do it, wash it at the same time you wash your hair. Do what you would also do to the hair on your head.<\/p>\r\n\r\n<p>And of course, regularly check yourself in the mirror or wherever you can see yourself, to make sure there&rsquo;s nothing sticking in your beard.<\/p>\r\n\r\n<h2>Caring for The Rest<\/h2>\r\n\r\n<p>Usually, hair growth on the legs is a bit more than on the arms, but nothing is done about it. If you just keep it clean, you don&rsquo;t need to worry about it. Only (pro) cyclists are keen on keeping their legs absolutely hair-free.<\/p>\r\n\r\n<p>Hair on the arms however, can be a problem. For some people there is none, some have a lot. Those people are better off removing some of it. Not all of it, as that will transform your whole lower arm into a big, rough sponge.<\/p>\r\n\r\n<p>Sometimes, people have just random long hairs sticking out, lonely and craving for attention. Check for those once in a while, and just cut them off with a scissor.<\/p>\r\n\r\n<p>Hair on the chest gets more and more as a man grows older. At the beginning all is fine, but after a while it gets out of hand. I recommend you reduce the length of your chest hair once in a while.<\/p>\r\n\r\n<p>The same is true for hair on your back. Not many people have it, but if you have it I strongly recommend completely getting rid of it.<\/p>\r\n\r\n<p>For back and chest hair, another option is <strong>waxing<\/strong>. It hurts like hell, but it is effective.<\/p>\r\n","slur":"hygiene-shaving","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"1","quiz":""},
{"id":"77","title":"[Hygiene] Tips & Tricks","post":"<p>We&rsquo;ve discussed all the fundamental parts of achieving good personal hygiene. But, there are lots of other factors that play a role in the matter. However, those are more closely related to other subjects such as fitness and health, so if you want a full article on them &ndash; check those courses out.<\/p> \r\n\r\n<p>Here&rsquo;s a list of all the things we still have to mention:<\/p>\r\n\r\n<ul>\r\n\t<li>One thing that seems obvious but isn&rsquo;t for all people, is keeping your butt clean. Humans were not made to poop while sitting, but rather in a <strong>squatting <\/strong>position. If you put something of moderate height under both your feet, you should feel that it is much easier to do it, and you (most of the time) don&rsquo;t even have to use toilet paper anymore. Try it out, it&rsquo;s worth it, and nobody can see you. If you can&rsquo;t or won&rsquo;t do it, just try to make sure you clean well after you did your business.<\/li>\r\n\t<li>Get enough <strong>sleep<\/strong>. Sleeping is good for <em>everything<\/em>. It removes those awful bags under your eyes, makes you look fitter and full of energy, and makes your skin smoother and healthier.<\/li>\r\n\t<li>Eat <strong>healthy.<\/strong> Another obvious one: eating too much unhealthy foods is not only bad for your teeth or weight, but also for your overall hygiene.<\/li>\r\n\t<li>Create a <strong>clean environment.<\/strong> Change your sheets at least once a week, keep your working space clean and tidy. If you have just showered, and then immediately sit on a dirty chair again, you can start all over again.<\/li>\r\n\t<li>Some <strong>cologne<\/strong>. For the men, spraying some cologne on your boxer makes that part a bit nicer, just like deodorants do for your armpits.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>That was everything there is to know about personal hygiene. I hope I have been able to teach you something, if there is still something unclear or missing, let me know!<\/p>\r\n","slur":"hygiene-tips-tricks","cat":"Lifehacks","subcat":"Personal Hygiene","video":"","diff":"2","quiz":""},
{"id":"78","title":"How to Become Fit & Healthy","post":"<p>Being healthy and being fit are often seen as synonyms. While they do cover a lot of the same ground, there are also some fundamental differences.<\/p> \r\n\r\n<p><strong>Being Fit<\/strong> means having good stamina, lots of muscle power (even though it is not obvious from the outside), being able to do all daily tasks efficiently and without getting tired too quickly, being able to sport for at least 30 minutes. Being fit has everything to do with exercising enough, exercising the right way and good posture.<\/p>\r\n\r\n<p><strong>Being Healthy<\/strong> means having no excess body fat, eating the right products and the right amount of them, getting enough sleep and rest, doing your daily tasks in a healthy manner. You could be very strong from weightlifting, but still not healthy. On the other hand, you could be healthy but still lack any reasonable stamina.<\/p>\r\n\r\n<p>Therefore, where these two areas overlap, is that if you take care of them both, they will strengthen each other. Sleeping well makes you healthy, but also increases fitness &ndash; you feel more energized, your muscles have had better rest, etc. Doing exercises removes fat and increases your desire to eat proper foods. This guide will therefore tackle both of them.<\/p>\r\n\r\n<h2>The Advantages<\/h2>\r\n\r\n<p>I&rsquo;ve already mentioned a lot of the advantages of becoming fit and healthy above, but here are the key points why you should do it:<\/p>\r\n\r\n<ul>\r\n\t<li>Removes fat, replaces it with muscles &ndash; the look as well as functioning of your body will increase.<\/li>\r\n\t<li>Increases stamina and energy &ndash; you can do more in a day, feel less tired and appear brighter and vivid towards others.<\/li>\r\n\t<li>Increases your mood &ndash; exercising, having healthy foods in your system and having a correct upright posture all release hormones that lift your mood and spirit.<\/li>\r\n\t<li>It is fun &ndash; believe it or not, but doing a sport and becoming better and better at it over time is fun and motivating.<\/li>\r\n\t<li>If you have any sort of injury or weak spot in your body, exercising is the way to get rid of it and make it strong again. I know you may be thinking you can&rsquo;t exercise because it hurts so much or it isn&rsquo;t strong enough, but doing sports really is the only way to get back on track.<\/li>\r\n<\/ul>\r\n\r\n<h2>But, I have to warn you<\/h2>\r\n\r\n<p>Nothing comes free in life. Giving yourself one day off once in a while is okay, even a very wise thing to do, but you have to work and push yourself every day to achieve that good-looking body. Even if you are really not in the mood, are pressed for time, or are making up all sorts of excuses not to do it &ndash; doing only five push-ups a day already makes a difference, as does swapping one unhealthy eating habit for a better one.<\/p>\r\n\r\n<p>Also, being fit and healthy does <strong>not<\/strong> mean extremely thin. I know, some people just are born that way and it&rsquo;s impossible for them to gain any weight, but for most people it is much more healthy to have some body fat. There&rsquo;s a reason our body is so eager to store fat, and you shouldn&rsquo;t eat too little and exercise too much.<\/p>\r\n\r\n<p>But, the advantages outweigh the time and effort you will spend easily, so just do it!<\/p>\r\n\r\n<h2>Overview of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Correct Posture (Part 1)<\/li>\r\n\t<li>Correct Posture (Part 2)<\/li>\r\n\t<li>Good Sleeping Practices<\/li>\r\n\t<li>Eat &amp; Drink Healthy<\/li>\r\n\t<li>Exercise &amp; Fitness<\/li>\r\n<\/ol>\r\n\r\n","slur":"how-to-become-fit-healthy","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"1","quiz":""},
{"id":"79","title":"[Fitness\/Health] Correct Posture (Part 1)","post":"<p>Most of us don&rsquo;t realise how incredibly important your back or upper part of your body is. Your back (spine) is what sends signals from the brain to the rest of your body, and if anything there is obstructed or damaged, it will affect your body in a very negative way. On top of that, it also contains your vital organs, and you certainly don&rsquo;t want those to be suppressed.<\/p> \r\n\r\n<p>I could list all the advantages here, but it all comes down to the fact that with correct posture you&rsquo;re always using your body in the best way possible (optimal flow of oxygen and signals from the brain, but also optimal body strength).<\/p>\r\n\r\n<p>But, the problem is that most people have a bad posture without knowing it. And because your body always has some sort of posture (sleeping, sitting, walking, standing), it&rsquo;s hard to get rid of a bad posture you&rsquo;ve had for years, or maybe decades.<\/p>\r\n\r\n<h2>What is Correct Posture?<\/h2>\r\n\r\n<p>What correct posture is depends a bit on whether you are sitting, standing or lying down. But there are some fundamentals:<\/p>\r\n\r\n<ul>\r\n\t<li>Being able to draw a straight line from your ears to (the middle of) your ankles. It should go through your shoulders, hips and knees as well.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Your knees should <strong>never<\/strong> be locked.<\/li>\r\n\t\t<li>If you&rsquo;re sitting, forget about the knees of course.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Having your shoulders pulled back and downwards a bit. Most people have their shoulders hanging forward a bit, which is not only bad for the spine position, but also for the strength and freedom of the shoulders.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Do <strong>not<\/strong> pull shoulders only backwards, or only downwards. At the bottom of your shoulder blades, near your spine, there is a big muscle that connects them to the rest of your back. Contracting this muscle automatically moves the shoulders diagonally into their good position, and it is the <strong>only<\/strong> muscle that you should train and feel.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Having a vertically straight neck, and chin a bit tucked in to keep your head perpendicular to the neck and looking forward.<\/li>\r\n\t<li>Having a slight S-curve in your back. Even though you must be able to draw a straight line, doesn&rsquo;t mean your back should be perfectly straight. It&rsquo;s shape resembles that of a stretched out S, and that is the natural and best shape for it to be in. So even though your shoulders and hips should be on the same level, there should be a bit of a curve in your back between those two points.<\/li>\r\n\t<li>Making your <strong>abs<\/strong> do the work. If you a trying to get a correct posture, you should only feel your abs. Therefore, it is good to strengthen them or to engage them while standing.<\/li>\r\n<\/ul>\r\n\r\n<p>These were all the key points if you&rsquo;re looking from the side, but the front and back also want some attention:<\/p>\r\n\r\n<ul>\r\n\t<li>You should look <strong>symmetrical.<\/strong> This means that the left and right shoulder should be at the same level, and form a perfect rectangle with your feet. Your head should not rotate slightly to one side, and your hips should also not be rotated or twisted. If this is the case, and it is hard for you to get rid of, there might be something else wrong and you should see a doctor.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/CorrectPosture.png\" \/><\/p>\r\n\r\n<h2>Check your Posture<\/h2>\r\n\r\n<p>There are a few simple experiments you can do to check how your posture is doing.<\/p>\r\n\r\n<p><strong>Wall Test 1<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>Stand with your back against the wall.<\/li>\r\n\t<li>Make sure your head, shoulders, butt and ankles are slightly touching the wall.<\/li>\r\n\t<li>There should be space between your lower back and the wall, and your knees should not be locked but also have some space.<\/li>\r\n\t<li>If you&rsquo;re able to stand this way (without some parts hurting too much), you have found correct posture.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Wall Test 2<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>Stand with your back against the wall<\/li>\r\n\t<li>Make sure your head, shoulders and lower back are slightly touching the wall.<\/li>\r\n\t<li>Your feet should be a few inches away from the wall.<\/li>\r\n\t<li>Standing like this focusses only on getting the correct posture in the upper part of your body.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Book Test<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>A bit less useful, but more fun.<\/li>\r\n\t<li>Put a book on top of your head, and see if you can keep it there for a long time (without hands, of course) without having to move and do all sorts of head and neck movements. If you can do this, at least your head and neck have good posture and strength, and your body has good balance.<\/li>\r\n<\/ul>\r\n","slur":"fitness-health-correct-posture-part1","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"1","quiz":""},
{"id":"80","title":"[Fitness\/Health] Correct Posture (Part 2)","post":"<p>I&rsquo;ve split the article on correct posture in two, as it was getting a bit too long and I don&rsquo;t wanted to leave anything out on this very important subject.<\/p> \r\n\r\n<h2>How to Train Correct Posture<\/h2>\r\n\r\n<p>What I described above should really be seen as tests or checks, and not as exercises. They do not really strengthen muscles or create better habits, they just let you experience what good posture feels like.<\/p>\r\n\r\n<p>The first and most important way to train it, is just to exercise these principles. Try to notice when you&rsquo;re shifting into your old, bad posture and then actively make yourself sit in the correct one for a minute before moving on. This may seem hard and unnatural at first. Your muscles aren&rsquo;t used to the way they&rsquo;re being worked now, so they may tire really quickly or feel a bit stiff. If you train regularly and don&rsquo;t put an enormous amount of pressure on them, this is good pain and will fade away. If it keeps hurting more and more, you&rsquo;re overdoing it or something else is wrong.<\/p>\r\n\r\n<p>Another exercise, is to stand in correct posture and then move both your arms up until they&rsquo;re perfectly horizontally aligned with your shoulders. Keep them there, and perhaps wave your arms up and down a little. This is extremely hard to do, but it targets the right muscles for correct posture and upper body strength very well.<\/p>\r\n\r\n<p>If you&rsquo;re experiencing great pain in the neck, shoulders of back from doing all this, it is better to first <strong>stretch:<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li><strong>Neck.<\/strong> Move\/stretch it in all 4 directions (left, right, up, down), but do it gradually (takes about 10 seconds to get to a point you can&rsquo;t go further). Rolling it around in a circle is not recommended.<\/li>\r\n\t<li><strong>Shoulders.<\/strong> Put your hands behind your back, and pull your shoulders backwards. This is not good posture, just stretching. Then put your hands up in the air (still behind your back) as far as you can, and this should already be hard to do and feel like stretching while holding that posture.<\/li>\r\n<\/ul>\r\n\r\n<p>While doing these exercises, make sure to keep everything as relaxed as possible. I know you&rsquo;re training and pushing it to be in a different posture, but if you try to move to fast you&rsquo;ll only strain and hurt yourself more. Don&rsquo;t expect good posture in a few days, build it up in small steps and expect perfect posture in six months.<\/p>\r\n\r\n<h2>How do I apply it in daily situations?<\/h2>\r\n\r\n<h5>Standing<\/h5>\r\n\r\n<p>Put your body weight on the front of your feet, as putting it on the heels naturally calls for a passive body stance.<\/p>\r\n\r\n<p>It can help to think as if a string at the top of your head is pulling it towards the ceiling.<\/p>\r\n\r\n<p>You should be looking straight forward. Most people have the tendency to look a bit downwards, pull your head back up to stop that bad habit.<\/p>\r\n\r\n<h5>Sitting<\/h5>\r\n\r\n<p>Same principles apply. Keep everything straight. Even your feet, as most people are inclined to put cross them or disturb the symmetry in any way.<\/p>\r\n\r\n<p>Your back should also be straight, and you should not be leaning backwards or forwards too much. However, lots of chairs these days are of better quality, and pushing your lower back into the backrest also creates good posture. If you have to change your position or get something, do that by rotating your head <strong>and<\/strong> upper body instead of straining your back or turning the head too much.<\/p>\r\n\r\n<p>When working at a table, make sure the angle between your lower arm and upper arm is between 45 to 90 degrees. Less than that might overstretch the elbow, more than that means you are sitting way too high.<\/p>\r\n\r\n<p>Also, go stand once in a while. We&rsquo;re not made to sit around all day, so most people don&rsquo;t feel too comfortable sitting with correct posture for a long time.<\/p>\r\n\r\n<h5>Walking<\/h5>\r\n\r\n<p>Some people feel like they need to put their head or neck forward for some reason &ndash; don&rsquo;t do that. Even when running, keep your upper body straight and let your legs and abs do all the work.<\/p>\r\n\r\n<p>Also, try to put a little &rsquo;bounce&rsquo; or hip movement into your walk. Not only does it look sexy, it also makes sure you use your whole body in a healthy way when walking.<\/p>\r\n\r\n<h5>Carrying things<\/h5>\r\n\r\n<p>Standing in correct posture makes it harder to reach things you could reach by moving your shoulder forward or curving your back. But, there are simple alternatives: stand closer to the object, and make your <strong>legs <\/strong>do all the work.<\/p>\r\n\r\n<p>When you&rsquo;re carrying something, keep it as close to your body as you can. This makes lifting easier.<\/p>\r\n\r\n<h5>Sleeping<\/h5>\r\n\r\n<p>Don&rsquo;t sleep on your stomach. Sleep on your back.<\/p>\r\n\r\n<p>If you like sleeping on your side, stick a small pillow between your knees to even then keep the body symmetrical.<\/p>\r\n\r\n<p>Also, make sure you either have a very deformable pillow or one that&rsquo;s flat and precisely the distance between your shoulder and neck. Most pillows are just a big sort-of-rectangle, sort-of-ball of softness. While it is indeed very soft, your neck is not straight when using those, and they are often not high enough to support your shoulder width.<\/p>\r\n\r\n<h2>For the lovers, here&rsquo;s all benefits in a nice list<\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Improved organ function:<\/strong> When you&rsquo;re standing up straight, you&rsquo;re giving your organs all the space they need to work well. If you don&rsquo;t, your rib cage will start to push against the organs and that they do not like.<\/li>\r\n\t<li><strong>Improved flow of blood and signals from the brain:<\/strong>&nbsp; As said before, your back makes sure all signals from the brain go to everywhere in the body. When you have a lot of tension in the back, a lot of these signals might be lost as there&rsquo;s some sort of block before they go to the rest of the body. This results in your body not knowing where to grow muscle, where to send blood to, what and how to develop, etc. Also, I myself had a problem with my left shoulder being a bit out of place and tensed up for a few years, and had serious problems with my heart as a result of the things pushing it out of place and cutting of the blood flow.<\/li>\r\n\t<li><strong>Reduced tension:<\/strong>&nbsp; Simple, if everything is in the correct place, there&rsquo;s no need for tension.<\/li>\r\n\t<li><strong>Increased cognitive performance:<\/strong>&nbsp; Studies have shown that people who slouch are more (easily) depressed than others, which is mostly a result of the fact that they don&rsquo;t have good concentration and sometimes can&rsquo;t think clearly. This can all be solved by correcting your posture!<\/li>\r\n\t<li><strong>Increased height:&nbsp; <\/strong>Studies have also shown that, for some reason, taller men are liked better. On the other hand, there seems to be a lot of people negative about tall women, but I personally don&rsquo;t see the problem with that at all. And it&rsquo;s not like people can do that much about their length.<\/li>\r\n\t<li><strong>Prevents humped shoulders, beer bellies and other not-so-great stuff:<\/strong>&nbsp; When you&rsquo;re young, you&rsquo;re flexible enough to adapt and still look great. But, once you get older a lot of complications come into play, and these can all (for a part) be solved by having correct posture.<\/li>\r\n\t<li><strong>Increased confidence:<\/strong>&nbsp; Somehow related to the &lsquo;increased height&rsquo;, standing up straight, looking forward (not down), gives a confident look and will actually make you feel confident.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"fitness-health-correct-posture-part2","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"2","quiz":""},
{"id":"81","title":"[Fitness\/Health] Good Sleeping Practices","post":"<p>It&rsquo;s common knowledge that sleeping is good for your health. But how many hours should you sleep every night? What should we do before we go to bed, and after we wake up? Why exactly is it good for you? I&rsquo;ll try to answer these questions as well as I can.<\/p> \r\n\r\n<p>But I have to add, even scientists are still not completely sure why we sleep, how it works and what exactly happens. I only provide the information that has been tested and results in feeling more rested for everyone.<\/p>\r\n\r\n<h2>How much should I sleep?<\/h2>\r\n\r\n<p>That depends on your age, and a bit on your DNA. Some people needs lots of sleep, some don&rsquo;t &ndash; there is nothing you can do about that. But here is a list of the average sleeping hours per age category:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Newborns<\/strong> (0-2 months): 12 &ndash; 18 hours<\/li>\r\n\t<li><strong>Infants <\/strong>(3-11 months): 14 &ndash; 15 hours<\/li>\r\n\t<li><strong>Toddlers <\/strong>(1-3 years): 12 &ndash; 14 hours<\/li>\r\n\t<li><strong>Preschoolers <\/strong>(3-5 years): 11 &ndash; 13 hours<\/li>\r\n\t<li><strong>School-age children<\/strong> (5-10 years): 10 &ndash; 11 hours<\/li>\r\n\t<li><strong>Teens <\/strong>(10-17) years: 8 &ndash; 9.5 hours<\/li>\r\n\t<li><strong>Adults: <\/strong>7-9 hours<\/li>\r\n<\/ul>\r\n\r\n<p>You will notice that the amount of sleep you need becomes less and less as you age. But still, around 8 hours of sleep is an amount that many people almost never reach. As you are most likely to be in one of the last two categories, the absolute minimum amount of sleep you should get Is <strong>7 hours<\/strong>.<\/p>\r\n\r\n<h2>But that&rsquo;s impossible?!<\/h2>\r\n\r\n<p>Let&rsquo;s see about that. You probably want at least an hour to get stuff done in the morning, and at night you also want at least an hour of spare time. Then wouldn&rsquo;t sleeping from <strong>12 pm<\/strong> &ndash; <strong>7 am<\/strong> be a nice fit? You get your hours of sleep, and you get enough time for fun stuff.<\/p>\r\n\r\n<h2>Still, can&rsquo;t do it.<\/h2>\r\n\r\n<p>But then you might say: I don&rsquo;t immediately fall asleep as soon as I lie down, and I don&rsquo;t wake up at the same time every day.<\/p>\r\n\r\n<p>That is true for most people, and it has a lot to do with what sleeping actually is.<\/p>\r\n\r\n<p>We fall asleep when we&rsquo;re tired, relaxed and our eyes haven&rsquo;t had stimuli for some time. I will provide you with a few tips and tricks in a few paragraphs about how you can make sure that happens and trick your body into sleeping earlier.<\/p>\r\n\r\n<p>We wake up when our body feels rested enough or there&rsquo;s lots of light in the room. Waking up naturally is always better than by alarm clock, but because it is very much unpredictable, most people have to use one. If you want to know, I explain a bit about the theory or science behind sleeping at the end.<\/p>\r\n\r\n<h2>Tips &amp; Tricks<\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Schedule.<\/strong> Most important of all, is having a sleeping rhythm. Sometimes life gets crazy and you cannot afford sleeping late, or going to bed early. Most people solve this by sleeping more than usual on the days they have some free time. While this system of catching up with your sleeping amount is always better than becoming sleep deprived, it is not the best way to do it. If you make sure that you go to bed a quarter to 12 <em>every evening<\/em> and put an alarm clock around a quarter to 7 <em>every morning<strong>, <\/strong><\/em>you will soon enough get into a rhythm. And your body likes that.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Why?<\/strong> Because your body knows that it has those 7 hours to get everything done it wants to do. It knows when to shut down the body and fall asleep, and when it will be woken up. It smooths out these two processes and makes them faster, but also learns to use the time in between most efficiently.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Rest before going to bed.<\/strong> If you want to fall asleep within 10-15 minutes of going to bed, you need to make sure your body is rested and doesn&rsquo;t want to do anything anymore. This means to <strong>stop eating or drinking<\/strong> anything <strong>2 hours<\/strong> before you go to bed, don&rsquo;t exercise an <strong>hour<\/strong> before going to bed, and of course don&rsquo;t do other crazy stuff (drinking alcohol or caffeine-filled products for example).<\/li>\r\n\t<li><strong>Have a nice place to sleep.<\/strong> Make sure your bed is clean, make sure the temperature is okay (a bit below room temperature), make sure there&rsquo;s no light at night. If you can, do try to have lots of sunshine in the morning, as that is the most natural and healthy way to wake up. Also keep in mind the things you learned in the <em>correct posture<\/em> article about sleeping without hurting your body.<\/li>\r\n\t<li><strong>Don&rsquo;t worry.<\/strong> Everybody in this world goes to bed and starts to think about what they did wrong today, what they will have to do tomorrow, etcetera &ndash; don&rsquo;t. This seems healthy to most problems, as you are mostly solving problems and thinking deeply about subjects. But because you are so darn active, it is almost impossible to fall asleep. Your brain actually solves problems you&rsquo;ve thought about before while you sleep, so its best you don&rsquo;t postpone it. If you are awake and actively thinking about problems, most people have the tendency to mostly worry and not actually try to solve or think positively.<\/li>\r\n<\/ul>\r\n\r\n<h2>Science of Sleeping<\/h2>\r\n\r\n<p>Sleeping has at its core a single purpose: shut down everything we don&rsquo;t need, so that we can regrow our body. When you sleep, your muscles grow, your energy reserve refills, any wounds are healed and harmful viruses dealt with. But, the most important part is in your brain.<\/p>\r\n\r\n<p>Your brain uses sleep to put all sorts of things you&rsquo;ve learned, seen and experienced that day into the long-term memory. It tries to build strong connections between what you already had and what you did that day. Not sleeping enough therefore causes memory loss, depression, problems with focussing &ndash; a whole array of mental problems, on top of the physical ones.<\/p>\r\n\r\n<p>There are basically two stages your body alternates between when you sleep. There is the <strong>REM sleep<\/strong> most people know (Rapid Eye Movement, or otherwise called <strong>light sleep<\/strong>), and a stage which we&rsquo;ll call <strong>deep sleep <\/strong>or non-REM sleep.<\/p>\r\n\r\n<p>The first REM sleep stage lasts about 10 minutes, but they get longer and longer after that (the final one usually lasts an hour). Your eyelids move rapidly, you breathe faster and heart rate rises. This is the stage where your brain is most active, and <strong>dreams<\/strong> are made here.<\/p>\r\n\r\n<p>The non-REM sleep lasts anywhere between 5 to 15 minutes. It has three stages:<\/p>\r\n\r\n<ol>\r\n\t<li>You&rsquo;re not really sleeping. Your eyes are closed, but it is very easy to wake you up.<\/li>\r\n\t<li>Your heart rate slows and body temperature drops. This is basically preparation for deep sleep, and REM sleep.<\/li>\r\n\t<li>Deep sleep. It is very hard to wake you up, and if you wake up you feel weak, disoriented and maybe even sick.<\/li>\r\n<\/ol>\r\n\r\n<p>Your body typically tries to wake up during stage 1 of non-REM sleep. You should see it like this: you close your eyes and tell your body it is fine to go to sleep. Your body prepares REM sleep, performs the REM stage, and then performs a check &lsquo;can I wake up?&rsquo; If there&rsquo;s still work to be done or it&rsquo;s still dark, it will continue this cycle.<\/p>\r\n\r\n<p>Using an alarm clock therefore increases your chances of waking up at the wrong time. If you wake up from your alarm clock and you can barely open your eyes, you&rsquo;ve disturbed REM sleep. If you wake up, and you feel even worse than you did before you went to bed &ndash; you&rsquo;ve cut your deep sleep. Therefore, getting in a rhythm so that your body knows when to stop doing stuff and wake up is a very wise thing to do.<\/p>\r\n","slur":"fitness-health-good-sleeping-practices","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"2","quiz":""},
{"id":"82","title":"[Fitness\/Health] Eat & Drink Healthy (Part 1)","post":"<p>Supplying yourself with enough water and nutrients every day is the most important part in being healthy, by a long margin. Eating the right products at the right time increases how you look, feel and function. Eating the wrong products, or not eating much at all is, dramatically speaking, the same as slowly killing yourself.<\/p> \r\n\r\n<p>Your body is continuously burning through its reserves to keep your heart beating, lungs going and brain functioning. It therefore needs the right product, in the right amount at the right time. Now this sounds like it&rsquo;s an exact science, but it isn&rsquo;t. I will explain to you in this article the basic fundamentals and rules from which you need to make your decision, but no exact portions or anything like that are given. That depends on your body, and you should feel when it is too little or too much.<\/p>\r\n\r\n<h2>Some genetics<\/h2>\r\n\r\n<p>Everyone has a different body. This means that there is a different rate at which nutrients are processed, but also a different ratio on how much is stored as fat, used to grow muscles or used for energy. There are roughly speaking two types we can distinguish here:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>The forever lean.<\/strong> There are lots of people who are skinny, and just can&rsquo;t do anything about it. Everything they eat is immediately converted into energy, controlling body temperature, brain function, etcetera. These people can eat whatever they want without accumulating fat, but it is very hard to grow any muscle.<\/li>\r\n\t<li><strong>The powerful plump.<\/strong> On the other hand, for a lot of people it is almost impossible to lose weight. Everything they eat is almost immediately stored as fat, if not used for growing muscles. These people therefore need to really closely watch what they eat, but a lot of what they eat is put into a more muscular body &ndash; that&rsquo;s their advantage.<\/li>\r\n<\/ul>\r\n\r\n<p>Most people sit somewhere between these two categories, but for both this still rings true: the amount you eat is not as important as <strong>what you eat<\/strong>. The skinny ones can eat whatever they like and stay skinny, but if they only eat fast foods they are still going to be unhealthy and running the risk of heart disease.<\/p>\r\n\r\n<p>You probably know what I am talking about and have come to terms with whatever type you are. It is important to know that and keep in mind, but know that it is not impossible for skinny people to grow muscle and plump people to be lean and fit if you work hard enough.<\/p>\r\n\r\n<h2>How much should I weigh?<\/h2>\r\n\r\n<p>Before we can discuss what you need to do to get to ideal weight, we need to determine <em>what is the ideal weight?<\/em><\/p>\r\n\r\n<p>Well, it depends. On your age, length and overall body shape.<\/p>\r\n\r\n<p>The best way to check it is therefore simply looking in the mirror. Stand straight, and check if there is a very noticeable amount of fat on your belly. If it is only slightly noticeable, you&rsquo;re fine. And most below that is also okay, but if you start to see bones through your skin or get a six-pack without ever having trained your abs &ndash; you&rsquo;re eating far too little.<\/p>\r\n\r\n<p>However, as this still might seem vague, there is something called the <strong>BMI<\/strong> (Body Mass Index) which you can calculate for yourself. It works like this:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">BMI = weight \/ (height * height)<\/p>\r\n\r\n<p>With weight in <em>kilograms<\/em> and height in <em>meters<\/em>. Then your result gives you an indication:<\/p>\r\n\r\n<ul>\r\n\t<li>BMI &lt; <strong>18.5<\/strong>: People with this are <em>underweight<\/em>.<\/li>\r\n\t<li>18.5 &lt; BMI &lt; <strong>25:<\/strong> You have the ideal body weight!<\/li>\r\n\t<li>25 &lt; BMI &lt;<strong> 30<\/strong>: People with this are <em>overweight<\/em>.<\/li>\r\n\t<li>BMI &gt; <strong>30<\/strong>: People with this suffer from <em>obesity.<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Now this test is quite accurate and in most cases true, except for <strong>trained athletes<\/strong>. A square inch of muscle is heavier than a square inch of fat, so if you have very well-grown muscles, you will most likely be classified as overweight, and in very rare cases as obese. In that case you shall have to decide for yourself!<\/p>\r\n\r\n<p><strong>Body Fat<\/strong><\/p>\r\n\r\n<p>One last thing before we can continue, and it is about body fat. Body fat is usually given in percentages &ndash; the percentage of your body that is fat. I&rsquo;ll give you a little overview of the percentages (for women and men respectively):<\/p>\r\n\r\n<table>\r\n\t<tr><td><\/td><td>Women<\/td><td>Men<\/td>\r\n\t<tr><td>Essential fat.<\/td><td> 10 &ndash; 13%. <\/td><td> 2 &ndash; 5% <\/td><\/tr>\r\n\t<tr><td>Athletes.<\/td><td> 14 &ndash; 20% <\/td><td> 6 &ndash; 13% <\/td><\/tr>\r\n\t<tr><td>Fitness.<\/td><td> 21 &ndash; 24% <\/td><td> 14 &ndash; 17% <\/td><\/tr>\r\n\t<tr><td>Average.<\/td><td> 25 &ndash; 31% <\/td><td> 18 &ndash; 24% <\/td><\/tr>\r\n\t<tr><td>Obese.<\/td><td> Over 32% <\/td><td> Over 25%.<\/li>\r\n<\/table>\r\n\r\n<p>Now, what does this tell you? That a certain amount of fat is required. Without that essential fat, you would look very bad and most probably die very soon. Fat is good, if you have it in small amounts. You can see that the average person has quite a lot of it, and that if you for example only have 18%, you are doing very well. So don&rsquo;t try too hard to remove all fat, it&rsquo;s better to look fit and healthy than as if you haven&rsquo;t eaten in weeks.<\/p>\r\n\r\n<p><em>How do I measure body fat? <\/em>It is not really (easily) measurable using some sort of formula, so I suggest you look up pictures for the percentages and see with which one you can compare yourself.<\/p>\r\n\r\n<h2>Eating at the right times<\/h2>\r\n\r\n<p><em>When<\/em> you consume your food (and drinks), is equally as important as <em>what<\/em> you eat. If you wake up in the morning, your body has been doing a lot but you haven&rsquo;t eaten for let&rsquo;s say 8 or 9 hours. You can eat as healthy as you like, if you skip the breakfast you will still feel like you&rsquo;re lacking energy. Therefore, these tips are useful to keep in mind:<\/p>\r\n\r\n<ul>\r\n\t<li>Eat at least <strong>3 big meals<\/strong> every day: one in the morning (breakfast), afternoon (lunch) and evening (dinner)\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>This should provide you with basic nutrition to get through the whole day.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Eat small, lightweight meals (snacks) throughout the day\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Do this to make sure your metabolism keeps working at speed and prevent you from overeating yourself at one of the 3 big meals. It also provides a little burst of energy and stills your hunger a bit.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Drink water<\/strong> before, during and after any meal. If you just drink water regularly through the day, that is fine as well.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Water is <em>extremely<\/em> essential for your body. It makes sure all waste products are removed, it is crucial for building anything in your body, performing core functions, keeps your blood pressure at a good level and keeps your stomach going (read: it prevents stomach aches).<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Make your <strong>breakfast<\/strong> the healthiest and largest meal of your day, and certainly don&rsquo;t skip it!\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>There are two things crucial to how you feel on a day: how well you slept and your breakfast. Breakfast is supposed to get your body started again and provide you with enough energy to properly wake up. If you don&rsquo;t eat breakfast, eat too quick or the wrong things, there&rsquo;s a great chance you just ruined the rest of your day. Include at least <em>grains<\/em> (brown bread, cereal) and <em>fruit<\/em>.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Don&rsquo;t eat big meals after dinner, especially if you&rsquo;re not going to exercise anymore.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>When you sleep, and I mean really deep sleep, you don&rsquo;t process food anymore. Therefore, if you eat anything less than 2 hours before going to bed, your body will try to process it before you can fall asleep. This causes you to lie awake in bed, not being able to fall asleep &ndash; but it also tries to speed up the process and stores much more of your food as fat, and not as something useful.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n","slur":"fitness-health-eating-drink-part1","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"1","quiz":""},
{"id":"83","title":"[Fitness\/Health] Eat & Drink Healthy (Part 2)","post":"<p>Just as with correct posture, I had to split the article on this one in two to keep everything clean and organized.<\/p> \r\n\r\n<h2>Eating the right foods<\/h2>\r\n\r\n<p>As a kid, you were probably told to adhere to the <em>Healthy Eating Pyramid<\/em>. You hated it, but sadly enough, all the wisdom it claims to possess is true. The pyramid shows everything we need, and how much we need it in relation to each other. It doesn&rsquo;t specify exact portions, but rather the ratio between all the different products.<\/p>\r\n\r\n<p><img src=\"media\/HealthyEatingPyramid.png\" \/><\/p>\r\n\r\n<p>I will talk you through the different components from the bottom to the top:<\/p>\r\n\r\n<p>The foundation of all health and healthy weight comes from <strong>daily exercise &amp; weight control<\/strong>. Exercising daily makes sure everything you eat is used and not stored as fat, while regular weight control is the only way to really check where your weight is going.<\/p>\r\n\r\n<p>Then the first layer consists of the following trio:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Whole Grains: <\/strong>mainly used for their <em>carbohydrates<\/em>, which proved us with energy. Every big meal should have a foundation based upon these types of foods.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: oatmeal, whole wheat bread, whole wheat pasta, brown rice.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Vegetables &amp; Fruits:<\/strong> they contain the necessary vitamins and nutrients to help build your body and keep it functioning properly. Should be eaten as much as whole grains, which means including them as well with every big meal.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: all of them are good, but among the best are: mango, pomegranate, guava, raspberries, orange, avocado (fruits) and kale, Brussels sprouts, broccoli, artichoke, bell pepper, spinach (veggies)<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Healthy fats\/oils<\/strong>: should be eaten a bit less than the previous two, but still form a very important part. We&rsquo;ve already established that the body needs some fat, and then healthy fats are of course much better than the other ones. They are usually only included with dinner, which means you should make them a big part of that meal.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: olive, canola, soy, corn, sunflower, peanut, other vegetable oils &amp; trans-free margarine.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>The second layer has these two on it:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Nuts, Seeds, Beans &amp; Tofu: <\/strong>these are also full of vitamins, minerals, protein and fiber. They could be called the <em>plant foods<\/em>, and more and more research is showing how important they are for the body.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: black beans, navy beans, garbanzos, lentils, almonds, walnuts, pecans, peanuts, hazelnuts, pistachios.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Fish, Poultry &amp; Eggs: <\/strong>fish is recommended by everyone in the food industry because they contain <em>omega-3 fats<\/em> which are amazing for your body and brain. Poultry and eggs usually contain lots of protein together with only a low amount of saturated fat or cholesterol.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: chicken, turkey, and well, eh, fish and eggs.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Try to always have a reasonable amount of one of these groups with every big meal.<\/p>\r\n\r\n<p>The third layer has only one thing on it:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Dairy <\/strong>or <strong>Vitamin D\/Calcium Supplements: <\/strong>These should be limited to 1 &ndash; 2 servings per day. In the old days, everybody was told to drink as much milk as they can. Now, however, it seems to be the case that it does have some positive effects, but as you grow older you don&rsquo;t really need most of it anymore. Recommended for children, adults should restrain from more servings per day.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: milk, cheese, yoghurt, cottage cheese<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>And then, floating on top of the pyramid in a small rectangle. These should all be <strong>used sparingly<\/strong>:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Red\/Processed Meat &amp; Butter: <\/strong>They contain lots of saturated fats. Most of the nutrients they contain can also be received from products that are lower in the pyramid and much healthier\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: beef, pork, bacon, hot dogs<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Salt:<\/strong> salt plays a very important role in our body &ndash; it keeps all fluids in our system balanced. It is therefore closely regulated by ourselves, and if you eat too much salt you will upset this system, leading to all sorts of complications. Salt is sprinkled on top of everything these days so you can&rsquo;t avoid it, but try to pick only foods with low <em>sodium values<\/em>.<\/li>\r\n\t<li><strong>Refined Grains, Sugary Drinks\/Sweets, Potatoes:<\/strong> The so-called <em>refined<\/em> grains are altered whole grains, and altered in such a way that the good stuff is removed and replaced with bad stuff that tastes better. Together with sugary products and potatoes they create fast and wild fluctuations in blood sugar, which usually leads to weight gain, diabetes or heart failure.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: white bread, white rice, white pasta<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Then there is a last layer that is outside the pyramid, because it contains optional things that can sometimes do a lot of good, and sometimes do a lot of harm. It&rsquo;s these two I&rsquo;m talking about:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Multivitamin:<\/strong> most people don&rsquo;t get enough of that from their regular daily eating habits, so using this creates a sort of nutritional backup. It should however never replace healthy eating, and is not enough to make up for unhealthy eating<\/li>\r\n\t<li><strong>Alcohol:<\/strong> you should refrain from it as much as you can. But, studies have shown that one glass of wine a day actually has lots of benefits &ndash; including lowering the risk of heart disease.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>In conclusion, <\/strong>stay away from these things: <strong>processed food<\/strong>, <strong>refined grains<\/strong> and <strong>sugary products <\/strong>(choose unrefined sugars or the needed nutrients from other products instead).<\/p>\r\n\r\n<p><strong>BONUS:&nbsp;<\/strong>A special diagram to show you what your plate should look like at&nbsp;<em>dinner<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/HealthyEatingPlate.png\" \/><\/p>\r\n\r\n<h2>Eating the right way<\/h2>\r\n\r\n<p>You might think &lsquo;eh, well, I think I already know how to eat. I have been doing it my whole life&rsquo;. That is true, but there are still some improvements to be made to how long and in what way you should eat. And all of this has to do with the <strong>hunger signal<\/strong>.<\/p>\r\n\r\n<p>When you get the hunger signal (&lsquo;hmm, I feel a bit hungry&rsquo;), you should immediately find something to eat. If you hold on to some sort of eating schedule every day, that signal will usually come at the right time. If you don&rsquo;t, or can&rsquo;t for some reason, you should also have some food with you or near you.<\/p>\r\n\r\n<p>Because, if you don&rsquo;t start eating soon, there&rsquo;s two things that will happen. First of all, because your body is saying it is running out of resources &ndash; it will start malfunctioning if you don&rsquo;t provide them. Second of all, the moment you see food again you&rsquo;ll be inclined to eat very fast (because you&rsquo;re so hungry). And eating fast isn&rsquo;t good.<\/p>\r\n\r\n<p><strong>Why?<\/strong> Multiple reasons. It takes around 20 minutes for your brain to get the signal it&rsquo;s not hungry anymore. If you eat fast, you always eat more than you really need, because during those 20 minutes you will have eaten much more than you&rsquo;d usually do. On top of that, eating fast means you&rsquo;re chewing and processing your food less than usually. This means that not all the good things inside can be absorbed by the body, and half of the food is wasted.<\/p>\r\n\r\n<p>Therefore, to eat healthy, you need to <strong>eat slower<\/strong>. You need to <strong>chew more<\/strong>, <strong>drink lots of water<\/strong> and talk with family members or colleagues <strong>between bites<\/strong>. This ensures you focus on what you are eating, and gives your body time to wait for the &lsquo;I am full&rsquo; signal.<\/p>\r\n\r\n<p>Also, don&rsquo;t eat while watching TV, a movie or doing some other distracting activity. I know, it is nice to have some snacks when watching that awesome blockbuster, and that is perfectly fine. But don&rsquo;t eat whole meals in front of the telly.<\/p>\r\n\r\n<h2>Growing Muscle<\/h2>\r\n\r\n<p>Eating healthy ensures you stay at a healthy weight, and get the right nutrients to stay alive. But, if you do a lot of exercise and want to <strong>grow muscles<\/strong>, you need to <strong>eat more<\/strong>!<\/p>\r\n\r\n<p>There are three things that are important if you want to do this: <strong>proteins<\/strong> (dairy products), <strong>carbohydrates<\/strong> (pasta, cereal, grains) or <strong>healthy fats <\/strong>(nuts, beans, soy, oil, fish).<\/p>\r\n\r\n<p>Proteins are the building blocks for muscle. The body wants to use them for that specific task, but if there is no muscle to grow, it is quick to store it as fat. So only eat this a lot, if you are going to exercise a lot.<\/p>\r\n\r\n<p>Carbohydrates are important whether you exercise or not, but you might want to increase a bit on these too. They give you energy that is needed for the exercises and controlling muscle growth. However, these are even more likely than proteins to be stored as fat, so watch out.<\/p>\r\n\r\n<p>Therefore, it is recommended you don&rsquo;t up your carbohydrates dosage, but draw your energy from the healthy fats.<\/p>\r\n\r\n<p>Proteins are by far the most important. Here&rsquo;s a good rule of thumb:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Body weight (in <em>pounds<\/em>) x 1.5 = amount of proteins to eat (in <em>grams<\/em>)<\/p>\r\n\r\n<p>And still, make <em>breakfast<\/em> extremely important if you exercise daily. Drink lots of water and always eat a bit <strong>after<\/strong> your workout. Right before usually gives you stomach aches, and exercising actually puts a stop to your food system, so products eaten before a workout are not processed well.<\/p>\r\n","slur":"fitness-health-eating-drink-part2","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"2","quiz":""},
{"id":"84","title":"[Fitness\/Health] Exercise & Fitness","post":"<p>We&rsquo;ve discussed everything there is to know about healthy eating, but we also mentioned that only 50% of a healthy and good-looking body comes from the food. The other 50% comes from staying active, all day every day. But, it&rsquo;s easy to just say &lsquo;stay active&rsquo;, so I&rsquo;ll be explaining what I mean by that.<\/p> \r\n\r\n<p>Leading an active lifestyle has numerous advantages. It ensures you don&rsquo;t store excess fat, that you are strong, and that you can live every day without tiring too fast. Which brings us to our first key point:<\/p>\r\n\r\n<p><strong>What is being fit?<\/strong> Being fit doesn&rsquo;t mean you have muscles popping out all over the place. It doesn&rsquo;t mean being able to kick a soccer ball 50 yards. It doesn&rsquo;t mean being able to casually ride a bicycle for two hours. While it takes practice and effort to accomplish these things, being fit is all about a combination of three things.<\/p>\r\n\r\n<h2>The 3 Types of Exercise<\/h2>\r\n\r\n<p>There are three main aspects of your body that you can and should train. If you are training for a particular sport or goal you might want to focus on one and leave the others behind a little, but if you just want to be fit enough to feel energized throughout the whole day, you&rsquo;ll need to get a bit of all three.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Stamina.<\/strong> How long you&rsquo;re able to stay active. It mainly corresponds with your lung capacity, which grows if you use it more, and shrinks if you don&rsquo;t. But, it also has to do with being able to keep a low and steady heart rate, and how long your muscles can survive lots of stress.<\/li>\r\n\t<li><strong>Power.<\/strong> Refers to how strong your muscles are &ndash; pure strength. If you are stronger, you can run faster, push harder, swing faster, kick faster, carry more weight, etcetera. Stronger does not only refer to how <em>large <\/em>your muscle mass is (as very skinny people can be extremely strong), but also how well they are trained to <em>contract<\/em>.<\/li>\r\n\t<li><strong>Technique.<\/strong> Is about your coordination and ability to let your muscles do exactly what you want. It&rsquo;s about reflexes, visual-spatial abilities, hand-eye coordination, being able to estimate where something will end up or how fast you have to kick something. Some of these are only useful in (specific) sports, but even pouring milk in a glass or cycling has to do with lots of technique.<\/li>\r\n<\/ul>\r\n\r\n<p>Before you start doing serious exercises, it is very important to have <strong>correct posture<\/strong> and <strong>healthy eating practices<\/strong>. If you don&rsquo;t, there&rsquo;s a good chance you will only hurt yourself, overstretch something or lose power instead of gaining it.<\/p>\r\n\r\n<h2>The Required Training<\/h2>\r\n\r\n<p>I will now give you some idea about how you can train every one of these things individually. While most exercises work for all three areas, there&rsquo;s always one or two it targets more.<\/p>\r\n\r\n<h5>Stamina<\/h5>\r\n\r\n<p>The most important one. If you can&rsquo;t exercise for longer than a few minutes, you can&rsquo;t train the other two aspects of fitness. Stamina has to do with the health of your whole body, and should therefore be your basic activity for any day. If you don&rsquo;t have time or motivation to do anything else, at least make sure you do one of these. Stamina is not something you keep once you have it: if you stop exercising for one or two weeks, it will drop and you have to work your way up again.<\/p>\r\n\r\n<p>Typical exercises are <strong>walking, cycling, running, trampoline jumping, skipping (rope)<\/strong>.<\/p>\r\n\r\n<p>Exercises that require more muscle and technique, but still target stamina a lot are <strong>dancing, swimming, climbing<\/strong> and even <strong>singing<\/strong>.<\/p>\r\n\r\n<p>These sports are usually done for a very long time, and are really about doing them until you have reached your stamina limit. When you reach that point, keep going for a few minutes to actually increase your stamina. If you stop right there, you will forever keep that limit.<\/p>\r\n\r\n<p>There&rsquo;s also a group of exercises that very specifically trains stamina and your whole body (even muscles you didn&rsquo;t know existed), which are usually called <strong>aerobics<\/strong> or <strong>cardio<\/strong> (mostly associated with <strong>yoga<\/strong> or <strong>Pilates<\/strong>). However, the key point of these are often to achieve <em>mental awareness<\/em>, so you might want to think twice before signing up for some lessons on these. <strong>Cardio<\/strong> is usually done by people who want to lose weight and become fit overall.<\/p>\r\n\r\n<p>Here are some last tips and tricks:<\/p>\r\n\r\n<ul>\r\n\t<li>If you think stamina exercises are boring, you should do something I call <strong>whole body sports<\/strong>. These are sports that require your whole body to work simultaneously, all the time.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: soccer, hockey, basketball.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>If you can&rsquo;t go out and do something, there are some basic indoor exercises you can do.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: just walking around the house, jogging in place, going up and down the stairs<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Step Exercises:<\/strong> take the first step of your stairs (or anything else you can step on), and go <em>up down up down <\/em>as fast as and for as long as you can. You can either do one leg at a time or both at the same time.<\/li>\r\n\t<li><strong>Jumping Jacks:<\/strong> what you basically do is jump between two positions. The first one is just standing straight, with legs nearly touching each other, arms straight down alongside your body. The second one is standing with legs widespread and arms high up in the air. Now jump between these two positions until you can&rsquo;t do it anymore.<\/li>\r\n<\/ul>\r\n\r\n<h5>Power<\/h5>\r\n\r\n<p>If you have a basic stamina going, you can do muscle exercises. Before you start though, read the section on growing muscles in the <em>eat healthy (part 2)<\/em> article. While exercising, you actually break off a bit of muscle so that it can regrow stronger later (when you are resting). Therefore, if you don&rsquo;t eat enough, you are achieving the exact opposite of what you want!<\/p>\r\n\r\n<p>What should happen with these exercises is that you should stop because your muscles can&rsquo;t take it anymore, and not because you are exhausted. If you reach your stamina limit before you reach your muscle limit, you are either doing the exercise wrong (too fast, usually) or need to increase your stamina.<\/p>\r\n\r\n<p>These are what I like to call the <strong>core <\/strong>exercises, which train every muscle a bit and one half of the body a lot:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Push-ups: <\/strong>We all know them. Go lie down with your face pointing towards the ground, and push yourself up with your arms. Then when you are up (just before locking your elbows, never do that), start going down again &ndash; repeat. Make sure you keep your body perfectly straight (only touching the floor with tips of your toes and hands). If that is too difficult for you at the moment, there are some variations: keep your knees on the floor, move less with every push-up, put your hands closer to your body.<\/li>\r\n\t<li><strong>Pull-ups:<\/strong> even harder than push-ups, but that makes them even better. Seek some sort of bar that&rsquo;s just around as high as your arms can reach above your head. Grab it, pull yourself up, and after being at your highest point for a few seconds slowly let go &ndash; repeat. This trains everything except your legs.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>You can grab the bar in two ways: palms facing away from you, and facing towards you. The first one is harder (but also better), the second one easier.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Leg lifts:<\/strong> The one exercise that focuses on your legs, abs and lower back, and not upper body. Lay down on your back, and simply lift your legs up. It&rsquo;s important to lift them both at the same time, and keep them perfectly straight. The rest of your body must not change position and not help your legs. It&rsquo;s very hard, but very much worth it. If it becomes too easy, add heavy objects on top of your feet to lift with it.<\/li>\r\n<\/ul>\r\n\r\n<p>If you want to train more specifically, there&rsquo;s these exercises. Most people want to have amazing abs and gigantic arm muscles, and forget everything else. I think you know where I&rsquo;m going: that&rsquo;s not the way to do it. Train your whole body, as everything is connected and needs each other to stay balanced. While a muscular upper body is something you can show off, if your legs can barely take the weight you&rsquo;re going to have lots of problems.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Crunches:<\/strong> Okay, one exercise for your abs. Lie down on your back, and move your upper body off the ground <em>only <\/em>by contracting your abs. Then slowly move downwards again &ndash; repeat. You don&rsquo;t have to move up all the way, only a tiny bit off the ground is enough.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>There&rsquo;s some variations on this: you can have your legs flat on the ground or your knees bend, you can have hands behind your head or have them crossed over your upper body and touching the opposite shoulder.<\/li>\r\n\t\t<li>There is some word of warning here though: when done incorrectly, these can create a lot of <strong>back injuries<\/strong>. From my experience, having a correct posture all the time and doing whole body sports\/stamina exercises already asks a lot from your abs, and should be enough to make them quite strong.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Squats:<\/strong> For your legs (and equilibrium), and a bit for back\/shoulders\/arms. Stand straight, just like with the jumping jacks, and then just bend your knees until your upper body is as low as you can hold, then slowly move up again &ndash; repeat. While going down, extend your arms forward until they form a 90 degree angle with your upper body. At first it might be hard not to fall, but you&rsquo;ll quickly get over this.<\/li>\r\n\t<li><strong>Weight Lifting:<\/strong> It really depends with which muscle(s) you lift the weight, but I&rsquo;m going to explain the most basic exercise you can do with any weight (but <strong>dumbbells<\/strong> are still preferred if you have the money). Take the object in your hand, and simply <em>slowly<\/em> move it up and down in front of you. This trains almost everything on that side of the upper body.<\/li>\r\n<\/ul>\r\n\r\n<h5>Technique<\/h5>\r\n\r\n<p>This comes into play mostly when you&rsquo;re doing sports. But, it is also very useful for your daily life, as good coordination and reflexes makes it easier for you to do any daily tasks fast and without mistakes. Catch things when you drop them or somebody throws something at you, walk around the house without stubbing your toe against every piece of furniture, etcetera.<\/p>\r\n\r\n<p>Technique is trained with everything you do &ndash; it&rsquo;s all about practice, which comes in the form of sport. Good soccer players have great kicking technique, hockey players great swinging technique. Any sportsman needs great technique to excel in their area.<\/p>\r\n\r\n<p>Therefore, it is often said that technique is more useful than power. Training for technique should be the first thing you do with a new sport, and not power. The only problem is that it can really only be trained by practicing one or multiple sports for a certain period of time.<\/p>\r\n\r\n<p>You can become a member of a sports community in your neighbourhood, or buy yourself a table tennis table, or practice in a large backyard or playing field nearby (if you are lucky enough to have one of those).<\/p>\r\n\r\n<h2>What to do Now<\/h2>\r\n\r\n<p>Train all three areas! But, don&rsquo;t rush into it, and don&rsquo;t do things you know are too difficult for you right now. Injuries can take a lot of time to heal and make it impossible for you to train.<\/p>\r\n\r\n<p>Also, you might train hard for 10 years, but if you one day just stop being active and eating healthy, you will very quickly lose your progress. The body is a living thing that is constantly using all its resources, and trying to regrow stronger. You only remain fit as long as you stay active every day. Even doing a little can change a lot.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">I must note, though, that studies have shown that people who used to be very muscular or athletic, are able to grow and train their way back into that state much quicker and easier than people who&rsquo;ve never been that fit before. So not <em>all<\/em> progress is lost.<\/p>\r\n\r\n<p>Secondly, significant results don&rsquo;t come fast. Start simple and small &ndash; doing only a few repetitions of an exercise, playing some slow table tennis or walking around your house for 10 minutes can be a good start. Over time, which can be a few weeks to months, you&rsquo;ll be able to easily do many repetitions, or run very fast for half an hour. Be patient, but be active every day.<\/p>\r\n","slur":"fitness-health-exercise-sports-active","cat":"Lifehacks","subcat":"Fitness & Health","video":"","diff":"2","quiz":""},
{"id":"91","title":"Complete Guide to Colour Theory","post":"<p>Colour is everywhere. Whatever you make, it is going to have a colour. Websites, newspapers, magazines, movies &ndash; they are all in their most primitive form a collection of colours.<\/p> \r\n\r\n<p>Lots of people say that black and white aren&rsquo;t colours, but this isn&rsquo;t exactly true. The arguments for that statement could be that black is the absence of colour, and that white is what a page looks like If you don&rsquo;t put any colour on it.<\/p>\r\n\r\n<p>Even though there is some truth to that, black and white (and greys) still play a huge role in general colour theory. And that is what this course is about.<\/p>\r\n\r\n<p>This course will walk you through the different colours this world is made out of, how you combine those to create harmonies, and what emotional reactions different colours evoke.<\/p>\r\n\r\n<p>You can then use this information for all your further projects, either to easily find a good-looking colour scheme or use colours to really make your design&rsquo;s message stand out.<\/p>\r\n\r\n<h2>Overview of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Formats &amp; Definitions<\/li>\r\n\t<li>RGB, CMYK and Pantone<\/li>\r\n\t<li>Using the Colour Wheel<\/li>\r\n\t<li>Using the Colour Triangle<\/li>\r\n\t<li>Harmonies &amp; Relationships<\/li>\r\n\t<li>Context<\/li>\r\n\t<li>Emotions &amp; Meaning<\/li>\r\n        <li>Usage within Design<\/li>\r\n<\/ol>\r\n","slur":"complete-guide-colour-theory","cat":"Design","subcat":"Colour Theory","video":"","diff":"1","quiz":""},
{"id":"92","title":"[Colour Theory] Formats & Definitions","post":"<p>What actually <em>is<\/em> colour?<\/p>\r\n\r\n<p>I&rsquo;m not trying to start a philosophical rambling here, but just want to let you stop and think for a minute. It&rsquo;s important to know what colours are, how they are formed and how we interpret them. If you are aware of this basic theory, it is easier for you to identify colours, predict their effect and match them with each other. I&rsquo;ll not go into great detail, because this is only a beginners guide.<\/p> \r\n\r\n<h2>Light Waves<\/h2>\r\n\r\n<p><img src=\"media\/VisibleLightSpectrum.png\" \/><\/p>\r\n\r\n<p>Colours are light waves. Well, it is a <em>property <\/em>of light - there are light waves we can&rsquo;t see, like UV-rays from the sun. The colour of a light wave is determined by its <strong>wavelength<\/strong>, and visible light is everything within a range of 400 &ndash; 700 nanometres. At the top of that range, light is red. At the bottom, light is violet. Above that 700, is the part that we call <strong>infrared <\/strong>(<em>under red<\/em>). If you go lower than 400, you&rsquo;ll find <strong>ultraviolet <\/strong>(<em>above violet<\/em>).<\/p>\r\n\r\n<p>The names infrared and ultraviolet come from the fact that a higher wavelength, means a lower frequency, so frequency-wise infrared is &lsquo;below red&rsquo; and ultraviolet &lsquo;above violet&rsquo;.<\/p>\r\n\r\n<p>As you can see, the ends of this spectrum are colours that are very close to each other, and that&rsquo;s why colours can be displayed in the famous <strong>colour wheel<\/strong>. That wheel is nothing more than the spectrum of visible light bend into a circle.<\/p>\r\n\r\n<h2>The Eye<\/h2>\r\n\r\n<p>Our eyes interpret light waves and send them to our brain, which makes us see all the colours in the world. There are two different types of receptors in there:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Rods<\/strong>. About 125 million of them. They can&rsquo;t see colours, but make us able to see the difference between shades and tones of lights. They enable us to walk in dark places, and adjust our eyes to bright sunlight. They recognize light and motion.<\/li>\r\n\t<li><strong>Cones<\/strong>. Only 7 million of them. They are divided into three groups, namely <strong>red, green <\/strong>and <strong>blue<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Colour blind people have one or two of these receptors malfunctioning.<\/li>\r\n\t\t<li>Fun fact: we don&rsquo;t really see that many colours. For example, the mantis shrimp has 16 colour receptors, so you could say that animal sees the world in 16 dimensional colour.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p><em>But, I see more colours than just red, green and blue! <\/em>Yes, these cones work together to blend the three different main colours. Combining that with our enormous amount of rods makes us able to see roughly <strong>10 million colours<\/strong>. Although, everybody perceives colour a little differently due to differences in our eyes and brains.<\/p>\r\n\r\n<p>To create order out of this chaos, numerous formats and definitions were invented for working with colour.<\/p>\r\n\r\n<h2>Formats<\/h2>\r\n\r\n<p>There are a few main formats, each being preferred in a different industry. However, most software has support for all of these and they are used interchangeably by everyone, so I recommend learning all of them and picking your own favourite.<\/p>\r\n\r\n<p><img src=\"media\/ColourTheoryFormats.png\" \/>\r\n\r\n<ul>\r\n\t<li><strong>RGB.<\/strong> Represents a colour by setting a value for the <em>red, green<\/em> and <em>blue <\/em>channels respectively. These values can range from 0 to 255.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: Red is <code>rgb(255,0,0)<\/code>, pink is <code>rgb(255,0,255)<\/code>, grey is <code>rgb(127,127,127)<\/code><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>HEX.<\/strong> Also sets values for <em>red, green <\/em>and <em>blue<\/em>. But, it uses hexagonal notation, which means a 16-base number system. This means nothing else than that the letters <strong>A &ndash; F<\/strong> are used for the numbers 10 &ndash; 16. This way, <strong>FF<\/strong> is 255.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: Red is <code>#FF0000<\/code>, pink is <code>#FF00FF<\/code>, grey is <code>#787878<\/code><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>HSL\/HSB. <\/strong>An alternative that is more intuitive, and is popular among graphic designers. It sets the three components <em>hue, saturation<\/em> and <em>light\/brightness<\/em>. I will go into greater detail on this topic later on.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Examples: Red is <code>hsl(0,100%,50%)<\/code>, pink is <code>hsl(300,100%,50%)<\/code>, grey is <code>hsl(0, 0%, 50%)<\/code><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>The first and last notation also sometimes have an <strong>alpha<\/strong> component attached to them (which makes them <em>rgba<\/em> and <em>hsla<\/em>). This does nothing to the colour itself, but sets the opacity of the text\/object it is used on. This means that the final colour will be a mix of the pure colour and the colours of the elements underneath it. It is used very often as an easy way to blend multiple colours. However, if possible, try to avoid setting an alpha (which means omitting it or setting alpha to 1) and create all colours by picking them out yourself. This gives more control and usually looks better.<\/p>\r\n\r\n<p><img src=\"media\/ColourTheoryAlphaChannel.png\" \/><\/p>\r\n\r\n<p>Also, this doesn&rsquo;t mean that you should throw all <strong>colour names<\/strong> overboard. It is still useful to know at least the basic colour names (red, blue, pink, purple, orange, brown, etc.) and some of the advanced ones (maroon, olive, lime, navy, aqua, fuchsia, etc.).<\/p>\r\n\r\n<p><em>Why?<\/em> Say you&rsquo;re working on a project for a client. He is not going to say &lsquo;give that colour some more saturation&rsquo;. He will be saying &lsquo;I want that link to be more orangy&rsquo;, &lsquo;a beige-like background would be great&rsquo; or the even more vague &lsquo;could you make it look more nature-like and sunny?&rsquo; You will need to know what they mean or are trying to say.<\/p>\r\n\r\n<h2>The LAB Model<\/h2>\r\n<p>On top of the colour models I've already mentioned, there's the LAB model. It isn't as intuitive or useful as the others, but it aims to solve one big problem.<\/p>\r\n\r\n<p>This problem is the simple fact that colours have an inherent brightness. Red and yellow appear brighter than green or blue, even when you set it to the same level within the HSL model. Therefore, when you're trying to pick colours with the same level of lightness, you might accidentally get colours with lots of different levels of lightness.<\/p>\r\n\r\n<p>The LAB model solves this deficiency by keeping the perceived lightness of a colour constant, which allows you to easily pick colours with identical brightness, and use colours across different media types. The first parameter stands for <strong>lightness<\/strong>, which you can set to a value between 0% (black) and 100% (white). The other two parameters, simply called <strong>a<\/strong> and <strong>b<\/strong>, represent all colours. The first is a slider ranging from green (<em>-a<\/em>) to magenta (<em>+a<\/em>), while the second is a slider ranging from blue (<em>-b<\/em>) to yellow (<em>+b<\/em>).<\/p>\r\n\r\n<p><img src=\"media\/ColourTheoryLabModel.png\"><\/p>\r\n\r\n<p>This model is often present in software applications, such as Photoshop, as it allows you to pick colours that remain constant across different screen and media types. More about that will be discussed later.<\/p>\r\n","slur":"colour-theory-formats-definitions","cat":"Design","subcat":"Colour Theory","video":"","diff":"1","quiz":""},
{"id":"93","title":"[Colour Theory] RGB, CMYK & Pantone","post":"<p>The three words from the title are very important to remember: they represent the three main colouring systems in the world. Without you knowing it, software you work in, ink you bought or the dye you&rsquo;re painting with works inside one of these systems. There is no good or bad here &ndash; each of them has its own purpose and strong area.<\/p> \r\n\r\n<p><img src=\"media\/RGBvsCMYKvsPANTONE.png\" \/><\/p>\r\n\r\n<h2>RGB<\/h2>\r\n\r\n<p>As seen earlier, the letters represent <strong>red, green<\/strong> and <strong>blue<\/strong>. These are, strictly speaking, the only colours our eyes can see, so it&rsquo;s only logical that people based a system on this. For lots of people, this is still the colour system they use for websites or designing layouts\/magazines\/artwork.<\/p>\r\n\r\n<p>It is easy to find out how to make the basic colours with this system. Red, green and blue are very simple, but mixing those gets you yellow, magenta and cyan &ndash; which are already a bit harder to imagine for some people. Therefore, this system is useful if you use one of the RGB colours as the main colour for your project.<\/p>\r\n\r\n<p>This system is <strong>additive<\/strong>, which means that putting red, green and blue on top of each other creates the magnificent colour <strong>white<\/strong>. It is therefore a system based on light &ndash; multiple colours on top of each other create lighter and lighter versions. This makes it good for computer <strong>screens<\/strong>, as they start with black and create colour by putting light behind pixels.<\/p>\r\n\r\n<h2>CMYK<\/h2>\r\n\r\n<p>Already mentioned earlier, the letters stand for <strong>cyan, magenta, yellow <\/strong>and <strong>black<\/strong>. Most software allows switching between RGB and CMYK, because CMYK is harder to use (for you and your computer), but it also adds extra possibilities.<\/p>\r\n\r\n<p>The system is <strong>subtractive<\/strong>, which means that putting cyan, magenta and yellow on top of each other creates a solid <strong>black<\/strong>. It is therefore a system based on ink &ndash; you start with a blank, white, light paper, and adding colours makes it darker and darker. This makes it ideal for any <strong>printed media<\/strong>, as they start with a white paper and put their content on top of that.<\/p>\r\n\r\n<p>You might think: <em>what does it matter which colours you choose as your base colour?<\/em> And you would have a point, because it&rsquo;s still possible to create the same set colours as with RGB. But, using different colours as your starting point, makes creating certain colours easier than others. CMYK is a colour system based on contrast and darkness, and it&rsquo;s therefore easy to create colours that can hold their own on a piece of paper. RGB on the other hand is easy to use for a colour scheme that can show off a screen&rsquo;s resolution.<\/p>\r\n\r\n<h2>Pantone<\/h2>\r\n\r\n<p>The Pantone system is actually a system for naming colours for international and interdisciplinary use. They have indexed all colours you&rsquo;d ever want to use, and given it a name in the form of <strong>PMS &lt;number&gt;<\/strong>. However, they didn&rsquo;t index all those 10 million colours, but rather a subset of 400 colours that look good within any design and on across different media types.<\/p>\r\n\r\n<p>The colours are therefore less <em>pure<\/em>, but more <em>soft<\/em> or a blend of different colours. And that&rsquo;s the reason they are loved by lots of designers, because they allow you to create a very colourful composition without any colours clashing or the whole project becoming way too cluttered.<\/p>\r\n\r\n<p>While you can do the same without the system, it is recommended you take a look at it. You&rsquo;ll be able to find beautiful colours you can match and use for your design.<\/p>\r\n\r\n<h2>Are Black and White Colours?<\/h2>\r\n\r\n<p>Knowing about these systems, we can try to answer this question.<\/p>\r\n\r\n<p>In RGB, white is created by adding red, green and blue together, so <em>yes <\/em>it is a colour. In print, white is created by not putting any colour on a white page, so <em>no<\/em> it is the absence of colour.<\/p>\r\n\r\n<p>In CMYK, black is created by adding cyan, magenta and yellow together, so <em>yes<\/em> it is a colour. In the real world, objects are black because they absorb all light and don&rsquo;t send out any light waves, so <em>no<\/em> black is the absence of colour.<\/p>\r\n\r\n<p>As you can see, there is no real answer to the question. But, most importantly, it doesn&rsquo;t matter. Black and white are seen everywhere, and are just as much an important part of your colour scheme. Putting black text or white text on a certain background is quite a big decision, so I suggest you look at black and white as colours and treat them that way.<\/p>\r\n\r\n<h2>Colour Usage in Different Media<\/h2>\r\n<p>The reason we have all these different systems, is because there are lots of different types of media &ndash; such as paper, canvas, or computer screens &ndash; we can display colour on. The way they create and display a colour is different, which requires a different setup and which can lead to inconsistencies across platforms. For example, screens optically mix flecks of different light together when viewed from a distance, while printer’s inks are transparent and mixing occurs as colours show through each other.<\/p>\r\n\r\n<p>In the previous chapter we already saw many different formats we can use to construct our colours, and I made it look as though they could all display the exact same colours, but that's not really true. All of them can display the same <em>number<\/em> of colours, but the <em>range<\/em> of colours (which specific ones they can actually create) is different. This range is what we call a <strong>colour space<\/strong> or spectrum.<\/p>\r\n\r\n<p><img src=\"media\/ColourTheoryGamuts.png\" \/><\/p>\r\n\r\n<p>NOTE: Of course, there are many more colour spaces than these, but the ones I mentioned are the most common ones.<\/p>\r\n\r\n<p>Luckily, we can use something called <strong>metamerism<\/strong> to solve all these problems. It's the property that, even though one colour space may differ from another, different colours may appear the same. So, what we need is a way to transform one colour space into another.<\/p>\r\n\r\n<p>The boundaries of the colour capabilities of any colour capture or reproduction system is known as a <strong>gamut<\/strong>, and those gamuts give us a way to translate between colour systems. On the computer, they are described within <em>ICC profiles<\/em>, and any reasonably good graphical software should allow you to use them. Such a profile holds the range of colours within a colour space, its darkest and lightest tones, and how those colours are distributed (the distance between pairs of subsequent colours). I won't go into detail about how to use them, as it depends heavily on your software and project.<\/p>\r\n\r\n<p>I will note, however, that it's often best to work on your design or photograph in an as large gamut as possible, and only change it to something more applicable when you output the final design.<\/p>","slur":"colour-theory-rgb-cmyk-pantone","cat":"Design","subcat":"Colour Theory","video":"","diff":"2","quiz":""},
{"id":"94","title":"[Colour Theory] Using the Colour Wheel","post":"<p>I present to you: the most overused graphic for teaching colour theory!<\/p>\r\n\r\n<p>While it is very important in understanding the basic concepts, almost none of the designs you see in real-life adhere to the colour wheel rules perfectly. The colour wheel gives you a very useful graphical representation for the different rules and guidelines in colour theory,&nbsp; but it only represents a very small set of pure colours, which are rarely &ndash; if ever &ndash; used in a design.<\/p> \r\n\r\n<p><img src=\"media\/ColourWheel.png\" \/><\/p>\r\n\r\n<h2>Primary, Secondary and Tertiary colours<\/h2>\r\n\r\n<p>There are three layers or <em>levels<\/em> that can be distinguished in the colour wheel.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Primary: <\/strong>Red, yellow, blue.<\/li>\r\n\t<li><strong>Secondary: <\/strong>Orange, green, purple. Created by combining primary colours.<\/li>\r\n\t<li><strong>Tertiary:<\/strong> Intermediate colours, created by combining primary with secondary colours.<\/li>\r\n<\/ul>\r\n\r\n<p>While this is nice to know, it doesn&rsquo;t mean that one colour is more important than the other. All spokes of the colour wheel are their own equally important colour category which you can choose as the base of your colour scheme.<\/p>\r\n\r\n<h2>Warm &amp; Cool Colours<\/h2>\r\n\r\n<p>The colour wheel can be divided into two equal halves, each containing 6 consecutive colours. These halves then represent the <strong>warm<\/strong> and <strong>cool <\/strong>colours. This rough distinction is made to identify which colours bring energy, warmth and power to a design, and which colours make it look calm, relaxed and professional.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Warm:<\/strong> The colours from red to light green. Red and yellow are usually seen as bringing the most energy. Warm colours pop at you, giving the appearance of being closer. They feel hot and communicate a feeling of warmth.<\/li>\r\n\t<li><strong>Cool:<\/strong> The rest of the colours, from dark green to purple-pink. Blue is usually seen as the most calm one. Cool colours recede, giving the appearance of being farther away. They remind us of nature and water, and communicate a feeling of calmness.<\/li>\r\n<\/ul>\r\n\r\n<p>I must say, however, that context is very important here, and other properties play a role in communicating certain feelings as well. Next chapters will be about that.<\/p>\r\n\r\n<p>NOTE: There is some debate as to whether green and purple\/pink belong to warm or cool colours. The distinction I used above is the one I was taught, but I often use a pink or light-purple colour as a bright, warm colour. Bottom-line: don&rsquo;t follow these rules blindly, see for yourself.<\/p>\r\n\r\n<h2>Neutral Colours<\/h2>\r\n\r\n<p><img src=\"media\/NeutralColours.png\" \/><\/p>\r\n\r\n<p>Besides these colours with temperature, there&rsquo;s a group that is neither warm nor cool. They can be added to any colour combination, and their meaning or importance will change a lot depending on the colours around it. They often serve as backdrop, or body text colour, and shouldn&rsquo;t draw attention to themselves. They are the <strong>neutrals<\/strong>, which is further split into two categories:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Greyscale: <\/strong>Black, white and all the greys between it are neutral colours. Depending on how bright your colour is, you can add one or multiple of these to it. A dark blue can have white and light greys on it, while a light blue is better off with black or dark greys.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Often times, the colours <em>tan <\/em>and <em>ivory<\/em> are also included here. They are a blend of grey with beige\/brown, and look soft and dull. However, that makes them ideal for a subtle background colour.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Warm neutrals:<\/strong> These include all sorts of brown (even including some orange tints) and beige. They are called warm neutrals because they give off a warm, safe, cosy, natural feeling. Brown is basically a mix of all the colours, so it fits with everything while still having its own unique identity.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>I personally use warm neutrals a lot, because they add a sense of warmth and fullness to a design, while at the same time not interfering with the main colour scheme.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>How to Use the Colour Wheel<\/h2>\r\n\r\n<p>Later on, when we start talking about harmonies and colour context you&rsquo;ll see the true importance of this wheel.<\/p>\r\n\r\n<p>However, in explaining some of the core definitions for colours, it isn&rsquo;t all that useful. For that, we will use colour triangles in the next chapter.<\/p>\r\n","slur":"colour-theory-using-colour-wheel","cat":"Design","subcat":"Colour Theory","video":"","diff":"2","quiz":""},
{"id":"95","title":"[Colour Theory] Understanding Colour Triangles","post":"<p>Colours are said to be three-dimensional. Therefore, the best way to display the spectrum of ( = all the possibilities of) one colour, is to use a triangle.<\/p> \r\n\r\n<p><img src=\"media\/ColourTriangle.png\" \/><\/p>\r\n\r\n<h2>Hue<\/h2>\r\n\r\n<p>Hue = pure <strong>colour<\/strong>. Remember that spectrum of visible light we talked about? Well, the hue scale follows exactly that.<\/p>\r\n\r\n<p>At 0&deg; you get the light with the lowest wavelength, which is <strong>red<\/strong>. At 360&deg; you get the light with the highest wavelength, which is <strong>violet<\/strong>. Setting a value in between those 0 &ndash; 360 degrees will get you one of the intermediate colours.<\/p>\r\n\r\n<p>This property is the most absolute of the three properties. No matter the saturation or brightness, a red hue stays a red colour. Neutral colours, such as grey, are achieved when the hue is not (clearly) visible (due to the settings of the other two properties).<\/p>\r\n\r\n<h2>Chroma \/ Saturation<\/h2>\r\n\r\n<p>Chroma refers to the purity of a colour. It refers to how strong or weak a colour is. A colour with high saturation has no added black, white or grey. Low saturation means all the hue is gone and it has become black, white or grey. Usually, it's wise to stay around medium levels of saturation. As I already mentioned a few times, the point of greatest saturation is not the same for each colour; each has their own inherent basic level of lightness or darkness, which means the effects of low or high saturation aren't equally visible with every hue.<\/p>\r\n\r\n<p>Desaturated colours are restrained and sombre, while saturated colours are vibrant, intense, exciting and dynamic. Saturated colours attract viewer’s attention, but you should use desaturated colours when function and efficiency of the design are the priority. Desaturated, light colours are seen as friendly, while desaturated, dark colours are seen as formal. Try not to combine highly saturated colours, as they can visually clash with one another.<\/p>\r\n\r\n<p>A value for this is usually set in percentages, 0% to 100%.<\/p>\r\n\r\n<h2>Value \/ Lightness \/ Brightness<\/h2>\r\n\r\n<p>Refers to the light and dark properties of colours. Some colours naturally look brighter (<em>yellow<\/em>), while others naturally look darker (<em>violet<\/em>).<\/p>\r\n\r\n<p>A low value colour is usually used for contrast and sometimes background, while colours with high values are used , for the most part, on top or next to each other, to create more aesthetically pleasing designs. Different degrees of value provides a sens of motionin a design, guiding the viewer's eye into, through, and around a visual composition. Additionally, because distant objects appear lighter in the real world, value can create the illusion of depth and space.<\/p>\r\n\r\n<p>Brightness is usually set in percentages, 0% to 100%. Black has the lowest value of all colours, while white has the highest.<\/p>\r\n\r\n<h2>Using this Knowledge<\/h2>\r\n\r\n<p>Knowing this is great and helpful, but what exactly can you do with it? Well, it helps when creating a colour harmonies, colour schemes and understanding what happens when you put colours in a certain context.<\/p>\r\n\r\n<p>While all these subjects are elaborated on in further chapters, there are still some basic definitions I need to explain here. These have to do with creating variations on a hue, either to get the exact colour you want or to create lighter and darker versions of your main colours.<\/p>\r\n\r\n<h2>Shades<\/h2>\r\n\r\n<p>Shades are darker versions of your hue. You get them by adding <strong>black<\/strong> &ndash; the more black you add, the darker the shade.<\/p>\r\n\r\n<p>Shades are, as the name suggests, perfect for creating shadow effects. You can also use them as background colour, while the text is coloured in the pure hue. Shades seem to recede into the distance. Their general use, however, is to simulate black in a colourful manner, serving as a neutral.<\/p>\r\n\r\n<h2>Tones<\/h2>\r\n\r\n<p>Tones are slightly different versions of your hue, making the colour look <strong>duller<\/strong> or <strong>softer<\/strong>. They are created by adding <strong>grey<\/strong> &ndash; the more grey you add, the more the colour will fade and turn into actual grey.<\/p>\r\n\r\n<p>Tones usually create a vintage, sophisticated or elegant feel, and are easy to use plenty of in designs because they are as neutral as colours get.<\/p>\r\n\r\n<h2>Tints<\/h2>\r\n\r\n<p>Tints are lighter versions of your hue. You get them by adding <strong>white <\/strong>&ndash; the more white you add, the lighter the shade.<\/p>\r\n\r\n<p>They are usually used to create highlights, or to simulate white in a bit more colourful way and serve as a warm neutral. As opposed to shades, tints seem to pop out of the design, though in a weaker way than warm\/cool colours provide this sensation of depth.<\/p>\r\n","slur":"colour-theory-understanding-colour-triangle","cat":"Design","subcat":"Colour Theory","video":"","diff":"3","quiz":""},
{"id":"96","title":"[Colour Theory] Harmonies & Relationships","post":"<p>We&rsquo;ve finally come to the fun and useful part: creating colour schemes. Using all the knowledge you&rsquo;ve obtained from previous chapters, it should be easy to follow these rules (or guidelines) and apply them to your own project. We&rsquo;ll be using the colour wheel to represent certain ideas, but they work for every colour in every circumstance of course. Having said that, I want to remind you that the colour wheel is just a simplistic representation to help you learn about colour &ndash; it's best to use a graduated colour wheel with nearly all colours on it in real projects.<\/p> \r\n\r\n<h2>Harmonizing Basics<\/h2>\r\n\r\n<p>There are a few unwritten rules about colour schemes, which I am actually going to write down now, in this chapter.<\/p>\r\n\r\n<p><strong>Rule 1: <\/strong>Pick a maximum of three hues. More hues can really make a design look cluttered, too flashy, even if the colours are picked out very carefully. And on top of that: less is more.<\/p>\r\n\r\n<p><strong>Rule 2: <\/strong>Use a main colour scheme of <em>&nbsp;5 colours<\/em>. This means that at least two of the colours should be shades\/tints\/tones of one of the three main hues. You can try adding more colours, but usually five is enough. You&rsquo;ll have a background colour, text colour, headline\/logo colour, and two colours for accents, special words, highlights, etcetera.<\/p>\r\n\r\n<p><strong>Rule 3: <\/strong>When working with maps, infographics, or any other kind of data or design with a lowest point and highest point, it's best to use a so-called <em>sequential palette<\/em>. Pick diverging colours for both ends, and mix and fade those hues into (slightly) neutral colours in the middle.<\/p>\r\n\r\n<p><strong>Rule 4: <\/strong>Keep a balanced contrast between shades and tints. They are created by keeping the hue the same, and changing the percentage of saturation and that of the brightness. If you create a different shade or tint of your hue, make it at least 10% different from it (or it will look weird and like you added a slightly different colour on accident), but don&rsquo;t move in steps greater than 60%.<\/p>\r\n\r\n<p><strong>Rule 5: <\/strong>Know your colour&rsquo;s meanings. Don&rsquo;t just pick a random colour to start from, but choose one or two base colours that represent what your design wants to say. You&rsquo;ll learn about this in the chapter on colour emotions.<\/p>\r\n\r\n<p><strong>Rule 6: <\/strong>Rules are guidelines. Start by using the rules, but fine-tune your scheme to solve any problems or add some extra. Using the rules you might get a matching colour scheme of five colours, but if three of those look dull, you might want to think again.<\/p>\r\n\r\n<h2>Colour Relationships<\/h2>\r\n\r\n<p>I&rsquo;ll now give you the six typical ways that colours are matched. Do note that these start from a certain base colour, and create the whole colour scheme. Don&rsquo;t start with one colour, move to one that matches and blindly apply the same technique with the new colour. It might work sometimes, but will often fail.<\/p>\r\n\r\n<p><img src=\"media\/ColourRelationshipsHarmonies.png\" \/><\/p>\r\n\r\n<p>The main idea is that analogous schemes are quiet, peaceful and harmonious, while complementary schemes are exciting and playful. Anything in between tries to balance these aspects.<\/p>\r\n\r\n<h3>Analogous<\/h3>\r\n\r\n<p>Three colours right next to each other on the colour wheel. They are perceived as unified, but more varied than monochromatic schemes.<\/p>\r\n\r\n<h3>Complementary<\/h3>\r\n\r\n<p>Two colours opposite of each other. When mixed together, they desaturate or neutralize each other. When positioned right next to each other, however, they increase intensity.<\/p>\r\n\r\n<h3>Split Complementary<\/h3>\r\n\r\n<p>If the contrast from the complementary method is too intense, you can instead choose the colours directly left and right of that opposite colour.<\/p>\r\n\r\n<h3>Double Complementary<\/h3>\r\n\r\n<p>If you want more variation, apply a double split complementary. You&rsquo;ll get four hues out of it that go well together, but it&rsquo;s still recommended to use only two or three of them as main colours and the others for highlights.<\/p>\r\n\r\n<h3>Triad<\/h3>\r\n\r\n<p>The middle ground of all the previous methods. It has variation, three hues, and some contrast but not too much. It's perceived as strong, dynamic, and vibrant.<\/p>\r\n\r\n<h3>Monochromatic<\/h3>\r\n\r\n<p>Different shades, tones and tints of one hue. Apply some of these, but don&rsquo;t make your whole colour scheme only one colour. Such schemes are percevied as unified and homogenous.<\/p>\r\n\r\n<h3>Achromatic<\/h3>\r\n\r\n<p>There&rsquo;s also the <em>achromatic method<\/em>. This simply means that you only use white, black and greys for your design. With everything now being able to display or print colour, using it has fallen out of fashion. However, it can still be the perfect scheme for specific uses, like going for a vintage feel, a black-and-white photography portfolio, etcetera.<\/p>\r\n\r\n<h2>Creating colour schemes<\/h2>\r\n\r\n<p>Knowing these relationships helps a great deal, but there&rsquo;s one last step to make. These guidelines only help you find your hues, which means you still need to set a <em>saturation<\/em> and <em>brightness<\/em> for each one.<\/p>\r\n\r\n<p><strong>Rule 7: <\/strong>Don&rsquo;t use contrasting\/opposite colours with the same saturation or brightness.<\/p>\r\n\r\n<p><strong>Rule 8: <\/strong>With colours that are very close to each other on the wheel (think one or two steps difference), try to keep one of the two (<em>saturation or brightness<\/em>) the same and only change the other by a noticeable amount. Leaving both saturation and brightness at the same level is not recommended, although you get away with it sometimes.<\/p>\r\n\r\n<p><strong>Rule 9:<\/strong> Often times, a transitional colour is added between two colours that are far apart on the colour wheel. Not only makes this the transition between the two less harsh, it automatically gives you an extra hue to play with.<\/p>\r\n\r\n<p><strong>Rule 10: <\/strong>Always play around with shades, tones and tints. Making that subtle change to a colour, adding that second lighter or darker version of the same hue, can make all the difference in the world.<\/p>\r\n\r\n<p>However, as I said earlier, all these rules are great, but you can still make your own <strong>custom schemes<\/strong> which abandon some or all of these theories. It is hard, and takes a lot of effort, but the pay-off is that you can get exactly what you want, and probably nobody has ever done it this exact way before.<\/p>\r\n\r\n<h2>What to do with Neutrals<\/h2>\r\n\r\n<p>Grayscale neutrals can be added to everything, and shouldn&rsquo;t be part of your five colours unless one of your neutral colours is very important. You can always add black, white or greys to your design &ndash; they take over warmth or coolness from surrounding colours.<\/p>\r\n\r\n<p>Warm neutrals offer some more colour, which means you should be a bit more cautious. Don&rsquo;t add more than two warm neutrals, and don&rsquo;t add total black or total white if you already have warm neutrals.<\/p>\r\n\r\n<h2>Creating Mood with Palettes<\/h2>\r\n\r\n<p>To give you a good starting point, I want to give some general guidelines about the mood certain palettes convey, and how different colours relate to each other.<\/p>\r\n\r\n<p>Designs that feel active and dynamic tend to have bright and highly saturated colours contrasting each other. Conversely, designs with a <em>muted palette<\/em> (highly desaturated tints) have a quiet and calming feeling. Additionally, muted palettes are an effective setup for increasing the impact of bright accent colours.<\/p>\r\n\r\n<p>Designs that provide a sense of mystery or exclusivity, tend to have a dark overall feeling, perhaps with some spare but bright highlights\/accents.<\/p>\r\n\r\n<p>Natural colour palettes have an earthy feeling. They often include soft, muted colours, low in saturation, but that doesn't necessarily have to be that way. The primary components are: greens, browns, orange, yellow-ish colours.<\/p>\r\n\r\n<h2>Great Tool for Colour Schemes<\/h2>\r\n\r\n<p>Adobe has made a fine website which allows you to create colour schemes easily, draw inspiration from designs other people made or upload a photo to get its colour scheme: <a href=\"https:\/\/color.adobe.com\/nl\/\">Adobe Kuler<\/a><\/p>","slur":"colour-theory-harmonies-relationships","cat":"Design","subcat":"Colour Theory","video":"","diff":"3","quiz":""},
{"id":"97","title":"[Colour Theory] Context","post":"<p>One of the most important properties of colours &ndash; one that people often forget &ndash; is the fact that our perception of it changes when placed in a different context. Colour is highly contextual; it may connote positive feelings in one context, but portray the opposite effect in another. Colours carry different meanings across different cultures and people.<\/p> \r\n\r\n<p>For example, white text on a black background jumps out more than black text on a white background. Orange between yellow hues looks less bright than the same colour among red hues. Dark brown surrounded by dark green looks less saturated than when placed in a yellow environment. Certain colours can even change our perception of the size of design elements!<\/p>\r\n\r\n<p>While these differences are subtle, they are important. Changing the surroundings of a colour is not going to change the hue, but rather change perception of saturation and brightness. These can work against you, but you can also use these to your advantage.<\/p>\r\n\r\n<p>However, there are no specific rules for how a colour will behave. Most of it is just trying out different combinations and trying to describe the effect they have on each other.<\/p>\r\n\r\n<h2>Shifts in Brightness<\/h2>\r\n\r\n<p><img src=\"media\/ColourContextBrightness.png\" \/><\/p>\r\n\r\n<p>Light colours surrounded by dark ones appear lighter. Dark colours surrounded by light ones appear darker.<\/p>\r\n\r\n<p>A more noticeable, and annoying, concept is that of the <strong>slight lightness difference<\/strong>. If you have two colours with only a slight change in lightness, your brain is going nuts over if they are the same colour or not. To solve this, they usually appear more contrasted than they are, but with a subtle, light crisp at the edge; they appear luminous and unstable.<\/p>\r\n\r\n<p>First of all, I forbid you to ever choose two colours that are nearly exact copies. But if it happens, know that when you place these elements in an environment with a <em>huge<\/em> difference in lightness, these problems are weakened and partially resolved.<\/p>\r\n\r\n<p>NOTE: These crispy edges can also appear when you put high lightness, high contrast colours together.<\/p>\r\n\r\n<p>And lastly, <strong>darker<\/strong> elements are affected more by surrounding elements. Say you create a row of squares with decreasing brightness from white to black, with the same difference in value between each of them. If you place this on a grey background, you will notice that the differences in value between the darker squares appears much greater than that of the white ones.<\/p>\r\n\r\n<h2>Shifts in Saturation<\/h2>\r\n\r\n<p><img src=\"media\/ColourContextChroma.png\" \/><\/p>\r\n\r\n<p>Say we have a moderately saturated colour. If we place it on an almost unsaturated background it will appear to have a higher saturation. If we place it on a highly saturated background, it will appear dull.<\/p>\r\n\r\n<p>This shift in Chroma comes with an extra effect: if the contrast is big enough, a change in <strong>hue<\/strong> might even be perceived.<\/p>\r\n\r\n<h2>Colour Range<\/h2>\r\n\r\n<p>The reason colour behaves so differently in different environments, mainly has to do with two things: <em>colour constancy<\/em> and the <em>afterimage<\/em> effect.<\/p>\r\n\r\n<p>Color constancy is the phenomenon in which your eye reads two instances of the same colour as being the same colour, despite the fact that one instance is in light, and another is in shade. In other words, our mind determines whether a the colour it sees is affected by its surroundings (light, shadow, reflection), and automatically compensates for it.<\/p>\r\n\r\n<p>The afterimage effect states that looking at something for a few seconds (or longer) makes our visual receptors grow accustomed to it, which means that if you look away you see the opposite colours appearing out of nowhere. This means that as your eyes move around a design, even if they move only a little, they will automatically incorporate aspects of the other colours within their view.<\/p>\r\n\r\n<p>Because of these properties, adding a darker colour to a design would create an overall darker effect, while adding a lighter one yields an overall lighter design. This effect is known as optical mixing, or the Bezold effect. Similarly, colours that don't contrast each other blend together and reduce their impact or function as accent colour.<\/p>\r\n\r\n<p>Knowing that colours appear light or dark relative to each other, we can talk a bit about the <em>colour range<\/em> of a project. In some cases, a huge range is good, while others require a much smaller one. Adding colours far apart from each other &ndash; in terms of darkness\/brightness &ndash; increases the (typographical and) colour range of a project. On the other and, colours close in value but different in hue create a vibrant yet soft effect; which becomes even softer when analogous colours are used. In the first case, a big range means lots of contrast and dynamics within a design, but can also mean restlessness and chaos. In the second case, a small range means little contrast or difference, but more calm and static designs.<\/p>\r\n\r\n<h2>Text over Images<\/h2>\r\n\r\n<p>Finding an elegant way to put text over images is often hard. An image contains <em>a lot<\/em> of different colours, and you can never find one way that works well with all of them. Here&rsquo;s what you can do:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Change the image.<\/strong> You can overlay the image with a slightly opaque white or black rectangle to compress the range of colours to a range of near-neutrals. Then you can put any colour over it.<\/li>\r\n\t<li><strong>Put the text in a box. <\/strong>Simply putting the text in its own, perhaps slightly opaque, box also removes all the problems. The image is still visible around and underneath it, but the main focus is on the box and its content. A white or black box usually works, but you can use all sorts of matching colours this way.<\/li>\r\n\t<li><strong>Gradients. <\/strong>If the text is smaller than the image, you can use a gradient from white to transparent (or black to transparent) to only mask the part of the image you need to put the text over (and a bit around it, make it a smooth gradient).<\/li>\r\n<\/ul>\r\n\r\n<h2>Last Notes<\/h2>\r\n\r\n<p>Any effects due to colour context are most apparent in colours that are very close in hue, or are complementary (almost complete opposites of each other when it comes to hue). Any other colour is barely affected by the other colour&rsquo;s presence, but shifts in brightness and saturation can still occur.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"colour-theory-context","cat":"Design","subcat":"Colour Theory","video":"","diff":"4","quiz":""},
{"id":"98","title":"[Colour Theory] Emotions & Meaning","post":"<p>If you don&rsquo;t know where to start, it is advised to think of the main keywords applicable to your project and find a colour that matches. Every colour has its own meaning, purpose and emotional value. Those are mostly international, but some countries even have special meanings for colours that can make the difference between a gigantic fail and a well thought out design.<\/p> \r\n\r\n<p>These natural responses to certain colours are largely a result of our history and evolution. Properly reacting to colour may have helped our ancestors survive, and much of our reactions to various colours seem to result from our association of these colours with certain specific natural objects. We assume that, because one or two things with a certain colour have certain natural properties, everything with that colour works that way. This is a false generalization, but it's very effective and perceived that way by nearly everyone.<\/p>\r\n\r\n<p>On top of that, colours can inherently contain subjective meanings. People's past experience with a colour, the colour through which objects are often represented, it all contributes to a certain association and understanding of a specific hue. For example, red is associated with blood, fire, and sex; blue is associated with sea, sky, and ice.<\/p>\r\n\r\n<p>I will walk you through all the main colours and explain a bit. Every colour will at the end of its section have a line containing all the keywords, feelings and emotions associated with it.<\/p>\r\n\r\n<h2>White<\/h2>\r\n\r\n<p>Popular in minimalist designs, gives other colours a larger voice.<\/p>\r\n\r\n<p>White can be used to portray winter or summer, depending on the elements around it.<\/p>\r\n\r\n<p>Usually associated with wedding dresses and health care (dentists, doctors, nurses)<\/p>\r\n\r\n<p>Used to depict angels and heaven.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Purity, cleanliness, virtue, innocence, wholeness, completion, openness, light, goodness, heaven, sincerity<\/p>\r\n\r\n<h2>Black<\/h2>\r\n\r\n<p>The strongest of all colours, has a positive and negative side. For example, sports teams wearing black are often perceived as meaner and more aggressive, while on the other hand black outfits are associated with sophistication, exclusivity, and intrigue.<\/p>\r\n\r\n<p>Depicts power, elegance and formality, but also evil, death, mystery and mourning. It&rsquo;s, however, also associated with rebellion, the occult and Halloween in some cultures.<\/p>\r\n\r\n<p>Black is often used in edgier, modern designs, and is highly influenced by its surrounding elements. It's Commonly used for typography or other large functional parts because of its extreme neutrality.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Mystery, elegance, evil, formality, strength, fear, power, death, aggression, authority, sophistication<\/p>\r\n\r\n<h2>Grey<\/h2>\r\n\r\n<p>Dark greys can be used in place of black, light greys in place of white.<\/p>\r\n\r\n<p>Normal grey is usually perceived as moody, depressing, cold or the colour of mourning.<\/p>\r\n\r\n<p>Grey is generally used on formal documents, but it can easily be used in a modern design, if formality and professionalism are key.<\/p>\r\n\r\n<p>In web design, grey backgrounds and grey typography is very common.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Moody, conservative, formality, emotionless, dirty, formal, sophisticated<\/p>\r\n\r\n<h2>Brown<\/h2>\r\n\r\n<p>Depending on the saturation and surroundings, brown can be very warm, but also dull or flat.<\/p>\r\n\r\n<p>Commonly used as background colour, and in textures (wood, stone, grainy, old paper).<\/p>\r\n\r\n<p>Can be used with a dark shade as a replacement for black, but that depends on the other elements.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Nature, wholesomeness, dependability, relaxation, confidence, durability, comfort, reliability, wood, earth, stone<\/p>\r\n\r\n<h2>Beige &amp; Tan<\/h2>\r\n\r\n<p>It has the same properties as brown, but contains more grey and white. It is therefore easier to use this as a neutral, but it is also more easily seen as dull.<\/p>\r\n\r\n<p>Usually used in some sort of paper (texture) background, is extremely good at taking on properties of surround elements and therefore usually goes unnoticed in any design.<\/p>\r\n\r\n<p><strong>Keywords:<\/strong> Conservative, piety, dull, neutral, calm, relaxing, crisp, coolness, boring<\/p>\r\n\r\n<h2>Cream &amp; Ivory<\/h2>\r\n\r\n<p>Contains some of brown&rsquo;s warmth, but more of white&rsquo;s good properties.<\/p>\r\n\r\n<p>They usually go unnoticed in a design, convey a sense of history or calm.<\/p>\r\n\r\n<p>Can create elegance and sometimes earthy quality in a design. It can also be used to create soft contrast with darker colours.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Calm, elegant purity, neutral, relaxing, pureness, softness, warmth, quiet, pleasantness, elegance<\/p>\r\n\r\n<h2>Red<\/h2>\r\n\r\n<p>A very hot colour. Associated with fire and violence, but also love and passion. Devil and Cupid. Communism and rebellion.<\/p>\r\n\r\n<p>Associated with danger (traffic lights are red), but also importance (red carpet).<\/p>\r\n\r\n<p>Has many different interpretations outside the western world. In China, it means happiness, prosperity and good luck. In other eastern cultures it&rsquo;s a common colour to use for weddings. In South Africa, it is the colour mourning. In the whole of Africa, it has become the colour associated with AIDS awareness due to the RED campaign.<\/p>\r\n\r\n<p>It is a powerful accent colour, which means it is overwhelming when used too much (especially in a more pure form). Used when power or passion want to be portrayed.<\/p>\r\n\r\n<p>Red is versatile, which means that brighter tints are more energetic, while darker shades are more powerful and elegant.<\/p>\r\n\r\n<p>It&rsquo;s even been shown that red has a physical effect on people, raising blood pressure, respiration rates and metabolism. It suppresses your ability to think rationally, and is best used to drive user behaviour or display (urgent) error messages. Women wearin red are often perceived as more attractive, and men wearing red as more dominant. Because of this, avoid using red in educational, objective or performance-based contexts.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Passion, love, anger, power, strength, energy, intense, war, danger.<\/p>\r\n\r\n<h2>Orange<\/h2>\r\n\r\n<p>Associated with earth and autumn, changing of seasons, and change and movement in general.<\/p>\r\n\r\n<p>Means health and vitality, and draws attention without being as powerful as red. Considered friendly, inviting and a bridge between colourful hues and warm neutrals.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Energy, happiness, vitality, cheerfulness, creativity, warmth, enthusiasm, success, autumn, stimulating<\/p>\r\n\r\n<h2>Yellow<\/h2>\r\n\r\n<p>Mostly associated with joy, sunshine and extreme happiness and brightness. It's also often associated with sales, deals, prices, or other positive commercial designs.<\/p>\r\n\r\n<p>Also means danger, but is used more as a slight warning or comment, whereas red is more urgent. It's therefore used to call attention to notes or messages which aren't necessarely urgent, and it's also the default colour for highlighting.<\/p>\r\n\r\n<p>In Egypt, yellow represents mourning. Japan uses it to portray courage, while it&rsquo;s a colour for merchants in India. Throughout the world, it is used as a symbol of hope (think of yellow ribbons for loved ones at war).<\/p>\r\n\r\n<p>Soft yellows are used as gender-neutral colour for babies or (young) children. They give more of a calm or happy feeling than bright yellows. Dark (or gold-like) yellows can look antique and display a sense of permanence.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Happiness, hope, deceit, energy, happiness, liveliness, curiosity, intelligence, brightness, sunshine, joy, attention getter<\/p>\r\n\r\n<h2>Green<\/h2>\r\n\r\n<p>Means down-to-earth, the start of a new beginning. This means it also portrays lack of experience, envy or jealousy. Is the general colour used when the design has something to do with money. It's also seen as a mark of progress, an indication that a product has a certain feature or component, and a postive colour for call-to-action buttons.<\/p>\r\n\r\n<p>It is calming, in much the same way as blue. But the fact that it has yellow included means it is more balanced, harmonizing, stable and energetic.<\/p>\r\n\r\n<p>Bright greens are vibrant and full of energy, olive greens are more representative of the natural world, while dark greens are the most stable and give a sense of wealth.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Harmony, life, help, new beginnings, abundance, nature, balance, harmony, safety, freshness, healing, fertility, growth<\/p>\r\n\r\n<h2>Blue<\/h2>\r\n\r\n<p>Associated with sadness and calmness, but also peace, spirituality and religions.<\/p>\r\n\r\n<p>Light blues are friendly, relaxed and nature-like.<\/p>\r\n\r\n<p>Bright blues are energizing and refreshing.<\/p>\r\n\r\n<p>Dark blues are stronger and more reliable, excellent for corporate websites or designs. Dark blue, however, is also the standard colour for links on the internet, which means you should refrain from using it for anything else, unless your colour palette is bursting with blue.<\/p>\r\n\r\n<p>In psychological terms, blue is the opposite of red. It boosts creativity and enhances performance, often leading to a greater trustworthiness of a design.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Calm, responsible, sadness, patience, peace, trustworthiness, stability, professionalism, honour, tranquil, masculine, sky, sea<\/p>\r\n\r\n<h2>Purple<\/h2>\r\n\r\n<p>Mostly associated with royalty, creativity and imagination.<\/p>\r\n\r\n<p>Thailand uses it as the colour for mourning.<\/p>\r\n\r\n<p>Dark purples are reserved for wealth, royalty and luxury. Light versions are more romantic and seem more colourful. Often they are also associated with softness, spring and dreams.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Creativity, royalty, wealth, power, ability, wisdom, nobility, luxury, ambition, mystery<\/p>\r\n\r\n<h2>Pink<\/h2>\r\n\r\n<p>Pink is usually seen as the colour for (little) girls, and sweetness (sugar, spice, everything nice). It has the same good properties as red, but not the bad ones because of its softness.<\/p>\r\n\r\n<p>While red creates physical awareness and strength, pink can create physical weakness. It represents love, charm and romance.<\/p>\r\n\r\n<p>Bright pink communicates playfulness, light pink tenderness.<\/p>\r\n\r\n<p><strong>Keywords: <\/strong>Romance, passivity, care, peace, affection, softness<\/p>\r\n","slur":"colour-theory-emotions-meaning","cat":"Design","subcat":"Colour Theory","video":"","diff":"2","quiz":""},
{"id":"99","title":"How to Become a (Better) Writer","post":"<p>Everybody knows how to write &ndash; in some way at least. Elementary school had you learning grammar by writing stories, while high school required you to write essays and reports. If you have passed these, you should at least have the vocabulary, grammar and spelling knowledge to write something. Anything, from a simple short story, to a news report, to an epic fantasy trilogy.<\/p> \r\n\r\n<p>This guide will therefore not teach you any of those three fundamentals of writing, but will provide you with guidelines and tips to use when writing. These are not about how to make up an interesting plot, or your own unique, lively characters, but rather about the actual <em>writing<\/em> in itself.<\/p>\r\n\r\n<p>The best order to put a sentence in, which words to put in or exclude from all your writing efforts, how to create a rhythmic tale, using tropes to your advantage &ndash; all will be discussed.<\/p>\r\n\r\n<p>But, you must note and remember very well that I said <em>guidelines<\/em>. Generally speaking, the tips will make any writing better, clearer and more imaginative. But, breaking the rules is sometimes the better way to go or needed to create a certain effect. Try out the guidelines on your writing, and then see for yourself when it works.<\/p>\r\n\r\n<p>The course is setup in such a way that we start with the smallest elements &ndash; words and punctuation &ndash; and then move our way up the textual ladder to the largest elements; rhythm and anything concerning the whole of your story.<\/p>\r\n\r\n<p>One final comment before we begin: this is a tutorial series, which means it is intended to convey ideas, principles and theory in the best and most understandable way possible. I don&rsquo;t follow the rules all the time, nor is it my intention to create perfect, moving prose with a tutorial. It is solely meant for educating purposes. Read books or well-written news articles if you want to read these principles applied out in the real world.<\/p>\r\n\r\n<h2>Overview of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Vocabulary<\/li>\r\n\t<li>Punctuation<\/li>\r\n\t<li>Sentence Structure<\/li>\r\n\t<li>Rhythm<\/li>\r\n\t<li>Dialogue<\/li>\r\n\t<li>Paragraphs, Chapters &amp; Endings<\/li>\r\n\t<li>Description<\/li>\r\n\t<li>Tropes<\/li>\r\n\t<li>Drafts &amp; Revisions<\/li>\r\n\t<li>General Tips &amp; Tricks<\/li>\r\n<\/ol>\r\n","slur":"how-to-become-better-writer","cat":"Writing","subcat":"Writing with Style","video":"","diff":"1","quiz":""},
{"id":"100","title":"[Writing] Vocabulary","post":"<p>The vocabulary of the average person is more extensive than he or she thinks. They mistake being a writer for learning all sorts of fancy words. The truth however is that a good writer needs to tap into that complete vocabulary in their head, and choose his words carefully. A writer only reaches for the dictionary if there&rsquo;s absolutely no other word that could convey his ideas perfectly. And that&rsquo;s what this chapter is about. I&rsquo;ll talk about being as clear and concise as possible and how to use your existing command of English.<\/p> \r\n\r\n<h2>Use Strong Verbs<\/h2>\r\n\r\n<p>The verb, together with the subject, is the life and soul of your sentences. Choosing the right verb shortens a sentence, removes unnecessary words and makes the action more powerful.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Simple Present or Past<\/strong>. These two are the strongest forms of a verb. Sometimes you simply can&rsquo;t use them, but if that&rsquo;s not the case: make sure you use one of these.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He finished work <\/em>is better than <em>He had finished work <\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Active and Passive:<\/strong> Use active verbs whenever you can. Only use passive verbs if you intend to emphasize the receiver or &lsquo;victim&rsquo; of an action.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Mark hit John<\/em> is better than <em>John was hit by Mark.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Adverbs:<\/strong> They can weaken or repeat the meaning of a verb, and are used way too often. Remove them, or replace them with a stronger verb that has the same meaning.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He stared at her for hours <\/em>is better than <em>he looked at her intensely for hours<\/em>.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Cut Down on Wordiness<\/h2>\r\n\r\n<p>As you are trying to convert an idea or action into a sentence on paper, it grows on words that don&rsquo;t need to be there. A shorter sentence that is clear and says exactly the same, is always better than the lengthier alternative. We&rsquo;ve already seen in the previous section that you can eliminate words by choosing stronger verbs. Here I will give some extra tips.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Remove every extraneous word: <\/strong>every sentence should have a point, something that takes the narrative one small (or giant) step further. Remove any words that sound or feel strange, or seem out of place. If you can&rsquo;t find the point in what you&rsquo;ve written, remove all of it and start over again.<\/li>\r\n\t<li><strong>Complication: <\/strong>Never use a difficult word if a shorter or more familiar word can be used in its place, without changing the meaning in any way.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He used his talents<\/em> is better than <em>he utilised his talents<\/em>.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Don&rsquo;t waste a syllable.<\/strong> Every word you write needs to count, and removing it should change the meaning or function of the whole sentence. Doing so makes sure strong parts of the story get the attention they deserve, and weak parts full of vague language and unnecessary additions are avoided.<\/li>\r\n\t<li><strong>Don&rsquo;t use <em>very<\/em>. <\/strong>Most words have their own special word for their strongest meaning. Use those instead of putting <em>very<\/em> in front of everything. For example:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Very afraid<\/em> should become <em>terrified<\/em><\/li>\r\n\t\t<li><em>Very risky<\/em> should become <em>perilous<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Positive Statements. <\/strong>Negations should only be used for denial or antithesis. Use positive statements &ndash; which means without the word <strong>not<\/strong> anywhere in there &ndash; if that&rsquo;s not the case.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He thought studying Math was useless<\/em> is better than <em>He didn&rsquo;t think studying Math was of much use<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>To practice, you should try writing short stories, maybe even only one page. Just write it from the top of your head, and then reread it and remove any unnecessary parts. Do this several times, to see if you can get as much meaning as possible on one page.<\/p>\r\n\r\n<h2>Originality, Interest and Playfulness<\/h2>\r\n\r\n<p>Even in serious stories, playing with words takes your writing to the next level. Using original images and structures makes your writing unique and elegant, while typing the same clich&eacute;s and basic sentences over and over comes off as lazy, unprofessional writing.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Play with words: <\/strong>Choose words that the beginning writer avoids or doesn&rsquo;t think about, but the average reader understands.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>A writer might use <em>extreme pain<\/em>, while <em>agony<\/em> is a better word that&rsquo;s known to the average reader<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Reject &ldquo;First-level creativity&rdquo;: <\/strong>If you feel a clich&eacute; coming up, stop right there. Write down in simple, basic language what you want to say. Then create word lists or webs, free-associate, be surprised by the images you find after 5, 10, 15 steps.<\/li>\r\n\t<li><strong>Interesting Names: <\/strong>Most people notice names more than anything. Giving something a name is often necessary for your story, and the same is true for naming the main characters. It is therefore useful, but not necessary, to provide interesting names. Names that mean something, names the foreshadow certain events, a name that sounds comical for the funny person, a dark, mysterious name for the badass, etcetera.<\/li>\r\n\t<li><strong>Original Imitation: <\/strong>When getting started as a writer, it&rsquo;s perfectly honourable to imitate someone&rsquo;s style or build upon smart, creative language from others. Learn how other people come up with their own style and linguistic inventions, and use that to upgrade your own skills. Nevertheless, never try to imitate a writer&rsquo;s approach to a particular genre, however simple his or her method may seem.<\/li>\r\n<\/ul>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>I thought it would be fun to give you some exercises to immediately apply these principles. Try to make these sentences shorter, clearer and\/or more elegant.<\/p>\r\n\r\n<ul>\r\n\t<li>Yesterday, Peter was repeatedly telling Mark how to do his job.<\/li>\r\n\t<li>Since John had thrown his computer out of his now broken window, his wife spoke badly of him.<\/li>\r\n\t<li>Peter was never thinking about stopping doing his work, he worked his ass off without any twaddle.<\/li>\r\n\t<li><em>Mark!<\/em> He was shouting loudly. He was shouting as loud as he could, but Mark thought he should let sleeping dogs lie.<\/li>\r\n\t<li>The demure man had been sentenced to five years in jail for embezzling, his enmity working against the feral, fractious, haughty human.<\/li>\r\n\t<li>He said again what he said before, but now with more anger in his voice.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"writing-vocabulary","cat":"Writing","subcat":"Writing with Style","video":"","diff":"2","quiz":""},
{"id":"101","title":"[Writing] Punctuation","post":"<p>Punctuation is the key to making your story easily understandable. To control pace and space. It can be used to create a certain desired effect, but most often it is only there to serve your story. It should be invisible, which only means that the user should not actively notice it&rsquo;s there. In its most basic form, the only thing punctuation is good for, is splitting a bunch of words into sentences, and then subdividing them into sub clauses or dialogue. Using it well makes you look professional and makes the most out of your story, not taking care of it almost immediately results in a messy story and rejection.<\/p> \r\n\r\n<p>I&rsquo;ll walk you through every character that belongs to punctuation, and talk about some special characters and where they (don&rsquo;t) belong.<\/p>\r\n\r\n<h2>Periods<\/h2>\r\n\r\n<p>Periods were invented for one purpose: to mark the end of a sentence. Don&rsquo;t use it for anything else.<\/p>\r\n\r\n<p>Any word next to a period (either the end of the previous sentence, or the start of a new one) is <em>emphasized<\/em>. The period acts as a small period where the reader can think and breathe for a bit, and whatever is around it will have some time to resonate. Therefore, place strong and important words at the <em>beginning<\/em> or <em>end<\/em> of sentences.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Example: <em>In order to emphasize, one should place a word <strong>at the end. <\/strong><\/em><\/p>\r\n\r\n<h2>Question and Exclamation Marks<\/h2>\r\n\r\n<p><strong>Never<\/strong> use multiple after each other. <em>&lsquo;How did you do that????&rsquo;<\/em> doesn&rsquo;t help make clear that the person in question is very, very surprised &ndash; it just makes the writing look childish.<\/p>\r\n\r\n<p>Exclamation marks should be used sparingly, for it is a lazy way of making a sentence more intense.<\/p>\r\n\r\n<p>Question marks of course should be used for actual <em>questions<\/em>, but they can also be used to shorten sentences:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;Why would he do that? she kept thinking&rsquo; <\/em>is clearer than &lsquo;<em>She kept thinking why he would do that<\/em>&rsquo;<\/p>\r\n\r\n<h2>Comma<\/h2>\r\n\r\n<p>The comma is the most natural way to create order in a sentence. It divides parts of a difficult structure without interrupting the flow of the text.<\/p>\r\n\r\n<p>There&rsquo;s some debate about how often a comma should be used, but these are the general rules:<\/p>\r\n\r\n<ul>\r\n\t<li>To set off <strong>introductory elements. <\/strong>It can be omitted though if this introductory element is short.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Falling down the tower, <\/em>he thought about his life.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To set off <strong>parenthetical elements: <\/strong>sub clauses that can be omitted without changing the meaning of the sentence<strong>.<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>The janitor, <em>who never learned how to drive a car<\/em>, couldn&rsquo;t find his keys.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To connect two <strong>independent clauses.<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>He had never thought about it, and he wasn&rsquo;t going to do so this time.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To separate elements in a <strong>series<\/strong> or <strong>list<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>He dropped the book, fled out of the building, and ran to his house.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Quotation Marks<\/h2>\r\n\r\n<p>Used for quotes, dialogue and the necessary apostrophes. In all cases, a <strong>single quote<\/strong> ( <strong>&lsquo;<\/strong><em>blabla<\/em><strong>&rsquo;<\/strong> ) looks more neat and is all you need. You can draw the distinction between quotes and dialogue by using double quotes for one of them, but apostrophes should <em>always<\/em> be single quotes.<\/p>\r\n\r\n<h2>Parentheses (and Brackets and Braces)<\/h2>\r\n\r\n<p>First of all, brackets and braces should never be used in writing. They are one of the fundamental characters in computer programming and some mathematics, and you should leave them to those tasks.<\/p>\r\n\r\n<p>Parentheses on the other hand, are quite a popular tool for the hobbyist writer, mostly to add some small comment or remark to a sentence. While that is exactly what you should use a parenthesis for, it&rsquo;s recommended not to use them too often.<\/p>\r\n\r\n<p>Parentheses are a vertical (slightly curved) line, which means it heavily interrupts the reading flow. The user bumps into a wall, and has to change his mind-set to: oh, this belongs to the sentence, but isn&rsquo;t important enough to be put there without parentheses.<\/p>\r\n\r\n<p>If you add something, check if it really needs to be there. If it has a function and adds necessary value to your sentence, put it there without the parentheses. If you find out you don&rsquo;t actually need to add that small bit of information, omit it entirely and move on.<\/p>\r\n\r\n<h2>Dashes and Hyphens<\/h2>\r\n\r\n<p>There&rsquo;s a difference. <strong>Hyphens<\/strong> are used to join two words into one, or to signal the user that a word is broken off and will continue on the next line.<\/p>\r\n\r\n<p><strong>Dashes<\/strong> are used to add a sub clause, comment or elaboration to the sentence. They are also often applied to add a punch line at the end of a sentence. Usually, you can replace them with commas, semicolons or just starting a new sentence. It&rsquo;s up to you which method you choose, but dashes are best for short comments.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">He decided not to do it &ndash; he was after all only a child.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">The man looked heartbroken &ndash; to me, anyways &ndash; and I couldn&rsquo;t help but feel sorry for him.<\/p>\r\n\r\n<h2>Colon<\/h2>\r\n\r\n<p>A colon announces a word, phrase or clause to come. It is not possible to put anything after that, which means they generally come early in a sentence, and are uncommon in (extremely) long sentences.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">The wise man told me three things<strong>:<\/strong> <em>to eat well, exercise and be happy<\/em>.<\/p>\r\n\r\n<p>As you can see, it works well for these kind of shorter, to-the-point sentences.<\/p>\r\n\r\n<h2>Semicolon<\/h2>\r\n\r\n<p>The semicolon a kind of compromise between the comma and the colon. Its advantage over the colon is that it can be used multiple times in a sentence if necessary, and it interrupts the text flow less. The disadvantage is that it really only has one actual purpose: to connect two <strong>independent clauses<\/strong>, which are related but could be a sentence of their own. It can be seen as a period replacement in most cases.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He said he&rsquo;d be here at 8 o&rsquo;clock. With beer and without his girlfriend.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; could be changed to<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He said he&rsquo;d be here at 8 o&rsquo;clock; with beer and without his girlfriend<\/em>.<\/p>\r\n\r\n<p>However, the next line can&rsquo;t use a semicolon:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt;\"><em>He said he&rsquo;d be here at 8 o&rsquo;clock. I decided to bake pancakes.<\/em><\/p>\r\n\r\n<h2>Multiple Dots, Ampersands and Abbreviations<\/h2>\r\n\r\n<p>Generally speaking, <strong>don&rsquo;t<\/strong>. Ampersands have only one use: in titles, headlines and brand names that need to be short. The same is true for abbreviations &ndash; if you have the room to write something in full, do it.<\/p>\r\n\r\n<p>Multiple dots are usually used to signify a pause or sudden stop. I recommend replacing them with dashes or changing the sentence structure. If you for whatever reason can&rsquo;t do that, use an <strong>ellipsis<\/strong> instead. (See the Typography course on that, as this is more of a typography issue.)<\/p>\r\n","slur":"writing-punctuation","cat":"Writing","subcat":"Writing with Style","video":"","diff":"2","quiz":""},
{"id":"102","title":"[Writing] Sentence Structure","post":"<p>The previous two chapters discussed individual words and punctuation, which means we&rsquo;re now ready for: sentence structure! Choosing stronger verbs or using different punctuation already slightly changes the way a sentence is built, but the rules in this chapter have a much greater impact.<\/p> \r\n<h2>Length<\/h2>\r\n\r\n<p>Whatever floats your boat. Some people say you should avoid long sentences for their unnecessary complexity, while others avoid short sentences because they can&rsquo;t put any information in there. But the answer is: both should be used, and preferably in alternation. This is discussed more in depth in the chapter about <strong>rhythm<\/strong>, but here are some tips.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Prefer simple to technical: <\/strong>At points of greatest complexity, use shorter words, sentences and paragraphs. Occasionally putting difficult or extraordinary words in a sentence is fine, but it automatically makes a sentence seem longer, so watch out.<\/li>\r\n\t<li><strong>In Moderation:<\/strong> Long sentences are perfect for describing something broad or extensive, while short ones are for quick, sudden, standalone actions. Use short, medium and long ones among each other.<\/li>\r\n<\/ul>\r\n\r\n<h2>Starting a Sentence<\/h2>\r\n\r\n<p>The first words of a sentence are very important. They set the tone for the rest of the sentence, or maybe even the rest of the paragraph or book. They should be used to make the sentence&rsquo;s intention or action clear, so you can add details later on. This technique is called <strong>branching to the right<\/strong>.<\/p>\r\n\r\n<p>You should start a sentence with the <strong>subject<\/strong> and <strong>verb(s)<\/strong>, letting subordinate elements branch to the right, towards the end of the sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>He<\/em><\/strong><em>, the man with wooden leg, <strong>took<\/strong> the treasure.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>He took<\/em><\/strong><em> the treasure, the man with wooden leg.<\/em><\/p>\r\n\r\n<p>As you can see, in this case, both versions are fine. If the sentence is short, you can break this &lsquo;rule&rsquo; and do what sounds or looks best. However, as a sentence grows in size, you should always use this technique.<\/p>\r\n\r\n<h2>Ending a Sentence<\/h2>\r\n\r\n<p>At the other end, the last words of a sentence are also emphasized. You can end a sentence with any word or structure you like, but there are some points to consider:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Prepositions:<\/strong> Ending sentences with them is fine, <em>unless<\/em> you can leave the preposition out without changing the meaning of the sentence. In some cases, you can move the preposition closer to the verb, and you should do that most of the times.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Where are you at?<\/em> should become <em>Where are you?<\/em><\/li>\r\n\t\t<li><em>Did you pick that book up? <\/em>&nbsp;should become <em>Did you pick up that book?<\/em><\/li>\r\n\t\t<li><em>Then he threw up<\/em> is fine and can&rsquo;t be changed.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Linking verbs: <\/strong>Again, sometimes you must end a sentence with them, but it is recommended to find a way to avoid it. Ending with a linking verb makes the sentence seem unfinished, distorts rhythm and can be very confusing.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>What is a linking verb? <\/em>A verb that doesn&rsquo;t contain action. Any form of <em>to be<\/em>, <em>become<\/em> or <em>seem<\/em>. If a verb can be replaced by one of these, it is also &ndash; in that context &ndash; a linking verb.<\/li>\r\n\t\t<li><em>Do you know who the prince <strong>is<\/strong>?<\/em> could be changed to <em>Who is the prince?<\/em><\/li>\r\n\t\t<li><em>It is the type of person I&rsquo;ve always wanted to <strong>become<\/strong><\/em> should be changed to <em>I&rsquo;ve always wanted to become that type of person<\/em>.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Between Start &amp; End<\/h2>\r\n\r\n<p>Even though I said about start and end that they are both very important, what&rsquo;s in between is of course the most important. It is the actual content, meaning or action. A strong beginning will help make this clear and draw the reader in, but before the sentence reaches its end it has to fulfil those promises.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Number of Elements: <\/strong>The number of examples, words or similar structures you use in a sentence or story has a meaning.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>One<\/strong>: for power. The reader is focused on this particular word or example, and it is emphasized.\r\n\r\n\t\t<ul>\r\n\t\t\t<li><em>She was strong.<\/em><\/li>\r\n\t\t\t<li><em>He bursts with energy.<\/em><\/li>\r\n\t\t<\/ul>\r\n\t\t<\/li>\r\n\t\t<li><strong>Two:<\/strong> for comparison or contrast. The reader is given two equal components, and has to balance them in his head.\r\n\t\t<ul>\r\n\t\t\t<li><em>She was strong and smart.<\/em><\/li>\r\n\t\t\t<li><em>He bursts with energy but stays calm.<\/em><\/li>\r\n\t\t<\/ul>\r\n\t\t<\/li>\r\n\t\t<li><strong>Three: <\/strong>for completeness, wholeness or roundness. Three is the holy number, three makes a crowd. Using three parts often is stronger and gives more weight than using four or more.\r\n\t\t<ul>\r\n\t\t\t<li><em>She was strong, smart and adventurous.<\/em><\/li>\r\n\t\t\t<li><em>He bursts with energy but stays calm and relaxed.<\/em><\/li>\r\n\t\t<\/ul>\r\n\t\t<\/li>\r\n\t\t<li><strong>Four or more:<\/strong> only use this to list, inventory, compile or expand. A sentence can easily become cluttered and too much to take in when using four or more components.\r\n\t\t<ul>\r\n\t\t\t<li><em>She had it all: strong, smart, adventurous, friendly and even humorous.<\/em><\/li>\r\n\t\t\t<li><em>Even when he bursts with energy he stays calm, relaxed, unimpressed, in control &ndash; whatever you want to call it.<\/em><\/li>\r\n\t\t<\/ul>\r\n\t\t<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Odd and Interesting Things: <\/strong>If you want to spice up your writing, use odd and interesting things next to each other. Write a clean, wonderful, imaginative sequence about the wonders of the night, and it will be predictable and maybe dull. Put a crime next to it where the thief only steals nail polish from the girls he attacks, and it becomes much more exciting.<\/li>\r\n\t<li><strong>Wait a minute, explain!<\/strong> Whenever you&rsquo;ve written something, make yourself stop for a minute to explain the point and\/or meaning of the sequence. If you can&rsquo;t explain the point from the words only, you should rewrite or remove entirely. If you find words that don&rsquo;t fit into the point and switch the focus, remove or replace.<\/li>\r\n\t<li><strong>Separation: <\/strong>Sometimes, we find that we have separated connected elements from each other. There are three very common types I will distinguish:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Infinitive: <\/strong>Placing words between <em>to<\/em> and its corresponding <em>verb<\/em> often creates confusion. <em>&lsquo;It is wrong <strong>to<\/strong> ever <strong>split<\/strong> an infinitive&rsquo;<\/em><\/li>\r\n\t\t<li><strong>Split Verb: <\/strong>If a verb has a preposition that needs to be there, it is advised to put them as close to each other as possible. &lsquo;<em>He decided to <strong>split<\/strong> the chickens <strong>up&rsquo;<\/strong><\/em> can be rewritten to <em>&lsquo;He decided to split up the chickens&rsquo;<\/em>.<\/li>\r\n\t\t<li><strong>Pronouns + Antecedents:<\/strong> A pronoun references something. It&rsquo;s only logical to put that something as close to it as possible. <em>&lsquo;He shot the ball <strong>as fast as possible<\/strong>, to his capabilities that is, which meant a lousy pace, <strong>to<\/strong> his teammate&rsquo;.<\/em> You get the idea, put those two together.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>The time has come! More exercises! Try to find an (improved) alternative for these lines:<\/p>\r\n\r\n<ul>\r\n\t<li>He took it all for granted, wasted his life, never thought twice about his actions, couldn&rsquo;t see his mistakes &ndash; he was destined for failure and rejection and a disgrace for his family he was.<\/li>\r\n\t<li><em>&lsquo;Can you show me which way to go in?&rsquo;<\/em> Anna, the girl without a clue about what was happening, without any idea what being an adult was like, asked the man in black shorts and white T-shirt on the other side of the road.<\/li>\r\n\t<li>He had died. Plain and simple. Yes, easy it was. For the better or not. Whether you like it or not. He lost. His life gone. His soul vaporized. His face crushed. Hit the ground hard, no way back it seemed.<\/li>\r\n\t<li><em>Pedro!<\/em> For days now, she, waking up every night trembling in fear, not knowing what he had become, wondered about Pedro&rsquo;s whereabouts. His face, hands, feet, eyes, fingers, even his moustache she missed and dreamt about.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"writing-sentence-structure","cat":"Writing","subcat":"Writing with Style","video":"","diff":"3","quiz":""},
{"id":"103","title":"[Writing] Rhythm","post":"<p>Rhythm, in writing at least, is what really distinguishes average writing from good writing. You can write a perfectly clear and understandable book without it, but there&rsquo;s a good chance nobody will read past the first page. Rhythm is what makes the narrative jump from the page into the real world. It turns words into words with meaning, each of them having their own place in the song that is your story.<\/p> \r\n\r\n<h2>Ladder of Abstraction<\/h2>\r\n\r\n<p>The ladder of abstraction is a tool that is often used to teach about rhythm. On one end of the ladder, the <em>low end<\/em>, there is the <strong>concrete,<\/strong> real and detailed. On the other end, the <em>high end<\/em>, is the <strong>abstract<\/strong> and general. Whenever you write something, it can be placed somewhere on this ladder.<\/p>\r\n\r\n<p><em>Why is this important?<\/em> Because this is the key to rhythmic storytelling! Mixing low and high levels of abstraction is what you should be doing all the time.<\/p>\r\n\r\n<p>Imagine a man giving a speech or lecture. If he was talking at the same volume, pitch and speed <em>all the time<\/em> &ndash; that would get pretty boring wouldn&rsquo;t it? If two or three sentences were spoken in the exact same way, that would be fine. But more of that, and the speech loses its rhythm and becomes one big blur of words. In that sense, going back and forth between levels of abstraction also makes the text more readable, much in the same way punctuation does.<\/p>\r\n\r\n<p><strong>The take-away rule: <\/strong>Often shift your focus to capture both landscape and character. Think of it as looking into your story&rsquo;s world using a camera from all angles and distances, and describe what happens.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Once upon a time, there was a high school, called Junior High. It was known for its knowledgeable staff and simplicity in teaching methods. <strong>(abstract) <\/strong>It stood there tall, brown, with a red roof and dark blue doors. <strong>(less abstract)<\/strong> And on a certain Monday, Peter went inside those doors. He was young, only twelve years old. Bright, getting good grades, yet with an awful memory &ndash; he couldn&rsquo;t even remember what he had eaten yesterday. <strong>(concrete)<\/strong> But little did he know that his world would soon be turned upside down. <strong>(abstract again)<\/strong><\/em><\/p>\r\n\r\n<h2>Scene Sequence<\/h2>\r\n\r\n<p>This is an area overlapping with the actual plot of your story, but it also has some uses in actual writing. What I mean by scene sequence is this:<\/p>\r\n\r\n<p>Often, we write a scene where something important happens, and in that scene a character thinks back or we take the reader back to a significant moment earlier in time. While flashbacks can be used as a good thing if you intend it, it is recommended to write <strong>scenes in sequence<\/strong>.<\/p>\r\n\r\n<p>If an event is important enough to be included as a flashback in another scene, it is important enough to get its own scene. Place the reader in the scene when it is happening. Flashbacks interrupt reading flow and rhythm, and are hard for a reader to snap in and out of.<\/p>\r\n\r\n<p><em>What about <strong>repetition?<\/strong><\/em> Repeating a word, sentence or whole part of your story can be useful. It chains parts of your story together, and if that is what you intend, use it. But, if on rereading you find repeating words or phrases in your work that you didn&rsquo;t intend, remove or rewrite.<\/p>\r\n\r\n<p>Using the scene sequence tip, it is possible for you to eliminate any flashbacks that cause repetition. Because you&rsquo;ve included a scene as it happened, when it happened, you can assume the reader still knows about it and don&rsquo;t need to repeat anything from it.<\/p>\r\n\r\n<h2>Sentence Length<\/h2>\r\n\r\n<p>Already touched on the subject in <em>sentence structure<\/em>, but here it goes again, because it is important you remember this:<\/p>\r\n\r\n<p>Rhythm is achieved by using sentences of varying length. Placing two or three sentences of the same length after each other is fine, but any more than that will create a certain effect, and you won&rsquo;t necessarily always want that.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Short sentences<\/strong> are quite uncommon, and create an effect of action, surprise and excitement.<\/li>\r\n\t<li><strong>Medium sentences<\/strong> are the usual length, and lots of these create a monotone narrative.<\/li>\r\n\t<li><strong>Long sentences<\/strong> are more common among writers, and are used when there&rsquo;s no action taking place and the writer is explaining or describing something.<\/li>\r\n<\/ul>\r\n\r\n<p>Control the pace of your story with these tips.<\/p>\r\n\r\n<h2>Parallel Lines<\/h2>\r\n\r\n<p>In order to create order in the sea of words, you should use something called <strong>parallel lines<\/strong>.<\/p>\r\n\r\n<p>What they mean is that <em>equivalent thoughts demand parallel constructions<\/em>. Which is a good one-liner, but still vague. Look at it this way:<\/p>\r\n\r\n<p>Say you start your book with a paragraph about how person X always triple checks if he locked every door at night. He is afraid, insecure, has lots of valuable possessions, whatever. But, over the course of the book, he learns a lot and he lets go of this anxiety.<\/p>\r\n\r\n<p>Then if you end the book with a paragraph about how person X always leaves the door open at night <em>in almost the exact same way<\/em> as the opening paragraph, readers should automatically see that connection.<\/p>\r\n\r\n<p><em>What do you mean with <strong>the exact same way?<\/strong><\/em> Qua grammar or structure. If you write a sentence with only very short words, you can balance that with another sentence with only very short words. If you use three examples in a sentence, you can balance it by using three in the next one. If you create a phrase that starts with <em>I have a dream<\/em>, and then start the next phrase with the same words, you get a connection!<\/p>\r\n\r\n<p>You&rsquo;ve seen now that parallel lines create connections or balance two parts of a story against each other. But, what if you want to make one part stand out? That&rsquo;s when you <em>cut across<\/em> the parallel lines. If you balance everything in a paragraph against each other, except for one sentence, then I think you know which sentence is going to stand out.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She was smart, young and friendly<\/em> is better than <em>She was smart, young and able to be nice to people she just met.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He liked soccer as much as he liked eating<\/em> is better than <em>He liked soccer as much as he always got a good mood from shoving food into his mouth.<\/em><\/p>\r\n","slur":"writing-rhythm","cat":"Writing","subcat":"Writing with Style","video":"","diff":"3","quiz":""},
{"id":"104","title":"[Writing] Dialogue","post":"<p>Dialogue is very important. A story is in its most basic form a group of characters performing actions and <em>interacting<\/em> with each other. Dialogue has three main advantages:<\/p> \r\n\r\n<ul>\r\n\t<li>The reader finds out details or specifics about the personality of a character<\/li>\r\n\t<li>It places the reader right into the action, instead of describing things from a faraway view<\/li>\r\n\t<li>You can subtly give clues, leave information behind or steer the reader in the wrong direction.<\/li>\r\n<\/ul>\r\n\r\n<p>It is because of these three reasons that I recommend replacing descriptions and explanation with carefully crafted dialogue whenever possible.<\/p>\r\n\r\n<p>NOTE: Writing dialogue is often seen as a separate skill from writing. Some people are born with a talent for it, others find it difficult to get a natural conversation flowing. With practice you can upgrade your dialogue, but what helps the most is listening to lots of conversations in the real world (participating in the discussions is allowed, but you usually learn more from just listening).<\/p>\r\n\r\n<h2>Typesetting<\/h2>\r\n\r\n<p>Before we move on, some tips on how to display dialogue. It needs to immediately be clear that a piece of text is part of a dialogue, but you don&rsquo;t want white spaces or special characters all over the place.<\/p>\r\n\r\n<ul>\r\n\t<li>Start a new line for every new speaker.<\/li>\r\n\t<li>Put quotes around the spoken words (double or single, but be consistent).<\/li>\r\n\t<li>Punctuation should be put<strong> inside<\/strong> the quotes.<\/li>\r\n\t<li>If you want to put a part of the sentence after the quote, use a <strong>comma<\/strong> at the end.<\/li>\r\n\t<li>Some writers prefer to always start with the spoken text, if a sentence contains dialogue. They also often indent such dialogue lines, or put a dash ( &ndash; ) in front of it.<\/li>\r\n<\/ul>\r\n\r\n<p>For example: <em>&lsquo;Henry, come here,&rsquo; Hanna yelled upstairs. &lsquo;Dinner is ready!&rsquo;<\/em><\/p>\r\n\r\n<h2>Dialogue Tags<\/h2>\r\n\r\n<p>In every dialogue, it is vital that you make clear who is saying what, and that is done with so-called <strong>dialogue tags<\/strong>. There are four ways to clarify who&rsquo;s talking:<\/p>\r\n\r\n<ul>\r\n\t<li>Most of the time, a simple <strong>&lsquo;said X&rsquo; <\/strong>or <strong>&lsquo;X said&rsquo;<\/strong> is what you want. It is short and clear.<\/li>\r\n\t<li>Sometimes, you want to switch <em>said<\/em> for another verb or construction, like <em>whispered<\/em> or <em>yelled<\/em>. I say sometimes, because it&rsquo;s easy to overuse this and create unrealistic, cluttered dialogue.<\/li>\r\n\t<li>Omit the dialogue tag entirely. Only use this if it is perfectly clear from the sentence or context who&rsquo;s talking.<\/li>\r\n\t<li>Weave it into an action sentence. Create the next sentence after the dialogue in such a way that it describes an action but also clarifies who&rsquo;s talking.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>&lsquo;<em>Oh, don&rsquo;t worry.<\/em>&rsquo;<em> Anna grabbed her bag and pulled out a yellow envelope. &lsquo;Here, Peter wanted you to have this.&rsquo;<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Quotes vs Dialogue<\/h2>\r\n\r\n<p>There&rsquo;s a difference most people aren&rsquo;t aware of.<\/p>\r\n\r\n<p><strong>Quotes<\/strong> are taken out of the narrative. They are <em>about<\/em> an action and present information or explanation.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&ldquo;More than a hundred euros a month we can save just by not eating out as much<\/em>&rdquo; &ndash; Bob Brittle on how his family copes with mounting credit card debt.<\/p>\r\n\r\n<p>Where was Bob? How did he say it? What was the question? Quotes are usually disembodied.<\/p>\r\n\r\n<p><strong>Dialogue<\/strong> is <em>in <\/em>the action and presents a reader with a form of action. You should always use dialogue<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;More than a hundred euros a month we need,&rsquo;<\/em> said Bob, as he thoroughly searched his wallet for a few dollars. <em>&lsquo;We can save it just by not eating out as much.&rsquo;<\/em><\/p>\r\n\r\n<p>Dialogue is preferred over quotes, always and everywhere.<\/p>\r\n\r\n<h2>Environment<\/h2>\r\n\r\n<p>Dialogue that is unrealistic is the fastest way to make your story look fake and your writing careless. Whenever people speak, they are somewhere, at a certain moment in time, feeling a certain way, etcetera &ndash; and it all affects the conversation.<\/p>\r\n\r\n<p>A conversation between people in a shelter will be a lot of whispering, words chosen carefully, and someone regularly telling everybody to shut up because somebody is coming.<\/p>\r\n\r\n<p>A conversation in broad daylight, in a busy shopping district, will be much lighter. The people may be walking while talking, or trying on clothes, or cars pass by with considerable noise.<\/p>\r\n\r\n<p>You should not put focus on these kind of things, unless they of course have a meaning or some importance in your story, but you should use them to make the dialogue more lively.<\/p>\r\n\r\n<h2>Character<\/h2>\r\n\r\n<p>Together with environment, making different personalities interact makes a dialogue realistic. Dialogue is the best way to show a character&rsquo;s personality: how they talk, behave, react to certain events, feel about certain topics, etcetera.<\/p>\r\n\r\n<p>One may talk decently and with well-chosen words, while another utters slang. One may be very quiet, while another constantly yells and seeks attention. One speaks with short and concise words, while another person takes four long sentences to say the same thing.<\/p>\r\n\r\n<p>You must, however, always make sure that the dialogue is easily <em>readable<\/em> and <em>understandable<\/em>. Spelling words incorrectly to show someone dropped out of school is not the way to go. Going over the top with this only annoys readers.<\/p>\r\n\r\n<h2>General Tips &amp; Tricks<\/h2>\r\n\r\n<p>One important thing to remember is: <em>dialogue in stories must be as realistic as possible, but not be described exactly how they work in real life<\/em>. Let me explain that.<\/p>\r\n\r\n<p>Conversations usually start with a <em>&lsquo;Hi, how are you?&rsquo; &lsquo;Fine. You?&rsquo; &lsquo;Great!&rsquo;<\/em> and more. Cut the crap &ndash; only use the dialogue to display what you want to make clear. Jump into it at the most important point, and get out of there before people are saying goodbyes and talking about the weather.<\/p>\r\n\r\n<p>There&rsquo;s also lots of pauses, people thinking about their words or topics, or slips of the tongue. While you can use these to show character or make a topic more important, you should generally leave these out of the conversation.<\/p>\r\n\r\n<p>Nevertheless, don&rsquo;t make a dialogue a group of spoken words with &lsquo;said X&rsquo; and &lsquo;said Y&rsquo; after it. Put action sentences between them, vary your words for a better rhythm. If somebody is speaking for a long time, cut somewhere in the middle to let the reader breathe for a moment and then continue.&nbsp;<\/p>\r\n\r\n<p>And last but not least, the common beginner mistake: writing dialogue focussed on the reader. To make something clear, you might be tempted to repeat sentences or write something that the character already knows. Avoid this, and find more subtle or elegant ways to bring information.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;Captain, if you don&rsquo;t take action now, we will hit the rocks!&rsquo;<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">The captain knows this, it has probably been mentioned earlier. What would be more logical for a person to say in that situation is something like:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;Captain, you need to make a decision, now!&rsquo;<\/em> or <em>&lsquo;We only have five minutes left (before we hit the rocks), you can&rsquo;t delay your orders any longer.&rsquo;<\/em><\/p>\r\n","slur":"writing-dialogue","cat":"Writing","subcat":"Writing with Style","video":"","diff":"2","quiz":""},
{"id":"105","title":"[Writing] Paragraphs, Chapters & Endings","post":"<p>Now we are ready to move a few steps up the textual ladder. We&rsquo;ve learned how to craft beautiful sentences, which will be put to use for creating paragraphs and chapters &ndash; which will ultimately lead to a finished book or story.<\/p> \r\n\r\n<h2>Paragraphs<\/h2>\r\n\r\n<p>Any story is a collection of paragraphs. Every paragraph should have a point to make, and one point only. They break up a story into digestible chunks, give the reader some breathing space, and help separate different events or ideas for the reader. There is not one recommended length for a paragraph, but it&rsquo;s always recommended to make not too long, meaning there should be at least a few paragraphs per page.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Short paragraphs<\/strong> bring readers to a sudden, dramatic stop. Paragraphs in newspapers are usually short.<\/li>\r\n\t<li><strong>Long paragraphs<\/strong> are for developing an argument, building part of a narrative or giving lots of related examples. Paragraphs in books are usually long.<\/li>\r\n\t<li><strong>Balance form with content: <\/strong>the way a paragraph looks is just as important as its content. When you see a page, the elements that stand out most are the paragraphs and their shapes. Paragraphs with an ugly shape or look &ndash; too little sentence length variation, too much special characters, whatever &ndash; will make any writing look unprofessional or just ugly.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>The more you read and write, the more paragraphs will be forming on their own. Paragraphs are the beat of the story instead of the actual melody. You can only create a good beat yourself if you&rsquo;ve heard a lot of good (and bad) beats.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Show &amp; Tell<\/h2>\r\n\r\n<p>In the section on <em>rhythm<\/em> we already discussed the <strong>ladder of abstraction<\/strong>. Good writing constantly move up and down that ladder, back and forth between concrete and abstract language.<\/p>\r\n\r\n<p>This directly ties in with one of the most common writing advices: <strong>show, don&rsquo;t tell<\/strong>. But, it&rsquo;s an often misunderstood one-liner. Let&rsquo;s first see what &lsquo;show&rsquo; and &lsquo;tell&rsquo; actually mean:<\/p>\r\n\r\n<p>To <strong>show:<\/strong> explaining or giving information by displaying action. You don&rsquo;t tell the reader how someone feels, but you show it through their actions.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Mark put his fist into the wall, causing several paintings to drop down. He kicked the door open and slammed it shut less than a second later. They could still hear him grumble and stumble down the hallway.<\/em><\/p>\r\n\r\n<p>To <strong>tell:<\/strong> explaining or giving information by simply telling it to the reader. You, as a sort of God, stand above the story and all characters and can tell the reader exactly how someone feels, what has happened, what will happen, etcetera.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Mark left the room angrily<strong>. <\/strong><\/em>or <em>Then Mark left the room. He was angry. <\/em>(don&rsquo;t do this)<\/p>\r\n\r\n<p>In real life, there isn&rsquo;t a person standing beside you all the time that knows all. Telling is therefore an unnatural way of displaying action, and it&rsquo;s preferred to show. However, when giving a description of a landscape for example, there is nobody around to display all the landscape&rsquo;s properties through action. That is when showing would be extremely weird, and it is better to tell.<\/p>\r\n\r\n<p>Knowing this, we can rewrite that advice to: <strong>whenever possible, show. Otherwise, tell.<\/strong><\/p>\r\n\r\n<p>It&rsquo;s easy to relate this to the ladder of abstraction. <em>Showing<\/em> means low on the ladder, while <em>telling<\/em> is high.<\/p>\r\n\r\n<h2>Cliffhangers<\/h2>\r\n\r\n<p>Most people only know cliffhangers as interesting actions happening at the end of a TV episode or movie, to make you watch the next.<\/p>\r\n\r\n<p>While this is certainly true, cliffhangers can be found everywhere, even more so in stories. You want a reader to continue reading, but why should he or she? Feed the reader small <strong>internal cliffhangers<\/strong> every now and then to keep the story and reader going.<\/p>\r\n\r\n<p>At the end of a chapter, write a cliffhanger. At the end of a long, descriptive paragraph: write a cliffhanger. Give the reader rewards for continuing to put time and effort into your work.<\/p>\r\n\r\n<h2>General Tips &amp; Tricks<\/h2>\r\n\r\n<p>There are two things that I couldn&rsquo;t quite place anywhere else, so here they go:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Word Territory: <\/strong>Avoid unintended repetition &ndash; it can be used for rhythm or emphasis, but nothing else. This is true for distinctive words, but also for key words.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Distinctive Words: <\/strong>Words you don&rsquo;t see or use very often, words that may only appear once or twice in your book at all. <em>For example:<\/em> silhouette, ornament, jingle.<\/li>\r\n\t\t<li><strong>Key Words:<\/strong> Most important building block of sentence, usually verbs or subjects. <em>For example: <\/em>said, that, create<\/li>\r\n\t\t<li>For example, I initially wrote the first sentence of this paragraph like this: &lsquo;<em>Avoid unintended repetition, unless you want to use it for rhythm or emphasis, but don&rsquo;t use it for anything else&rsquo;. <\/em>As you can see, multiple instances of the word <em>&lsquo;use&rsquo; <\/em>and repeating the basic meaning of the sentence really messed up that one.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Serious or Funny: <\/strong>There&rsquo;s a general rule to apply when it comes to most serious and least serous topics.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong>Back off<\/strong> when talking about serious topics. Write exactly as it happened or is, be honest, don&rsquo;t use fancy words or phrases, understate.<\/li>\r\n\t\t<li><strong>Show off<\/strong> when talking about topics that are not serious at all. Go wild with your language and imagination, exaggerate.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Endings<\/h2>\r\n\r\n<p>I&rsquo;m just going to say it: endings are way more important than beginnings. Beginnings are not what makes a reader eager to read on &ndash; endings are. They should bring up new questions and new developments, and the reader thinks the next paragraph might contain all the answers. The only beginning that matters, is the very first paragraph of your story, from that moment on every paragraph and chapter needs a finishing sentence that makes the reader stay up at night.<\/p>\r\n\r\n<p>There are lots of ways to create endings, but I&rsquo;ve included a list of the most common ones:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Closing the Circle: <\/strong>The ending reminds us of the beginning by returning to an important place, re-introducing a key character, using the first paragraph again but in a slightly different way.<\/li>\r\n\t<li><strong>The tie-back: <\/strong>Tie your ending to some element in the body of your story. If that element is odd or off-beat, it is usually used for comical purposes.<\/li>\r\n\t<li><strong>The time frame:<\/strong> The writer creates a tick-tock structure with time advancing relentlessly. To end the story, the writer decides what should happen last.<\/li>\r\n\t<li><strong>The space frame:<\/strong> the writer is less concerned with time than with place or geography. To end, the writer decides our final destination.<\/li>\r\n\t<li><strong>The payoff:<\/strong> The longer the story, the more important the payoff. This does not require a &ldquo;happy ending&rdquo;, but a satisfying one, a reward for a journey concluded, secret revealed or mystery solved.<\/li>\r\n\t<li><strong>The epilogue: <\/strong>The store ends, but life goes on.<\/li>\r\n\t<li><strong>Problem and solution:<\/strong> The writer frames the problem(s) at the top and then offers readers possible solutions and resolutions.<\/li>\r\n\t<li><strong>The apt quote:<\/strong> Often overused. Character speaks in endings, capturing in their own words a neat summary or distillation of what has come before.<\/li>\r\n\t<li><strong>Look to the future: <\/strong>What do you think will happen next? What is the likely consequence of this decision or those events?<\/li>\r\n\t<li><strong>Mobilize the reader:<\/strong> Point the reader in another direction. Attend this meeting, read that book, send an e-mail message to the senator, donate blood for victims of a disaster.<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"writing-paragraphs-chapters-endings","cat":"Writing","subcat":"Writing with Style","video":"","diff":"3","quiz":""},
{"id":"106","title":"[Writing] Description","post":"<p>Description is the biggest problem of them all for most beginning writers. You have probably written an essay, report, letter or grocery list multiple times in your life &ndash; but there&rsquo;s usually not a single descriptive sentence in there. The problem is therefore not that description is extremely difficult, but just that we&rsquo;re not at all used to writing descriptively.<\/p> \r\n\r\n<p>Any sentence that <em>shows<\/em>, and doesn&rsquo;t <em>tell<\/em>, is descriptive. When you say<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&lsquo;<em>He was smart&rsquo;<\/em><\/p>\r\n\r\n<p>you&rsquo;re just making a sudden statement. If you change that to<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&lsquo;<em>He passed every test with flying colours, while still finding the time to hang out with friends. He liked solving crossword puzzles at breakfast, and had &ndash; only a few days ago &ndash; set a personal record of a mere 30 seconds.&rsquo;<\/em><\/p>\r\n\r\n<p>you are using description to make your store much more lively!<\/p>\r\n\r\n<p>A successful writer must be able to describe <em>anything<\/em>, in a way that will cause the reader to prickle with recognition.<\/p>\r\n\r\n<h2>Figurative language\/tropes<\/h2>\r\n\r\n<p>Figurative language can be used to compare or contrast unlike things. You can use them to express something unique, something you wouldn&rsquo;t be able to easily say without figurative language.<\/p>\r\n\r\n<p>On top of that, it also says a lot about how a character sees his or her surroundings. Somebody who loves nature will use personification to attach human attributes to trees, plants or animals. Somebody who hates their neighbourhood will compare it with all the worst things in life.<\/p>\r\n\r\n<p>Some types of figurative language are found very often and are almost unnoticeable, but others draw much more attention to themselves. You should therefore only use a small amount of figurative language per (descriptive) paragraph.<\/p>\r\n\r\n<p>More on the actual types and implementation of tropes can be found in the <em>tropes<\/em> chapter.<\/p>\r\n\r\n<h2>Only describe what&rsquo;s necessary<\/h2>\r\n\r\n<p>A good description isn&rsquo;t an overfull one. For different characters, different things are noticeable or relevant. Only use description to paint a vivid picture of the world in the reader&rsquo;s mind and to reveal character. Including too much description drops the story&rsquo;s pace and makes the reader read and remember things that are not at all relevant to the story.<\/p>\r\n\r\n<p>A good description consists of only a few well-chosen details that stand for everything else. In most cases, these will be the very first ones that come to mind.<\/p>\r\n\r\n<p>A man who just lost a child in a car accident might fixate on the sounds of traffic, but drown out the sounds of people laughing and birds chirping. The fact that he wears a green T-shirt and has a small pimple on his face are probably not relevant.<\/p>\r\n\r\n<h2>Sensory description<\/h2>\r\n\r\n<p>Humans have 5 senses that help us perceive the world: <strong>sight, sound, taste, touch &amp; smell<\/strong>.<\/p>\r\n\r\n<p>When we write, we usually describe something by what it looks like. While you may paint the most beautiful pictures that way, the words will never really come to life &ndash; you need to include all the senses for that.<\/p>\r\n\r\n<p>When describing something, really place yourself in that scene. Try to find out what things feel, smell or taste like. Hear the sounds and find one or two that are most dominant or relevant to the story.<\/p>\r\n\r\n<h2>Name things properly<\/h2>\r\n\r\n<p>Don&rsquo;t use vague descriptions. General adjectives, nouns, and passive verbs should never be used. The whole point of description is to put a scene or situation as realistically as possible onto paper.<\/p>\r\n\r\n<p>Let&rsquo;s say there&rsquo;s something lying on a table. If it&rsquo;s unnoticeable or not at all relevant to the story, you might say<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&lsquo;<em>A pouch laid on the table<\/em>&rsquo;<\/p>\r\n\r\n<p>or not mention its presence at all. If that&rsquo;s not the case, just calling it a pouch is far too general. You&rsquo;d be better off writing something like:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;A small, black pouch laid on the table. It was made of velvet, and held inside a large group of very fine diamonds. It felt soft and new, but had a fumigated smell.&rsquo;<\/em><\/p>\r\n\r\n<p>Either way, don&rsquo;t ever say &lsquo;<em>Something that looked like a small bag was lying on the table&rsquo;<\/em><\/p>\r\n\r\n<h2>Use the reader&rsquo;s imagination<\/h2>\r\n\r\n<p>Don&rsquo;t fill in every single detail for the reader. Describe broad enough things, then let the reader&rsquo;s imagination fill in the blanks. As said before: you should find a few details that are very important and stand for everything else. The reader can then fill the world you started painting with the colours and imagery he or she likes best. People think faster than they can read or speak &ndash; when they read the first few lines of description, their mind has already made up the rest.<\/p>\r\n\r\n<h2>Organization &amp; subtlety<\/h2>\r\n\r\n<p>Description should be organized. Don&rsquo;t write one sentence about someone&rsquo;s character, then one on his clothes, then another one on the character, and so forth. Group sentences that are connected or share similar descriptive ideas together. Make your description flow from a starting point (where we don&rsquo;t know anything about a person, place or thing) to its end point (where we have become acquainted with the subject).<\/p>\r\n\r\n<p>Some ways to organize are: chronological, spatial and order of importance. For example, when introducing a person, you may start with physical description, followed by how that person thinks, feels and acts.<\/p>\r\n\r\n<p>Also, don&rsquo;t throw all description into one place. If a person, place or object is important enough to return in the story multiple times, it has several moments where particularities can be added. However, the rule or organizing still applies: the first time you introduce something, make it the biggest and most fundamental description. (Unless you intend to take the attention away from this object or person for narrative purposes.)<\/p>\r\n\r\n<p>Ask yourself the questions <em>Who? What? When? Where? Why?<\/em> And <em>How?<\/em> if you&rsquo;re stuck.<\/p>\r\n","slur":"writing-description","cat":"Writing","subcat":"Writing with Style","video":"","diff":"2","quiz":""},
{"id":"107","title":"[Writing] Tropes","post":"<p>Tropes are a way to make your writing sing. Figurative language is the key to amazing poetry, but it also plays a role in engaging prose. However, symbolism exists to adorn and enrich, not to create a sense of artificial profundity. Knowing the tropes is great, but you can&rsquo;t load up every sentence in your story with them. They should be used once in a while as a bonus, the cherry on top, the key to getting an emotional reaction from the reader.<\/p> \r\n\r\n<p>Therefore, I think tropes should only be used if you can&rsquo;t put a thought, idea or action on the page in a concise manner <em>without<\/em> using a trope. You might say something like:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>For Dan, going to school was a million times worse than having to eat his vegetables.<\/em><\/p>\r\n\r\n<p>which is a good hyperbole. But it&rsquo;s not the way to go. You should express Dan&rsquo;s hatred for school by weaving it into the narrative (describing bad events happening there, bad thoughts about it, listing all things he hates about it). If you then only include a single sentence about him not liking some vegetables, the same distinction is drawn but in a more subtle, <em>showing<\/em> manner.<\/p>\r\n\r\n<p>As you can see, tropes are often used by lazy writers when they can&rsquo;t describe something. You shouldn&rsquo;t fall for that &ndash; let all your descriptive powers free, and only after your first try see if you can replace or add one or two sentences with tropes for extra effectiveness.<\/p>\r\n\r\n<p>I&rsquo;ve categorized the most important tropes and listed them all below for you to see and learn. Use them to your advantage!<\/p>\r\n\r\n<h2>Understate<\/h2>\r\n\r\n<p><strong>Eufemism: <\/strong>A softer word instead of a harsh one.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He died =&gt; He <strong>passed away<\/strong><\/em><\/p>\r\n\r\n<p><strong>Understatement:<\/strong> A weakened statement<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We sold <strong>a tiny bit less<\/strong> than expected: only 2 out of the 2000 hamburgers we had made.<\/em><\/p>\r\n\r\n<p><strong>Litotes:<\/strong> A weakened statement using a double negative.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He was in favour of the idea =&gt; He <strong>wasn&rsquo;t against<\/strong> the idea<\/em><\/p>\r\n\r\n<h2>Exaggerate<\/h2>\r\n\r\n<p><strong>Hyperbole: <\/strong>An exaggerated statement.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>John had been waiting for Mark <strong>for centuries<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>A <strong>deafening<\/strong> sound <\/em>&nbsp;-&nbsp; you&rsquo;re not literally deaf after you&rsquo;ve heard it, it was just very loud.<\/p>\r\n\r\n<h2>Emphasize<\/h2>\r\n\r\n<p><strong>Irony: <\/strong>When you say one thing, but you mean the opposite. Or the reverse of what you expected happens.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;Wow, that shirt doesn&rsquo;t look ugly at all!&rsquo; (<strong>sarcasm<\/strong>) <\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The murder scene investigator was arrested for killing his girlfriend<\/em><\/p>\r\n\r\n<p><strong>Prolepsis:<\/strong> Placing an important word at the beginning of a sentence, or important sentence at the beginning of a paragraph for emphasis.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>That clown<\/em><\/strong><em>, boy do I have a bone to pick with him.<\/em><\/p>\r\n\r\n<p><strong>Anticipation: <\/strong>Opposite of prolepsis; placing words at the end.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;The biggest, the best, the funniest: <strong>Mike Wazowski!<\/strong>&rsquo;<\/em><\/p>\r\n\r\n<p><strong>Repetition: <\/strong>Repeating a certain element or phrase. Simplest form of enumeration.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Well, well, well, <\/em><\/strong><em>what do we have here?<\/em><\/p>\r\n\r\n<p><strong>Enumeration: <\/strong>Putting different elements of a list directly after each other.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>That <strong>lying, cheating, devious <\/strong>man &ndash; I don&rsquo;t trust him at all<\/em><\/p>\r\n\r\n<p><strong>Enumeration in threes: <\/strong>As you can see, I almost always use three related elements after each other in the examples. That&rsquo;s because using three elements is simply the most powerful. But, only use it if there are actually three important and relevant elements to mention.<\/p>\r\n\r\n<p><strong>Pleonasm: <\/strong>Using an adjective in front of a word that already contains that property. Basically, this means placing a redundant word in your sentence. Only use it for emphasis purposes.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The <strong>green grass<\/strong> was moved by the mild breeze<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>White snow <\/em><\/strong><em>completely covered our roof in less than an hour.<\/em><\/p>\r\n\r\n<p><strong>Tautology: <\/strong>Using different words with (nearly) the exact same meaning in the same sentence. Again, redundant words are only good if you mean to emphasize them.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The plaza was <strong>desolate<\/strong> and <strong>abandoned.<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I am <strong>delighted <\/strong>and <strong>exited!<\/strong><\/em><\/p>\r\n\r\n<p><strong>Antithesis: <\/strong>Contrasting antonyms by using them in a combination or after each other in a sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>It was a party for <strong>young<\/strong> and <strong>old.<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They kept partying until the <strong>late morning<\/strong>, when the <strong>sun<\/strong> had already pushed away the <strong>moon<\/strong>.<\/em><\/p>\r\n\r\n<h2>Make the reader think<\/h2>\r\n\r\n<p><strong>Paradox: <\/strong>If we assume one part of the sentence to be true, the other part can never be true. Therefore, the whole sentence can never be true nor false.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Then the president of the United States spoke: &lsquo;All Americans always lie!&rsquo;<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>If a being is omnipotent, then it can limit its own ability to perform actions and hence it cannot perform all actions, yet, on the other hand, if it cannot limit its own actions, then that is&mdash;straight off&mdash;something it cannot do.&nbsp;<\/em><\/p>\r\n\r\n<p><strong>Rhetorical question: <\/strong>A question put in such a way that we already know the (expected) answer.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Who doesn&rsquo;t want to make lots of money?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Don&rsquo;t you think an eclipse is an incredible phenomenon?<\/em><\/p>\r\n\r\n<h2>Comical effect<\/h2>\r\n\r\n<p><strong>Word play: <\/strong>Using words in a different way than expected or making funny connections. Most often seen in riddles or jokes, but can be subtly put into a story.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>What happens to a frog&rsquo;s car when it breaks down? It gets toad away.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I never wanted to believe that my Dad was stealing from his job as a road worker. But when I got home, all the signs were there.<\/em><\/p>\r\n\r\n<h2>Metaphors and Imagery<\/h2>\r\n\r\n<p><strong>Simile: <\/strong>Compares two things through explicit use of certain words (<em>as, like, so, than<\/em>).<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The sun set <strong>like<\/strong> a field of drowsing roses<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>It was as good <strong>as<\/strong> new<\/em><\/p>\r\n\r\n<p><strong>Synaesthesia: <\/strong>Using several senses to describe something.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>A <strong>warm <\/strong>voice that spoke <strong>bitter<\/strong> words.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Sweet <\/em><\/strong><em>songs painted by <strong>tasty<\/strong> colours.<\/em><\/p>\r\n\r\n<p><strong>Personification: <\/strong>Attributing human properties to something.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Screaming colours. <\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The clouds cried about what had happened.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The future smiles at you!<\/em><\/p>\r\n\r\n<p><strong>Metaphor:<\/strong> A simile without a concatenation word.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Life is an obstacle course.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He had a foggy glance in his eyes.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&lsquo;Clean your room, it&rsquo;s a pigsty here!&rsquo;<\/em><\/p>\r\n\r\n<p><strong>Metonymy: <\/strong>Comparing using something else than a similarity, using a different area where the two things touch or contact.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Three <strong>Rembrandts<\/strong> were stolen from the museum. (Rembrandt =&gt; painting by him)<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>England<\/em><\/strong><em> lost the final match against Sweden. (England =&gt; The national team)<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The <strong>pen<\/strong> is mightier than the<strong> sword<\/strong>. (Pen =&gt; written words, Sword =&gt; military force)<\/em><\/p>\r\n\r\n<h2>Rhyme, rhythm and flow<\/h2>\r\n\r\n<p>This topic is a little bit different from the other tropes. It&rsquo;s a combination of figurative language and ways to structure a paragraph or set of sentences. These are often applied throughout a paragraph, or maybe even subtly throughout a whole chapter.<\/p>\r\n\r\n<p><strong>Climax: <\/strong>From bad to worse. You start with something mildly annoying, and then it gets out of hand.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>First the mob was calm, then people started to push and pull, soon a riot had arisen on the sides, and within minutes you had to make sure you got out of there.<\/em><\/p>\r\n\r\n<p><strong>Anti-climax: <\/strong>Reverse climax. You start with a very bad event, and then decrease impact.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He groaned from the pain, rolled back and forth, but eventually didn&rsquo;t move anymore.<\/em><\/p>\r\n\r\n<p><strong>Chiasmus: <\/strong>Sometimes called a <strong>cross statement<\/strong>. You first mention two things in a certain order, and then later on mention them (or related elements) again in reverse order.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Ladies<\/em><\/strong><em> and <u>gentlemen<\/u>, <u>boys<\/u> and <strong>girls<\/strong>!<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He said he didn&rsquo;t know, knowing he could never say the words.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The windows shut, he had closed every door.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Do I love you because you&#39;re beautiful? Or are you beautiful because I love you?&nbsp;<\/em><\/p>\r\n\r\n<p><strong>Alliteration: <\/strong>Starting multiple words with the same letter. Best when used on only two words right next to each other, or three or four throughout the sentence. Can easily be overdone.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The <strong>o<\/strong>pen <strong>o<\/strong>bstacle made its way towards the <strong>p<\/strong>rotected <strong>p<\/strong>alace.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>As he <strong>d<\/strong>oubted and <strong>d<\/strong>oted, he <strong>g<\/strong>rew more fond of the beautiful <strong>g<\/strong>arden.<\/em><\/p>\r\n\r\n<p><strong>Assonance:<\/strong> Using the same vowel sounds. It&rsquo;s a weakened form of rhyming, which is often used well in songs, but goes unnoticed in writing. Don&rsquo;t think that means that it doesn&rsquo;t enhance your writing &ndash; just that a reader needs to speak the words in his head to find the rhythm.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Compared to most, he was k<strong>i<\/strong>nd. Though often tempted, he didn&rsquo;t b<strong>i<\/strong>te.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He tried it for y<strong>ea<\/strong>rs. &lsquo;D<strong>ea<\/strong>r Lucy&rsquo;, he wrote time and time again.<\/em><\/p>\r\n\r\n<p><strong>Onomatopoeia: <\/strong>A word that phonetically imitates, resembles or suggests the source of the sound that it describes. Basically, reading the word makes you think or feel its meaning, rather than simply remembering the meaning and reading on. Using these can sometimes look childish, but usually work to your advantage.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em><strong>Splish, splash<\/strong>, she liked playing in the bath tub.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The wind <strong>whooshed<\/strong> and made drops of water <strong>drip<\/strong> from the trees.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He <strong>gurgled <\/strong>and <strong>growled<\/strong> as he left the building &ndash; now unemployed.<\/em><\/p>\r\n","slur":"writing-tropes-figurative-language","cat":"Writing","subcat":"Writing with Style","video":"","diff":"4","quiz":""},
{"id":"108","title":"[Writing] Drafts & Revisions","post":"<p>You&rsquo;ve finally arrived at the point where all the magic happens! You&rsquo;ve learned how to craft sentences, paragraphs and chapters, and now we will take a look at your book or story as a whole.<\/p> \r\n\r\n<p>It&rsquo;s often said that rewriting is just as important as the writing itself. The first time you sit down to write, you&rsquo;ll write whatever comes to mind and continue to do so for a few weeks until the basic story is finished. Then you reread it, and rewrite where necessary. Then you reread again. This process continues until you read your story without marking anything or doubting whether something should be in there or not.<\/p>\r\n\r\n<p>Some people write for only a week, and then spend months on rewriting. Some do it the other way around. That decision is completely up to personal preference, but I strongly recommend you use this <em>draft and revision<\/em> system. This chapter discusses some tips and tricks.<\/p>\r\n\r\n<p>NOTE: Stephen King once said that &lsquo;a first draft &ndash; even a long one &ndash; should take no more than three months, the length of a season.&rsquo; I think that is a good guideline, but if you&rsquo;re writing part time or as a hobby, this might be quick. Don&rsquo;t rush yourself, put quality over quantity.<\/p>\r\n\r\n<h2>First Draft<\/h2>\r\n\r\n<p><strong>Read a lot, write a lot<\/strong>: Every book has a lesson to teach. The bad ones show what not to do, what lies dead on the page, while the good ones teach about style, narration, elegance &ndash; all elements that create a compelling story. Reading a lot helps create an ease and intimacy with writing, which allows us to dip into our creativity and write without being self-conscious.<\/p>\r\n\r\n<p><strong>Focus<\/strong>: Don&rsquo;t look at a reference book while doing a first draft. Don&rsquo;t look up the correct spelling for certain words, or the name of that famous singer you need. When you sit down to write, <em>write<\/em>. There&rsquo;s enough knowledge in your head to write a basic storytelling, and snapping out of it to use stuff you don&rsquo;t need or aren&rsquo;t familiar with is a bad idea.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Only after the first draft is done, is the chance to add grace-notes and ornamental touches. Only then get out your thesaurus and replace some words for ones that fit better.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">As Stephen King said: &ldquo;Write with the door closed, rewrite with the door open.&rdquo;<\/p>\r\n\r\n<h2>Revisions<\/h2>\r\n\r\n<p><strong>Self-criticism: <\/strong>Limit self-criticism at the beginning (first draft), turn it loose during revision.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">If you haven&rsquo;t marked up your manuscript a lot the first time, you didn&rsquo;t do your job. Nobody gets things right the first time.<\/p>\r\n\r\n<p><strong>Tune your Voice: <\/strong>Try out different styles and find your own authentic way of storytelling.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Write what you like, then imbue it with life. Make it unique by blending in your own personal knowledge about life, friendship, work, etc. You have your own thoughts, interest, concerns from your experiences &ndash; use them in your work.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">The only thing that matters is how your prose rings on the page and in the ear. If you expect it to ring true, you must talk to yourself. Even more important, you must shut up and listen to others talk.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Don&rsquo;t turn away from what you know and like in favour of things you believe will impress friends, relatives, or anyone else.<\/p>\r\n\r\n<p><strong>Dig for the Concrete and Specific: <\/strong>Always mention specific aspects if they have a meaning in the story. You can describe a man wearing a green T-shirt &ndash; but if the colour green or that T-shirt doesn&rsquo;t have any meaning in the story, why should you ever include it? On the other hand, you could regularly make the character cough or clear his throat to signal he has been smoking a lot, to already subtly reveal to the reader he will die of lung cancer halfway through the story.<\/p>\r\n\r\n<p><strong>Subtle Revealing: <\/strong>Reward the reader by subtly revealing bits of information throughout the story. Not only is it better for the flow of the story to not throw all information in one chapter, it also makes the reader continue and keeps them interested.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Reveal character traits through scenes, details and dialogue. Not using description.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Place interesting, mysterious, shocking, unfinished bits every now and then to connect the story together. Don&rsquo;t reveal too much &ndash; you stand the chance of giving away important plot points very early on.<\/p>\r\n\r\n<p><strong>Cut Big, then Small: <\/strong>First lift whole paragraphs, parts or even chapters of the story. Only then start fine-tuning the details.<\/p>\r\n\r\n<p>Some tips on what big parts to cut:<\/p>\r\n\r\n<ul>\r\n\t<li>Cut any passage that does not support the <em>focus<\/em> of the story<\/li>\r\n\t<li>Cut the weakest quotations, anecdotes or scenes to give greater power to the strongest.<\/li>\r\n<\/ul>\r\n\r\n<p>Some targets for small cuts:<\/p>\r\n\r\n<ul>\r\n\t<li>Adverbs that intensify rather than modify: <em>just, certainly, entirely, completely, exactly.<\/em><\/li>\r\n\t<li>Prepositional phrases that repeat the obvious: <em>in the story, in the article, in the movie, in the city.<\/em><\/li>\r\n\t<li>Phrases that grow on verbs: <em>seems to, tends to, should have to, tries to<\/em><\/li>\r\n\t<li>Abstract nouns that contain active verbs: <em>consideration<\/em> becomes <em>considers<\/em>, <em>judgment<\/em> becomes <em>judges<\/em>, <em>observation<\/em> becomes <em>observes<\/em>.<\/li>\r\n\t<li>Restatements: a <em>sultry, humid<\/em> afternoon<\/li>\r\n<\/ul>\r\n\r\n<p>Remember: lots of small cuts make more of a difference than one big one, but are harder to perform. Removing a scene simply takes one not-so-important block out of the story. Improving fifty sentences makes a whole chapter a hundred times better.<\/p>\r\n\r\n<p><strong>The six-week layoff:<\/strong> After your first (or second) draft is done, go do something else. After six weeks, pick up your story again and read it all the way. You&rsquo;ll recognize it as being yours, but it will also feel like reading somebody else&rsquo;s work. This way it is easier to spot your mistakes and kill what is bad, to make your good passages even stronger.<\/p>\r\n","slur":"writing-drafts-revisions","cat":"Writing","subcat":"Writing with Style","video":"","diff":"3","quiz":""},
{"id":"109","title":"[Writing] General Tips & Tricks","post":"<p>The course has almost come to an end, but not before we discuss some ways to stay motivated and enjoy the beautiful craft that writing is.<\/p> \r\n\r\n<h2>Start a New Project<\/h2>\r\n\r\n<p>Let me first get this straight: writing requires commitment &ndash; be prepared to work hard. Writing is a huge creative process that takes a lot of time and energy, without actually knowing if it is going to work. Only when your story is finished and you show it to your publisher you know if all the work you did was any good. I am not saying this to demotivate you. I am telling you that you need to full commit yourself to any new project.<\/p>\r\n\r\n<p>These few steps will help you get started:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Create an editing support group: <\/strong>Create a support network of friends, colleagues, editors, experts and coaches who can give you feedback on your work. Having someone believe in you goes a long way.<\/li>\r\n\t<li>Break (long) projects into parts, long stories into chapters. A page a day is a book a year.<\/li>\r\n\t<li><strong>Write a Mission Statement: <\/strong>determine what you want to achieve or learn from writing the story, and try to figure out everything about those skills while writing it.<\/li>\r\n\t<li>Do not come lightly to <strong>the blank page<\/strong>. You can approach it any way you like &ndash; afraid, excited, hopeful, to impress a girl or to change the world &ndash; but <strong>not<\/strong> without the slightest emotion or idea what you are going to do.<\/li>\r\n<\/ul>\r\n\r\n<h2>Keeping the Motivation and Spirit<\/h2>\r\n\r\n<p>Try out all tools from this course, and use them (one at a time) enough to make them into habits. Your writing should flow, be natural and the guidelines should over time be applied automatically.<\/p>\r\n\r\n<p>Rename procrastination to <strong>rehearsal<\/strong>. Taking time off, doing something else for a moment, helps clear your head and find new ways for the story to continue.<\/p>\r\n\r\n<p>Write rapidly, <em>putting down the story exactly as it comes to mind<\/em>, only ever looking back to check character names or relevant parts of their back stories. If you can keep up with your original enthusiasm, you&rsquo;ll be able to outrun the self-doubt that&rsquo;s always waiting to settle in.<\/p>\r\n\r\n<p><strong>Collaboration:<\/strong> Take an interest in all crafts that (could) support your work. Help others in their crafts so they can help you.<\/p>\r\n\r\n<p><strong>Write to entertain: <\/strong>The first and foremost reason people read is because of entertainment. They want something to keep them busy, interested, thinking, happy, while at the same time relaxing from their work or other duties.&nbsp; Serious ideas must always serve your story, not the other way around.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Ask yourself frequently: <em>am I having fun?<\/em> If the answer is always no, it&rsquo;s time for a new project or career.<\/p>\r\n\r\n<p><strong>Experiment<\/strong>: Try anything you like, no matter how weird or stupid. If it turns out to work wonderfully well, keep it in. If it doesn&rsquo;t, toss it and start again &ndash; nobody needs to know.<\/p>\r\n\r\n<h2>Criticism &amp; Honesty<\/h2>\r\n\r\n<p><strong>Learn from Criticism: <\/strong>Do your best to tolerate even unreasonable criticism of your work as a way of growing as a writer. Don&rsquo;t defend your work, but explain what you were trying to accomplish.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Show your work to a number of people. Smile and nod while listening to their criticism. Then afterwards evaluate &ndash; if most of them point out the same thing, you should definitely look at it. If everybody points out something different, disregard it.<\/p>\r\n\r\n<p><strong>Be honest with yourself: <\/strong>If something is bad, kill it. You need reading experience to see what is mediocre or outright rotten. It helps you recognize those things when they begin to creep into our own work, and to steer clear of them.<\/p>\r\n\r\n<p><strong>Be honest with your readers:<\/strong> <em>Write what you know<\/em>. Don&rsquo;t pretend to know about things you&rsquo;ve not experienced, or be able to do things when you really can&rsquo;t. Put your experience, adventures, thoughts and ideas into your work, not just something you think is cool. The collection of your knowledge is unique, and will bring honesty and truth to your characters, dialogue and scenarios.<\/p>\r\n\r\n<h2>The End<\/h2>\r\n\r\n<p>It was a long read, I know, but you&rsquo;ve finished the course on writing! Congratulations!<\/p>\r\n\r\n<p>You can start writing that book you&rsquo;ve always imagined now. You can edit or rewrite that old story you thought was only mediocre now.<\/p>\r\n\r\n<p>But, you can also take a look at the other big writing course on plotting, narrative, publishing and getting inspired and creative. You can find it <strong><em>here<\/em><\/strong>.<\/p>\r\n","slur":"writing-general-tips-tricks","cat":"Writing","subcat":"Writing with Style","video":"","diff":"3","quiz":""},
{"id":"110","title":"How to Play the Cajon","post":"<p>The Cajon has seen a huge increase in popularity the last decade. More and more artists start doing acoustic sessions or including acoustic versions with their songs, and for beginning musicians it is also less expensive to buy a Cajon instead of drum kit. Whether it&rsquo;s just used for a hobby or not: the Cajon is a simple, friendly instrument that is capable of creating a wide variety of beats.<\/p> \r\n\r\n<p>This article will go over the basic structure of a Cajon, the basic ways to hit or strike it and discuss some of the most common beats. I am tempted to call it the fundamentals of the Cajon, but in reality there is not much more to know than this article teaches you. A lot is possible with this instrument, but you&rsquo;ll only invent new possibilities by experimenting yourself.<\/p>\r\n\r\n<h2>What&rsquo;s a Cajon?<\/h2>\r\n\r\n<p>A Cajon is usually referred to as an acoustic drum. It is basically a wooden, rectangular box standing upright. At one side of the box is the special <strong>striking face <\/strong>&ndash; this is where your hands strike the Cajon to create wonderful sounds. All other sides are also solid wood, but don&rsquo;t create as nice tones.<\/p>\r\n\r\n<p>At the back is a circular hole, similar to the one found in guitars. When a sound is created, it resonates within the box and then leaves the Cajon through that hole. Not only does this increase the volume, it also creates a nicer timbre. It is, after all, only a piece of wood you&rsquo;re hitting, and it needs some love to make it sound nice with other (acoustic) instruments.<\/p>\r\n\r\n<p>Inside the more expensive ones, a <strong>snare<\/strong> is also added. The snare drum is an essential component of any drum kit, and adding one inside your Cajon makes it sound more like a drum kit. You can usually take it out or turn it off, which makes it sound more like actually hitting wood (think of the sound when you hit two drum sticks against each other, or when you slam your thumb against a guitar for some rhythm).<\/p>\r\n\r\n<p><img src=\"media\/CajonStructureBasicStrikes.png\" \/><\/p>\r\n\r\n<h2>The Basic Strikes<\/h2>\r\n\r\n<p>A distinction is usually made between 4 strikes, but some think they sound too much alike and work with three. Either way, there are some fundamentals to learn:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Bass<\/strong>: the root and start of every beat. Sounds like the bass drum. Low on the Cajon. Hit it with the hard and strong part of your hand just before your fingers start (we&rsquo;ll call it the <em>finger cushion<\/em>). You can also hit it the usual way, more with your fingers and a flat hand, which will get the snare more involved.<\/li>\r\n\t<li><strong>Slap<\/strong>: the other essential part of a beat. Sounds like the snare. High on the Cajon. Hit it with your finger cushion and fingers.<\/li>\r\n\t<li><strong>Mid<\/strong>: a mid-tone between the bass and slap. Used as a transition between the two, to keep the beat flowing. Hit only with your fingertips (keep your hand slightly cupped).<\/li>\r\n\t<li><strong>High slap<\/strong>: for rhythmic\/melodic notes once in a while. The highest on the Cajon &ndash; every part of the hand, except for your fingers, should be above the striking face. Strike with fingers flat and a bit spread out, and use only your fingertips. Can also be hit one finger at a time, for very quick rhythms.<\/li>\r\n<\/ul>\r\n\r\n<p>NOTE: Don&rsquo;t cup your hand with the bass and slap. They make the sound weak and flat. These two strikes are what you&rsquo;ll be doing most of the time, and you should have them perfected before you start doing anything else.<\/p>\r\n\r\n<p>NOTE 2: Use <strong>both hands<\/strong>. It might be hard to do any rhythmic stuff with your non-dominant hand, but with training you should be able to get both hands at the same level. This has the huge advantage of being able to play more beats, faster and without making mistakes.<\/p>\r\n\r\n<h2>Good Posture<\/h2>\r\n\r\n<p>Good posture is important, always. But, the Cajon is a somewhat awkward instrument: as you sit on it, you have to slightly bend over to let your hands reach every part of the striking face. To prevent back and\/or shoulder injuries, follow these tips:<\/p>\r\n\r\n<ul>\r\n\t<li><em>Where should I leave my legs?<\/em> Most people have the tendency to put them symmetrically left\/right of the Cajon. There&rsquo;s nothing really wrong with that, but there&rsquo;s another way:\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Place your left foot in front of the Cajon, and your right foot pushed against the right side of the Cajon. Don&rsquo;t turn your body with it &ndash; just bend your knees to be comfortable in this position. This has two advantages: it frees up some space for your <em>dominant hand<\/em> (if right is not your dominant hand, do this in reverse), and you can use your <em>foot<\/em> for some extra fancy beats.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><em>Should I bend my back? <\/em>No. Bass notes are low on the Cajon, but not as extremely low as most people think. If you keep your back and head\/neck straight, and lean only slightly forward, you should be able to reach everything easily.<\/li>\r\n\t<li>Sit in the centre of the Cajon. Too far to the front or back makes it impossible to strike anything.<\/li>\r\n\t<li>Maintain a good posture, but don&rsquo;t get all stiff and rigid. Move your upper body rhythmically as you play. It also looks cooler that way.<\/li>\r\n<\/ul>\r\n\r\n<p>Also, don&rsquo;t get too enthusiastic with hitting the Cajon if you&rsquo;re just starting out. Your hands aren&rsquo;t used to striking wood, and will start to hurt or tire after a while. When you just start out, this means that you should take a break. If it still happens after a while, your smashing it <em>too hard<\/em>. You don&rsquo;t need massive power to make a good sound.<\/p>\r\n\r\n<h2>Basic Beats<\/h2>\r\n\r\n<p>Theoretically, every beat can be transferred to the Cajon. Every rhythm you&rsquo;ve heard the drum play in pop\/rock songs can be converted to one on the Cajon (albeit simplified).<\/p>\r\n\r\n<p>Every beat starts with the <strong>bass<\/strong>. Whatever you do, you need to get this right. It is the soul of a beat, it&rsquo;s what creates the rhythm and structure.<\/p>\r\n\r\n<p>Then, to alternate the bass, is the <strong>slap<\/strong> or snare. Hitting a bass on each count is rather monotone or boring. The usual pattern is therefore that bass and slap alternate every count. Start with bass, snare at 1 second, bass at 2 seconds, snare at 3 and start the next beat (after 4 seconds) with a bass again &ndash; repeat.<\/p>\r\n\r\n<p>But, especially with slower beats, there&rsquo;s a lot of time between these fundamental tones where nothing happens. That is where the <strong>mid<\/strong> or <strong>high slap<\/strong> come into play to create a sort of melody and transition notes.<\/p>\r\n\r\n<p>Now on to some more specific info! These are very basic rhythms you should learn and master (these are all simple, regular 4\/4 &ndash; 4 seconds in a beat):<\/p>\r\n\r\n<p><img src=\"media\/CajonBasicBeats.png\" \/><\/p>\r\n","slur":"how-to-play-cajon-basics-fundamentals","cat":"Music","subcat":"","video":"","diff":"1","quiz":""},
{"id":"111","title":"Fundamentals of Chess","post":"<p>Welcome to the course that will teach you how to play the famous game of Chess! Not only does it teach you the basic moves and rules, but it also explains the fundamental tactics and principles that will improve your game significantly. In the end though, the only way to become really good at it, is practice, experiment, practice.<\/p> \r\n\r\n<p>Chess is an ancient game. Long ago, there was a king that ordered one of his servants to create a game to free him from his boredom. That guy thought for a long time, and then invented the game we now know and play as &lsquo;Chess&rsquo;. As a reward he was allowed to ask anything from the king, and he would give it to him. But, the inventor was smart, and tricked the king. First, he put one grain of corn on the first field. Then he asked the king to put twice the amount on the next field, and twice that amount on the next one, and so on and on until all fields on the board were filled. As the king was counting, he discovered there wasn&rsquo;t enough grain in the whole world to live up to his demands. He rewarded the inventor with something else: he made the game famous. Nowadays, it is still more popular than ever.<\/p>\r\n\r\n<p>But that&rsquo;s enough history for now! Let&rsquo;s start.<\/p>\r\n\r\n<h2>What do I need?<\/h2>\r\n\r\n<p>Two players, a chess board (8x8), and the 16 <em>white<\/em> and 16 <em>black<\/em> pieces that belong to it.<\/p>\r\n\r\n<p>You can also play on your computer against an AI, but it&rsquo;s recommended to get a real chess set and try your luck against human opponents.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Your Objective<\/li>\r\n\t<li>The Board &amp; Starting Position<\/li>\r\n\t<li>Pawns &amp; Pieces<\/li>\r\n\t<li>Special Moves<\/li>\r\n\t<li>Tactics &amp; Strategy<\/li>\r\n\t<li>Double Attack<\/li>\r\n\t<li>Discovered Attack<\/li>\r\n\t<li>The Pin and the Skewer<\/li>\r\n\t<li>Removing the Guard<\/li>\r\n\t<li>Mating Patterns<\/li>\r\n\t<li>Positional Play<\/li>\r\n\t<li>Openings<\/li>\r\n\t<li>Pawn Structure<\/li>\r\n\t<li>Light-Dark Square Tactic<\/li>\r\n\t<li>General Tips &amp; Tricks<\/li>\r\n<\/ol>\r\n\r\n","slur":"fundamentals-basics-chess","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"1","quiz":""},
{"id":"112","title":"[Chess] Your Objective","post":"<p>Simply said, your objective is to place your pieces in such a way, that your opponent has <strong>no legal moves left <\/strong>and his <em>king<\/em> is <strong>under attack<\/strong>. The more common way to say this is that you have to <strong>checkmate<\/strong> your opponent. Of course, you want this to happen before <em>you<\/em> have been checkmated by your opponent.<\/p> \r\n\r\n<h2>Capturing<\/h2>\r\n\r\n<p><em>When is something &lsquo;under attack&rsquo;?<\/em> When it can be captured by your opponent the next turn.<\/p>\r\n\r\n<p>Capturing is nothing more than moving one of your pieces to a square that is occupied by one of your opponent&rsquo;s pieces. You take the opponent&rsquo;s piece off the board, and place your own piece at its spot. You&rsquo;ve just captured something.<\/p>\r\n\r\n<h2>Legal Moves<\/h2>\r\n\r\n<p><em>What are legal moves? <\/em>This depends on the specific piece, but there&rsquo;s one single very important rule here:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">If your <em>king<\/em> is under attack (<strong>checked<\/strong>), your next move needs to make sure he isn&rsquo;t anymore.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">(You can &lsquo;uncheck&rsquo; your king by 1) moving it 2) capturing the piece that&rsquo;s threatening it 3) putting a piece between the king and it&rsquo;s attacker, blocking the line of attack)<\/p>\r\n\r\n<p>Therefore, if your king is checked, but you can&rsquo;t do anything to prevent or solve it, you have been checkmated and have lost the game.<\/p>\r\n\r\n<p>This may all seem a bit vague, but don&rsquo;t worry, the next chapters will discuss the board and all pieces, and (hopefully) make everything clear!<\/p>\r\n\r\n<h2>Draw<\/h2>\r\n\r\n<p>Sometimes there&rsquo;s no winner. There are 5 situations in which this can occur:<\/p>\r\n\r\n<ul>\r\n\t<li>There are not enough pieces left on the board to checkmate.<\/li>\r\n\t<li><strong>Stalemate:<\/strong> a player can&rsquo;t do a legal move, but his king isn&rsquo;t under attack.<\/li>\r\n\t<li>If both players see that a situation is hopeless, they can agree on a draw.<\/li>\r\n\t<li>If the exact same board position has occurred three times in the game, a player <em>can<\/em> say that it&rsquo;s a draw.<\/li>\r\n\t<li>If 50 moves have been played, in which none of the players have moved a pawn or captured a piece.<\/li>\r\n<\/ul>\r\n\r\n<p>The first three options are way more common than the last two.<\/p>\r\n\r\n<p><em>Stalemate<\/em> is something that needs a little special attention. Even if you have all your pieces left, and the opponent has only his king left, a stalemate is a draw. Therefore, a player that is losing will always try to get into a stalemate &ndash; pay attention to that.<\/p>\r\n","slur":"chess-objective-check-mate-draw","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"1","quiz":""},
{"id":"113","title":"[Chess] The Board & Starting Position","post":"<p><img src=\"media\/ChessBoard&amp;Definitions.png\" \/><\/p>\r\n\r\n<p>A chess board is a collection of squares, 8 columns and 8 rows. That means <strong>8 x 8<\/strong> = 64 fields to play on. Do not mistake it for a <em>checkers board<\/em> &ndash; that is 10 by 10.<\/p> \r\n\r\n<p>The rows are numbered <strong>1<\/strong> to <strong>8<\/strong>, and the columns given the letters <strong>a<\/strong> to <strong>h<\/strong>. This has no influence at all on a game &ndash; it&rsquo;s just for saving a board position or recording a chess match. The columns are usually called <strong>files<\/strong>.<\/p>\r\n\r\n<p>The squares alternate (both horizontally and vertically) between black and white (or another contrasting colour combination), which is known as the <em>checkers pattern<\/em>. Not only does this help distinguish the individual squares, it can also play a huge role in your tactics &ndash; it&rsquo;s useful to know what colour of squares a piece can and cannot reach.<\/p>\r\n\r\n<p>In the image, the starting position for black and white is shown. This is the setup at the start of every game. To remember the order of the queen and king, know this: the <em>queen<\/em> always starts on a field with the <em>same colour<\/em> as itself. So white queen on white square, black queen on black square.<\/p>\r\n\r\n<p>When you get into (advanced) tactics, it&rsquo;s useful to know the different parts of a board:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Queenside: <\/strong>the four columns at the side where the queen starts the game.<\/li>\r\n\t<li><strong>Kingside:<\/strong> the four columns at the side where the king starts the game.<\/li>\r\n\t<li><strong>Backline: <\/strong>the last row of the board, where the kings start. Sometimes also used for the last two rows of the board.<\/li>\r\n\t<li><strong>Centre <\/strong>(or center): the middle rows of the board, numbers 3 to 6. The four squares in the centre of the whole board are generally regarded as the most important ones in the whole game. You want to control them, and never let go.<\/li>\r\n<\/ul>\r\n\r\n<p><em>What are they useful for then?<\/em> There&rsquo;s a lot of space on a board, and you only have limited pieces. Therefore, it&rsquo;s good to make a decision and either make your <em>queenside<\/em> very strong, or your<em> kingside<\/em>. On top of that, pieces at the backline are usually very safe (behind an army of pawns and other pieces), and pieces at the centre have the most attacking options!<\/p>\r\n\r\n<h2>Stages of a Game<\/h2>\r\n\r\n<p>A distinction is made between three parts:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Opening:<\/strong> White starts. Both players are building their defence, making room for pieces, setting up solid structures. Maybe they will attack a pawn or threaten a piece every now and then, but nothing big. A lot of standard openings are known by professional chess players, and it usually depends on the opponent what they choose to use.<\/li>\r\n\t<li><strong>Middle game:<\/strong> Both sides have their basic setup done. This is the longest, and where the most interesting things happen. There are lot of options here; playing defensive, offensive, improving positional play, slowly but steadily moving pawns forward, etcetera.<\/li>\r\n\t<li><strong>End game:<\/strong> A lot of pieces have been removed, and the defensive structures destroyed. Both players are left with a handful of pieces, and one of them usually has a clear advantage (more pieces, a better position, etcetera). If that player is smart, he wins the game in maybe ten or twenty moves. If he isn&rsquo;t smart, or he is too careful, the opponent may turn the odds by a very good move (which is possible, because the game is so open).<\/li>\r\n<\/ul>\r\n\r\n<p>Now it&rsquo;s finally time to get to know all the pieces and their capabilities!<\/p>\r\n","slur":"chess-board-starting-position","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"1","quiz":""},
{"id":"114","title":"[Chess] Pawns & Pieces","post":"<p>From this moment on, a distinction will be drawn between pawns and pieces. You start with 8 <em>pawns<\/em>, which are limited in their movement, but working together are be very powerful. You also start with 8 pieces, which are:<\/p> \r\n\r\n<ul>\r\n\t<li>One king.<\/li>\r\n\t<li>One queen.<\/li>\r\n\t<li>Two bishops.<\/li>\r\n\t<li>Two knights.<\/li>\r\n\t<li>Two rooks.<\/li>\r\n<\/ul>\r\n\r\n<p>These pieces have a lot of moves they are allowed to do, but it&rsquo;s harder to get them working together.<\/p>\r\n\r\n<p>Therefore, we like to view pawns and pieces as two separate groups with their own strengths and weaknesses, which will need to destroy the opponent together. This will become more clear when you dive into tactics, but for now, let&rsquo;s explain all they can do!<\/p>\r\n\r\n<h2>General Movement Rules<\/h2>\r\n\r\n<p>All pawns and pieces<\/p>\r\n\r\n<ul>\r\n\t<li>Can be moved to any <strong>unoccupied square<\/strong> without problems<\/li>\r\n\t<li>Can be moved to any <strong>occupied square<\/strong>, with one of the opponent&rsquo;s pawns or pieces on it, which it then <em>captures<\/em>.<\/li>\r\n\t<li>With exception of the knight, may <strong>not<\/strong> jump over other pawns or pieces<\/li>\r\n<\/ul>\r\n\r\n<ul>\r\n\t<li>With exception of pawns, have the same rules for <em>moving<\/em> as well as <em>capturing<\/em>.<\/li>\r\n\t<li>Are <strong>not obliged<\/strong> to capture something when the opportunity arises. You can do anything you like (unlike checkers).<\/li>\r\n\t<li>Cannot be moved to a certain square if that means the king becomes checked. Is of course also true for the king himself.<\/li>\r\n<\/ul>\r\n\r\n<p>The easiest way to remember this is: <em>if the opponent captures your king, you&rsquo;ve lost the game<\/em>. So, never move the king to a spot where it can possibly be captured.<\/p>\r\n\r\n<h2>King (&lsquo;Infinite points&rsquo;)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementKing.png\" \/><\/p>\r\n\r\n<p>Your most important piece. Protect it at all costs. Allowed to move <strong>one square<\/strong> in <strong>any direction<\/strong>.<\/p>\r\n\r\n<p>The king should always be safe, and has little to no offensive use. You should therefore keep it at the backline, and preferably a bit to the left or right. The only moment you should start moving your king or letting it get involved is at the end of a game, when there&rsquo;s not much pieces left that can attack it.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Pawn (1 point)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementPawn.png\" \/><\/p>\r\n\r\n<p>Allowed to move <strong>one square<\/strong> horizontally, but only forwards. However, the first time a pawn makes a move (when it is still at its starting position), it is allowed to move <strong>two squares<\/strong> instead of one.<\/p>\r\n\r\n<p>What&rsquo;s special, is that a pawn <em>captures<\/em> pieces by moving one square <strong>diagonally<\/strong>.<\/p>\r\n\r\n<p>At the beginning of a game, you need to make room to get your pieces away from the backline. Most games therefore start with pushing pawns forward. You want to control the centre, so pushing the pawn on the <strong>d<\/strong> or <strong>e <\/strong>file forward is a common opening move.<\/p>\r\n\r\n<p>The fact that pawns capture diagonally, creates the possibility to create intricate pawn structures &ndash; a chain of diagonally placed pawns protecting each other. It&rsquo;s also a good idea to make the king hide behind a wall of pawns.<\/p>\r\n\r\n<div style=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Bishop (3 points)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementBishop.png\" \/><\/p>\r\n\r\n<p>Allowed to move <strong>unlimited <\/strong>squares <strong>diagonally<\/strong>. &lsquo;Unlimited&rsquo; doesn&rsquo;t mean that it can do whatever it wants, but just that it can move in a single direction (diagonally) until it hits the side of the board or a pawn\/piece.<\/p>\r\n\r\n<p>Together with the knights, you want to get this piece away from the backline and into the centre as quickly as possible. Another option is to point them towards the centre, so that nobody gets to control it.<\/p>\r\n\r\n<div style=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Knight (3 points)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementKnight.png\" \/><\/p>\r\n\r\n<p>This one usually confuses people at first, but is actually very simple. It can move <strong>one square diagonally<\/strong>, followed by <strong>one square horizontally\/vertically<\/strong>. Another way to look at it, is that it can move in an <strong>L<\/strong> shape in all directions. You can check if you got it right this way: <em>the knight should always land on a square of the opposite colour as the one he started on.<\/em><\/p>\r\n\r\n<p>The knight is the only piece that can jump over other ones. That, combined with its odd L-shape movement, makes it hard to predict or defend against. However, they have a limited range (even more so when they are positioned to the sides), and are therefore seen as equally useful as the bishop.<\/p>\r\n\r\n<p>Working together, knight and bishop are the life of your army, and should be the ones breaking through your opponent&rsquo;s defence.<\/p>\r\n\r\n<div style=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Rook (5 points)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementRook.png\" \/><\/p>\r\n\r\n<p>Allowed to move <strong>unlimited<\/strong> squares<strong> horizontally <\/strong>or <strong>vertically<\/strong>.<\/p>\r\n\r\n<p>When the game starts, they are tucked away in the corners, and it will take some time before they get involved in the game. They are therefore mostly used in the endgame, when most of the other pawns and pieces are gone. But, don&rsquo;t think that you should leave them alone until then. When you find the space, get them out of the corners to support pieces from the backline.<\/p>\r\n\r\n<div style=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Queen (9 points)<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMovementQueen.png\" \/><\/p>\r\n\r\n<p>By far the most powerful piece. Allowed to move <strong>unlimited<\/strong> squares in <strong>any direction<\/strong>.<\/p>\r\n\r\n<p>Losing the queen usually means you&rsquo;ve lost the game. Therefore, it is advised to not bring the queen into the battlefield until the mid or end game. Her starting position is at the backline, in the centre, which is (for the queen) an ideal position when opening the game &ndash; don&rsquo;t move it.<\/p>\r\n\r\n<p>Generally speaking, keep the queen close to your king. It is called the queen for a reason: it has to stand alongside the king, protecting him, working together to withstand the opponent&rsquo;s attacks.<\/p>\r\n\r\n<div style=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>What&rsquo;s with the points?<\/h2>\r\n\r\n<p>They are merely guidelines. Every piece is assigned a points value based on how much it&rsquo;s worth, when it comes to offensive and defensive possibilities. This system is used to teach people about whether to capture or not.<\/p>\r\n\r\n<p>Capturing a queen with a pawn is terrific &ndash; you&rsquo;ve removed a 9 point queen with a 1 point pawn.<\/p>\r\n\r\n<p>Capturing a rook with a bishop is also considered a good trade &ndash; you are now 2 points ahead of your opponent.<\/p>\r\n\r\n<p>However, capturing a knight with a bishop, should only be done if that knight is harmful. The points are equal, so the only reason to do the capture is if that knight was threatening your queen, checking your king, defending its own king, etcetera.<\/p>\r\n\r\n<p>Do note though, that these &lsquo;rules&rsquo; can be ignored in favour of a greater plan. If you have a solid plan to checkmate your opponent by sacrificing your queen, go ahead!<\/p>\r\n\r\n<h2>Checkmate Example<\/h2>\r\n\r\n<p>In case you hadn&rsquo;t grasped the concept of check and checkmate yet, here&rsquo;s an image that displays both situations.<\/p>\r\n\r\n<p><img src=\"media\/ChessExampleCheckMate.png\" \/><\/p>\r\n","slur":"chess-pawns-pieces-rules-moves","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"2","quiz":""},
{"id":"115","title":"[Chess] Special Moves","post":"<p>There&rsquo;s a few undesirable events that could happen, when using only the rules I&rsquo;ve explained thus far. That&#39;s why some special moves were invented to make the game faster and better: Castling, En Passent and Promotion.<\/p> \r\n\r\n<h2>Castling<\/h2>\r\n\r\n<p><img src=\"media\/ChessCastling.png\" \/><\/p>\r\n\r\n<p>I&rsquo;ve explained how useful it is to lock away your king to the right\/left, and bring your rook out of the corner into the battlefield. However, with the current setup, it would take <em>a lot<\/em> of steps to get into that situation. Therefore, a very useful shortcut has been created.<\/p>\r\n\r\n<p><strong>Castling: <\/strong>The act of moving your king 2 squares left or right, and teleporting the corresponding rook to the other side of the king. It&rsquo;s hard to explain in words, so please look at the image for clarification. To prevent people from overusing this trick, there are certain rules that tell when castling is <strong>not allowed<\/strong>:<\/p>\r\n\r\n<ul>\r\n\t<li>If there&rsquo;s a piece between king and rook<\/li>\r\n\t<li>If the king is in check<\/li>\r\n\t<li>If the king or rook has been moved<\/li>\r\n\t<li>If one of the empty squares between king and rook are in check (<em>under attack<\/em>).<\/li>\r\n\t<li>If, after castling, the king would be in check.<\/li>\r\n<li>If you've already castled.<\/li>\r\n<\/ul>\r\n\r\n<p>Usually, the game starts with moving knights and bishops away from the backline, and then &ndash; at the first moment it&rsquo;s possible &ndash; both players castle. If you&rsquo;re a more offensive person, you can save it for later and use that move to setup an attack. Just make sure you don&rsquo;t move your king or rook, and you can castle any time you want in the game.<\/p>\r\n\r\n<h2>En Passent<\/h2>\r\n\r\n<p><img src=\"media\/ChessEnPassent.png\" \/><\/p>\r\n\r\n<p>The second problem that occurred was that pawns can get locked very easily. Pawns can only move forward vertically, so the only chance they have to get onto another file is when they diagonally capture a pawn (or other piece, but that&rsquo;s more unlikely). If that doesn&rsquo;t happen, they are completely stuck the first time they hit a wall (opponent&rsquo;s piece or pawn). To make sure they never get off their own file, your opponent could just wait until your pawn reaches its own row of pawns, and then suddenly move two squares forward! To solve this there is the <em>en passent<\/em> rule, which is French for <em>as it passes <\/em>or <em>while passing<\/em>.<\/p>\r\n\r\n<p><strong>En Passent: <\/strong>If your opponent moves its pawn two squares forward, so that it stands next to your pawn, you are allowed to move diagonally <em>behind<\/em> the opponent&rsquo;s pawn, and at the same time <em>capture<\/em> it. As you can see, this move is very useful and destroys defences, so you should always watch out. However, you can only capture a pawn &lsquo;en passent&rsquo; the first turn after that pawn moved two squares forward. If you wait even one more turn, the opportunity is gone.<\/p>\r\n\r\n<h2>Promotion<\/h2>\r\n\r\n<p><img src=\"media\/ChessPromotion.png\" \/><\/p>\r\n\r\n<p>The last problem has to do with pawns again. When a pawn reaches the opponent&rsquo;s backline, it has absolutely no use anymore! It can&rsquo;t move forward, it can&rsquo;t capture anything, it can't do anything.<\/p>\r\n\r\n<p>Therefore, when a pawn reaches that point, it <em>must<\/em> be <strong>promoted.<\/strong> This simply means that you can replace the pawn for a <strong>queen, rook, knight <\/strong>or <strong>bishop<\/strong>. Most people choose queen, because it is the most powerful. But, sometimes you need a knight for immediate checkmate, or you want a bishop or rook to prevent <em>stalemate<\/em>.<\/p>\r\n","slur":"chess-castling-enpassent-promotion","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"2","quiz":""},
{"id":"116","title":"[Chess] Tactics & Strategy","post":"<p>Capture as much as you can, don&rsquo;t get captured. That&rsquo;s usually what people have in mind, but it&rsquo;s not the right mind-set. You don&rsquo;t get points for every piece you capture. You don&rsquo;t necessarily win a game by having two pawns more than your opponent.<\/p> \r\n\r\n<p>The objective is to <em>checkmate<\/em> your opponent, and prevent your own king from being mated. Everything you do should in the end serve one of these purposes. Capturing the opponent&rsquo;s knight with a pawn is usually a good idea, but not of that creates a gap your opponent can use to his advantage. Attacking the queen time after time might yield a good result in the end (eventually you&rsquo;ll probably capture it), but if you have to move all your pieces to dangerous spots in the process, you&rsquo;re going to lose the game.<\/p>\r\n\r\n<p>With that in mind, I want to look at <em>defensive<\/em> and <em>offensive<\/em> strategies. We start with defence, because most of the game is deflecting attacks.<\/p>\r\n\r\n<h2>Defensive<\/h2>\r\n\r\n<p>There are two moments when you want to deploy defensive measures; when a piece is directly under attack, and when you can see a threat beginning to build. Chess players need to think multiple steps ahead for exactly this reason: so that they can stop an attack before it even begins.<\/p>\r\n\r\n<p>If you let the opponent attack, you are basically one step behind all the time. If you take action beforehand, you are in control and the opponent has to think of a new plan.<\/p>\r\n\r\n<p>So let&rsquo;s say one of your opponent&rsquo;s pieces is threatening one of yours, here&rsquo;s six things you can do:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Move your piece. <\/strong>Simply move it out of the way. The downside: sometimes this creates gaps or weaknesses in your defence.<\/li>\r\n\t<li><strong>Take cover.<\/strong> Use another piece to defend it. This means that if the opponent were to actually capture your piece, you can in turn capture the opponent&rsquo;s piece the move after that. The downside: the threat still exists &ndash; you need to keep one extra thing in mind all the time.<\/li>\r\n\t<li><strong>Capture the opponent&rsquo;s piece. <\/strong>Sometimes, the threatening piece can be captured. If for example the opponent threatens your bishop with one of his own bishops, you can simply remove the threat by capturing it. The downside: equal exchange of pieces, which means none of the players gets better, and there&rsquo;s less options in the game.<\/li>\r\n\t<li><strong>Shield it<\/strong>. Put something (usually a pawn) in front of the piece, so that the opponent first has to break that barrier to get to the piece it wants. The downside: if the opponent manages to create another threat on the piece or its shield, it will be hard to keep them close and protecting each other.<\/li>\r\n\t<li><strong>Blackmail<\/strong>. Respond to the threat, by creating a different threat yourself. If your opponent attacks your knight, you can attack his queen. He doesn&rsquo;t want to lose his queen, so he first moves her out of the way before capturing that knight. The downside: it only buys you time, you run the risk of the opponent creating multiple threats.<\/li>\r\n\t<li><strong>Check your opponent<\/strong>. The opponent <em>must<\/em> resolve a king in check. It is in principle the most advanced version of blackmailing, and therefore has the same downsides.<\/li>\r\n<\/ul>\r\n\r\n<p>These are in no specific order &ndash; it all depends on the situation &ndash; but if possible, go through the options from top to bottom. Simply moving a piece or strengthening your defence will always be a safer and better option than using the few moves you have to resolve a threat to create more and more threats yourself.<\/p>\r\n\r\n<p>When it comes to the other type of defence, against <em>possible dangers<\/em>, it works in exactly the same way. It is a bit more subtle, because a move against possible danger seems like it has no use when you first see it, but nevertheless it&rsquo;s very important.<\/p>\r\n\r\n<h2>Offensive<\/h2>\r\n\r\n<p>This chapter started by stressing the importance of making your <em>attacking moves<\/em> king-focused. But, you shouldn&rsquo;t take this advice as: <em>only attack the king. <\/em>What you really want to do, is remove every piece that stands between you and the opponent&rsquo;s king. Without losing your own pieces, that is.<\/p>\r\n\r\n<p>If you don&rsquo;t have any piece that could threaten the opponent&rsquo;s king, it&rsquo;s not useful to make up an elaborate scheme to capture on of his pieces. Sure, you might in the end win a piece and get an advantage in points, but you&rsquo;ve wasted a lot of moves. Moves that the opponent has used to build a better defence, or a structured attack targeting your king.<\/p>\r\n\r\n<p>Only capture (or lure away) pieces that threaten your king, or that stand in the way when you are attacking the opponent&rsquo;s king. All other moves should be focused on defensive and tactical matters.<\/p>\r\n\r\n<p>Now, to create great attacks, I want to introduce the <strong>double attack<\/strong>. It is, against a competent chess player, the only way to gain advantages or control over your opponent.<\/p>\r\n\r\n<p>A double attack means nothing more than threatening <strong>2<\/strong> (or more) <strong>pieces<\/strong> with one move. The opponent has to resolve two threats with one move, which is rarely possible! But, it&rsquo;s not exactly as simple as it looks: when performing a double attack, you obviously don&rsquo;t want your piece to be captured. If that was the case, the opponent could just capture your piece, and voila &ndash; all threats resolved. Therefore, there are a limited amount of ways to set up double attacks, and I will discuss them in detail in the next few chapters:<\/p>\r\n\r\n<ul>\r\n\t<li>Forks<\/li>\r\n\t<li>Discoveries<\/li>\r\n\t<li>The Pin and the Skewer<\/li>\r\n\t<li>Removing the Guard<\/li>\r\n<\/ul>\r\n\r\n<p>Try to memorize these attack patterns &ndash; it enables you to recognize them in-game, which in turn allows you to quickly plan these types of double attacks.<\/p>\r\n","slur":"chess-basic-tactics-strategy","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"2","quiz":""},
{"id":"117","title":"[Chess] Forks","post":"<p>Forks are the simplest method for placing a double attack. A fork is nothing more than moving a piece in such a way that it attacks two pieces at once. No other piece is involved &ndash; just this single forking piece.<\/p>\r\n\r\n<p>Therefore, being forked by your opponent is something you can (and should) see coming. Losing a piece to a fork is regarded almost as bad as losing a piece because you were careless. You can use this to your advantage: even the <em>threat<\/em> of a fork will force most opponents to do moves they don&rsquo;t want to do.<\/p> \r\n\r\n<p><img src=\"media\/ChessFork.png\" \/><\/p>\r\n\r\n<h2>How do I do it?<\/h2>\r\n\r\n<p>The fork can be executed with all pieces and pawns, except for the king of course. A fork doesn&rsquo;t have to be a one-move thing &ndash; it&rsquo;s perfectly possible to spend 2 or 3 moves building up to the fork, because the reward is worth it: you capture a knight, bishop, rook or even queen.<\/p>\r\n\r\n<p>The most common forking tool is the <strong>knight<\/strong>. The fact that it has an odd way of moving, and can jump over pieces, makes it possible to attack two pieces at once while not being threatened yourself. There&rsquo;s even an opening where you start with bringing your knights out and then within a few steps you can fork the opponent&rsquo;s king and rook, which means you win a rook!<\/p>\r\n\r\n<p>After the knight, the most common forking tool is actually the <strong>pawn<\/strong>. Sometimes the opponent will place a lot of pieces into the centre of the board, and doesn&rsquo;t see that you can move your pawn forward and attack two of them at once. Usually though, to resolve such a fork the opponent will capture the pawn, so you must always have it backed with another pawn.<\/p>\r\n\r\n<p>The <strong>bishop, rook<\/strong> and <strong>queen<\/strong> have similar forking capabilities. It&rsquo;s hard to find opportunities to fork, where you actually gain a points advantage. For example, a bishop will usually be impeded by intricate diagonal pawn structures and knights attacking the centre, which means the opponent could simply capture your piece if you try to fork. Similarly, the rook and queen are very valuable pieces, which are better at directly attacking the king or another piece than forking.<\/p>\r\n\r\n<h2>Check forks<\/h2>\r\n\r\n<p>One of the most common things people overlook in their defence, is a check fork. A check fork is when one of the pieces is the opponent&rsquo;s king. This forces your opponent to solve the check and leave the other piece in the fork where it is. If you look for this, you&rsquo;ll find it more often than you think.<\/p>\r\n\r\n<p><em>Why?<\/em> Because when players see that you have the ability to check them, they only see that there&rsquo;s a way out (a piece they could put in the way, free squares for the king to move to, etcetera), and don&rsquo;t bother checking for forks.<\/p>\r\n\r\n<p>This ties in directly with what I said in the <em>tactics &amp; strategy <\/em>chapter: make your only objective to checkmate the king. If on every move you at least <em>look into<\/em> the opportunities to put the king under pressures, you&rsquo;ll also find some forking opportunities appearing every now and then.<\/p>\r\n","slur":"chess-forks-double-attack","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"118","title":"[Chess] Discoveries","post":"<p>Unlike the fork, discoveries need <strong>two<\/strong> attacking pieces. In a discovery, you move one piece (<strong>unmasking piece<\/strong>) out of the way of another (<strong>unmasked piece<\/strong>), unleashing attacks on two enemy pieces at the same time. The enemy can only protect one, you take the other.<\/p> \r\n\r\n<p>As you can see, it takes more work to set up this kind of attack, but it&rsquo;s therefore also easier for your opponent to miss.<\/p>\r\n\r\n<p><img src=\"media\/ChessDiscovery.png\" \/><\/p>\r\n\r\n<h2>How do I do it?<\/h2>\r\n\r\n<p>Discoveries can be done by <strong>bishops, rooks, knights<\/strong> and <strong>pawns<\/strong>. Queens can also be involved, but only in <em>check discoveries<\/em>.<\/p>\r\n\r\n<p>The most common ones are with <em>bishops<\/em>, either as unmasking or unmasked piece. Bishops have a very wide range of attack, which is usually only limited by your own pawns or pieces. That&rsquo;s why moving one of these out of the way creates all sorts of possibilities for a bishop.<\/p>\r\n\r\n<p>For the non-diagonal attacks, <em>rooks<\/em> are the way to go. They are usually pointed at the opponent&rsquo;s king or queen from the back rank, with only one of your knights\/bishops separating them. Move that out of the way, and you can launch a discovery.<\/p>\r\n\r\n<p><em>Knights<\/em> and <em>pawns<\/em> can only be used as <em>unmasking pieces<\/em>. Knights can jump over pieces, and pawns have only a one-square attacking range &ndash; nothing changes their attacking range. Nevertheless, moving a pawn forward to launch a discovery is usually a better plan than using two pieces in an attack. That&rsquo;s because you want your pawns to move forward anyway, and they are worth less than any piece (in case things go wrong).<\/p>\r\n\r\n<h2>Check discoveries<\/h2>\r\n\r\n<p>Just as with forks, discoveries where one of the threatened enemy pieces is the king, are the best. The king has to move, which means you are sure you can capture the other piece you were attacking.<\/p>\r\n\r\n<p>Check discoveries are the only moment you can (and should try to) use your <em>queen<\/em>. The queen has the most wide attacking range of them all, which means she makes it easy to set up a discovery. Usually a knight in front of your queen is moved to check the enemy king.<\/p>\r\n","slur":"chess-discovery-double-attack","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"119","title":"[Chess] The Pin and Reverse Pin","post":"<p>This is where most novice chess player&rsquo;s knowledge ends. Forks and discoveries are very common attacking strategies, but the <strong>pin<\/strong> and <strong>reverse pin<\/strong> are a level higher.<\/p> \r\n\r\n<p>A pin involves one of your own pieces, and two enemy pieces on the same diagonal, horizontal or vertical. The idea is that you place a piece such that it runs through both enemy pieces (<strong>pinned<\/strong> piece and the <strong>target<\/strong> piece), but can&rsquo;t be captured. If the opponent moves the piece in front you capture the one at the back, and vice versa. Usually though, the target piece is more valuable than the pinned one.<\/p>\r\n\r\n<p>Such situations are hard to find, if they occur at all, but it is a more valuable tool than forks or discoveries.<\/p>\r\n\r\n<p><em>Why?<\/em> Because the pinned piece can&rsquo;t (or probably won&rsquo;t) move &ndash; then you could capture a more valuable piece. Therefore, pinning a piece means it is fixed to that square and can&rsquo;t do any defensive or offensive work. The opponent will try to resolve this by adding backup for the pieces, or move the target piece out of the pin.<\/p>\r\n\r\n<p>In the first case, you can respond by adding more backup yourself. If that&rsquo;s not possible, you can try to use your move to exploit gaps your opponent has left by creating that backup.<\/p>\r\n\r\n<p>In the second case, the pin is gone, and the only thing you can do is capture the <em>pinned piece<\/em> or forget about it and start planning something else.<\/p>\r\n\r\n<p><img src=\"media\/ChessPin.png\" \/><\/p>\r\n\r\n<h2>How do I do it?<\/h2>\r\n\r\n<p>Pawns and knights cannot help here. The same is true for the queen or king, because they are the most valuable pieces and will therefore not benefit from a pin. This leaves the <strong>bishops <\/strong>and <strong>rooks<\/strong>, which is only logical &ndash; pins can only be created at the same diagonal, horizontal or vertical.<\/p>\r\n\r\n<p>Bishops are the most common pinning tool at the start and during the game, while rooks are used in the endgame to form pins with the enemy&rsquo;s king. Which brings us to&hellip;<\/p>\r\n\r\n<h2>Check Pins<\/h2>\r\n\r\n<p>Pins that have the most valuable piece of them all as the target: the king. These pins are very powerful, as the pinned piece can&rsquo;t move &ndash; that would check the king, which is not allowed. The opponent can only move the king to resolve the pin. Not only are you then able to capture the pinned piece, it also forces the enemy king into a bad position.<\/p>\r\n\r\n<h2>Reverse Pins<\/h2>\r\n\r\n<p>These are exactly what the name implies: the most valuable piece is at the front, while an equal or less valuable one is at the back. Roles of the pinned and target piece are reversed, as the opponent will probably opt to move the front piece (which is a queen, king or rook) out of the way. Then you can safely capture the piece at the back (usually a knight, bishop or in very close games even a pawn can make all the difference).<\/p>\r\n\r\n<p>Again, using the king as target piece here, forces the opponent to move it out of the way in favour for maybe even a queen or rook at the back.<\/p>\r\n\r\n<h2>Creating Pinning Opportunities<\/h2>\r\n\r\n<p>Sometimes, a pin is available, but the pinned piece is able to <em>bite back<\/em> &ndash; it can just capture your piece if you decide to do the pin. If possible, you can capture the pinned piece. The opponent will have it guarded and recapture yours with some other type of piece. Now the same pin is still there, but with different pieces that you can take advantage of.<\/p>\r\n\r\n<p>Other times, a pin is almost possible, but the opponent&rsquo;s king just needs to move one step. Then you can simply use a check or other threat towards the king to force it to move. The opponent will probably move it out of the way in a random direction without thinking, so if you&rsquo;re lucky you can then make the pin.<\/p>\r\n","slur":"chess-pin-reverse-double-attack","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"120","title":"[Chess] Removing the Guard","post":"<p>This type of double attack is last on the list, not because it is the least important, but because it is the most advanced type of attack. If you see an opportunity for it in a game, it seems so simple and obvious. But if you&rsquo;re not looking for it, you&rsquo;ll never find it.<\/p> \r\n\r\n<p>When you threaten an enemy piece, the opponent will usually refuse to move it and move a different piece to guard it. That&rsquo;s when a double attack opportunity arises: the guard also becomes a target. If you can get the guard out of position or off the board, the threatened piece is loose again and can be captured without consequences.<\/p>\r\n\r\n<p><img src=\"media\/ChessDistractGuard.png\" \/><\/p>\r\n\r\n<p>There are four ways to remove this guard:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Capture it.<\/strong> Simply capture the guard, and make sure the opponent can&rsquo;t recapture with another guard.<\/li>\r\n\t<li><strong>Distract it. <\/strong>Capture or at least threaten some other piece, which forces the guard to recapture or move away.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Search for or create the <strong>overworked piece<\/strong>. An overworked piece is one that has multiple defensive responsibilities. This means that attacking another piece it defends distracts it and moves it away from its optimal defensive position. Sometimes, you first need to use a few moves to place multiple defensive responsibilities upon that single piece.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Attacking it.<\/strong> Forcing the guard to move by threatening it with something (of less value).<\/li>\r\n\t<li><strong>Blocking it.<\/strong> Putting a piece in between the guard and the guarded piece, which usually loosens both pieces.<\/li>\r\n<\/ul>\r\n\r\n<p>This guard removal can be done by any piece (except for the king) or pawn, and usually includes an exchange &ndash; both sides lose pieces of the same value, e.g. bishop for bishop, pawn for pawn.<\/p>\r\n\r\n<p>The take-away rule here is that whenever your opponent introduces a guard, you should look for ways to destroy it. Because, as long as that guard lives, you can&rsquo;t take the piece you originally threatened.<\/p>\r\n","slur":"chess-remove-guard-double-attack","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"121","title":"[Chess] Mating Patterns","post":"<p>Against decent players checkmating is hard, even if you have a huge piece advantage. On the other hand, you might be able to checkmate an opponent very early in the game with two or three brilliant moves. Therefore, I&rsquo;d like to discuss some basic patterns which are used to checkmate someone 99% of the time. Knowing where you are going with your moves during the game helps a lot with planning your attacks and responding to your opponent&rsquo;s threats.<\/p> \r\n\r\n<p>Two main types of mating patterns exist:<\/p>\r\n\r\n<ul>\r\n\t<li>The <strong>back rank<\/strong> mate: if the king is against the back rank, he has only 5 moves left he could make, which makes it easier to checkmate him. Most players use two rooks to drive the enemy king towards the back rank (by constantly checking him).<\/li>\r\n\t<li>The <strong>double direction <\/strong>mate: attacking the king from multiple directions at the same time. This means that one piece attacks <strong>diagonally<\/strong> (bishop, queen or pawn), and another attacks <strong>straight<\/strong> (queen or rook). You can use this to constantly check the king and force it into a corner, where it is then checkmated. If the king has some pieces around it (usually its own pawns), then you don&rsquo;t want to drive it away &ndash; he already has limited movement options.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Variations on this are using two different diagonals, or one straight line + one knight. These however only work if the king is positioned to the sides of the board.]<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Often though, checkmate comes from a combination of these two.<\/p>\r\n\r\n<p>Let me give you some examples to make these concepts more clear. Most of these are named after their inventors or points of origin. Also note that these mating patterns don&rsquo;t always come in the ideal way (actually, they generally don&rsquo;t), which means you must train yourself to recognize opportunities and force the opponent to the spot you want him to be.<\/p>\r\n\r\n<h2>Back Rank Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessBackRankMate.png\" \/><\/p>\r\n\r\n<p>Quite simply, this is by far the most common way to checkmate. If you have an advantage of one or two pieces, you can usually safely bring one or two pawns to the other side of the board for promotion. Then, if you have two rooks, or a rook and a queen, you can move them closer to the king, one by one, to eventually checkmate your opponent.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Anderssen&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessAnderssenMate.png\" \/><\/p>\r\n\r\n<p>This pattern is to be used specifically when the opponent has castled, and has a weak pawn structure on the kingside. You can&rsquo;t really force the opponent to castle, but most players do it as quickly as possible anyway, which makes this a very useful pattern to know. If the king still has its three pawns in front of him, you can destroy it with a sacrifice &ndash; attacking with a valuable piece which the opponent can&rsquo;t resist to take with his pawns.<\/p>\r\n\r\n<p>NOTE: Putting a bishop on the long diagonal is almost always a good idea, as it runs through the centre, while still keeping the bishop relatively safe.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Morphy&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMorphyMate.png\" \/><\/p>\r\n\r\n<p>This pattern is more or less a variation on the Anderssen&rsquo;s mate. The king is castled and behind some pawns, but this time the middle one has to be somewhere else or captured. This means that the king is checkmated on g8 instead of h8.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Morphy&rsquo;s Mate with Knight<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessMorphyKnightMate.png\" \/><\/p>\r\n\r\n<p>Instead of a rook and bishop, it uses a queen (which can move both diagonally and straight), which is covered by a knight. The knight is an ideal piece, because it can&rsquo;t be attacked by any pieces directly surrounding the king, while it does provide two guarded squares close to the king. It depends a bit on the king&rsquo;s position if you need to move your queen to the other guarded square after the initial check.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Greco&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessGrecoMate.png\" \/><\/p>\r\n\r\n<p>The last of three mating patterns for a castled king with weak pawn line. This time, the king is on h8, and has lost his pawns on the f and h file. The pawn on g7 is crucial for this mate, and can&rsquo;t be any other piece &ndash; that piece would be able to interfere with the rook&rsquo;s attack towards the king.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Greco&rsquo;s Mate with Knight<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessGrecoKnightMate.png\" \/><\/p>\r\n\r\n<p>As the title implies, this pattern uses a knight to effectively block off three straight squares, much like the rook did in Greco&rsquo;s mate. There need to be two pawns or pieces in front of the king, to the right, which can&rsquo;t capture the knight or move in such a way that they stand between the bishop and the king. Remember that we&rsquo;re talking about <em>certain<\/em> mating patterns here, so the opponent should not in any way be able to solve the problem on his side.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Damanio&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessDamaniosMate.png\" \/><\/p>\r\n\r\n<p>The picture is just one example of this pattern. If the king is at any position on the back rank, you can place a (<em>guarded<\/em>) queen right in front of him, and he will be checkmated. Again, realize that &ndash; just as any pattern &ndash; this queen represents both diagonal and straight lines working together to checkmate.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Anastasia&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessAnastasiaMate.png\" \/><\/p>\r\n\r\n<p>One of the trickier mates. The king needs to be pushed toward the edge of the board, with the final blow delivered by a rook on the same line. The knight can block off two of the three remaining moves, but not all of them &ndash; there will have to be a pawn or piece there.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Arabian Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessArabianMate.png\" \/><\/p>\r\n\r\n<p>A variation on Anastasia&rsquo;s mate, requiring a slightly different position of the king (and not necessarily any other enemy piece). The knight is placed in such a way that it can guard a rook on h7, and at the same time block off movement in the other straight direction. The diagonal movement is blocked by the closely placed rook.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Blackburne&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessBlackburneMate.png\" \/><\/p>\r\n\r\n<p>This pattern needs very convenient circumstances, but in a game with no heavy pieces (rooks or queen) it can make all the difference. It requires two bishops, a king pushed towards the corner, and one pawn behind which he can take shelter.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Boden&rsquo;s Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessBodenMate.png\" \/><\/p>\r\n\r\n<p>Also works with two bishops, but requires an additional rook on your side. The advantage though, is that it allows more enemy pieces surrounding the king.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Smothered Mate<\/h2>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessSmotheredMate.png\" \/><\/p>\r\n\r\n<p>A pattern that often requires a sacrifice. The pieces blocking off the king&rsquo;s movement don&rsquo;t have to be a rook and two pawns &ndash; they can be anything that can&rsquo;t capture the knight.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n","slur":"chess-mating-patterns","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"4","quiz":""},
{"id":"122","title":"[Chess] Positional Play","post":"<p>Positional play in chess is one of the main skills that separates the grandmasters from the regular chess players. Most people are inclined to get their pieces forward as fast as possible, and launch assaults on the opponent&rsquo;s most precious pieces. While this can be the way to go against an inexperienced player, a trained one will quickly find weaknesses in your defence and exploit them before you know it.<\/p> \r\n\r\n<p>That&rsquo;s when this concept of &ldquo;positional play&rdquo; steps in, which is based on only one single, very true principle.<\/p>\r\n\r\n<h2>The Positional Principle<\/h2>\r\n\r\n<p><img src=\"media\/ChessPositionalPlay.png\" \/><\/p>\r\n\r\n<p>Remember this:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Move that one of your pieces, which is in the worst plight, unless you can satisfy yourself that you can derive immediate advantage by an attack.<\/em><\/p>\r\n\r\n<p>These words were said by Adolf Anderssen (that guy from that first mating pattern from previous chapter), and should be the first thing in your decision making process.<\/p>\r\n\r\n<p>When it&rsquo;s your turn, there&rsquo;s two things you can do: attack or defend. If you can convince yourself that attacking is by far the best way to go, you should do it. If the opponent just captured one of your pieces or threatens to do so, attack the piece and\/or resolve this problem. But, if those are not the case, you should switch your mind-set towards positional play.<\/p>\r\n\r\n<p>And positional play is nothing more than finding the <strong>weakest link<\/strong> in your defence, and moving it to a <strong>better position<\/strong>. Maybe there&rsquo;s a rook just sitting behind some other pieces, restricted in its movement and defending absolutely nothing. Or maybe one of your knights is in a dangerous position it doesn&rsquo;t need to be in. Go over all of your pieces, and see which ones are doing the least or are in the gravest danger if not moved. Then find a better home for them.<\/p>\r\n\r\n<h2>Applying the Positional Principle<\/h2>\r\n\r\n<p>There are three things you can do to improve a piece&rsquo;s position:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Improve placement. <\/strong>Some suggestions:\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Make it threaten\/attack the centre<\/li>\r\n\t\t<li>Move it out of a dead spot into one it could defend or attack<\/li>\r\n\t\t<li>Rob the opponent of certain (double) attack strategies (like a fork or pin) by moving the piece out of harm&rsquo;s way and back into your own defensive system<\/li>\r\n\t\t<li>Reduce the amount of &ldquo;safe squares&rdquo; the opponent has.<\/li>\r\n\t\t<li>Reduce the value of an enemy piece by closing off its attacking lines.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Apply pressure on a weakness<\/strong> in your opponent&rsquo;s defence.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>A loose piece, a lonely pawn &ndash; any enemy piece that is in a bad position. Do note that this is positional play, which means you merely have to <em>threaten it<\/em>. If a piece is doing nothing, you can increase its value by making it attack anything, even a heavily guarded piece. Because from that moment on, this threat will make decisions for your opponent harder.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Aid in an<\/strong> (upcoming or already begun) <strong>attack<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>If you look multiple moves ahead and see the opportunity for a brilliant attacking combination, you want to start with getting all your pieces ready and involved in this attack. Simply moving your rook a few squares without attacking anything will seem harmless to your opponent, while it might be the essential step in checkmating him.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>From this you can conclude that a piece has a bad position if it cannot participate in the game &ndash; defence and offence. We call such a piece an <strong>inactive piece<\/strong>.<\/p>\r\n\r\n<p>You want to only have <strong>active pieces<\/strong>, because if one piece stands badly, the whole game stands badly.<\/p>\r\n\r\n<p>These three options will be further explained in the next few sections.<\/p>\r\n\r\n<h2>Controlling the Centre<\/h2>\r\n\r\n<p><img src=\"media\/ChessControlTheCentre.png\" \/><\/p>\r\n\r\n<p>This is a recurring theme throughout this chess course, and for a good reason. Pieces and pawns in the centre have the most attacking possibilities, which means that the person that controls the centre has a very high chance of winning. A good pawn game usually is decisive in these matters, which you can read about in the <em>pawn structure<\/em> section.<\/p>\r\n\r\n<p>If you can move a piece in such a way that it can be placed safely in the centre, or such that it can attack the centre if necessary, you should almost always do it.<\/p>\r\n\r\n<h2>Strong &amp; Weak Squares<\/h2>\r\n\r\n<p><img src=\"media\/ChessStrongWeakNeutralSquares.png\" \/><\/p>\r\n\r\n<p>Every square on the board has a value for you: <em>weak, neutral <\/em>&amp; <em>strong<\/em>.<\/p>\r\n\r\n<p>A <strong>weak <\/strong>square is one that is controlled by your opponent, a <strong>strong<\/strong> square is one that is controlled by you, and a <strong>neutral<\/strong> square is one that is empty and under no influence of any kind by both players.<\/p>\r\n\r\n<p>When I say controlled, I mean that there&rsquo;s either a piece able to attack the square, or a guarded piece occupies it. If the piece that occupies it is not guarded, it is actually a weakness of yours that the opponent can take advantage of.<\/p>\r\n\r\n<p>Things get nasty when multiple pieces from both players want to control the same square. Generally, the square is then said to belong to the one with the most pieces attacking it (e.g. 2 knights against one). But, say a square is controlled by a pawn. It would then be foolish to attack it with two rooks, because a rook is 5 points and a pawn only 1, so in that case the square is still considered strong for the player with the pawn.<\/p>\r\n\r\n<p><em>What can I do with this information?<\/em> Your objective with positional play is to create as many strong squares for yourself. Leaving neutral squares in the process is okay &ndash; it&rsquo;s the weak ones you have to watch out for. Moving a piece therefore should always upgrade a weak or neutral square, to a neutral or strong one respectively.<\/p>\r\n\r\n<h2>Open &amp; Closed Lines<\/h2>\r\n\r\n<p><img src=\"media\/ChessOpenClosedLines.png\" \/><\/p>\r\n\r\n<p>The three most valuable pieces &ndash; Bishop, Rook and Queen &ndash; all move in a straight line, as many squares as they want. When they have that freedom, they are deadly. But if they don&rsquo;t, even pawns can inflict more damage.<\/p>\r\n\r\n<p>If you can move a piece that&rsquo;s doing nothing into the path of one of those heavy pieces, you have greatly increased its position (make sure that piece is guarded though).<\/p>\r\n\r\n<p>On the other hand, you shouldn&rsquo;t let the opponent block your valuable pieces. A good positional move would be to place a piece in such a way that the opponent can&rsquo;t get near the lines of attack of your heavy pieces.<\/p>\r\n\r\n<h2>The King&rsquo;s Role<\/h2>\r\n\r\n<p>During the three different stages of the game, the king takes on a different role. Because the king must be protected and has limited attacking powers, using your king well has everything to do with positional play.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Opening:<\/strong> During the opening you should never move your king or make it possible for the opponent to check it. You want to bring out all your other pieces, and then castle your king into safety.<\/li>\r\n\t<li><strong>Midgame:<\/strong> Still, your king is safe and it should stay that way. Your other pieces are strengthening the defence and fighting off the enemy, your king should not be used as a piece to guard anything, nor should it (or the pawns in front of him for that matter) change position.<\/li>\r\n\t<li><strong>Endgame:<\/strong> There&rsquo;s less pieces left on the board, and that means that the king has just become a lot more valuable. Leaving the king out in the open is a bad idea, not only because it can easily be checkmated, but also because you can use the king to guard the few pieces and pawns you have left. You should change the king&rsquo;s position if you don&rsquo;t have any other piece that can make a greater increase in position or attacking value. Usually, if you can get the king towards the spot where the last few pieces and pawns are fighting it out, you suddenly have an extra piece to guard and possibly attack.<\/li>\r\n<\/ul>\r\n\r\n<p>You should always take a look at your king, even if you can easily see it is impossible for the opponent to threaten him in any way. If you don&rsquo;t have a better move, increasing the king&rsquo;s position at the right moment and in the right way can make all the difference.<\/p>\r\n","slur":"chess-positional-play-tactics","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"123","title":"[Chess] Openings","post":"<p>Your opening means everything. It determines what type of game is going to be played, how well you&rsquo;ll be able to develop your pieces, and might even give you a psychological edge over your opponent.<\/p> \r\n\r\n<p>Theoretically, you could open any way you like &ndash; as long as your moves are legal ones. But not every move or sequence of moves is equally strong, which is exactly why certain opening patterns have been created!<\/p>\r\n\r\n<p>Usually, white will choose the style the game is going to be with his <strong>opening<\/strong> or first move. Black then responds with the appropriate opening himself, which we usually call a <strong>defence<\/strong>.<\/p>\r\n\r\n<p>There are two (general) styles a game can be in:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Open: <\/strong>The pawns in the centre of the board have been removed. Even if all other pawns are locked in, this provides a passage for a lot of pieces to move to the other side of the board.<\/li>\r\n\t<li><strong>Closed:<\/strong> the pawns in the centre of the board are locked in or at least still present, and the sides of the field are also occupied or the files shut off.<\/li>\r\n<\/ul>\r\n\r\n<p>When choosing an opening it&rsquo;s always a trade-off between security (defence) and possibilities (offence). Opening with your centre pawns and knights will give you control over the centre, but creates vulnerabilities if the enemy attacks via the diagonals. Opening with your knights and pawns on the sides creates less vulnerabilities (there&rsquo;s only some danger coming from a queen or rook attacking on the d or e files), but limits your attacking options considerably. Therefore, choose your opening based on the type of game you want to play.<\/p>\r\n\r\n<p>But, also keep in mind the game your <em>opponent <\/em>wants to play. Using an opening they don&rsquo;t expect, or that doesn&rsquo;t fit at all with their playing style, gives you a slight psychological advantage.<\/p>\r\n\r\n<p>Anyway, I want to show you the most common and successful openings and defences. They are ordered by winning percentage (first one lead the most wins in professional games, second one a bit less, etcetera), but don&rsquo;t think you should only learn the opening with the best statistics. Different opponents require different openings, and if you play black you should also be able to recognize white&rsquo;s opening and immediately know the appropriate response.<\/p>\r\n\r\n<p>NOTE: Many people exchange pawns, knights and bishops in the opening of the game, thinking &lsquo;<em>oh well, it is an equal exchange, and I&rsquo;ve still got all those other pieces.<\/em>&rsquo; Don&rsquo;t. Depending on how the game develops and whether it is an open or closed game, you will need different pieces. For example: In a closed game, only knights can move freely, while open games give your bishops maximum potential.<\/p>\r\n\r\n<p>NOTE 2: While not vital to <em>playing<\/em> chess, it is useful to learn about how notation for chess games works &ndash; every opening here has its sequence of moves written down in the official way. Learn about that in the <strong><em>[Chess] Notation Tutorial<\/em><\/strong>.<\/p>\r\n\r\n<h2>Openings for White<\/h2>\r\n\r\n<h5>Queen&rsquo;s Gambit<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningQueensGambit.png\" \/><\/p>\r\n\r\n<p>1. d4 d5 2. c4<\/p>\r\n\r\n<p>Black can now either accept (capture your pawn) or decline. If he accepts, you&rsquo;ll lose a pawn but gain a great positional advantage (and usually, you win that pawn back). If he declines, you still control the centre.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>English Opening<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningEnglishDefence.png\" \/><\/p>\r\n\r\n<p>1. c4<\/p>\r\n\r\n<p>A highly successful opening. It still puts pressure on the centre, but also allows for faster piece development.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>King&rsquo;s Indian Attack<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningKingsIndianAttack.png\" \/><\/p>\r\n\r\n<p>1. e4 &hellip; 2. d3 &hellip; 3. Nd2 &hellip; 4. Ngf3 &hellip; 5. Bg2 &hellip; 0-0<\/p>\r\n\r\n<p>It mostly controls the centre, but also allows for quick castling and a very strong kingside (defensively).<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Ruy Lopez<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningRuyLopez.png\" \/><\/p>\r\n\r\n<p>1. e4 e5 2. Nf3 Nc6 3. Bb5<\/p>\r\n\r\n<p>Very popular. It immediately puts pressure on black, while still creating room to castle and controlling some of the centre.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Four Knights Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningFourKnightsDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 e5 2. Nf3 Nc6 3. Nc3 Nf6<\/p>\r\n\r\n<p>A symmetrical opening, which usually creates a defensive and positional game. Both sides are equal after the first three moves, and it will be hard to quickly set up an attack (for black more than for white though).<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Giuoco Piano<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningGiuocoPiano.png\" \/><\/p>\r\n\r\n<p>1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5<\/p>\r\n\r\n<p>Translated from Italian it means &ldquo;quiet game&rdquo;. White dominates the centre by preventing any movement from black through it. Black usually tries to exchange pieces to free up the centre &ndash; prevent that.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Ponziani Opening<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningPonziani.png\" \/><\/p>\r\n\r\n<p>1. e4 e5 2. Nf3 Nc6 3. c3 (<em>Nf6 4. d4<\/em>)<\/p>\r\n\r\n<p>The main purpose is to create a strong pawn structure, but it also opens up diagonals for white&rsquo;s bishops and queen. His queenside knight is trapped for now though.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Bishop&rsquo;s Opening<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningBishops.png\" \/><\/p>\r\n\r\n<p>1. e4 e5 2. Bc4<\/p>\r\n\r\n<p>Prevents black from marching into the centre, while leaving the f-pawn unblocked (<em>f4<\/em> is a common follow-up move) for more centre pressure.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Benko&rsquo;s Opening<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningBenkos.png\" \/><\/p>\r\n\r\n<p>1. g3<\/p>\r\n\r\n<p>Usually followed up by <em>Bg2<\/em> and\/or <em>Nf3<\/em>. Creates a very strong kingside defence, while also placing the bishop on its favourite diagonal. Doesn&rsquo;t necessarily do much good for the centre or pawn structure.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Blackmar-Diemer Gambit<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningBlackmarDiemerGambit.png\" \/><\/p>\r\n\r\n<p>1. d4 d5 2. e4 dxe4 3. Nc3 (<em>&hellip; 4. f3<\/em>)<\/p>\r\n\r\n<p>Just as with the Queen&rsquo;s gambit, white lets black take a pawn to rapidly develop and activate his pieces. White usually wins back the pawn, as black will have a hard time defending such an advanced pawn in the beginning of the game. A very attacking opening, but risky.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Openings for Black<\/h2>\r\n\r\n<h5>Nimzo-Indian Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningNimzoIndianDefence.png\" \/><\/p>\r\n\r\n<p>1. d4 Nf6 2. c4 e6 3. Nc3 Bb4<\/p>\r\n\r\n<p>A flexible defence that wants to force double pawns on White&rsquo;s side early in the game.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Pirc Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningPircDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 d6 2. &hellip; Nf6 (<em>3. &hellip; g6 4. &hellip; Bg7<\/em>)<\/p>\r\n\r\n<p>Black allows white the centre and plays via the flanks. With good support, it can then even launch attacks on the centre from there.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Sicilian Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningSicilianDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 c5<\/p>\r\n\r\n<p>Black plays for the advantage, but has to watch out that it doesn&rsquo;t fall victim to an early attack from white. Black plays for the centre without giving up kingside security or pawn structure.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>French Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningFrenchDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 e6<\/p>\r\n\r\n<p>Creates a cramped and restricted game for black in the early stages, but black gains counterattacking possibilities on the queenside. White will most likely focus on the kingside.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Alekhine Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningAlekhineDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 Nf6<\/p>\r\n\r\n<p>A very attacking and aggressive move. It temps White&rsquo;s pawn(s) forward, trying to trap them and undermine the structure later.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Robatsch Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningRobatschDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 g6<\/p>\r\n\r\n<p>Black allows white to occupy the centre at first, but will later seriously threaten it with moves like <em>Bg7<\/em> and\/or <em>Nf6<\/em>.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Nimzowitsch Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningNimzowitschDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 Nc6<\/p>\r\n\r\n<p>Same idea as the Robatsch defence &ndash; white is allowed to play freely in the centre, but black will later on try to make the whole structure crumble with well-timed pawn advances and annoying knights.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Caro-Kann Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningCaroKannDefence.png\" \/><\/p>\r\n\r\n<p>1. e4 c6<\/p>\r\n\r\n<p>A relatively surprising way for black to open. It sets up a good pawn structure near the centre, but constrains the knight and bishop. Usually leads to highly positional games.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Dutch Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningDutchDefence.png\" \/><\/p>\r\n\r\n<p>1. d4 f6<\/p>\r\n\r\n<p>If the opponent can&rsquo;t handle it, it is very good and leads to beautiful games. If the opponent does know exactly how to deal with it, you&rsquo;re going to have a hard time. Half of the players praise this opening, the others criticize it.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h5>Slav Defence<\/h5>\r\n\r\n<p><img class=\"floatingBodyImage\" src=\"media\/ChessOpeningSlavDefence.png\" \/><\/p>\r\n\r\n<p>1. d4 d5 2. c4 c6<\/p>\r\n\r\n<p>Originally invented as one of the best ways to decline a Queen&rsquo;s Gambit. Very popular among grandmasters.<\/p>\r\n\r\n<div class=\"floatingBodyClear\">&nbsp;<\/div>\r\n\r\n<h2>Remember&hellip;<\/h2>\r\n\r\n<p>These are not all openings. Not even close.<\/p>\r\n\r\n<p>And although they are sorted based on statistics and winning percentages, there is no single best opening. You choose your opening based on your opponent and the type of game you want to play.<\/p>\r\n\r\n<p>Analyse the opening of every opponent you run into, and always check the role your opening played in winning\/losing\/drawing a game. Learn new openings or variations regularly.<\/p>\r\n","slur":"chess-openings","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"124","title":"[Chess] Pawn Structure","post":"<p>A grandmaster of Chess once said &ldquo;pawns are the <em>soul<\/em> of the game.&rdquo; Not queens, not the king, not any heavy piece &ndash; he was full of pawns. Of course, you have 8 of them, and they are at the front of the battlefield, but why are they so special or important?<\/p> \r\n\r\n<p>Because they are worth so little, but can do so much. A chain of pawns is the ideal defence, because no player wants to sacrifice their pieces (which are worth more) just to break through. A pawn that reaches the back rank can be promoted to the most valuable piece in the game; the queen. A group of pawns focussed on the centre can seriously limit your opponent&rsquo;s movement options. That&rsquo;s why you should always try to get your pawn structure strong, and the enemy&rsquo;s pawn structure weak and broken.<\/p>\r\n\r\n<p>I&rsquo;ll first introduce the concept of pawn islands, then discuss three types of pawns you <strong>do<\/strong> want to have, and then two types you generally <strong>don&rsquo;t<\/strong> want to have.<\/p>\r\n\r\n<p><img src=\"media\/ChessPawnStructure.png\" \/><\/p>\r\n\r\n<h2>Pawn Islands<\/h2>\r\n\r\n<p>Pawn islands are groups of pawns, isolated from each other. A pawn is isolated if there&rsquo;s no pawn in the 8 squares around it. The rule here is:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The fewer pawn islands, the better<\/em><\/p>\r\n\r\n<p>A group of pawns will always be able to guard each other, or attain such a position within one or two moves. It therefore creates an impenetrable fortress on that part of the board. On the other hand, if a pawn of yours is lonely, it is often unwise and hard to guard it, and will be captured easily. The best pawn structure is one consisting of a maximum of three islands, or where all pawns are <strong>connected <\/strong>and\/or <strong>chained<\/strong>.<\/p>\r\n\r\n<h2>Connected Pawns<\/h2>\r\n\r\n<p>Pawns are connected if they stand right next to each other. They not only threaten the four squares in front of them, the squares they occupy are also considered <strong>strong squares<\/strong>. <em>Why? <\/em>Because if one of them is threatened, it only takes a single move to solve the problem, which is transforming them into <em>chained pawns<\/em>.<\/p>\r\n\r\n<h2>Chained Pawns<\/h2>\r\n\r\n<p>Chained pawns means that every pawn is defending another, which creates a that starts from the pawn that is most to the front, and ends with one pawn in the heart of your defence.<\/p>\r\n\r\n<p>Chained pawns are weaker than connected ones in the sense that they threaten less squares and leave a diagonal gap. They are stronger than connected ones for their ability to guard each other.<\/p>\r\n\r\n<p>However, always make sure you guard that last pawn in the chain very well. If that one falls, the whole structure crumbles and your defence is almost lost.<\/p>\r\n\r\n<h2>Passed Pawns<\/h2>\r\n\r\n<p>Passed pawns are pawns that won&rsquo;t get into trouble if they walk right into the opponent&rsquo;s defence. There is no enemy pawn on their file or the ones right next to it. An opponent will rarely sacrifice a piece for a pawn, which means passed pawns are relatively safe and can do a lot of damage if used properly.<\/p>\r\n\r\n<h2>Double Pawns<\/h2>\r\n\r\n<p>We speak of double pawns if there is more than one pawn (from you) on the same file. This can happen over the course of the game when a pawn captures something.<\/p>\r\n\r\n<p>Double pawns are <em>dreadful<\/em>, because the pawn at the back is seriously blocked by the one in the front. They also leave vertical gaps in your defence and the back pawn is usually rendered useless.<\/p>\r\n\r\n<p>The only upside is if you have double pawns in the centre, or within the opponent&rsquo;s half of the board. There they can wreak havoc with the four squares they threaten.<\/p>\r\n\r\n<h2>Isolated Pawns<\/h2>\r\n\r\n<p>Isolated pawns are lonely pawns. They can&rsquo;t receive support from your other pawns (because they are more than one file away), but they also can&rsquo;t just walk through your opponent&rsquo;s defence because he\/she <em>does<\/em> have a pawn that can block it. You <strong>don&rsquo;t<\/strong> want to have those, as it usually means somewhere during the game you will lose that pawn, and won&rsquo;t be able to gain anything from it.<\/p>\r\n\r\n<h2>Pawn Majorities<\/h2>\r\n\r\n<p>In the endgame, having a <strong>pawn majority<\/strong> becomes very important. If you have more pawns than your opponent at the kingside\/queenside, you can simply burst through their pawn structure by force. This weakens the opponent&rsquo;s defence, and if you&rsquo;re lucky you can promote your leftover pawns or use them for checkmate.<\/p>\r\n\r\n<p>In general, you want to keep your pawn structure strong and intact during the opening and middle game. But, if you find a way to safely advance your pawn into enemy territory, you should do it. An advanced pawn can restrict the opponent&rsquo;s options and aid in devastating attacks.<\/p>\r\n\r\n<p>Also, timing is crucial in advancing your pawns. If you start the game by advancing all of them you might create an intricate pawn structure, but there&rsquo;s a lot of space behind it and not much to guard the weakest links in the chain. Only advance a pawn if it can be done safely, which sometimes means one or two pawns enter the game very, very late.<\/p>\r\n","slur":"chess-pawn-structure","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"125","title":"[Chess] Light-Dark Square Tactic","post":"<p>I thought about this for a long time, about whether to include it in a fundamentals Chess course. It is a quite advanced and detailed strategy, but I eventually decided it was important enough to mention the topic.<\/p> \r\n\r\n<p><strong>Light<\/strong> and <strong>Dark<\/strong> squares simply refer to the colour of the squares &ndash; white and black.&nbsp; A lot of pieces on the board can move or capture diagonally, and one important thing to notice is that moving like that you <strong>always<\/strong> stay on squares of the same colour! A pawn on a light square, will only be able to capture or guard pieces on light squares. A bishop on a light square will stay on the light squares for the rest of the game. If you&rsquo;re able to restrict horizontal and vertical movement, the queen will also only move through squares of the same colour.<\/p>\r\n\r\n<p>Conversely, a knight always alternates between <em>light<\/em> and <em>dark<\/em> squares. If he&rsquo;s on a light square, any move will bring him to a dark one, and vice versa.<\/p>\r\n\r\n<p>Because of those close relationships between pieces and the colour of the squares they are on, you can use this information to your advantage.<\/p>\r\n\r\n<p><img src=\"media\/ChessLightDarkSquareTactic.png\" \/><\/p>\r\n\r\n<h2>Defensive<\/h2>\r\n\r\n<p>Especially near and during the endgame, the light-dark square tactic is important. If your opponent has pieces that work (mainly) diagonally, you can remove all of their use by placing your own pawns, king and perhaps other pieces strategically.<\/p>\r\n\r\n<p>If you create a pawn chain on the dark squares, and put your king on a light square, the dark-squared bishop can&rsquo;t do anything. If you place a bishop running through the centre early on in the game, it will be very hard for your opponent to build and develop &ndash; the only pieces that can cross that diagonal line are the rooks, and they are still locked in their position. If you place your knights just outside the centre and on two squares of different colour, you are able to jump to and defend any colour in case of an attack.<\/p>\r\n\r\n<p>If the opponent builds their attack diagonally, your rooks are of no use, and may even work against you. If you have focused your defence on the right colour, your rooks should be the pieces preventing the opponent from attacking via the other one.<\/p>\r\n\r\n<h2>Offensive<\/h2>\r\n\r\n<p>The advantage of the light-dark square tactic is mainly offensive though.<\/p>\r\n\r\n<p>First of all, there are so-called <strong>bad bishops<\/strong>. Those are bishops that can&rsquo;t really do anything because the squares of their colour are occupied or threatened. A bad bishop will usually stay bad for a very long time, and it is a good idea to exchange it for the <strong>good bishop<\/strong> of your opponent. The good bishop is the one that can move freely, and that is on the same colour as your king. You don&rsquo;t want to run into an early check and have to move your king (and perhaps lose a piece). If that&rsquo;s not possible, exchange it with a knight.<\/p>\r\n\r\n<p>Secondly, the strongest attacks are usually along one colour. Open diagonals can be exploited very easily, and are the only big weakness if your opponent has a good pawn structure. The only way you could get lots of pieces gracefully working together is by focusing solely on one colour.<\/p>\r\n","slur":"chess-light-dark-square-tactics","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"4","quiz":""},
{"id":"126","title":"[Chess] General Tips & Tricks","post":"<p>There you have it: the fundamentals of Chess! You should by now know the rules, openings, basic tactics and a few advanced strategies. Now the only way to become even better is to <em>play <\/em>a lot, and maybe even <em>analyse games<\/em> a lot.<\/p> \r\n\r\n<p>Playing games you can experiment with new ideas and learn how to play against all the different types of opponents you&rsquo;ll ever meet. Every game of Chess you can draw on your experience from previous ones. Maybe you recognize a situation and still know what move you made and whether it was the right one or not, or perhaps you have over time invented your own mating pattern that is very effective.<\/p>\r\n\r\n<p>Analysing games you can learn from the mistakes other people, usually grandmasters, made in their games. Trying to come up with better alternatives will improve your skill. But, they also provide an opportunity for you to see new patterns and attacking combinations to use in your own games.<\/p>\r\n\r\n<p>Anyhow, I will now give you some last tips and tricks that didn&rsquo;t really fit elsewhere, and then you be on your own!<\/p>\r\n\r\n<ul>\r\n\t<li><strong>On Sacrifices. <\/strong>A sacrifice is when you let the opponent capture one of your pieces without recapturing, to gain a positional advantage and maybe even a sure-fire way for a checkmate. However, don&rsquo;t think that sacrifices are magical unicorns that will always help your game. Only make a sacrifice if you are absolutely sure you are going to gain from it what you have in mind (or maybe even better). If you&rsquo;re not sure, you&rsquo;ll have sacrificed your piece for nothing 99% of the times.<\/li>\r\n\t<li>For this reason: don&rsquo;t take an enemy piece without looking at the consequences. Maybe he made a bad move, maybe he&rsquo;s making a brilliant sacrifice.<\/li>\r\n\t<li>Before moving a piece, see what it defends and what it prevents. Sometimes, one of your pieces is preventing an attack without you knowing it, and moving it will let your opponent loose. Also, make sure you don&rsquo;t provide the opponent with an opportunity to place a double attack. Always.<\/li>\r\n\t<li>Develop knights before bishops. This is simply a logical insight: bishops are hidden behind a wall of pawns at the start of a game. Knights can get into the game and control the centre in one single move. It is therefore,<em> most of the times, <\/em>better to start with bringing your knights out.<\/li>\r\n\t<li>Learn to think multiple moves ahead. If you only think one step ahead, your opponent won&rsquo;t have to go further either, and will always see through all your plans.<\/li>\r\n\t<li>Learn to view the game from your opponent&rsquo;s POV. What does he want? Why does he do this particular move? What is he threatening? What does he think I want?<\/li>\r\n\t<li>If you have finally achieved a winning position, don&rsquo;t let it slip away! Don&rsquo;t sit back and relax, don&rsquo;t start toying with your opponent &ndash; one wrong move and you have lost the game.<\/li>\r\n\t<li><strong>The first move disadvantage.<\/strong> Don&rsquo;t be the one starting an (equal) exchange, unless you can gain a great positional or tactical advantage from it. Let the opponent come &ndash; he will waste one move on starting the exchange. For example, say your opponent places his bishop in such a way that he is threatening your bishop. You could then use your move to exchange bishops, but that&rsquo;s probably what your opponent is hoping for. If your opponent wants to exchange anyway, let him do that in his own time and not yours.<\/li>\r\n<\/ul>\r\n","slur":"chess-general-tips-tricks","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"3","quiz":""},
{"id":"127","title":"[Chess] Game Notation","post":"<p>In order to transcribe or analyse games, you have to know how to write down chess games in the correct form.<\/p>\r\n\r\n<p>I am going to assume you are familiar with the several pieces, and the fact that the columns of the board are named <strong>a &ndash; g<\/strong>, and the rows are numbered <strong>1 &ndash; 8<\/strong>.<\/p> \r\n\r\n<p>The basic structure is like this:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&lt;which turn&gt;. &lt;white&rsquo;s move&gt; &lt;black&rsquo;s move&gt;<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">1. d4 d5 2. Nc3 Nf6 3. &hellip;<\/p>\r\n\r\n<p>Basically, every turn is seen as a pair of two moves &ndash; one from white and one from black. Because both players always alternate turns, this format can continue perfectly until the end of the game.<\/p>\r\n\r\n<p>As you can see from the example, the most important part of notation is of course what square the piece is moved towards. But, we also want to know which piece is being moved. For that, an extra letter is added at the front:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>N<\/strong> for the knight, <strong>B<\/strong> for bishop, <strong>R<\/strong> for rook, <strong>Q<\/strong> for queen, <strong>K <\/strong>for king. Pawns have no letter in front.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Why the N for the knight?<\/em> Because the K was already taken by the more important King.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Why nothing in front of the pawn?<\/em> Because pawns are moved the most, and leaving out a prefix for these pieces speeds up the notation process considerably.<\/p>\r\n\r\n<p>Furthermore, there are cases where for multiple pieces of the same type (e.g. two knights) could have moved to that square. In those cases, we also include the file of the starting square in front of the end square.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">N<strong>d<\/strong>e5 means the knight on the d file moved to e5, <strong>c<\/strong>d6 means the pawn from the c file moved to d6.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">If both pieces are on the same file, we just include the whole square (N<strong>d3<\/strong>e5).<\/p>\r\n\r\n<p>And lastly, there are some symbols to clarify the state of the game:<\/p>\r\n\r\n<ul>\r\n\t<li>An <strong>x <\/strong>in front of the target square means the piece <em>captured<\/em> something. (c<strong>x<\/strong>d6)<\/li>\r\n\t<li>A <strong>+ <\/strong>behind the target square means the opponent is in <em>check<\/em> after this move. (Ne5<strong>+<\/strong>)<\/li>\r\n\t<li>A <strong>#<\/strong> behind the target square means the opponent is <em>checkmated<\/em>. (Qf6<strong>#<\/strong>)<\/li>\r\n\t<li><strong>O-O <\/strong>means the player castled <em>kingside<\/em>, <strong>O-O-O<\/strong> means castling <em>queenside<\/em>.<\/li>\r\n<\/ul>\r\n\r\n<p>That&rsquo;s it!<\/p>\r\n\r\n<p>Some extra notes: in game analysis, people often use an<strong> !<\/strong> (e.g. Qf6<strong>!<\/strong>) to emphasize a move, meaning it was very important to the game, and a <strong>?<\/strong> if they seriously question a player&rsquo;s move\/decision. The combination of the two (<strong>!?<\/strong>) expresses that the person that analysed the game thought that move was absolutely bonkers.<\/p>\r\n","slur":"chess-game-notation","cat":"Miscellaneous","subcat":"Chess","video":"","diff":"2","quiz":""},
{"id":"128","title":"Guide to English Grammar","post":"<p>English is <em>the<\/em> language of the world. At the time of writing, English has 1500 million speakers worldwide, and it's growing rapidly as the first language of the world wide web. Learning the basics of the English language therefore enables you to communicate with nearly everyone all over the globe, whether you are writing a blog, giving presentations, or just want to explore other cultures. On top of that, learning a new language enhances your cognitive abilities.<\/p> \r\n\r\n<p>This tutorial, however, is in English (as you might have noticed), which means you should already have at least some experience with <em>reading<\/em> English. Because of that, this guide is mainly focused on the grammar rules and principles, and gives few examples or exercises. It&rsquo;s certainly complete, but it doesn&rsquo;t even come close to an actual (college\/high school) <em>course<\/em> or <em>textbook<\/em>. You should see this as something you read one time to iron out your grammar mistakes and learn the rules and their exceptions &ndash; and then use it as a reference when you&rsquo;re in doubt using English for something.<\/p>\r\n\r\n<p>Anything concerning <em>punctuation<\/em> or <em>quotes\/dialogue<\/em> doesn&rsquo;t belong here (in my opinion), and is discussed in the <strong><em>writing with style<\/em><\/strong> tutorial. I recommend you read that after you&rsquo;ve explored this course &ndash; this course teaches you the fundamentals of the language, while the other one improves your writing with added elegance and fluency.<\/p>\r\n\r\n<p>Last but not least: the English language has become famous for its (relatively) easy grammar, but expansive vocabulary. There are often lots of ways to say a certain thing, lots of synonyms for one concept, but only a few grammar rules (sometimes only a single rule) you need to know for every verb tense. That&rsquo;s why I think it is really important to study the grammar and remember it well, because it isn&rsquo;t much, but still gives you a complete understanding of the language. Vocabulary comes from a lot of reading, listening and writing.<\/p>\r\n\r\n<p>With that out of the way: have fun with this course, and I hope you will find it useful!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Sentence Structure<\/li>\r\n\t<li>Nouns<\/li>\r\n\t<li>Pronouns<\/li>\r\n\t<li>Prepositions &amp; Conjunctions<\/li>\r\n\t<li>Verbs I<\/li>\r\n\t<li>Verbs II<\/li>\r\n\t<li>Verbs III<\/li>\r\n\t<li>Verbs IV<\/li>\r\n\t<li>Adjectives<\/li>\r\n\t<li>Adverbs<\/li>\r\n\t<li>Determiners<\/li>\r\n\t<li>Cheat Sheet<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"guide-english-grammar","cat":"Writing","subcat":"English","video":"","diff":"1","quiz":""},
{"id":"129","title":"[English] Sentence Structure","post":"<p>A sentence is a meaningful set of words. A sentence is the smallest standalone piece of text that conveys meaning. To structure these words in such a way that anybody can understand exactly what they are trying to say, is called using <em>grammar<\/em>. Grammar takes to what group a word belongs (nouns, pronouns, adjectives, etcetera) and uses that to determine where and how it should be written. The first step to crafting beautiful sentences is knowing the structure every single one of them uses, and how simple or &lsquo;obvious&rsquo; it may seem, I want to use some of your time to discuss it a little here.<\/p> \r\n\r\n<h2>Subject and Verb<\/h2>\r\n\r\n<p>These are the life of every line. The subject is what or who is doing something, and verb describes what action that person or thing is performing. In order for a sentence to work, it needs to contain at least some action. Something happening, some progress, some new event.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man eats<\/em><\/p>\r\n\r\n<p><strong>The man<\/strong> is the subject, the one doing something. What he does is <strong>eat<\/strong>ing, the verb. If you create a sentence and can&rsquo;t find the subject and\/or verb, something went wrong.<\/p>\r\n\r\n<p>Usually, the subject comes before the verb. They even appear together at the start of the sentence most of the times, but certainly not always.<\/p>\r\n\r\n<h2>Direct and Indirect Object<\/h2>\r\n\r\n<p>If you want to expand your sentence with more details, meaning or an extra twist, (in)direct objects are the first things you will want to add.<\/p>\r\n\r\n<p><strong>Direct Object<\/strong>: the person or thing receiving the action, the subject&rsquo;s &lsquo;victim&rsquo;.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man eats <strong>the apple<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The girl is watching <strong>a movie<\/strong><\/em><\/p>\r\n\r\n<p><strong>Indirect Object:<\/strong> the person or thing participating in the action. The verb is not directly targeting it, but they tell for or to whom the direct object is meant. It describes the <em>secondary goal<\/em> of an action.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man gives the apple to <strong>the boy<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man gave <strong>his daughter<\/strong> a book <\/em>(can be rewritten to <em>the man gave a book to his daughter<\/em>)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Let <strong>him<\/strong> have it<\/em><\/p>\r\n\r\n<h2>Relative and Subordinate Clauses<\/h2>\r\n\r\n<p>For even more complex or detailed sentences, you can add relative or subordinate clauses.<\/p>\r\n\r\n<p><strong>Relative Clauses: <\/strong>say something about the subject, providing details or specifics.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man, <strong>who visited me when I was sick<\/strong>, wears a hat <\/em>&nbsp;<\/p>\r\n\r\n<p><strong>Subordinate Clauses:<\/strong> a small sub sentence &ndash; a sentence within a sentence. The subordinate clause adds a second action to the sentence, with its own subject and verb.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man eats the apple, <strong>while the girls eat chips.<\/strong><\/em><\/p>\r\n\r\n<h2>Details and Modifiers<\/h2>\r\n\r\n<p>Of course there will be moments where you need to include more details to make a sentence clear. There are a few ways to achieve this:<\/p>\r\n\r\n<ul>\r\n\t<li>Specifying nouns =&gt; <em>The<strong> white<\/strong> cat is eating the <strong>red<\/strong> apple.<\/em><\/li>\r\n\t<li>Modifying verbs =&gt; <em>The woman stared <strong>intensely<\/strong><\/em>. <em>The boy jumped <strong>wildly<\/strong><\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Notice that by modifying verbs you basically answer the question <em>how?<\/em> - How did the subject perform the action? Intensely, wildly, gently, etcetera.<\/p>\r\n\r\n<p>The other questions you could answer are the <strong>5 W&rsquo;s <\/strong>and <strong>H<\/strong>: <em>Who? What? When? Where? Why?<\/em> <em>How? <\/em>For answering these you can use multiple techniques and constructions, which will all be discussed throughout the course.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Peter hit frank<\/em> =&gt; When did Peter hit Frank? =&gt; <strong><em>Yesterday,<\/em><\/strong><em> Peter hit Frank<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The cat jumped <\/em>=&gt; Where did the cat jump to? (What did the cat jump on?) =&gt; <em>The cat jumped <strong>on the box<\/strong><\/em><\/p>\r\n\r\n<h2>Conclusion<\/h2>\r\n\r\n<p>This course will start with explaining everything about nouns and verbs. This enables you to create all basic sentences, and creates a good base for you to build upon. Then all the ways to add details and modifiers are discussed.<\/p>\r\n","slur":"english-sentence-structure","cat":"Writing","subcat":"English","video":"","diff":"1","quiz":""},
{"id":"130","title":"[English] Nouns","post":"<p>Nouns, together with verbs, are the basic building blocks of every language. In some languages, nouns take on different shapes and suffixes depending on their role or position within the sentence &ndash; but, luckily, not in English. Nouns stay almost exactly the same all the time, and there are only a few basic (and a few specific) rules I need to discuss here.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Nouns<\/em><\/strong><em> give names to people, animals, places or things<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples: <\/em><\/strong><em>man, girl, apple, England, rabbit, house, March<\/em><\/p>\r\n\r\n<h2>Gender<\/h2>\r\n\r\n<p>In general, nouns don&rsquo;t have a gender. A <em>dog<\/em> doesn&rsquo;t have a specified gender, nor does a <em>house<\/em> or <em>chair<\/em>. Therefore, you usually don&rsquo;t have to worry about changing a noun based on gender. If you want to specify gender (for clarity), you can put <em>male<\/em> or <em>female<\/em> in front (<em>a male friend, a female student<\/em>).<\/p>\r\n\r\n<p>There are some cases though, with people and animals, where you <em>must<\/em> use different words for different genders. A gender-neutral word &ndash; only to be used if the gender really doesn&rsquo;t matter or is unknown &ndash; is also sometimes available. Some of the more common ones are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Masculine<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Feminine<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Neutral<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Man<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Woman<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Person<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Father<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Mother<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Parent<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Waiter<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Waitress<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Server<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Husband<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Wife<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Spouse<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Boy<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Girl<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Child<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>When referring to an essentially gender-neutral noun used earlier in your story, it is always allowed to use <strong>it<\/strong> or <strong>they<\/strong>. But, if you want to express familiarity with the subject, you can actively assign a gender to the noun.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>This is my boat. I love <strong>it<\/strong> very much.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>This is my boat. I love <strong>her<\/strong> very much.<\/em><\/p>\r\n\r\n<h2>Singular<\/h2>\r\n\r\n<p>If you refer to one specific noun, you use <strong>the<\/strong> in front of it.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The man, the girl<\/em><\/p>\r\n\r\n<p>If you refer to something or someone in a general way, you use <strong>a<\/strong>. If the noun starts with a <em>vowel sound<\/em> (phonetically, it starts with a vowel, excluding y), you use <strong>an<\/strong> to prevent creating a sentence that&rsquo;s impossible to pronounce.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>A man, an apple, a university, an honour<\/em><\/p>\r\n\r\n<h2>Plural<\/h2>\r\n\r\n<p>When you refer to a multiple of the noun, you omit any article and put the noun in <em>plural form<\/em>:<\/p>\r\n\r\n<ul>\r\n\t<li>Plurals are formed by adding an <strong>&ndash;s<\/strong> at the end: <em>house<strong>s<\/strong>, cat<strong>s<\/strong>, boy<strong>s<\/strong><\/em>.<\/li>\r\n\t<li>A singular noun ending in <strong>s, z, x, ch, sh<\/strong> needs the suffix <strong>&ndash;es<\/strong>: <em>wish<strong>es<\/strong>, fox<strong>es<\/strong>, bus<strong>es<\/strong><\/em>.<\/li>\r\n\t<li>If it ends in <strong>&ndash;y<\/strong>, the<em> y<\/em> is replaced with <strong>&ndash;ies<\/strong>: <em>baby -&gt; bab<strong>ies<\/strong>, city -&gt; cit<strong>ies<\/strong><\/em>.<\/li>\r\n<\/ul>\r\n\r\n<p>There&rsquo;s also a large list of irregular plurals in English, but the best way to remember these is reading a lot. Some important ones are included here:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Singular<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Plural<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Singular<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Plural<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Woman<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Women<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Man<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Men<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Child<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Children<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Tooth<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Teeth<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Foot<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Feet<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>People<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Fish<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Fish<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sheep<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sheep<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Wife<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Wives<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Mouse<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Mice<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>And lastly, a few nouns exist that are only used in plural form or acquire a different meaning when used as a singular noun. Examples are:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>His <strong>trousers<\/strong> are black<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The <strong>news<\/strong> is always at 8 o&rsquo;clock. <\/em><\/p>\r\n\r\n<h2>Countable &amp; Uncountable<\/h2>\r\n\r\n<p>A very important and useful way to divide nouns into two groups: countable and uncountable.<\/p>\r\n\r\n<p><strong>Countable<\/strong> nouns can be counted. They have a singular and plural form, and you can put a number in front of them.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Two dogs, five men, a child.<\/em><\/p>\r\n\r\n<p><strong>Uncountable<\/strong> nouns on the other hand have only one form &ndash; singular and plural at the same time. They are often abstract things or concepts. You can&rsquo;t put a number in front of them.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Money, tea, bread, knowledge, love<\/em><\/p>\r\n\r\n<p>Whether a noun is countable or not will be important especially later on when we look at adjectives and determiners.<\/p>\r\n\r\n<h2>Possessive<\/h2>\r\n\r\n<p>A noun can belong to someone or something. That&rsquo;s when you need to use the possessive form to show that relation. You can do that by putting <strong>&lsquo;s<\/strong> (apostrophe s) behind the noun and before the thing it owns.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>John<strong>&rsquo;s<\/strong> car, France<strong>&rsquo;s<\/strong> army, men<strong>&rsquo;s<\/strong> clothes, Mark<strong>&rsquo;s<\/strong> patience.<\/em><\/p>\r\n\r\n<p>If the noun ends in an <strong>&ndash;s<\/strong> or <strong>&ndash;x<\/strong>, you can show a possessive relationship by using an apostrophe only.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Jess<strong>&rsquo;<\/strong> smartphone, girls<strong>&rsquo;<\/strong> room.<\/em><\/p>\r\n\r\n<p>This is to prevent a lot of <em>sss<\/em> sounds after each other, but it is not required. Actually, the apostrophe can easily be missed on its own (by the reader), so it&rsquo;s recommended to not use this form.<\/p>\r\n\r\n<h2>Compound<\/h2>\r\n\r\n<p>English has a large vocabulary, but there are still cases where you need to combine two words to get the meaning you want. A lot of these <em>compound nouns<\/em> are very common and have found their way into the language as <em>the way<\/em> to say something, some of these are rarely seen or you can form yourself in case you need them.<\/p>\r\n\r\n<p>Two words can be connected to each other, unless a problem could occur &ndash; the word could be read I the wrong way or mispronounced. In those cases, a space is added in between. If the word then can still be understood the wrong way, a <em>hyphen <\/em>is put between the two separate words.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Police + man<\/em> = policeman<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Boy + friend <\/em>= boyfriend<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Water + tank <\/em>= water tank<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Washing + machine<\/em> = washing machine<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Train + spotting<\/em> = train-spotting<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Off + campus = <\/em>off-campus<\/p>\r\n\r\n<p>The rules however or not exact here, and you should consult a dictionary if you&rsquo;re not sure (or go with whatever sounds and looks best in your case).<\/p>\r\n\r\n<h2>Capitalization &amp; Nationalities<\/h2>\r\n\r\n<p>A noun is capitalized (starts with an uppercase letter) if it is<\/p>\r\n\r\n<ul>\r\n\t<li>The first word of the sentence<\/li>\r\n\t<li>The first personal pronoun; I\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong><em>I<\/em><\/strong><em> went to school today.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>A month, day, season or holiday\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>The first day of <strong>M<\/strong>arch is a <strong>M<\/strong>onday.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>A name or title. This includes names of streets, buildings, oceans, cities, regions, etcetera.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>In <strong>C<\/strong>alifornia. The people of <strong>L<\/strong>ondon. The water in the <strong>A<\/strong>tlantic. The <strong>H<\/strong>imalayas.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>A language, nationality or adjective relating to nationality.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>He lives in <strong>C<\/strong>hina. The <strong>F<\/strong>rench food was tasty. He speaks <strong>E<\/strong>nglish. They are <strong>J<\/strong>apanese. <strong>S<\/strong>paniards are handsome.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>The names for countries, their language, and their corresponding adjective can differ a lot and are very irregular. You can say: <em>in England live Englishmen, they speak English and drink English tea<\/em>. But for another country this would become: <em>in Spain live Spaniards, they speak Spanish and drink Spanish wine. <\/em>Or: <em>in Holland live Dutchmen, they speak Dutch and make Netherlandish art<\/em>.<\/p>\r\n","slur":"english-nouns","cat":"Writing","subcat":"English","video":"","diff":"1","quiz":""},
{"id":"131","title":"[English] Pronouns","post":"<p>Pronouns are actually more of a small subset of the large group of nouns, but because of their importance, and large amount of words you need to remember correctly, they deserve their own chapter. The type of pronoun you have to use depends on the noun it replaces (or &lsquo;refers to&rsquo;), and the function that noun has within the sentence. They can therefore not always be used &ndash; but, if there&rsquo;s a possibility to use them instead of longer or more complicated nouns, that opportunity should always be seized.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Pronouns<\/em><\/strong><em> replace nouns. They are shorter words, referring back to a noun used earlier in the sentence or paragraph. They avoid repetition and make sentences shorter and clearer. <\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples: <\/em><\/strong><em>Paul saw <strong>something<\/strong> in the dark, it was <strong>his<\/strong> shadow.<\/em><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subject<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Object<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Reflexive or intensive<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Possessive<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Possessive Adjective<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Singular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1<sup>st<\/sup> person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>me<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>myself<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>my<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>mine<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>2<sup>nd<\/sup> person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>yourself<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>yours<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>your<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>3<sup>rd<\/sup> person male<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>he<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>him<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>himself<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>his<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>his<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>3<sup>rd<\/sup> person female<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>she<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>her<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>herself<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hers<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>her<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>3<sup>rd<\/sup> person neutral<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>it<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>it<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>itself<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>its<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Plural<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1<sup>st<\/sup> person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>we<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>us<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>ourselves<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>ours<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>our<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>2<sup>nd<\/sup> person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>yourselves<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>yours<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>your<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>3<sup>rd<\/sup> person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>they<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>them<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>themselves<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>theirs<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>their<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Subject Pronouns<\/h2>\r\n\r\n<p>You use this pronoun if it is the subject of the sentence:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>You<\/em><\/strong><em> eat an apple. <strong>I<\/strong> like that.<\/em><\/p>\r\n\r\n<h2>Object Pronouns<\/h2>\r\n\r\n<p>You use this form if it is the (direct or indirect) object of the sentence:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He sent the letter to <strong>me<\/strong>. The man eats the apple for <strong>them<\/strong>.<\/em><\/p>\r\n\r\n<h2>Reflexive &amp; Intensive Pronouns<\/h2>\r\n\r\n<p>Reflexive and intensive pronouns are the same words, but fulfil different functions in a sentence.<\/p>\r\n\r\n<p><strong>Reflexive<\/strong> pronouns are used if the <em>object<\/em> is the same person or thing as the <em>subject<\/em>. You&rsquo;re reflecting on something you did to yourself.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She hit <strong>herself<\/strong> with a tennis racket. We blame <strong>ourselves<\/strong> for the failure.<\/em><\/p>\r\n\r\n<p><strong>Intensive<\/strong> pronouns are used if you want to <em>intensify<\/em> the subject of the sentence. They stress the importance of the subject, but can be removed or left out without changing the meaning of the sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I baked these cakes <strong>myself<\/strong>. They <strong>themselves<\/strong> told me what I did was fine.<\/em><\/p>\r\n\r\n<h2>Possessive Pronouns<\/h2>\r\n\r\n<p>These pronouns provide an alternative for showing a possessive relationship between two nouns. We&rsquo;ve already seen that you can use an &ndash;&lsquo;s (<em>Jack&rsquo;s house<\/em>). This pronoun can remove the need to mention Jack again if he is the one talking or he has been mentioned earlier.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Jack was a nice guy. This house was <strong>his<\/strong>.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>This candy is <strong>mine<\/strong>.<\/em><\/p>\r\n\r\n<h2>Possessive Adjectives<\/h2>\r\n\r\n<p>They are special: they don&rsquo;t really replace a noun like all pronouns do, but they are very closely related to them. They provide a third alternative for showing a possessive relation: this time, we are putting an adjective, referring to the owner, in front of the noun.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The dog broke <strong>its<\/strong> leg. They went to <strong>their<\/strong> school. I can&rsquo;t find <strong>my<\/strong> shoes.<\/em>&nbsp;<\/p>\r\n\r\n<h2>Indefinite pronouns<\/h2>\r\n\r\n<p>Indefinite pronouns replace a specific or countable noun for one that is vague, broad or uncountable. They can replace a <strong>person, thing<\/strong> or <strong>place<\/strong>. They can either refer to <em>all <\/em>of them, an undefined <em>part <\/em>of them, or <em>none <\/em>of them. Which one you should use depends on the type of sentence &ndash; affirmative or negative.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Person<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Thing<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Place<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>All<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>everyone<\/p>\r\n\r\n\t\t\t<p>everybody<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>everything<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>everywhere<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Part <\/em>(affirmative)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>someone<\/p>\r\n\r\n\t\t\t<p>somebody<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>something<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>somewhere<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Part<\/em> (negative)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>anyone<\/p>\r\n\r\n\t\t\t<p>anybody<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>anything<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>anywhere<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>None <\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>no one<\/p>\r\n\r\n\t\t\t<p>nobody<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>nothing<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>nowhere<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Affirmative<\/h2>\r\n\r\n<p>Affirmative sentences are when something is true (or at least expected to be true). When something is happening, someone is present, etcetera.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Everybody<\/em><\/strong><em> aced that test. <strong>Nobody <\/strong>is sleeping at the moment. I looked <strong>everywhere<\/strong> for that book. He thinks it must be <strong>somewhere<\/strong> around here.<\/em><\/p>\r\n\r\n<p>The indefinite pronouns belonging to negative sentences can only be used affirmatively, if they are close to <em>every<\/em> in their meaning. You should be able to replace &lsquo;any&rsquo; with &lsquo;every&rsquo; in those sentences without changing the meaning.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>You may invite <strong>anyone<\/strong>. She would give <strong>anything<\/strong> for that opportunity. <\/em><\/p>\r\n\r\n<h2>Negative<\/h2>\r\n\r\n<p>Negative sentences are when something is not true (or you don&rsquo;t expect it to be). It&rsquo;s not happening, not working, not available, not possible.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He doesn&rsquo;t have <strong>anything<\/strong> to eat. She hasn&rsquo;t gone <strong>anywhere<\/strong> the past few months. He couldn&rsquo;t find <strong>anybody<\/strong> to work with.<\/em><\/p>\r\n\r\n<h2>Questions<\/h2>\r\n\r\n<p>Usually when we ask a question, we are really not sure about the answer, and therefore use <em>any<\/em> (or <em>every<\/em>) in almost all questions. The only exceptions are when you already know or highly suspect the answer.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Did you eat <strong>anything<\/strong> yesterday? Did you see <strong>anyone<\/strong> when you were there?<\/em> (we are really curious)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Have you lost <strong>something<\/strong>? Are you looking for <strong>someone<\/strong>? <\/em>(we&rsquo;ve already seen that someone is searching for something or someone)<\/p>\r\n\r\n<p>We can also <em>negate<\/em> the sentence &ndash; adding or removing the word <em>not<\/em> in the sentence &ndash; if we expect a certain <em>yes<\/em> or <em>no<\/em> answer.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Did<strong>n&rsquo;t <\/strong>you eat anything yesterday? <\/em>(we expect a no)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Have<strong>n&rsquo;t<\/strong> you lost something?<\/em> (we expect a yes)<\/p>\r\n","slur":"english-pronouns","cat":"Writing","subcat":"English","video":"","diff":"2","quiz":""},
{"id":"132","title":"[English] Prepositions & Conjunctions","post":"<p>These two types of words are absolutely crucial to most sentences, but often go unnoticed. You should see this chapter more as a reference for later &ndash; don&rsquo;t bother trying to remember all of these if you haven&rsquo;t learnt the more important building blocks of grammar yet. If you find a word in this course you don&rsquo;t understand, you could come here and check it.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Prepositions<\/em><\/strong><em> are short words connecting verb and object.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Examples: <\/em><em>on, after, in, at, for, behind, past, to, through<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Conjunctions<\/em><\/strong><em> are short words connecting (parts of) sentences.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Examples: <\/em><em>and, but, however, nevertheless<\/em><\/p>\r\n\r\n<h2>Prepositions<\/h2>\r\n\r\n<p>A lot of verbs require a specific preposition, or change meaning based on different prepositions belonging to it. There&rsquo;s no rule for this: you learn this from reading proper English a lot. Even native speakers get this wrong sometimes or just don&rsquo;t know the correct form.<\/p>\r\n\r\n<p>A preposition is anything you can put before the noun <strong>the closet<\/strong> or <strong>the party<\/strong> in a sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>For example; to the party, after the party, at the party, about the party, etcetera<\/em><\/p>\r\n\r\n<p>Always check if you&rsquo;re using the correct preposition, or your sentence might be completely wrong or attain some other (awkward) meaning.<\/p>\r\n\r\n<h2>Conjunctions<\/h2>\r\n\r\n<p>There are 4 types of conjunctions, and I want to show all of them to you here. Not because you will use all of them all the time, but because you need to recognize them and using them will add structure and variation to all your stories.<\/p>\r\n\r\n<h5>Coordinating Conjunctions<\/h5>\r\n\r\n<p>Used to join individual words, phrases and <em>independent<\/em> clauses (a clause that could be a sentence on its own). Usually placed in the middle of a sentence, and with a comma before it. They are:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>And, but, or, nor, yet, so, for<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Should Me <strong>and<\/strong> Mike go fishing <strong>or<\/strong> go swimming? She was sad, <strong>for<\/strong> her cat just died.<\/em><\/p>\r\n\r\n<h5>Subordinating Conjunctions<\/h5>\r\n\r\n<p>Introduce <em>dependant<\/em> clauses. Usually placed at the front of the clause, and with a comma at the end of that clause. There&rsquo;s a lot of them:<\/p>\r\n\r\n<table class=\"styleLessTable\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Concession<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Time<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative Adjective<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>though<\/p>\r\n\r\n\t\t\t<p>although<\/p>\r\n\r\n\t\t\t<p>even though<\/p>\r\n\r\n\t\t\t<p>while<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td rowspan=\"4\">\r\n\t\t\t<p>after<\/p>\r\n\r\n\t\t\t<p>as long as<\/p>\r\n\r\n\t\t\t<p>as soon as<\/p>\r\n\r\n\t\t\t<p>before<\/p>\r\n\r\n\t\t\t<p>by the time<\/p>\r\n\r\n\t\t\t<p>now that<\/p>\r\n\r\n\t\t\t<p>once<\/p>\r\n\r\n\t\t\t<p>since<\/p>\r\n\r\n\t\t\t<p>till<\/p>\r\n\r\n\t\t\t<p>until<\/p>\r\n\r\n\t\t\t<p>when<\/p>\r\n\r\n\t\t\t<p>whenever<\/p>\r\n\r\n\t\t\t<p>while<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td rowspan=\"2\">\r\n\t\t\t<p>that<\/p>\r\n\r\n\t\t\t<p>what<\/p>\r\n\r\n\t\t\t<p>whatever<\/p>\r\n\r\n\t\t\t<p>which<\/p>\r\n\r\n\t\t\t<p>whichever<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:bold;\">Condition<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td rowspan=\"2\">\r\n\t\t\t<p>if<\/p>\r\n\r\n\t\t\t<p>only if<\/p>\r\n\r\n\t\t\t<p>unless<\/p>\r\n\r\n\t\t\t<p>until<\/p>\r\n\r\n\t\t\t<p>provided that<\/p>\r\n\r\n\t\t\t<p>assuming that<\/p>\r\n\r\n\t\t\t<p>even if<\/p>\r\n\r\n\t\t\t<p>in case (that)<\/p>\r\n\r\n\t\t\t<p>lest<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:bold;\">Relative Pronoun<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>who<\/p>\r\n\r\n\t\t\t<p>whoever<\/p>\r\n\r\n\t\t\t<p>whom<\/p>\r\n\r\n\t\t\t<p>whomever<\/p>\r\n\r\n\t\t\t<p>whose<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<table class=\"styleLessTable\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Comparison<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Reason<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Manner<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td rowspan=\"3\">\r\n\t\t\t<p>than<\/p>\r\n\r\n\t\t\t<p>rather than<\/p>\r\n\r\n\t\t\t<p>whether<\/p>\r\n\r\n\t\t\t<p>as much as<\/p>\r\n\r\n\t\t\t<p>whereas<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td rowspan=\"3\">\r\n\t\t\t<p>because<\/p>\r\n\r\n\t\t\t<p>since<\/p>\r\n\r\n\t\t\t<p>so that<\/p>\r\n\r\n\t\t\t<p>in order (that)<\/p>\r\n\r\n\t\t\t<p>why<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>how<\/p>\r\n\r\n\t\t\t<p>as though<\/p>\r\n\r\n\t\t\t<p>as if<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:bold;\">Place<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>where<\/p>\r\n\r\n\t\t\t<p>wherever<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Don&rsquo;t worry: the most important ones will be discussed and explained later in this course.<\/p>\r\n\r\n<h5>Correlative Conjunctions<\/h5>\r\n\r\n<p>Come in pairs, and denote equality; they show the relationship between ideas expressed in different parts of the sentence.<\/p>\r\n\r\n<table class=\"styleLessTable\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>as &hellip; as<\/p>\r\n\r\n\t\t\t<p>just as &hellip; so<\/p>\r\n\r\n\t\t\t<p>both &hellip; and<\/p>\r\n\r\n\t\t\t<p>hardly &hellip; when<\/p>\r\n\r\n\t\t\t<p>scarcely &hellip; when<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>either &hellip; or<\/p>\r\n\r\n\t\t\t<p>neither &hellip; or<\/p>\r\n\r\n\t\t\t<p>&nbsp;<\/p>\r\n\r\n\t\t\t<p>if &hellip; then<\/p>\r\n\r\n\t\t\t<p>not &hellip; but<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>what with &hellip; and<\/p>\r\n\r\n\t\t\t<p>whether &hellip; or<\/p>\r\n\r\n\t\t\t<p>not only &hellip; but also<\/p>\r\n\r\n\t\t\t<p>no sooner &hellip; than<\/p>\r\n\r\n\t\t\t<p>rather &hellip; than<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h5>Conjunctive Adverbs<\/h5>\r\n\r\n<p>Used to link two ideas, and are basically variations on <em>and, but <\/em>and <em>so<\/em>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Similar to <strong>And<\/strong><\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Similar to <strong>But<\/strong><\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Similar to <strong>So<\/strong><\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>also<\/p>\r\n\r\n\t\t\t<p>besides<\/p>\r\n\r\n\t\t\t<p>furthermore<\/p>\r\n\r\n\t\t\t<p>likewise<\/p>\r\n\r\n\t\t\t<p>moreover<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>however<\/p>\r\n\r\n\t\t\t<p>nevertheless<\/p>\r\n\r\n\t\t\t<p>nonetheless<\/p>\r\n\r\n\t\t\t<p>still<\/p>\r\n\r\n\t\t\t<p>conversely<\/p>\r\n\r\n\t\t\t<p>instead<\/p>\r\n\r\n\t\t\t<p>otherwise<\/p>\r\n\r\n\t\t\t<p>rather<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>accordingly<\/p>\r\n\r\n\t\t\t<p>consequently<\/p>\r\n\r\n\t\t\t<p>hence<\/p>\r\n\r\n\t\t\t<p>meanwhile<\/p>\r\n\r\n\t\t\t<p>then<\/p>\r\n\r\n\t\t\t<p>therefore<\/p>\r\n\r\n\t\t\t<p>thus<\/p>\r\n\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n","slur":"english-prepositions-conjunctions","cat":"Writing","subcat":"English","video":"","diff":"2","quiz":""},
{"id":"133","title":"[English] Verbs I","post":"<p>Now that you know everything about nouns, we can start introducing verbs and all their tenses and variations. There are quite a lot of them, but they mostly look alike. The issue therefore is more that you might mix them up and use the wrong tense, than that you could forget how they work or should be formed.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Verbs <\/em><\/strong><em>describe action<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples: <\/em><\/strong><em>to run, to walk, to swim, to eat<\/em><\/p>\r\n\r\n<h2>Conjugations<\/h2>\r\n\r\n<p>There are only a few conjugations for every verb.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Infinitive:<\/strong> the way you&rsquo;ll find words in the dictionary.&nbsp; The full, abstract version of the verb.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>To think, to see, to eat, to know, to hear<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Regular:<\/strong> this is the infinitive without &lsquo;to&rsquo;. Mostly used in the simple present and simple future tense.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I <strong>think<\/strong>, you <strong>see<\/strong>, we <strong>eat<\/strong>, you <strong>know<\/strong>, I <strong>hear<\/strong><\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Third-person singular regular:<\/strong> The third-person singular forms of the regular type, need something extra: an <strong>&ndash;s<\/strong> at the end. Verbs ending in an <strong>&ndash;y<\/strong> (without a vowel in front of the y) are formed by replacing it with <strong>&ndash;ies<\/strong>. Verbs ending in &ndash;<strong>ss, -x , -sh, -ch<\/strong> need an <strong>&ndash;es<\/strong> at the end.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He think<strong>s<\/strong>, she see<strong>s<\/strong>, it eat<strong>s<\/strong>.<\/em><\/li>\r\n\t\t<li><em>To fly =&gt; he fl<strong>ies<\/strong>. To cry =&gt; she cr<strong>ies<\/strong><\/em><\/li>\r\n\t\t<li><em>He catch<strong>es<\/strong>, she fix<strong>es<\/strong>, it scratch<strong>es<\/strong>.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Past (participle): <\/strong>if a verb is regular, the past is formed by adding <strong>&ndash;ed<\/strong> after the regular form. If the verb already ends in an <strong>-e<\/strong>, only a <strong>&ndash;d<\/strong> is added.&nbsp; If a verb is irregular, anything could happen really. Irregular verbs also sometimes have another different form for the past participle.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I laugh<strong>ed<\/strong>, they jump<strong>ed<\/strong>, we land<strong>ed<\/strong>, you hat<strong>ed<\/strong>.<\/em><\/li>\r\n\t\t<li><em>I think =&gt; I thought. You see =&gt; you saw. We eat =&gt; we ate.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Continuous:<\/strong> this form is used when we want to stress something is happening at the time the sentence is written in. For example, we can say that five hundred years ago a certain event was happen<strong>ing<\/strong>. Or that in two days something else will be happen<strong>ing<\/strong>. As you can see, they are simply formed by adding <strong>&ndash;ing<\/strong> at the end of a verb. They are nice, because they are very regular.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Think<strong>ing<\/strong>, see<strong>ing<\/strong>, eat<strong>ing<\/strong>, know<strong>ing<\/strong>, hear<strong>ing<\/strong>.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p><em>How can you form all those tenses with only this?<\/em> As you will see, auxiliary verbs are often added.<\/p>\r\n\r\n<h2>Auxiliary Verbs<\/h2>\r\n\r\n<p>These are <em>helping verbs<\/em>. They can stand on their own, but they are most commonly seen supporting other verbs to create certain tenses. They are quite irregular, but very important to learn:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to be<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to have<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>I<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>am<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>was<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>You<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>are<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>were<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>He\/she\/it<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>is<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>was<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>does<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>has<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>We<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>are<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>were<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>You<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>are<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>were<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>They<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>are<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>were<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Past participle<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>been<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>done<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Modal Verbs<\/h2>\r\n\r\n<p>Modal verbs are special types of auxiliary verbs. They show an obligation, possibility or necessity. These can&rsquo;t really stand on their own, and always support the actual main verb. They only have a single form that never changes. All modal verbs are:<\/p>\r\n\r\n<table class=\"styleLessTable\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>can<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:normal;\">you have the ability to do something<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>could<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:normal;\">you had the ability sometime in the past<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>may<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you are allowed to do something, or will maybe do it<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>might<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you are maybe allowed to something, or could perhaps do it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>must<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>you are obliged to do something, or it is highly likely it will happen<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>ought<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>executing the action is the right thing to do, or it is fairly likely\/expected to happen<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>should<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"margin-left:36.0pt\">you strongly advice or insist on doing something<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>would<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>if you had the possibility\/opportunity, you had done it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><strong><em>Examples: <\/em><\/strong><em>You <strong>should <\/strong>say yes. I know I <strong>would. <\/strong>You <strong>can<\/strong> always put it off a few weeks, but you <strong>ought <\/strong>to at least tell them you&rsquo;re in doubt. You <strong>may<\/strong> be able to say no, but it <strong>might<\/strong> turn out worse. You <strong>must<\/strong> make a decision now!<\/em><\/p>\r\n\r\n<h2>Contractions &amp; Negations<\/h2>\r\n\r\n<p>All auxiliary and some modal verbs are used very often, and therefore have a special contraction when they are combined with the word <em>not<\/em>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to be<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to do<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p>to have<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>I<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>aren&rsquo;t<\/p>\r\n\r\n\t\t\t<p>(ain&rsquo;t)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>wasn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>don&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>didn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>haven&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hadn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Regular<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>aren&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>weren&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>don&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>didn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>haven&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hadn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>He\/she\/it<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>isn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>wasn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>doesn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>didn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hasn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hadn&rsquo;t<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>The modal verbs <em>can, could, must, should <\/em>and <em>would<\/em> have their contraction formed by just adding the <strong>&ndash;n&rsquo;t <\/strong>at the end.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>You shouldn&rsquo;t do that. I wasn&rsquo;t ready for this. He just wouldn&rsquo;t tell what happened.<\/em><\/p>\r\n\r\n<p>As you can see, if you want to negate a sentence or statement you replace an auxiliary verb by its contraction. If no auxiliary verb is present, you add a contraction of the verb <em>to do<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I like to walk home =&gt; I <strong>don&rsquo;t<\/strong> like to walk home <\/em>(regular)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I walked home yesterday =&gt; I <strong>didn&rsquo;t<\/strong> walk home yesterday <\/em>(past)<\/p>\r\n\r\n<h2>The Modal Verb &lsquo;<em>will&rsquo;<\/em><\/h2>\r\n\r\n<p>This is a bit of a special one. The word <em>will<\/em> always indicates an action will take place in the future, and has a large number of meanings and functions (as you will see in the next chapter).<\/p>\r\n\r\n<p>For all people, the word is always written as <strong>will<\/strong>. I will, you will, they will, etcetera. The negation contraction is always <strong>won&rsquo;t<\/strong>. If the subject is <strong>I<\/strong> or <strong>we<\/strong> you can use <strong>shall<\/strong> and <strong>shan&rsquo;t<\/strong> instead, but those are not popular anymore in modern English.<\/p>\r\n\r\n<h2>Contractions for Brevity<\/h2>\r\n\r\n<p>Because of their numerous appearances in English, auxiliary verbs can also contract with the subject if the sentence is <em>affirmative<\/em> (not negative).<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>to be<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>to have<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>will<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>would<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>I<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I&rsquo;m<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I&rsquo;ve<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>You<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You&rsquo;re<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You&rsquo;ve<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>He<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>She<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>It<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>We<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>We&rsquo;re<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>We&rsquo;ve<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>We&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>We&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>We&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>They<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They&rsquo;re<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They&rsquo;ve<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>There<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>There&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>There&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>There&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>There&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>There&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>That<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>That&rsquo;s<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>That&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>That&rsquo;ll<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>That&rsquo;d<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Examples:<\/strong> <strong>I&rsquo;m<\/strong> Frank. <strong>I&rsquo;ve <\/strong>always been Frank. When I was young, <strong>I&rsquo;d<\/strong> always go fishing in France. <strong>We&rsquo;d <\/strong>never thought of moving there though.<\/em><\/p>\r\n\r\n<h2>Questions<\/h2>\r\n\r\n<p>Questions in English are formed by switching around the subject and auxiliary\/modal verb.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>You have seen the news =&gt; Have you seen the news?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He should have done that =&gt; Should he have done that?<\/em><\/p>\r\n\r\n<p>If no auxiliary\/modal verb exists, a form of <strong>to do<\/strong> is added to the sentence at the beginning.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I walk down the road =&gt; Do I walk down the road?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They see the chicken =&gt; Do they see the chicken?<\/em><\/p>\r\n\r\n<p>Answering a question can then be done by using the same auxiliary verb used within the question, using a contraction if the answer is negative.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Have you seen the news? Yes I have!<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Do you walk down the road? No, I don&rsquo;t.<\/em><\/p>\r\n\r\n<p>Using contractions\/negations to change question meaning or intention is already discussed in the <em>pronouns<\/em> chapter.<\/p>\r\n\r\n<p>Knowing all this, we can continue with the actual verb tenses. Do keep in mind that English has a lot of tenses that seem very similar to one in your own language, but are essentially different.<\/p>\r\n","slur":"english-verbs-part-one","cat":"Writing","subcat":"English","video":"","diff":"2","quiz":""},
{"id":"134","title":"[English] Verbs II","post":"<p>Instead of grouping verbs by past, present and future, I like to use a different approach here. In English, other types of tenses like the <em>perfect tense<\/em> or <em>conditional tenses<\/em> are used much more often, and are perhaps an even more essential part of the language than some of the past\/present\/future tenses. There&rsquo;s also a significant distinction to be made between tenses that look exactly the same, and that&rsquo;s why I will try to work a little differently by grouping the <em>types of tenses<\/em> instead of their <em>timing<\/em>.<\/p> \r\n\r\n<h2>Simple Tenses<\/h2>\r\n\r\n<p>The simple tense is called that way because it is the simplest of them all when it comes to grammar. When it comes to meaning though, every time has some specific and significant differences that you should know and understand. The simple tense doesn&rsquo;t describe actions as they are happening, but rather general truths, appointments, repeated actions\/habits, instructions, etcetera. For example, this tutorial is almost entirely written in the present simple, because they are all general truths and instructions on how to use English.<\/p>\r\n\r\n<h5>Simple Present<\/h5>\r\n\r\n<p>The simple present is constructed by using the <strong>regular<\/strong> form, and the third-person singular form if the subject is a he\/she\/it.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I <strong>work<\/strong> in Manchester. The exam <strong>starts<\/strong> at 10 AM. I&rsquo;ll address this issue after I <strong>come<\/strong> home.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used for:<\/p>\r\n\r\n<ul>\r\n\t<li>Habits, general truths, repeated actions and unchanging situations, emotions, or wishes.<\/li>\r\n\t<li>Giving instructions or directions<\/li>\r\n\t<li>Expressing fixed arrangements\/appointments in the present or future.<\/li>\r\n\t<li>Expressing a future time, only after the conjunctions <em>after, before, as soon as, until, when<\/em>.<\/li>\r\n<\/ul>\r\n\r\n<h5>Simple Past<\/h5>\r\n\r\n<p>The simple past is constructed by using the <strong>past<\/strong> form only.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Her mother <strong>died<\/strong> last year. We <strong>lived<\/strong> in Canada in 1985. They <strong>talked<\/strong> about it yesterday.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used for:<\/p>\r\n\r\n<ul>\r\n\t<li>Something that happened frequently in the past (<em>she often walked home alone<\/em>)<\/li>\r\n\t<li>A definite point in time (<em>They made the arrangements last week<\/em>)<\/li>\r\n\t<li>An indefinite point in time (We decided against it <em>long ago<\/em>)<\/li>\r\n<\/ul>\r\n\r\n<p>NOTE: If you have a negative sentence, which means adding <strong>didn&rsquo;t<\/strong> to the sentence, the verb must be in regular form. The auxiliary verb didn&rsquo;t is already in past form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Her father <strong>didn&rsquo;t<\/strong> <strong>die<\/strong> last year. We <strong>didn&rsquo;t live<\/strong> in Canada in 1985.<\/em><\/p>\r\n\r\n<h5>Simple Future<\/h5>\r\n\r\n<p>The simple future is constructed by using the auxiliary verb <strong>will<\/strong> + <strong>regular <\/strong>form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He&rsquo;ll never agree. Will you marry me? It will rain tomorrow.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used to:<\/p>\r\n\r\n<ul>\r\n\t<li>Predict a future event.<\/li>\r\n\t<li>Express a spontaneous decision (with <strong>I<\/strong> or <strong>we<\/strong>).<\/li>\r\n\t<li>Express willingness. Express unwillingness when negated.<\/li>\r\n\t<li>Make an offer, suggest something or ask for advice\/instructions (you must use <strong>shall<\/strong> then).<\/li>\r\n\t<li>Give orders, when addressing someone or a group directly (with <strong>you<\/strong>).<\/li>\r\n\t<li>Give an invitation, with <strong>you<\/strong> in interrogative form (a question).<\/li>\r\n<\/ul>\r\n\r\n<h2>Continuous Tenses<\/h2>\r\n\r\n<p>The continuous tense describes an action that is happening at the moment of speaking\/writing. It describes something that started earlier and is still continuing. In contrast to the simple tense, this is a snapshot of an action happening somewhere in time.<\/p>\r\n\r\n<h5>Continuous Present<\/h5>\r\n\r\n<p>The continuous present is constructed by using a regular form of <strong>to be + continuous<\/strong> form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We are walking. They are talking. I am waiting. You are learning.<\/em><\/p>\r\n\r\n<p>Again, to negate the sentence you use a contraction of the <em>to be <\/em>verb (aren&rsquo;t\/isn&rsquo;t).<\/p>\r\n\r\n<p>It&rsquo;s used to:<\/p>\r\n\r\n<ul>\r\n\t<li>Describe an action that is going on at this moment.<\/li>\r\n\t<li>Describe an action that is going on during a (current) period of time, like a trend or ongoing project (<strong><em>I&rsquo;m<\/em><\/strong><em> still <strong>working<\/strong> on this website of mine<\/em>)<\/li>\r\n\t<li>Describe an action or event in the future which is already planned and prepared (<strong><em>I&rsquo;m meeting<\/em><\/strong><em> with my girlfriend tomorrow<\/em>)<\/li>\r\n\t<li>Describe a temporary event or situation &ndash; something special that is currently going on (<em>It&rsquo;s raining now, but the sun should reveal herself any time<\/em>)<\/li>\r\n\t<li>Describe an ongoing series of repeating actions &ndash; with <em>always, forever <\/em>or<em> constantly<\/em> in front (<em>You two are always arguing!<\/em>)<\/li>\r\n<\/ul>\r\n\r\n<h5>Continuous Past<\/h5>\r\n\r\n<p>The continuous past is constructed by using a <strong>past<\/strong> form of <strong>to be + continuous <\/strong>form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We were walking. They were talking. I was waiting. You were learning.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used to describe actions before now, which began in the past and are still going on or interrupted\/unfinished. Usually this is used to describe what was happening while some main event occurred:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The birds <strong>were singing<\/strong> and the trees <strong>were swinging<\/strong> as the lion woke up.<\/em><\/p>\r\n\r\n<p>It&rsquo;s also used, in combination with <em>to wonder<\/em>, to make a very polite request:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I <strong>was wondering<\/strong> if you would like to go to the ball with me.<\/em><\/p>\r\n\r\n<h5>Continuous Future<\/h5>\r\n\r\n<p>The continuous future is constructed by using &lsquo;<strong>will be&rsquo; + continuous <\/strong>form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She will be sleeping over next Monday. They will be dancing at the party next week.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used to describe actions that will be in progress at some time in the future. This can be a completely new action (<em>I will be learning English tomorrow<\/em>) or one that has already been started but isn&rsquo;t finished yet (<em>I will still be learning English tomorrow<\/em>). The latter must always be combined with still.<\/p>\r\n\r\n<p>Other uses are:<\/p>\r\n\r\n<ul>\r\n\t<li>Predicting or guessing future events (<em>I think we will be having a hard time tomorrow<\/em>)<\/li>\r\n\t<li>Asking politely for information about the future (<em>Will you be working on the assignment tomorrow?<\/em>)<\/li>\r\n\t<li>Referring to events we expect to happen ( = be ongoing) in the future. (<em>Tomorrow it will be raining cats and dogs<\/em>)<\/li>\r\n<\/ul>\r\n\r\n<p>For negative sentences, you can use <strong>won&rsquo;t be + continuous<\/strong> form.<\/p>\r\n","slur":"english-verbs-part-two","cat":"Writing","subcat":"English","video":"","diff":"2","quiz":""},
{"id":"135","title":"[English] Verbs III","post":"<p>This is where the real fun begins. Up until now we&rsquo;ve only seen the basic building blocks of English (well, of any language really). You could write articles and novels with only those tenses, but that would quickly become a very monotone story. That&rsquo;s where the perfect tense and some more fancy stuff kicks in.<\/p> \r\n\r\n<h2>Perfect Tenses<\/h2>\r\n\r\n<p>Perfect tenses is where the different time spans and simple\/continuous begin to overlap and mix. There are therefore <strong><em>6<\/em><\/strong> variations on it, all equally important. So let&rsquo;s start.<\/p>\r\n\r\n<h5>Simple Present Perfect<\/h5>\r\n\r\n<p>The simple present perfect is constructed by using a regular form of <strong>to have + past<\/strong> <strong>participle<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I have lived here all my life. They have been to the zoo twice this week. We have been to the zoo several times. She has just finished reading the book. He has read the Hobbit thrice. <\/em><\/p>\r\n\r\n<p>It&rsquo;s used for:<\/p>\r\n\r\n<ul>\r\n\t<li>An action\/situation that started in the past and still continues in the present.<\/li>\r\n\t<li>An action performed during a period that has not yet finished.<\/li>\r\n\t<li>A repeated action in an unspecified period between the past and the present.<\/li>\r\n\t<li>An action that was completed in very recent past, expressed with <strong>just<\/strong>.<\/li>\r\n\t<li>An action when the time is not important, but the result.<\/li>\r\n<\/ul>\r\n\r\n<h5>Continuous Present Perfect<\/h5>\r\n\r\n<p>The continuous present perfect is constructed by using a <em>regular form<\/em> of <strong>to have + &lsquo;been&rsquo; + continuous<\/strong> form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I have been cycling to school every day for years. They have been kissing for an hour now.<\/em><\/p>\r\n\r\n<p>It&rsquo;s used for actions that started an unspecified time <em>before now<\/em> and are still going on in the present.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She has been waiting for him all day <\/em>(&hellip;when exactly did she start waiting? We don&rsquo;t know)<\/p>\r\n\r\n<p>It can also be used for actions that have just finished, and we are interested in the results.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>It&rsquo;s been raining since last night <\/em>(...which means the streets are still wet)<\/p>\r\n\r\n<h5>Simple Past Perfect<\/h5>\r\n\r\n<p>The simple past perfect is constructed by using a <em>past form<\/em> of <strong>to have + past participle.<\/strong><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Mark <strong>had<\/strong> already <strong>left<\/strong> when I arrived. She <strong>had just saved<\/strong> the document when the computer crashed.<\/em><\/p>\r\n\r\n<p>If the present perfect is about actions starting before now and going on until the present, the past goes back even further &ndash; it&rsquo;s about actions starting <em>earlier than before now<\/em>. Because the whole sentence is in the past, the simple past perfect is mostly about making clear that one event happened before another (in the past).<\/p>\r\n\r\n<h5>Continuous Past Perfect<\/h5>\r\n\r\n<p>The continuous past perfect is constructed by using a past form of <strong>to have + &lsquo;been&rsquo; + continuous <\/strong>form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We <strong>had been trying<\/strong> to contact him, but we were unable to reach him.<\/em><\/p>\r\n\r\n<p>Again, it describes a process that was happening in a time <em>earlier than before now<\/em>. The example sentence could be rewritten to:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We were unable to reach him <\/em>(they concluded they failed to reach him in a time before now)<em>, after we <strong>had been trying <\/strong>to contact him <\/em>(and even earlier, they already tried contacting him)<\/p>\r\n\r\n<p>This tense can also be used in <em>reported speech<\/em>. Basically, if someone says something about the past, and you want to say something about that quote, you use it.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>&ldquo;I have been working in my office all day,&rdquo; Mark told the police<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Mark told the police that he <strong>had been working<\/strong> in his office all day<\/em>.<\/p>\r\n\r\n<h5>Simple Future Perfect<\/h5>\r\n\r\n<p>The simple future perfect is constructed by using <strong>&lsquo;will have&rsquo; + past participle<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Soon, they will have arrived at the building. By the time you read this, I will have left this world.<\/em><\/p>\r\n\r\n<p>They refer to a point in the future where an action is completed. We are basically placing ourselves in the future, and we see that a certain action will then be done or finished.<\/p>\r\n\r\n<h5>Continuous Future Perfect<\/h5>\r\n\r\n<p>The continuous future perfect is constructed by using <strong>&lsquo;will have been&rsquo; + continuous <\/strong>form.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>By 2016, I <strong>will have been living<\/strong> in Manchester for five years. <\/em><\/p>\r\n\r\n<p>Because this is the continuous tense, we are again referring to an action to is still going on at a certain point in future time.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Next week <\/em>(some point in the future)<em>, I will have been living with Sarah for two years <\/em>(you&rsquo;ve completed two years of living with Sarah, but you haven&rsquo;t stopped living with her).<\/p>\r\n\r\n<h2>Passive Voice<\/h2>\r\n\r\n<p>The passive voice is used when we want to place emphasis on the object, the &lsquo;victim&rsquo; of the action, or we&rsquo;re just not interested in the subject. Usually though, using <em>active<\/em> language (which is everything we&rsquo;ve discussed until now) is better, shorter and clearer &ndash; so try to use that whenever you can. Nevertheless, it&rsquo;s still important to know the passive voice, especially because it looks like a simple or continuous present tense, but means something entirely different.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">(<em>active<\/em>) Alan Parsons wrote &ldquo;Old &amp; Wise&rdquo; =&gt; &ldquo;Old &amp; Wise&rdquo; was written by Alan Parsons (<em>passive<\/em>)<\/p>\r\n\r\n<p>The passive voice is constructed by a conjugated form of <strong>to be<\/strong> + <strong>past participle<\/strong>. It&rsquo;s a combination between the simple and continuous tenses, and the past participle from the perfect tense.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>to be (conjugated)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>past participle<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Simple present<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The car&hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>is<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Present continuous<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>is being<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Simple Past<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>was<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Past Continuous<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>was being<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Simple future<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>will be<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Future continuous<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>will be being<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Present perfect<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>has been<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Past perfect<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>had been<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cleaned<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Notice that in all sentences we don&rsquo;t know who is, was or will be cleaning the car, we only know that the car is being cleaned.<\/p>\r\n\r\n<p>The most prominent use of passive voice is with the fact that <em>being born<\/em> is something passive.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I was born in 1997. Where were you born?<\/em><\/p>\r\n\r\n<p>The so-called <em>infinitive passive voice<\/em> is used after modal verbs or other verbs requiring an <em>infinitive<\/em>, and is constructed by using <strong>&lsquo;(to) be&rsquo;<\/strong> <strong>+ past participle<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>You <strong>have to be tested<\/strong> on your writing skills. He <strong>wants to be invited<\/strong> to the party. She may <strong>be disappointed <\/strong>in you.<\/em><\/p>\r\n\r\n<p>The <em>gerund passive voice<\/em> is used after verbs that require <em>gerunds<\/em> behind it on all other occasions, and is constructed by using <strong>&lsquo;being&rsquo; + past participle.<\/strong><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I hate interviewing =&gt; I hate <strong>being interviewed<\/strong><\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>My dogs like cuddling =&gt; My dogs like <strong>being cuddled<\/strong><\/em><\/p>\r\n\r\n<p>Those <strong>infinitives<\/strong> and <strong>gerunds <\/strong>(and conditionals) are all discussed thoroughly in the next chapter!<\/p>\r\n","slur":"english-verbs-part-three","cat":"Writing","subcat":"English","video":"","diff":"3","quiz":""},
{"id":"136","title":"[English] Verbs IV","post":"<p>This last chapter on verbs will discuss the more fancy, complex or detailed types of sentences you&rsquo;ll run into. Some of them occur sparingly or almost solely in written English, but it&rsquo;s still important to see all that is possible.<\/p> \r\n\r\n<h2>Conditional tenses<\/h2>\r\n\r\n<p>Until now we&rsquo;ve only seen sentences that describe something that did or did not happen. Conditional tenses are used when there&rsquo;s a possibility of some event happening in the past, present or future, but only under a certain condition. Every one of these conditionals can be put in a different order without changing meaning, although that may require adding some extra determiners.<\/p>\r\n\r\n<h5>Future Conditional<\/h5>\r\n\r\n<p>The future conditional uses the construction:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>If<\/em><\/strong><em> X happens, Y <strong>will <\/strong>happen.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>If he is late again, I will be very angry.<\/em><\/p>\r\n\r\n<p>The first part uses the simple present, while the second part uses the simple future.<\/p>\r\n\r\n<h5>Present (Zero) Conditional<\/h5>\r\n\r\n<p>The present conditional uses the construction:<\/p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><em>If<\/em><\/strong><em> X happens, Y happens.<\/em><\/p>\r\n\r\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If water <strong>cools down<\/strong>, it <strong>freezes<\/strong>.<\/em><\/p>\r\n\r\n<p>Both parts use the simple present. It&rsquo;s often called a zero conditional, because it doesn&rsquo;t really involve a condition: Y is the natural consequence of X and will always follow immediately.<\/p>\r\n\r\n<h5>Past Conditional<\/h5>\r\n\r\n<p>The past conditional uses the construction:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>If<\/em><\/strong><em> X happened, Y would be happening.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>If he was a better soccer player, he would be scoring goals now.<\/em><\/p>\r\n\r\n<p>Both parts of the conditional are false: he isn&rsquo;t scoring goals now, which means he&rsquo;s not as good of a soccer player. But on the condition that he was a better player, he would be scoring now.<\/p>\r\n\r\n<h5>Past Perfect Conditional<\/h5>\r\n\r\n<p>The past perfect conditional uses the construction:<\/p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><em>If<\/em><\/strong><em> X had happened, Y would have happened<\/em><\/p>\r\n\r\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Mark had had more time, he would have visited his grandparents.<\/em><\/p>\r\n\r\n<p>Again, both parts are false and the chance to change it lies in the past, but this time we&rsquo;re in that <em>earlier than before now<\/em> state. If Mark had had more time in the past, he would by now already have completed his quest of visiting his grandparents.<\/p>\r\n\r\n<h5>Mixed Conditional<\/h5>\r\n\r\n<p>Mixed conditionals mix several of the previously discussed types. There&rsquo;s basically two types:<\/p>\r\n\r\n<p><strong>Present result of past condition:<\/strong> If X had happened (in the past), Y would happen (now).<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>If I had studied, I would have my high school diploma.<\/em><\/p>\r\n\r\n<p><strong>Past result of present (or continuing) condition:<\/strong> If X happened (just now), Y would have happened (in the past).<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>If I wasn&rsquo;t afraid of failure, I would have sang the song in front of a large crowd.<\/em><\/p>\r\n\r\n<h2>Gerund &amp; Present Participle<\/h2>\r\n\r\n<p>The Gerund and Present Participle in theory mean nothing else than the <em>continuous form<\/em> of a verb we&rsquo;ve been using all along. But, they portray two different functions.<\/p>\r\n\r\n<h5>Gerund<\/h5>\r\n\r\n<p>It always has the <em>function<\/em> of a noun, even though it looks like a verb.<\/p>\r\n\r\n<p>It can stand on its own as the subject of a sentence: <strong><em>Hunting<\/em><\/strong><em> is bad for the environment<\/em>. In all other cases, it functions as part of a noun and needs other words around it.<\/p>\r\n\r\n<p>It <strong>must<\/strong> be used after:<\/p>\r\n\r\n<ul>\r\n\t<li>A preposition: <em>We arrived <strong>after<\/strong> <strong>driving<\/strong> for two hours<\/em><\/li>\r\n\t<li>A phrasal verb (verb made from more than one word): <em>He has been trying to <strong>give up smoking<\/strong>.<\/em><\/li>\r\n\t<li>The expressions <em>can&rsquo;t help, can&rsquo;t stand, to be worth <\/em>and <em>it&rsquo;s no use<\/em>: <em>It&rsquo;s no use trying to escape.<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>A last possible use is as a complement of the verb <strong>to be<\/strong>:<\/p>\r\n\r\n<p style=\"margin-left:20.4pt\"><em>His life goal is to find all Pok&eacute;mon =&gt; His life goal <strong>is finding <\/strong>all Pok&eacute;mon<\/em><\/p>\r\n\r\n<h5>Present Participle<\/h5>\r\n\r\n<p>In contrast to the gerund, the present participle actually has the expected function of a verb. It is used in the continuous tenses, but has many other uses.<\/p>\r\n\r\n<ul>\r\n\t<li>After verbs of movement and position, for example: <em>to go, to come, to lay, to sit.<\/em>\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>They went hiking. She lay looking at the stars. I came running towards him. We sat staring out of the window.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>After verbs of perception, for example: <em>to hear, to see, to smell, to watch, to feel.<\/em>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I felt the wind blowing in my face. I heard someone singing down the street.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>With the verbs <em>spend<\/em> and <em>waste<\/em>: the construction is <strong>verb + time\/money expression + present participle<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>The doctor spends five hours a day sleeping. I wasted a hundred dollars trying to get there.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>With the verbs <em>catch<\/em> and <em>find<\/em>: the construction is <strong>verb + object + present participle<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I caught him stealing my wallet. They found two old coins lying in the sand.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Describing two actions at the same time: the construction is usually <strong>present participle + actual action<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Singing to herself, she cycled to school. &lsquo;Hands behind your head,&rsquo; he said, pulling his gun.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Infinitives<\/h2>\r\n\r\n<p>Infinitives have many different uses and specific constructions they appear in. To keep things organized, I will introduce two different types of infinitives:<\/p>\r\n\r\n<ul>\r\n\t<li>The regular infinitive: <strong>to + base verb<\/strong> (<em>to remember<\/em>)<\/li>\r\n\t<li>The zero infinitive: <strong>base verb <\/strong>(<em>remember<\/em>)<\/li>\r\n<\/ul>\r\n\r\n<p>To negate the infinitive you simply put the word <strong>not<\/strong> in front, as this can always be done in this case.<\/p>\r\n\r\n<h5>Regular Infinitive<\/h5>\r\n\r\n<p>It can be used:<\/p>\r\n\r\n<ul>\r\n\t<li>To indicate the purpose or intention of an action. In that case, the word <em>to<\/em> could be replaced with <em>in order to<\/em> or <em>so as to<\/em>.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>She came to school <strong>to receive<\/strong> her award.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>As the subject of a sentence. This makes sentences needlessly complicated, so is most often seen in written works of art.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><strong><em>To find <\/em><\/strong><em>true love is the purpose of life! <strong>To be<\/strong> or not to be.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To indicate what something can or will be used for.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>They will need some space <strong>to work<\/strong> in. Would you like a slice of cake <strong>to eat<\/strong>?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>After adjectives. The construction is:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Subject + to be + adjective ( + for\/of someone) + regular infinitive ( + rest of sentence).<\/li>\r\n\t\t<li><em>He is interesting for you <strong>to talk<\/strong> to. She is a nice girl <strong>to flirt<\/strong> with.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To make a comment or judgment. The construction is:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Subject + to be + noun phrase + regular infinitive.<\/li>\r\n\t\t<li><em>They are a dangerous group <strong>to run into<\/strong> late at night. Jim is the worst person<strong> to ask<\/strong> for these kind of matters.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>With adverbs<em> too <\/em>and <em>enough<\/em>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>She is too beautiful <strong>to flirt<\/strong> with. There is enough food <strong>to feed<\/strong> everyone here.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>With question words. The verbs <em>ask, decide, explain, forget, know, show, tell <\/em>and <em>&nbsp;understand<\/em> can be followed by a question word + regular infinitive.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Do you know how <strong>to draw<\/strong> a cat? Has he explained when it&rsquo;s best <strong>to mow<\/strong> the lawn? No, but I&rsquo;ve been show how <strong>to draw<\/strong> a dog instead.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h5>Zero Infinitive<\/h5>\r\n\r\n<p>Luckily, the zero infinitive has far less uses. These are:<\/p>\r\n\r\n<ul>\r\n\t<li>After auxiliaries.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>He can&rsquo;t <strong>explain<\/strong> that to you now. Would she <strong>tell<\/strong> you if she knew?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>After verbs of perception. The construction is:\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Verb + object + zero infinitive<\/li>\r\n\t\t<li><em>They heard her scream. We watched him try to get on his bike.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>After the verbs <em>make<\/em> and <em>let<\/em>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Let&rsquo;s <strong>go<\/strong>! You made him <strong>do<\/strong> that.&rsquo;<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>After the expression <em>had better<\/em>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>She had better <strong>go<\/strong> to bed now. You&rsquo;d better <strong>give<\/strong> me some more time!<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>In combination with <em>why<\/em>, making a suggestion.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Why <strong>wait<\/strong> until he returns? Why not <strong>sleep<\/strong> at Jim&rsquo;s place?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"english-verbs-part-four","cat":"Writing","subcat":"English","video":"","diff":"4","quiz":""},
{"id":"137","title":"[English] Adjectives","post":"<p>Adjectives help nouns. They always apply to one or several noun(s), and attempt to enrich their target by adding more information or detailing. You could say <em>Two girls are walking down the street. One girl finds a wallet.<\/em> But then we&rsquo;d all be wondering: which one of them? Adding an adjective clears things up: <em>A short and tall girl are walking down the street together. The tall one finds a wallet<\/em>. As you can see, adjectives add more detail and information, but also increase sentence length and complexity. You should therefore not stuff every sentence with adjectives &ndash; only use them when they are actually useful or necessary. In some cases, you can find a single <em>noun<\/em> to replace <em>adjective + noun<\/em>.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Adjectives <\/em><\/strong><em>modify or describe nouns<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples: <\/em><\/strong><em>red, boring, beautiful, tall, short, nice, friendly, inviting, green<\/em><\/p>\r\n\r\n<h2>Placement of Adjectives<\/h2>\r\n\r\n<p>There are two ways to place adjectives:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Immediately in front of the noun: <\/strong><em>Yesterday, I&rsquo;ve placed a <strong>small<\/strong> table in my <strong>big<\/strong> house.<\/em><\/li>\r\n\t<li><strong>After being or sensing verbs: <\/strong><em>My house is <strong>big<\/strong>. The table seems <strong>small<\/strong>.<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Adjectives don&rsquo;t change their form based on the gender or number (singular\/plural) of the noun they belong to &ndash; they always stay the same.<\/p>\r\n\r\n<p>NOTE: To intensify adjectives, you can use the word <strong>very<\/strong> or <strong>really<\/strong> in front of them. Those are actually adverbs, and will be discussed in the next chapter. But, sometimes an intensified version of the noun is already available in the dictionary, and it is advised to use that.<\/p>\r\n\r\n<p>NOTE 2: The adjectives <em>involved, present <\/em>and<em> concerned<\/em> can appear behind the noun, but that changes their meaning.<\/p>\r\n\r\n<h2>Comparing with Adjectives<\/h2>\r\n\r\n<p>There are a few different structures to use when comparing equal and unequal nouns:<\/p>\r\n\r\n<ul>\r\n\t<li>Equal; <strong>as + adjective + as<\/strong>\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Jack is as tall as Jim<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Unequal; <strong>not as + adjective + as<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Jack is not as tall as Jim<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Unequal; <strong>less + adjective + than<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Jack is less tall than Jim<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Unequal; <strong>comparative adjective + than<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Jack is taller than Jim<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>One clear winner of the comparison; <strong>the + superlative adjective<\/strong>\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Jack is the tallest of the two.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>How to form the comparative and superlative adjective will be discussed next section.<\/p>\r\n\r\n<h2>Comparative &amp; Superlative<\/h2>\r\n\r\n<p>It depends on the amount of syllables in a word how the comparative and superlative are formed.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>One Syllable.<\/strong> Add <strong>&ndash;er<\/strong> for comparative and <strong>&ndash;est<\/strong> for superlative. If the adjective ends with the pattern <em>single vowel + consonant<\/em>, you need to double the consonant.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Tall =&gt; Tall<strong>er<\/strong> =&gt; Tall<strong>est<\/strong><\/em><\/li>\r\n\t\t<li><em>Sad =&gt; Sad<strong>d<\/strong>er =&gt; Sad<strong>d<\/strong>est<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Two Syllables. <\/strong>Not all of these can be formed in the way described above, and are formed by using <strong>more + adjective<\/strong> for comparative and <strong>most + adjective<\/strong> for superlative. If you are not sure, you can always play safe and use that system. Adjectives ending in <strong>&ndash;y<\/strong> need to replace it with an <strong>&ndash;i<\/strong>.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Happy =&gt; Happier =&gt; Happiest<\/em><\/li>\r\n\t\t<li><em>Tilted =&gt; More tilted =&gt; Most titled<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Three or More Syllables.<\/strong> These adjectives always follow the <em>most <\/em>and <em>more<\/em> pattern.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Important =&gt; More important =&gt; Most important<\/em><\/li>\r\n\t\t<li><em>Beautiful =&gt; More beautiful =&gt; Most beautiful<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>The most important comparative adjectives are irregular, and you will have to just memorize the following table.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Normal Adjective<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Comparative<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Superlative<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>good<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>better<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>best<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>bad<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>worse<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>worst<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>little<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>less<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>least<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>much<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>more<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>most<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>far<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>further \/ farther<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>furthest \/ farthest<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Quantities<\/h2>\r\n\r\n<p>Right at the start of this course, we talked about <em>countable<\/em> and <em>uncountable nouns<\/em>. If you want to compare <em>quantities<\/em>, there are different words you should use.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A = B<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A = B<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A &gt; B<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A &lt; B<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Countable<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>many<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>few<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>more<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>fewer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Uncountable<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>much<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>little<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>more<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>less<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em>What&rsquo;s the difference between the first two columns? <\/em>The first describes two equal nouns that are in numerous quantities. The second describes two equal nouns that are scarce.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>It seems as if there are <strong>as many children<\/strong> on the playground <strong>as<\/strong> there are ants in the world. <\/em>(there were a lot of children there)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>We had <strong>little money<\/strong> <\/em>(they didn&rsquo;t have a lot of money).<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He had even <strong>less patience<\/strong> than Jim.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They had <strong>fewer points<\/strong> than the other team.<\/em><\/p>\r\n\r\n<h2>Multiple Adjectives<\/h2>\r\n\r\n<p>There is no fixed order you must follow when using multiple adjectives in a row, but there is a sort of generally accepted order you should use most of the time, which is:<\/p>\r\n\r\n<p>Quantity =&gt; Value\/Opinion =&gt; Size =&gt; Temperature =&gt; Age =&gt; Shape =&gt; Colour =&gt; Origin =&gt; Material<\/p>\r\n\r\n<p><strong><em>Examples: <\/em><\/strong><em>The two beautiful birds. The large, cold ice cream. The two ten year olds. The rectangular, green box. The awesome metal car.<\/em><\/p>\r\n","slur":"english-adjectives","cat":"Writing","subcat":"English","video":"","diff":"2","quiz":""},
{"id":"138","title":"[English] Adverbs","post":"<p>Adverbs are the wildcard of any language. They can be formed out of anything, and applied to nearly everything. The subject and object in a sentence (nouns + adjectives) answers the question <strong><em>Who?<\/em><\/strong> The verb answers the question <strong><em>What?<\/em><\/strong> Relative clauses usually answer the question <strong><em>Why?<\/em><\/strong><\/p>\r\n\r\n<p>Adverbs try to answer the remaining questions: <em>When? Where? <\/em>and<em> How?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Adverbs<\/em><\/strong><em> modify a verb, adjective or other adverb.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples:<\/em><\/strong><em> The lived <strong>happily<\/strong> ever after. He <strong>angrily<\/strong> threw the baseball. The test went <strong>very well<\/strong>.<\/em><\/p>\r\n\r\n<p>You can find adverbs by rephrasing a sentence in interrogative form:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Mark just loudly sang the beautifully composed song there.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>How did Mark sing? Loudly<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>How was the song composed? Beautifully <\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>When did Mark sing? Just <\/em>(not so long ago)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Where did Mark sing? There<\/em><\/p>\r\n\r\n<p>As you can see, adverbs are everywhere, but rarely stand on their own in a sentence. If they modify a verb, they are usually placed after it. If the modify an adjective, they are placed in front of it.<\/p>\r\n\r\n<h2>Forming Adverbs<\/h2>\r\n\r\n<p>In most cases, they are formed by adding <strong>&ndash;ly<\/strong> behind their adjective.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Quick =&gt; Quick<strong>ly<\/strong>.<\/em><\/p>\r\n\r\n<p>Again, if the adjective ends in an <strong>&ndash;y<\/strong>, replace it with an <strong>&ndash;i<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Easy =&gt; Eas<strong>ily<\/strong>.<\/em><\/p>\r\n\r\n<p>If the adjective ends in <strong>&ndash;able, &ndash;ible or &ndash;le<\/strong>, replace the <strong>&ndash;e<\/strong> with an <strong>&ndash;i<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Terrible =&gt; Terr<strong>ibly<\/strong><\/em><strong>.<\/strong><\/p>\r\n\r\n<p>If the adjective ends in <strong>&ndash;ic<\/strong>, add <strong>&ndash;ally<\/strong> at the end.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Basic =&gt; Basic<strong>ally<\/strong>.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>One exception: public =&gt; publicly.<\/em><\/p>\r\n\r\n<p>Some common adjectives have the same form as adverbs, which are:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Early, fast, hard, high, late, near, straight <\/em>and <em>wrong<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She always drives very <strong>fast<\/strong>.<\/em><\/p>\r\n\r\n<p>And one very important thing to remember, is that the adverb of <em>good<\/em> is <strong>well<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She is a good soccer player =&gt; She plays <strong>well<\/strong>.<\/em><\/p>\r\n\r\n<h2>Comparative and Superlative Adverb<\/h2>\r\n\r\n<p>Because adverbs end in <strong>&ndash;ly<\/strong>, you could form the comparative and superlative with <strong>&ndash;ier<\/strong> and <strong>&ndash;iest<\/strong>. But, the most common (and better) approach is to just place <strong>more <\/strong>and <strong>most<\/strong> in front.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Slowly =&gt; More slowly =&gt; Most slowly<\/em><\/p>\r\n\r\n<p>Very short adverbs that do not end in &ndash;ly (especially the ones that didn&rsquo;t change), are formed in the usual way:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Fast =&gt; Faster =&gt; Fastest<\/em><\/p>\r\n\r\n<h2>Relative Adverbs<\/h2>\r\n\r\n<p>You can always use the structure <strong>(in\/at\/on\/for) + which<\/strong> to connect a relative clause to the sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>There was a rain storm going on the week <strong>in which<\/strong> she was born<\/em><\/p>\r\n\r\n<p>But, you can make the sentence shorter and clearer by using <em>relative adverbs<\/em> (<strong>where, when<\/strong> or <strong>why<\/strong>) instead:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>There was a rain storm going on the week <strong>when<\/strong> she was born<\/em><\/p>\r\n\r\n<h2>Interrogative Adverbs<\/h2>\r\n\r\n<p>We&rsquo;ve been talking about <em>who, what, where, when, why <\/em>and<em> how<\/em> the whole time, and now we can give them a name: <em>interrogative adverbs<\/em>.<\/p>\r\n\r\n<p>You can place them at the beginning of a sentence, and if you don&rsquo;t forget to switch around the subject and verb, you have a question:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>How often do you shave?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Where did he suddenly come from?<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>What time is it?<\/em><\/p>\r\n\r\n<p>The word <em>how<\/em> has only four specific uses:<\/p>\r\n\r\n<ul>\r\n\t<li>When it means <em>in what way.<\/em>\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>How do you repair a bike?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>To ask about the degree of an attribute (\/adjective)\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>How old do you think he is?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>In combination with other adverbs, to ask about frequency or degree of an action\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>How fast did he run!?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>Used with much and many to ask about quantity.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>How much time did you put into this assignment?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Viewpoint and Commenting Adverbs<\/h2>\r\n\r\n<p>A very common practice in English is to put some of your own values into a sentence with an adverb. You can &ndash; subtly or not &ndash; express your viewpoint, opinion or comments on a topic. Such a commenting adverb can be placed in front of the sentence or at the end, separated by a comma. It can also be placed in front of the main verb, but that is somewhat unusual.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Clearly<\/em><\/strong><em>, she doesn&rsquo;t know what she&rsquo;s talking about. <\/em>(the writer&rsquo;s opinion is that <em>she<\/em> doesn&rsquo;t know what she&rsquo;s doing, and doesn&rsquo;t believe in her)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He <strong>undoubtedly<\/strong> has prepared accordingly. <\/em>(the writer isn&rsquo;t sure, but his opinion is that <em>he<\/em> is a good fellow that always prepares himself well)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They are the ones to blame, <strong>obviously<\/strong>. <\/em>(the writer is really sure about who is to blame, and therefore states that it&rsquo;s obvious, even though it might not be obvious at all)<\/p>\r\n\r\n<h2>List of Common Adverbs<\/h2>\r\n\r\n<h5>Adverbs of Place<\/h5>\r\n\r\n<p>The most common ones are <strong>here<\/strong> (something close by) and <strong>there <\/strong>(something far away). Those are usually placed at the end of the sentence or after prepositions, but can be put at the front in sentence with exclamations or emphasis needed. In the <em>pronouns<\/em> chapter we also already discussed the important <strong>everywhere, anywhere, somewhere<\/strong> and <strong>nowhere<\/strong>.<\/p>\r\n\r\n<p>But, there&rsquo;s also a list of words that function as an adverb as well as preposition (it never works the other way around: prepositions are not adverbs).<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Word<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Used as adverb of place<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Used as preposition<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>around<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He came around very often those days.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It was placed around the hearth.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>behind<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He was falling behind the others.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He hid behind the rocks.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>down<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He fell down.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She ran down the road.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>in<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He decided to jump in to save the situation.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The postman dropped letters in the mailbox.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>off<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I want to get off at the next stop.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>He fell off the balcony.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>on<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>They cycled on for a few more hours.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She placed all her books on the table.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>over<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>She turned over twice before falling asleep.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The picture still hangs over my bed.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h5>Adverbs of Time<\/h5>\r\n\r\n<p>There are three types of adverbs of time: <em>how long, how often<\/em> and <em>when (exactly)<\/em>. If you use multiple, they should always be in that order. Time follows place in a sentence (unless you intend to emphasize one of them).<\/p>\r\n\r\n<p><strong>When:<\/strong> <em>yesterday, tomorrow, today, later, now, last year, next year, &hellip;<\/em><\/p>\r\n\r\n<p><strong>How often: <\/strong><em>all day, for weeks, for years, since Tuesday, &hellip;<\/em><\/p>\r\n\r\n<p><strong>How long: <\/strong><em>often, never, always, seldom, rarely, frequently, regularly, usually, once a week, monthly, &hellip;<\/em><\/p>\r\n\r\n<p>The word <strong>yet<\/strong> is used in questions and negative sentences if something hasn&rsquo;t happened or may not have happened, but is expected to happen.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Have you finished working on that project <strong>yet<\/strong>?<\/em><\/p>\r\n\r\n<p>The word <strong>still<\/strong> expresses continuity, mostly used in positive sentences. It is placed before the main verb, and after it if it is an <em>auxiliary verb<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He is still in love with you.<\/em><\/p>\r\n\r\n<h5>Adverbs of Manner<\/h5>\r\n\r\n<p>If a verb has an object (direct or indirect), the adverb needs to be placed in front of it or at the end of the clause. If not, it&rsquo;s best to put the adverb right behind.<\/p>\r\n\r\n<p><em>Why?<\/em> Because sometimes a sentence contains multiple verbs, and placing the adverb at the end of a sentence\/away from its corresponding verb applies it to the whole clause, which you may not always want.<\/p>\r\n\r\n<p>Adverbs of manner tell how something happened, for example: <em>well, quickly, patiently, greedily, softly, beautifully, angrily, roughly, &hellip;<\/em><\/p>\r\n\r\n<p>The adverbs of manner <em>well, badly, hard <\/em>and<em> fast<\/em> almost always come immediately after its verb.<\/p>\r\n\r\n<h5>Adverbs of Degree<\/h5>\r\n\r\n<p>Tell us about the intensity or degree of an action, usually placed directly before whatever they are modifying.<\/p>\r\n\r\n<p>The adverb <strong>enough<\/strong> comes <em>after<\/em> what it modifies, and means something like &ldquo;to the necessary degree&rdquo;. This can also express a quantity; <em>as much\/many as necessary<\/em>. Often followed by <em>for someone<\/em>, <em>for something <\/em>or <em>&ldquo;to&rdquo;+infinitive<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He didn&rsquo;t do enough to pass the exam. But it was enough for me. Now I have enough points to get my diploma.<\/em><\/p>\r\n\r\n<p>The adverb <strong>too<\/strong> has the same properties, and can have two meanings:<\/p>\r\n\r\n<ul>\r\n\t<li><em>&ldquo;Also&rdquo;<\/em>: in this case, it is placed at the end of the sentence\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I like swimming <strong>too<\/strong>!<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li>&ldquo;<em>excessively&rdquo;<\/em>: in this case, it comes before what it modifies\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Am I <strong>too<\/strong> fat?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>The adverb <strong>very<\/strong> makes an adverb or adjective stronger. In contrast to <em>too<\/em>, it simply states a fact, while <em>too<\/em> says there is a problem (things have gone too far). <strong>Not very<\/strong> can be used as a kind way to create a negative sentence.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>It was very bad =&gt; It wasn&rsquo;t very good<\/em><\/p>\r\n\r\n<h5>Adverbs of Certainty<\/h5>\r\n\r\n<p>Express how certain we feel about an event or action. Always go before the main verb, unless that verb is some form of <strong>to be<\/strong>. These are: <em>certainly, definitely, probably, undoubtedly, surely<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She probably has some tricks up her sleeve. She is definitely a trickster.<\/em><\/p>\r\n","slur":"english-adverbs","cat":"Writing","subcat":"English","video":"","diff":"3","quiz":""},
{"id":"139","title":"[English] Determiners","post":"<p>All that&rsquo;s left to learn now, is a few simple but crucial words. I could have spread them all throughout the course, but I think that would have made it too messy and confusing, so that&rsquo;s why I&rsquo;m presenting it as one group here.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Determiners<\/em><\/strong><em> are placed in front of a noun to make clear what it refers to<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong><em>Examples:<\/em><\/strong><em> <strong>my<\/strong> hat, <strong>these<\/strong> people, <strong>a few<\/strong> birds, <strong>ten<\/strong> children, <strong>other<\/strong> options<\/em><\/p>\r\n\r\n<p>Determiners have 9 subcategories. But luckily, 4 of them have already been discussed:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Definite article:<\/strong> <em>the<\/em><\/li>\r\n\t<li><strong>Indefinite article:<\/strong> <em>a, an<\/em><\/li>\r\n\t<li><strong>Possessive determiners:<\/strong> <em>my, your, his, her, its, our, their<\/em><\/li>\r\n\t<li><strong>Quantifiers: <\/strong><em>a few, a little, much, many, most, some, any, enough, a lot of<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>The others each have their own section with some explanation<\/p>\r\n\r\n<h2>Demonstratives<\/h2>\r\n\r\n<p>Demonstratives are used to show how nearby or close a noun we&rsquo;re referring to is. They are placed before the noun, or on their own if the noun itself is understood from the context.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Close by (&ldquo;here&rdquo;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Far away (&ldquo;there&rdquo;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Singular &amp; Uncountable<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>This<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>That<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Plural<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>These<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Those<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>They can be used to show <em>placement<\/em> or <em>position<\/em> of things, but also as a way of referring back to things mentioned earlier (in the sentence or paragraph). In those cases you also follow the <em>close by\/far away<\/em> rules.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I like birds very much. It&rsquo;s this obsession that keeps me awake at night. <\/em>(the obsession is of the speaker himself, so very close to him.)<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He is more into lions. That&rsquo;s no problem, they are cool too. <\/em>(his obsession is away from the speaker.)<\/p>\r\n\r\n<p>Use <em>this<\/em> if you could hold something up in your hand, and <em>that<\/em> if you would point to it. With abstract things, you can do neither, and it&rsquo;s up to you to find out what sounds best.<\/p>\r\n\r\n<p>Try to (mentally) substitute this\/that with <em>this here<\/em> or <em>that here<\/em>, and you will often find what is the obvious choice.<\/p>\r\n\r\n<h2>Numbers<\/h2>\r\n\r\n<p>Numbers are placed in front of the noun, and the noun of course has to be put into plural form if the number is higher than one. The integers 0-10 are:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Zero, One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten<\/em><\/p>\r\n\r\n<p>The <em>ranking numbers<\/em> (that show the rank of a noun in a certain order) are formed <strong>number + th<\/strong>. The first three ranking numbers are irregular, and are <strong>first, second <\/strong>and <strong>third<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Seven =&gt; Seventh. Ten =&gt; Tenth. Twenty =&gt; Twentieth<\/em><\/p>\r\n\r\n<p>When talking about numbers that are not integers but fractions we use the form <strong>numerator<\/strong> <strong>+ ranking form denominator. <\/strong>Ranking numbers ending in <strong>&ndash;th<\/strong> get an extra <strong>&ndash;s<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>1\/3 =&gt; One Third. 4\/5 =&gt; Four Fifths<\/em><\/p>\r\n\r\n<p>Going one step further, we get to the decimal numbers, which use the construction <strong>&ldquo;point&rdquo; + every number behind the dot written individually<\/strong>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>0.6632 =&gt; point six six three two<\/em><\/p>\r\n\r\n<p>And lastly, there are four ways to say <strong>0<\/strong>:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Zero:<\/strong> if it&rsquo;s within a number<\/li>\r\n\t<li><strong>O:<\/strong> when reading years, addresses, times and temperatures<\/li>\r\n\t<li><strong>Nil:<\/strong> when reporting sports scores<\/li>\r\n\t<li><strong>Nought:<\/strong> used sparingly, for example when the zero is a subscript in a mathematical equation. Not used in the USA.<\/li>\r\n<\/ul>\r\n\r\n<h2>Distributives<\/h2>\r\n\r\n<p>Distributives, as the name suggests, distribute a noun among a group. There are four different types:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Each<\/strong> and <strong>every<\/strong>: to talk about members of a group as individuals\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Each of them wanted a piece of cake.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>All:<\/strong> to talk about the group as a whole\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>All members thought a reorganization of the company was necessary.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Half: <\/strong>to talk about a divided group\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Half of the citizens were against the proposal<\/em>.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Both, either<\/strong> and <strong>neither<\/strong>: to talk about pairs of people\/things\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Both parties agreed on the contract. Neither one wanted to hurt the other&rsquo;s feelings.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Difference Words<\/h2>\r\n\r\n<p>Difference words refer to something different, remaining or additional. There&rsquo;s only two of them:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Other:<\/strong> for plural countable and uncountable nouns, and any noun that takes <em>the<\/em>.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>I saw him <strong>the<\/strong> other day. Other people saw him as well. Did other<strong>s<\/strong> see him?<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Another: <\/strong>singular (countable) nouns.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>Another week went by with another attack.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<h2>Pre-Determiners<\/h2>\r\n\r\n<p>Pre-determiners are placed before an <strong>indefinite article <\/strong>(a\/an) <strong>+ adjective + noun<\/strong> to express an opinion about the noun they modify. These are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Such<\/strong> and <strong>what<\/strong>: to express surprise or other emotions.\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>What a lovely dress! We&rsquo;ve had such a good time in the cinema.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Rather <\/strong>and <strong>quite:<\/strong> to refer to the degree the adjective modifies the noun. It depends on the adjective whether they bring positive or negative emotions.\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li><em>That&rsquo;s quite a lovely dress. I&rsquo;ve had a rather good time in the cinema.<\/em><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"english-determiners","cat":"Writing","subcat":"English","video":"","diff":"3","quiz":""},
{"id":"140","title":"[English] Cheat Sheet","post":"<p>You can use the image below to quickly remind yourself of the basic grammar rules in case you are in doubt. I present, the English Grammar Cheat Sheet!<\/p> \r\n\r\n<p><img src=\"media\/EnglishGrammarCheatSheet.png\" \/><\/p>\r\n","slur":"english-grammar-cheat-sheet","cat":"Writing","subcat":"English","video":"","diff":"3","quiz":""},
{"id":"141","title":"Words & Phrases to Avoid","post":"<p>Most writers are lazy. They use vague language to get the job done, where a definite statement would make the writing shorter and clearer. This article isn&rsquo;t so much about correcting bad English as improving your style. Many expressions mentioned here are grammatically correct, and even very popular, but should be restricted to colloquialisms. The book <em>Elements of Style<\/em> &ndash; which I highly recommend &ndash; has been the inspiration for this article.<\/p> \r\n\r\n<h2>An Alphabetic List<\/h2>\r\n\r\n<p><strong>Absolutely<\/strong><\/p>\r\n\r\n<p>Often redundant when used to emphasize adjectives. Either someone is honest, or he isn&rsquo;t. Absolutely honest doesn&rsquo;t make him more honest.<\/p>\r\n\r\n<p><strong>All right<\/strong><\/p>\r\n\r\n<p>Alright has become more popular, but two separate words is still the correct form. Used in familiar speech in the sense of <em>&ldquo;Agreed&rdquo; <\/em>or <em>&ldquo;Go ahead&rdquo;<\/em>. Avoid using it for anything else.<\/p>\r\n\r\n<p><strong>Always<\/strong><\/p>\r\n\r\n<p>Unless you&rsquo;re giving written commands or instruction, find another word. Always is rarely true, and opens the door to criticism regarding inaccuracies.<\/p>\r\n\r\n<p><strong>Amazing<\/strong><\/p>\r\n\r\n<p>Overused. Omit it, or at least find a more fitting synonym. If everything is amazing, nothing is.<\/p>\r\n\r\n<p><strong>As good or better<\/strong><\/p>\r\n\r\n<p>Rearrange the sentence so that &ldquo;<em>or better<\/em>&rdquo; (or &ldquo;<em>if not better<\/em>&rdquo;) is at the end<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>This is as good or better than that =&gt; This is as good as that, or better<\/em><\/p>\r\n\r\n<p><strong>As to whether<\/strong><\/p>\r\n\r\n<p>Just <em>whether<\/em> is sufficient.<\/p>\r\n\r\n<p><strong>Bid<\/strong><\/p>\r\n\r\n<p>Takes the infinitive without <em>to<\/em>. The past tense is <em>bade<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I bade him to do it =&gt; I bade him do it<\/em>.<\/p>\r\n\r\n<p><strong>Case<\/strong><\/p>\r\n\r\n<p>When used in the senses <em>instance of a thing&rsquo;s occurring<\/em> or <em>usual state of affairs<\/em>, it&rsquo;s usually unnecessary.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>In many cases, the houses had been destroyed =&gt; Many houses had been destroyed.<\/em><\/p>\r\n\r\n<p><strong>Certainly<\/strong><\/p>\r\n\r\n<p>Used too often to intensify any and every statement. Don&rsquo;t.<\/p>\r\n\r\n<p><strong>Character<\/strong><\/p>\r\n\r\n<p>Often redundant and used out of habit only.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Acts of a hostile character =&gt; Hostile acts<\/em><\/p>\r\n\r\n<p><strong>Claim<\/strong><\/p>\r\n\r\n<p>With object, means <em>lay claim to<\/em>. Not to be used as a substitute for <em>declare, maintain<\/em> or <em>charge<\/em>.<\/p>\r\n\r\n<p><strong>Compare<\/strong><\/p>\r\n\r\n<p>The preposition that accompanies it makes the difference.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To <em>compare to<\/em> is to point out or imply resemblances between objects regarded as different<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To <em>compare with<\/em> is to point out differences between objects regarded as similar<\/p>\r\n\r\n<p><strong>Clever<\/strong><\/p>\r\n\r\n<p>Greatly overused. Best restricted to ingenuity displayed in small matters.<\/p>\r\n\r\n<p><strong>Consider<\/strong><\/p>\r\n\r\n<p>When followed by <em>&ldquo;as&rdquo;<\/em> means <em>&ldquo;believe to be&rdquo;<\/em>. Otherwise means <em>&ldquo;examined&rdquo; <\/em>or <em>&ldquo;discussed&rdquo;.<\/em><\/p>\r\n\r\n<p><strong>Dependable<\/strong><\/p>\r\n\r\n<p>A needless substitute for <em>reliable<\/em> or <em>trustworthy<\/em>.<\/p>\r\n\r\n<p><strong>Due to<\/strong><\/p>\r\n\r\n<p>Correctly used when related to a particular noun as predicate or modifier.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Losses due to bad policy<\/em><\/p>\r\n\r\n<p>Incorrectly used for <em>through, because of<\/em> or <em>owing to<\/em> in adverbial phrases:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>She lost the game, due to carelessness<\/em><\/p>\r\n\r\n<p><strong>Effect<\/strong><\/p>\r\n\r\n<p>As noun, means <em>result.<\/em> As verb, means to <em>bring about <\/em>or<em> accomplish. <\/em>Should not be confused with <em>affect<\/em>, which means <em>&ldquo;to influence&rdquo;<\/em>.<\/p>\r\n\r\n<p>Too often used as a vague substitute in writing about any sort of art (<em>&ldquo;the painter used very delicate effects&rdquo;<\/em>), which is bad.<\/p>\r\n\r\n<p><strong>Etc.<\/strong><\/p>\r\n\r\n<p>Equivalent to <em>and the rest<\/em> or <em>and so forth<\/em>. Should therefore not be used of persons, or if the reader could be left in doubt as to any important particulars. Best used to shorten a list which has already been given in full, or to replace unimportant words at the end of a quotation.<\/p>\r\n\r\n<p>Ending lists starting with expressions like <em>such as<\/em> or <em>for example<\/em> with &ldquo;<em>etc.<\/em>&rdquo; is incorrect.<\/p>\r\n\r\n<p><strong>Fact<\/strong><\/p>\r\n\r\n<p>Use this only of actual facts, matters capable of direct verification, and never for matters of judgment, however incontestable they may be.<\/p>\r\n\r\n<p><strong>Factor<\/strong><\/p>\r\n\r\n<p>Overused. Can often be replaced by something more direct or definite.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Superior preparation was the biggest factor in his winning =&gt; He won by being prepared better<\/em><\/p>\r\n\r\n<p><strong>Feature<\/strong><\/p>\r\n\r\n<p>Like factor, it usually adds nothing to a sentence.<\/p>\r\n\r\n<p>To be avoided in the advertising sense of <em>offer as a special attraction<\/em>.<\/p>\r\n\r\n<p><strong>Fix<\/strong><\/p>\r\n\r\n<p>Colloquial (in American English) for <em>arrange, prepare<\/em> or <em>mend<\/em>. Restrict it to its literary senses; <em>fasten, make firm<\/em> or <em>immovable<\/em>, etc.<\/p>\r\n\r\n<p><strong>He is a man who<\/strong><\/p>\r\n\r\n<p>A common type of redundant expression, with some variations;<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>England is a country which I like =&gt; I like England.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He is a man who likes to play games =&gt; He likes to play games<\/em><\/p>\r\n\r\n<p><strong>Honestly<\/strong><\/p>\r\n\r\n<p>Often used to add emphasis, but should be avoided, for it implies that the rest of your statements wasn&rsquo;t honest.<\/p>\r\n\r\n<p><strong>However<\/strong><\/p>\r\n\r\n<p>Comes first in the sentence when it means &ldquo;<em>in whatever way<\/em>&rdquo; or &ldquo;<em>to whatever extent<\/em>&rdquo;.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>However hard you try, it won&rsquo;t happen.<\/em><\/p>\r\n\r\n<p>Not to come first when it means &ldquo;<em>nevertheless<\/em>&rdquo;.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I feel sorry for him. It is, however, not my problem.<\/em><\/p>\r\n\r\n<p><strong>Irregardless<\/strong><\/p>\r\n\r\n<p>It&rsquo;s not a word. Regard<em>less<\/em> already means <em>without<\/em> regard.<\/p>\r\n\r\n<p><strong>Just<\/strong><\/p>\r\n\r\n<p>Unless you&rsquo;re using it with the meaning of <em>equitable, fair, even-handed<\/em> or <em>impartial<\/em>, don&rsquo;t use it at all. Often has no meaning and makes your sentences weaker.<\/p>\r\n\r\n<p><strong>Kind of<\/strong><\/p>\r\n\r\n<p>Don&rsquo;t use it as substitute for <em>rather<\/em> (before adjectives and verbs) or <em>something like<\/em> (before nouns). Restrict it to its literal sense;<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He plays guitar with a strange kind of passion.<\/em><\/p>\r\n\r\n<p>The same is true for <em>sort of<\/em>.<\/p>\r\n\r\n<p><strong>Less<\/strong><\/p>\r\n\r\n<p>Don&rsquo;t misuse it for <em>fewer<\/em>. <em>Less<\/em> refers to quantity (or &ldquo;size&rdquo;), <em>fewer<\/em> to number.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>His troubles are less than mine <\/em>= he has smaller troubles<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>His troubles are fewer than mine <\/em>= he doesn&rsquo;t have as many troubles as I do<\/p>\r\n\r\n<p>An exception are round numbers, which are regarded as a collective noun.<\/p>\r\n\r\n<p><strong>Line<\/strong><\/p>\r\n\r\n<p>Can be used in the sense of <em>course of procedure, conduct<\/em> or <em>thought<\/em>, but has been overdone so much (especially with the phrase <em>along these lines<\/em>), that you better avoid it.<\/p>\r\n\r\n<p><strong>Literally<\/strong><\/p>\r\n\r\n<p>Too often incorrectly used in support of exaggeration or violent metaphor, or when the writer actually means <em>figuratively<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He was literally dead with fatigue =&gt; He was almost dead with fatigue<\/em><\/p>\r\n\r\n<p><strong>Lose out<\/strong><\/p>\r\n\r\n<p>Used to sound more emphatic than <em>lose<\/em>, but doesn&rsquo;t work. The same holds for <em>try out, win out, sign up <\/em>and <em>register up<\/em>.<\/p>\r\n\r\n<p>A number of verbs form combinations with <em>out <\/em>and <em>up<\/em>, with different meanings &ndash; but lose out does not.<\/p>\r\n\r\n<p><strong>Maybe<\/strong><\/p>\r\n\r\n<p>Communicates uncertainty. Unless you are posing a question, be sure of what you write and create informed pieces.<\/p>\r\n\r\n<p><strong>Nature<\/strong><\/p>\r\n\r\n<p>Often redundant, just like <em>character<\/em>. Sentences can usually be shortened, or more specific statements need to follow to explain one another.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Acts of a hostile nature =&gt; Hostile acts<\/em><\/p>\r\n\r\n<p><strong>Near by<\/strong><\/p>\r\n\r\n<p>Analogous with <em>close by<\/em> and <em>hard by<\/em>, but is usually written as one word; <em>nearby<\/em>. <em>Near (at hand)<\/em>, however, is as good, if not better.<\/p>\r\n\r\n<p>Not to be used as an adjective; use <em>neighbouring <\/em>instead.<\/p>\r\n\r\n<p><strong>Never<\/strong><\/p>\r\n\r\n<p>See: <em>&ldquo;always&rdquo;<\/em>.<\/p>\r\n\r\n<p><strong>Oftentimes<\/strong><\/p>\r\n\r\n<p>Archaic, use <em>often<\/em>.<\/p>\r\n\r\n<p><strong>One hundred and one<\/strong><\/p>\r\n\r\n<p>Retain the <em>&ldquo;and&rdquo;<\/em> in this and similar expressions.<\/p>\r\n\r\n<p><strong>One of the most<\/strong><\/p>\r\n\r\n<p>Avoid beginning paragraphs with this kind of formula;<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The guitar is one of the most universally played instruments, &hellip;<\/em><\/p>\r\n\r\n<p>It&rsquo;s not wrong, and even sounds good, but it&rsquo;s clich&eacute;, vague and meaningless.<\/p>\r\n\r\n<p><strong>People<\/strong><\/p>\r\n\r\n<p><em>The people<\/em> is a political term; they create political support or opposition. Don&rsquo;t confuse it with <em>the public<\/em>, from whom comes artistic appreciation or commercial support.<\/p>\r\n\r\n<p>Don&rsquo;t use <em>people<\/em> with after number words when <em>persons<\/em> can be used.<\/p>\r\n\r\n<p><strong>Phase<\/strong><\/p>\r\n\r\n<p>Means<em> stage of transition or development<\/em>, not <em>aspect<\/em> or <em>topic<\/em>.<\/p>\r\n\r\n<p><strong>Possess<\/strong><\/p>\r\n\r\n<p>Don&rsquo;t use it as a mere substitute for the simpler verbs <em>have<\/em> or <em>own<\/em>.<\/p>\r\n\r\n<p><strong>Really<\/strong><\/p>\r\n\r\n<p>Just as &ldquo;<em>very<\/em>&rdquo;, don&rsquo;t use it to modify an adjective, verb or adverb.<\/p>\r\n\r\n<p><strong>Respectively<\/strong><\/p>\r\n\r\n<p>May usually be omitted, often improving sentence clarity.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The books are listed under the names of their respective authors<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>The books are listed under the names of their authors<\/em><\/p>\r\n\r\n<p>In some kinds of formal writing (such as geometrical proofs) it may be necessary, but it shouldn&rsquo;t appear in writing otherwise.<\/p>\r\n\r\n<p><strong>So<\/strong><\/p>\r\n\r\n<p>Avoid using it as an intensifier (<em>so good<\/em>).<\/p>\r\n\r\n<p><strong>To state<\/strong><\/p>\r\n\r\n<p>Don&rsquo;t use it as a mere substitute for <em>say<\/em> or <em>remark<\/em>. Restrict it to the sense of <em>express fully or clearly<\/em>.<\/p>\r\n\r\n<p><strong>Student body<\/strong><\/p>\r\n\r\n<p>A needless expression, just <em>students<\/em> is enough.<\/p>\r\n\r\n<p><strong>Stuff<\/strong><\/p>\r\n\r\n<p>Casual and generic. A placeholder for when the writer doesn&rsquo;t know the actual word or phrase. If you don&rsquo;t bother finding out or explaining the details, don&rsquo;t reference something at all.<\/p>\r\n\r\n<p><strong>System<\/strong><\/p>\r\n\r\n<p>Frequently used without necessity.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They have adopted the commission system of government<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>They have adopted government by commission.<\/em><\/p>\r\n\r\n<p><strong>That<\/strong><\/p>\r\n\r\n<p>Superfluous most of the time. Reread every sentence with <em>that<\/em> and see if you can leave it out.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He saw that the bird was eating =&gt; He saw the bird was eating<\/em><\/p>\r\n\r\n<p>Don&rsquo;t use it with people, the proper word is <em>who<\/em>.<\/p>\r\n\r\n<p><strong>They<\/strong><\/p>\r\n\r\n<p>Often incorrectly used with distributive expressions, such as <em>each <\/em>or<em> everybody<\/em>. Although they imply more than one person, they are regarded as singular.<\/p>\r\n\r\n<p>Use <em>he <\/em>instead, unless the antecedent is or must be feminine.<\/p>\r\n\r\n<p><strong>Things<\/strong><\/p>\r\n\r\n<p>See: <em>&ldquo;stuff&rdquo;<\/em>.<\/p>\r\n\r\n<p><strong>Very<\/strong><\/p>\r\n\r\n<p>Use sparingly to exaggerate nouns. If emphasis is necessary, find a strong word.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Very tired =&gt; Morose<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Very happy =&gt; Ecstatic<\/em><\/p>\r\n\r\n<p><strong>Viewpoint<\/strong><\/p>\r\n\r\n<p>Write <em>point of view<\/em>, and don&rsquo;t use it for <em>view<\/em> or <em>opinion<\/em>.<\/p>\r\n\r\n<p><strong>Went<\/strong><\/p>\r\n\r\n<p>Don&rsquo;t use <em>went<\/em> for every action in your story. Consider more definite statements such as walked, ran, drove, cycled.<\/p>\r\n\r\n<p><strong>While<\/strong><\/p>\r\n\r\n<p>Avoid using it in place of &ldquo;<em>and&rdquo; <\/em>or &ldquo;<em>but&rdquo;<\/em>. Instead, use a semicolon.<\/p>\r\n\r\n<p>Using it for &ldquo;<em>although&rdquo;<\/em> is only allowable where this leads to no ambiguity or absurdity.<\/p>\r\n\r\n<p>It&rsquo;s best to restrict while to the sense of <em>during the time that<\/em>.<\/p>\r\n\r\n<p><strong>Whom<\/strong><\/p>\r\n\r\n<p>Is used when it&rsquo;s the direct or indirect object. Often incorrectly used for <em>who<\/em> before <em>he said<\/em> or similar expressions.<\/p>\r\n\r\n<p><strong>Worth while<\/strong><\/p>\r\n\r\n<p>Overworked for vague (dis)approval. Restrict it to only <em>actions<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Is it worth while to phone him?<\/em><\/p>\r\n\r\n<p>Using it before a noun (<em>a worth while visit to the zoo<\/em>) is terrible.<\/p>\r\n\r\n<p><strong>Would<\/strong><\/p>\r\n\r\n<p>A conditional statement in the first person requires <em>should<\/em>, not <em>would<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>I should have died if he hadn&rsquo;t saved me.<\/em><\/p>\r\n\r\n<p>The equivalent of <em>shall<\/em> in indirect quotation after a verb in past tense is <em>should<\/em>, not <em>would<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>He said that soon enough the earth should be hit by an asteroid.<\/em><\/p>\r\n\r\n<p>To express habitual or repeated action, the past tense (without <em>would<\/em>) is usually sufficient.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Once a year he would visit his grandmother<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Once a year he visited his grandmother<\/em><\/p>\r\n","slur":"english-words-phrases-misused-avoid","cat":"Writing","subcat":"","video":"","diff":"1","quiz":""},
{"id":"142","title":"[HTML5 Entities] A","post":"<p>All HTML5 entities starting with <strong>A<\/strong><\/p>\r\n\r\n<table id=\"entityTableCreator\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Aacute;<\/td>\r\n\t\t\t<td><code>Aacute<\/code><\/td>\r\n\t\t\t<td><code>000C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aacute;<\/td>\r\n\t\t\t<td><code>aacute<\/code><\/td>\r\n\t\t\t<td><code>000E1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Abreve;<\/td>\r\n\t\t\t<td><code>Abreve<\/code><\/td>\r\n\t\t\t<td><code>00102<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&abreve;<\/td>\r\n\t\t\t<td><code>abreve<\/code><\/td>\r\n\t\t\t<td><code>00103<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ac;<\/td>\r\n\t\t\t<td><code>ac<\/code><\/td>\r\n\t\t\t<td><code>0223E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&acd;<\/td>\r\n\t\t\t<td><code>acd<\/code><\/td>\r\n\t\t\t<td><code>0223F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&acE;<\/td>\r\n\t\t\t<td><code>acE<\/code><\/td>\r\n\t\t\t<td><code>0223E + 00333<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Acirc;<\/td>\r\n\t\t\t<td><code>Acirc<\/code><\/td>\r\n\t\t\t<td><code>000C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&acirc;<\/td>\r\n\t\t\t<td><code>acirc<\/code><\/td>\r\n\t\t\t<td><code>000E2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&acute;<\/td>\r\n\t\t\t<td><code>acute<\/code><\/td>\r\n\t\t\t<td><code>000B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Acy;<\/td>\r\n\t\t\t<td><code>Acy<\/code><\/td>\r\n\t\t\t<td><code>00410<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&acy;<\/td>\r\n\t\t\t<td><code>acy<\/code><\/td>\r\n\t\t\t<td><code>00430<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&AElig;<\/td>\r\n\t\t\t<td><code>AElig<\/code><\/td>\r\n\t\t\t<td><code>000C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aelig;<\/td>\r\n\t\t\t<td><code>aelig<\/code><\/td>\r\n\t\t\t<td><code>000E6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&af;<\/td>\r\n\t\t\t<td><code>af<\/code><\/td>\r\n\t\t\t<td><code>02061<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Afr;<\/td>\r\n\t\t\t<td><code>Afr<\/code><\/td>\r\n\t\t\t<td><code>1D504<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&afr;<\/td>\r\n\t\t\t<td><code>afr<\/code><\/td>\r\n\t\t\t<td><code>1D51E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Agrave;<\/td>\r\n\t\t\t<td><code>Agrave<\/code><\/td>\r\n\t\t\t<td><code>000C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&agrave;<\/td>\r\n\t\t\t<td><code>agrave<\/code><\/td>\r\n\t\t\t<td><code>000E0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&alefsym;<\/td>\r\n\t\t\t<td><code>alefsym<\/code><\/td>\r\n\t\t\t<td><code>02135<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aleph;<\/td>\r\n\t\t\t<td><code>aleph<\/code><\/td>\r\n\t\t\t<td><code>02135<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Alpha;<\/td>\r\n\t\t\t<td><code>Alpha<\/code><\/td>\r\n\t\t\t<td><code>00391<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&alpha;<\/td>\r\n\t\t\t<td><code>alpha<\/code><\/td>\r\n\t\t\t<td><code>003B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Amacr;<\/td>\r\n\t\t\t<td><code>Amacr<\/code><\/td>\r\n\t\t\t<td><code>00100<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&amacr;<\/td>\r\n\t\t\t<td><code>amacr<\/code><\/td>\r\n\t\t\t<td><code>00101<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&amalg;<\/td>\r\n\t\t\t<td><code>amalg<\/code><\/td>\r\n\t\t\t<td><code>02A3F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&amp;<\/td>\r\n\t\t\t<td><code>amp<\/code><\/td>\r\n\t\t\t<td><code>00026<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&And;<\/td>\r\n\t\t\t<td><code>And<\/code><\/td>\r\n\t\t\t<td><code>02A53<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&and;<\/td>\r\n\t\t\t<td><code>and<\/code><\/td>\r\n\t\t\t<td><code>02227<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&andand;<\/td>\r\n\t\t\t<td><code>andand<\/code><\/td>\r\n\t\t\t<td><code>02A55<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&andd;<\/td>\r\n\t\t\t<td><code>andd<\/code><\/td>\r\n\t\t\t<td><code>02A5C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&andslope;<\/td>\r\n\t\t\t<td><code>andslope<\/code><\/td>\r\n\t\t\t<td><code>02A58<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&andv;<\/td>\r\n\t\t\t<td><code>andv<\/code><\/td>\r\n\t\t\t<td><code>02A5A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ang;<\/td>\r\n\t\t\t<td><code>ang<\/code><\/td>\r\n\t\t\t<td><code>02220<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ange;<\/td>\r\n\t\t\t<td><code>ange<\/code><\/td>\r\n\t\t\t<td><code>029A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angle;<\/td>\r\n\t\t\t<td><code>angle<\/code><\/td>\r\n\t\t\t<td><code>02220<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsd;<\/td>\r\n\t\t\t<td><code>angmsd<\/code><\/td>\r\n\t\t\t<td><code>02221<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdaa;<\/td>\r\n\t\t\t<td><code>angmsdaa<\/code><\/td>\r\n\t\t\t<td><code>029A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdab;<\/td>\r\n\t\t\t<td><code>angmsdab<\/code><\/td>\r\n\t\t\t<td><code>029A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdac;<\/td>\r\n\t\t\t<td><code>angmsdac<\/code><\/td>\r\n\t\t\t<td><code>029AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdad;<\/td>\r\n\t\t\t<td><code>angmsdad<\/code><\/td>\r\n\t\t\t<td><code>029AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdae;<\/td>\r\n\t\t\t<td><code>angmsdae<\/code><\/td>\r\n\t\t\t<td><code>029AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdaf;<\/td>\r\n\t\t\t<td><code>angmsdaf<\/code><\/td>\r\n\t\t\t<td><code>029AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdag;<\/td>\r\n\t\t\t<td><code>angmsdag<\/code><\/td>\r\n\t\t\t<td><code>029AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angmsdah;<\/td>\r\n\t\t\t<td><code>angmsdah<\/code><\/td>\r\n\t\t\t<td><code>029AF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angrt;<\/td>\r\n\t\t\t<td><code>angrt<\/code><\/td>\r\n\t\t\t<td><code>0221F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angrtvb;<\/td>\r\n\t\t\t<td><code>angrtvb<\/code><\/td>\r\n\t\t\t<td><code>022BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angrtvbd;<\/td>\r\n\t\t\t<td><code>angrtvbd<\/code><\/td>\r\n\t\t\t<td><code>0299D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angsph;<\/td>\r\n\t\t\t<td><code>angsph<\/code><\/td>\r\n\t\t\t<td><code>02222<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angst;<\/td>\r\n\t\t\t<td><code>angst<\/code><\/td>\r\n\t\t\t<td><code>000C5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&angzarr;<\/td>\r\n\t\t\t<td><code>angzarr<\/code><\/td>\r\n\t\t\t<td><code>0237C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Aogon;<\/td>\r\n\t\t\t<td><code>Aogon<\/code><\/td>\r\n\t\t\t<td><code>00104<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aogon;<\/td>\r\n\t\t\t<td><code>aogon<\/code><\/td>\r\n\t\t\t<td><code>00105<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Aopf;<\/td>\r\n\t\t\t<td><code>Aopf<\/code><\/td>\r\n\t\t\t<td><code>1D538<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aopf;<\/td>\r\n\t\t\t<td><code>aopf<\/code><\/td>\r\n\t\t\t<td><code>1D552<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ap;<\/td>\r\n\t\t\t<td><code>ap<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&apacir;<\/td>\r\n\t\t\t<td><code>apacir<\/code><\/td>\r\n\t\t\t<td><code>02A6F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&apE;<\/td>\r\n\t\t\t<td><code>apE<\/code><\/td>\r\n\t\t\t<td><code>02A70<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ape;<\/td>\r\n\t\t\t<td><code>ape<\/code><\/td>\r\n\t\t\t<td><code>0224A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&apid;<\/td>\r\n\t\t\t<td><code>apid<\/code><\/td>\r\n\t\t\t<td><code>0224B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&apos;<\/td>\r\n\t\t\t<td><code>apos<\/code><\/td>\r\n\t\t\t<td><code>00027<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ApplyFunction;<\/td>\r\n\t\t\t<td><code>ApplyFunction<\/code><\/td>\r\n\t\t\t<td><code>02061<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&approx;<\/td>\r\n\t\t\t<td><code>approx<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&approxeq;<\/td>\r\n\t\t\t<td><code>approxeq<\/code><\/td>\r\n\t\t\t<td><code>0224A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Aring;<\/td>\r\n\t\t\t<td><code>Aring<\/code><\/td>\r\n\t\t\t<td><code>000C5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&aring;<\/td>\r\n\t\t\t<td><code>aring<\/code><\/td>\r\n\t\t\t<td><code>000E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ascr;<\/td>\r\n\t\t\t<td><code>Ascr<\/code><\/td>\r\n\t\t\t<td><code>1D49C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ascr;<\/td>\r\n\t\t\t<td><code>ascr<\/code><\/td>\r\n\t\t\t<td><code>1D4B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Assign;<\/td>\r\n\t\t\t<td><code>Assign<\/code><\/td>\r\n\t\t\t<td><code>02254<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ast;<\/td>\r\n\t\t\t<td><code>ast<\/code><\/td>\r\n\t\t\t<td><code>0002A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&asymp;<\/td>\r\n\t\t\t<td><code>asymp<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&asympeq;<\/td>\r\n\t\t\t<td><code>asympeq<\/code><\/td>\r\n\t\t\t<td><code>0224D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Atilde;<\/td>\r\n\t\t\t<td><code>Atilde<\/code><\/td>\r\n\t\t\t<td><code>000C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&atilde;<\/td>\r\n\t\t\t<td><code>atilde<\/code><\/td>\r\n\t\t\t<td><code>000E3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Auml;<\/td>\r\n\t\t\t<td><code>Auml<\/code><\/td>\r\n\t\t\t<td><code>000C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&auml;<\/td>\r\n\t\t\t<td><code>auml<\/code><\/td>\r\n\t\t\t<td><code>000E4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&awconint;<\/td>\r\n\t\t\t<td><code>awconint<\/code><\/td>\r\n\t\t\t<td><code>02233<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&awint;<\/td>\r\n\t\t\t<td><code>awint<\/code><\/td>\r\n\t\t\t<td><code>02A11<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-a","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"143","title":"[HTML5 Entities] B","post":"<p>All HTML5 entities starting with&nbsp;<strong>B<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&backcong;<\/td>\r\n\t\t\t<td><code>backcong<\/code><\/td>\r\n\t\t\t<td><code>0224C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&backepsilon;<\/td>\r\n\t\t\t<td><code>backepsilon<\/code><\/td>\r\n\t\t\t<td><code>003F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&backprime;<\/td>\r\n\t\t\t<td><code>backprime<\/code><\/td>\r\n\t\t\t<td><code>02035<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&backsim;<\/td>\r\n\t\t\t<td><code>backsim<\/code><\/td>\r\n\t\t\t<td><code>0223D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&backsimeq;<\/td>\r\n\t\t\t<td><code>backsimeq<\/code><\/td>\r\n\t\t\t<td><code>022CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Backslash;<\/td>\r\n\t\t\t<td><code>Backslash<\/code><\/td>\r\n\t\t\t<td><code>02216<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Barv;<\/td>\r\n\t\t\t<td><code>Barv<\/code><\/td>\r\n\t\t\t<td><code>02AE7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&barvee;<\/td>\r\n\t\t\t<td><code>barvee<\/code><\/td>\r\n\t\t\t<td><code>022BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&barwedge;<\/td>\r\n\t\t\t<td><code>barwedge<\/code><\/td>\r\n\t\t\t<td><code>02305<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bbrk;<\/td>\r\n\t\t\t<td><code>bbrk<\/code><\/td>\r\n\t\t\t<td><code>023B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bbrktbrk;<\/td>\r\n\t\t\t<td><code>bbrktbrk<\/code><\/td>\r\n\t\t\t<td><code>023B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bcong;<\/td>\r\n\t\t\t<td><code>bcong<\/code><\/td>\r\n\t\t\t<td><code>0224C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bcy;<\/td>\r\n\t\t\t<td><code>Bcy<\/code><\/td>\r\n\t\t\t<td><code>00411<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bcy;<\/td>\r\n\t\t\t<td><code>bcy<\/code><\/td>\r\n\t\t\t<td><code>00431<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bdquo;<\/td>\r\n\t\t\t<td><code>bdquo<\/code><\/td>\r\n\t\t\t<td><code>0201E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&because;<\/td>\r\n\t\t\t<td><code>because<\/code><\/td>\r\n\t\t\t<td><code>02235<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bemptyv;<\/td>\r\n\t\t\t<td><code>bemptyv<\/code><\/td>\r\n\t\t\t<td><code>029B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bepsi;<\/td>\r\n\t\t\t<td><code>bepsi<\/code><\/td>\r\n\t\t\t<td><code>003F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bernou;<\/td>\r\n\t\t\t<td><code>bernou<\/code><\/td>\r\n\t\t\t<td><code>0212C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bernoullis;<\/td>\r\n\t\t\t<td><code>Bernoullis<\/code><\/td>\r\n\t\t\t<td><code>0212C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Beta;<\/td>\r\n\t\t\t<td><code>Beta<\/code><\/td>\r\n\t\t\t<td><code>00392<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&beta;<\/td>\r\n\t\t\t<td><code>beta<\/code><\/td>\r\n\t\t\t<td><code>003B2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&beth;<\/td>\r\n\t\t\t<td><code>beth<\/code><\/td>\r\n\t\t\t<td><code>02136<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&between;<\/td>\r\n\t\t\t<td><code>between<\/code><\/td>\r\n\t\t\t<td><code>0226C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bfr;<\/td>\r\n\t\t\t<td><code>Bfr<\/code><\/td>\r\n\t\t\t<td><code>1D505<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bfr;<\/td>\r\n\t\t\t<td><code>bfr<\/code><\/td>\r\n\t\t\t<td><code>1D51F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigcap;<\/td>\r\n\t\t\t<td><code>bigcap<\/code><\/td>\r\n\t\t\t<td><code>022C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigcirc;<\/td>\r\n\t\t\t<td><code>bigcirc<\/code><\/td>\r\n\t\t\t<td><code>025EF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigcup;<\/td>\r\n\t\t\t<td><code>bigcup<\/code><\/td>\r\n\t\t\t<td><code>022C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigodot;<\/td>\r\n\t\t\t<td><code>bigodot<\/code><\/td>\r\n\t\t\t<td><code>02A00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigoplus;<\/td>\r\n\t\t\t<td><code>bigoplus<\/code><\/td>\r\n\t\t\t<td><code>02A01<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigotimes;<\/td>\r\n\t\t\t<td><code>bigotimes<\/code><\/td>\r\n\t\t\t<td><code>02A02<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigsqcup;<\/td>\r\n\t\t\t<td><code>bigsqcup<\/code><\/td>\r\n\t\t\t<td><code>02A06<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigstar;<\/td>\r\n\t\t\t<td><code>bigstar<\/code><\/td>\r\n\t\t\t<td><code>02605<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigtriangledown;<\/td>\r\n\t\t\t<td><code>bigtriangledown<\/code><\/td>\r\n\t\t\t<td><code>025BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigtriangleup;<\/td>\r\n\t\t\t<td><code>bigtriangleup<\/code><\/td>\r\n\t\t\t<td><code>025B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&biguplus;<\/td>\r\n\t\t\t<td><code>biguplus<\/code><\/td>\r\n\t\t\t<td><code>02A04<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigvee;<\/td>\r\n\t\t\t<td><code>bigvee<\/code><\/td>\r\n\t\t\t<td><code>022C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bigwedge;<\/td>\r\n\t\t\t<td><code>bigwedge<\/code><\/td>\r\n\t\t\t<td><code>022C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bkarow;<\/td>\r\n\t\t\t<td><code>bkarow<\/code><\/td>\r\n\t\t\t<td><code>0290D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacklozenge;<\/td>\r\n\t\t\t<td><code>blacklozenge<\/code><\/td>\r\n\t\t\t<td><code>029EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacksquare;<\/td>\r\n\t\t\t<td><code>blacksquare<\/code><\/td>\r\n\t\t\t<td><code>025AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacktriangle;<\/td>\r\n\t\t\t<td><code>blacktriangle<\/code><\/td>\r\n\t\t\t<td><code>025B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacktriangledown;<\/td>\r\n\t\t\t<td><code>blacktriangledown<\/code><\/td>\r\n\t\t\t<td><code>025BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacktriangleleft;<\/td>\r\n\t\t\t<td><code>blacktriangleleft<\/code><\/td>\r\n\t\t\t<td><code>025C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blacktriangleright;<\/td>\r\n\t\t\t<td><code>blacktriangleright<\/code><\/td>\r\n\t\t\t<td><code>025B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blank;<\/td>\r\n\t\t\t<td><code>blank<\/code><\/td>\r\n\t\t\t<td><code>02423<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blk12;<\/td>\r\n\t\t\t<td><code>blk12<\/code><\/td>\r\n\t\t\t<td><code>02592<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blk14;<\/td>\r\n\t\t\t<td><code>blk14<\/code><\/td>\r\n\t\t\t<td><code>02591<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&blk34;<\/td>\r\n\t\t\t<td><code>blk34<\/code><\/td>\r\n\t\t\t<td><code>02593<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&block;<\/td>\r\n\t\t\t<td><code>block<\/code><\/td>\r\n\t\t\t<td><code>02588<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bne;<\/td>\r\n\t\t\t<td><code>bne<\/code><\/td>\r\n\t\t\t<td><code>0003D 020E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bnequiv;<\/td>\r\n\t\t\t<td><code>bnequiv<\/code><\/td>\r\n\t\t\t<td><code>02261 020E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bNot;<\/td>\r\n\t\t\t<td><code>bNot<\/code><\/td>\r\n\t\t\t<td><code>02AED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bnot;<\/td>\r\n\t\t\t<td><code>bnot<\/code><\/td>\r\n\t\t\t<td><code>02310<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bopf;<\/td>\r\n\t\t\t<td><code>Bopf<\/code><\/td>\r\n\t\t\t<td><code>1D539<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bopf;<\/td>\r\n\t\t\t<td><code>bopf<\/code><\/td>\r\n\t\t\t<td><code>1D553<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bot;<\/td>\r\n\t\t\t<td><code>bot<\/code><\/td>\r\n\t\t\t<td><code>022A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bottom;<\/td>\r\n\t\t\t<td><code>bottom<\/code><\/td>\r\n\t\t\t<td><code>022A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bowtie;<\/td>\r\n\t\t\t<td><code>bowtie<\/code><\/td>\r\n\t\t\t<td><code>022C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxbox;<\/td>\r\n\t\t\t<td><code>boxbox<\/code><\/td>\r\n\t\t\t<td><code>029C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxDL;<\/td>\r\n\t\t\t<td><code>boxDL<\/code><\/td>\r\n\t\t\t<td><code>02557<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxDl;<\/td>\r\n\t\t\t<td><code>boxDl<\/code><\/td>\r\n\t\t\t<td><code>02556<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxdL;<\/td>\r\n\t\t\t<td><code>boxdL<\/code><\/td>\r\n\t\t\t<td><code>02555<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxdl;<\/td>\r\n\t\t\t<td><code>boxdl<\/code><\/td>\r\n\t\t\t<td><code>02510<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxDR;<\/td>\r\n\t\t\t<td><code>boxDR<\/code><\/td>\r\n\t\t\t<td><code>02554<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxDr;<\/td>\r\n\t\t\t<td><code>boxDr<\/code><\/td>\r\n\t\t\t<td><code>02553<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxdR;<\/td>\r\n\t\t\t<td><code>boxdR<\/code><\/td>\r\n\t\t\t<td><code>02552<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxdr;<\/td>\r\n\t\t\t<td><code>boxdr<\/code><\/td>\r\n\t\t\t<td><code>0250C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxH;<\/td>\r\n\t\t\t<td><code>boxH<\/code><\/td>\r\n\t\t\t<td><code>02550<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxh;<\/td>\r\n\t\t\t<td><code>boxh<\/code><\/td>\r\n\t\t\t<td><code>02500<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxHD;<\/td>\r\n\t\t\t<td><code>boxHD<\/code><\/td>\r\n\t\t\t<td><code>02566<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxHd;<\/td>\r\n\t\t\t<td><code>boxHd<\/code><\/td>\r\n\t\t\t<td><code>02564<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxhD;<\/td>\r\n\t\t\t<td><code>boxhD<\/code><\/td>\r\n\t\t\t<td><code>02565<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxhd;<\/td>\r\n\t\t\t<td><code>boxhd<\/code><\/td>\r\n\t\t\t<td><code>0252C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxHU;<\/td>\r\n\t\t\t<td><code>boxHU<\/code><\/td>\r\n\t\t\t<td><code>02569<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxHu;<\/td>\r\n\t\t\t<td><code>boxHu<\/code><\/td>\r\n\t\t\t<td><code>02567<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxhU;<\/td>\r\n\t\t\t<td><code>boxhU<\/code><\/td>\r\n\t\t\t<td><code>02568<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxhu;<\/td>\r\n\t\t\t<td><code>boxhu<\/code><\/td>\r\n\t\t\t<td><code>02534<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxminus;<\/td>\r\n\t\t\t<td><code>boxminus<\/code><\/td>\r\n\t\t\t<td><code>0229F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxplus;<\/td>\r\n\t\t\t<td><code>boxplus<\/code><\/td>\r\n\t\t\t<td><code>0229E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxtimes;<\/td>\r\n\t\t\t<td><code>boxtimes<\/code><\/td>\r\n\t\t\t<td><code>022A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxUL;<\/td>\r\n\t\t\t<td><code>boxUL<\/code><\/td>\r\n\t\t\t<td><code>0255D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxUl;<\/td>\r\n\t\t\t<td><code>boxUl<\/code><\/td>\r\n\t\t\t<td><code>0255C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxuL;<\/td>\r\n\t\t\t<td><code>boxuL<\/code><\/td>\r\n\t\t\t<td><code>0255B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxul;<\/td>\r\n\t\t\t<td><code>boxul<\/code><\/td>\r\n\t\t\t<td><code>02518<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxUR;<\/td>\r\n\t\t\t<td><code>boxUR<\/code><\/td>\r\n\t\t\t<td><code>0255A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxUr;<\/td>\r\n\t\t\t<td><code>boxUr<\/code><\/td>\r\n\t\t\t<td><code>02559<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxuR;<\/td>\r\n\t\t\t<td><code>boxuR<\/code><\/td>\r\n\t\t\t<td><code>02558<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxur;<\/td>\r\n\t\t\t<td><code>boxur<\/code><\/td>\r\n\t\t\t<td><code>02514<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxV;<\/td>\r\n\t\t\t<td><code>boxV<\/code><\/td>\r\n\t\t\t<td><code>02551<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxv;<\/td>\r\n\t\t\t<td><code>boxv<\/code><\/td>\r\n\t\t\t<td><code>02502<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVH;<\/td>\r\n\t\t\t<td><code>boxVH<\/code><\/td>\r\n\t\t\t<td><code>0256C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVh;<\/td>\r\n\t\t\t<td><code>boxVh<\/code><\/td>\r\n\t\t\t<td><code>0256B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvH;<\/td>\r\n\t\t\t<td><code>boxvH<\/code><\/td>\r\n\t\t\t<td><code>0256A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvh;<\/td>\r\n\t\t\t<td><code>boxvh<\/code><\/td>\r\n\t\t\t<td><code>0253C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVL;<\/td>\r\n\t\t\t<td><code>boxVL<\/code><\/td>\r\n\t\t\t<td><code>02563<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVl;<\/td>\r\n\t\t\t<td><code>boxVl<\/code><\/td>\r\n\t\t\t<td><code>02562<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvL;<\/td>\r\n\t\t\t<td><code>boxvL<\/code><\/td>\r\n\t\t\t<td><code>02561<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvl;<\/td>\r\n\t\t\t<td><code>boxvl<\/code><\/td>\r\n\t\t\t<td><code>02524<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVR;<\/td>\r\n\t\t\t<td><code>boxVR<\/code><\/td>\r\n\t\t\t<td><code>02560<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxVr;<\/td>\r\n\t\t\t<td><code>boxVr<\/code><\/td>\r\n\t\t\t<td><code>0255F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvR;<\/td>\r\n\t\t\t<td><code>boxvR<\/code><\/td>\r\n\t\t\t<td><code>0255E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&boxvr;<\/td>\r\n\t\t\t<td><code>boxvr<\/code><\/td>\r\n\t\t\t<td><code>0251C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bprime;<\/td>\r\n\t\t\t<td><code>bprime<\/code><\/td>\r\n\t\t\t<td><code>02035<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Breve;<\/td>\r\n\t\t\t<td><code>Breve<\/code><\/td>\r\n\t\t\t<td><code>002D8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&breve;<\/td>\r\n\t\t\t<td><code>breve<\/code><\/td>\r\n\t\t\t<td><code>002D8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&brvbar;<\/td>\r\n\t\t\t<td><code>brvbar<\/code><\/td>\r\n\t\t\t<td><code>000A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bscr;<\/td>\r\n\t\t\t<td><code>Bscr<\/code><\/td>\r\n\t\t\t<td><code>0212C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bscr;<\/td>\r\n\t\t\t<td><code>bscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsemi;<\/td>\r\n\t\t\t<td><code>bsemi<\/code><\/td>\r\n\t\t\t<td><code>0204F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsim;<\/td>\r\n\t\t\t<td><code>bsim<\/code><\/td>\r\n\t\t\t<td><code>0223D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsime;<\/td>\r\n\t\t\t<td><code>bsime<\/code><\/td>\r\n\t\t\t<td><code>022CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsol;<\/td>\r\n\t\t\t<td><code>bsol<\/code><\/td>\r\n\t\t\t<td><code>0005C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsolb;<\/td>\r\n\t\t\t<td><code>bsolb<\/code><\/td>\r\n\t\t\t<td><code>029C5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bsolhsub;<\/td>\r\n\t\t\t<td><code>bsolhsub<\/code><\/td>\r\n\t\t\t<td><code>027C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bull;<\/td>\r\n\t\t\t<td><code>bull<\/code><\/td>\r\n\t\t\t<td><code>02022<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bullet;<\/td>\r\n\t\t\t<td><code>bullet<\/code><\/td>\r\n\t\t\t<td><code>02022<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bump;<\/td>\r\n\t\t\t<td><code>bump<\/code><\/td>\r\n\t\t\t<td><code>0224E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bumpE;<\/td>\r\n\t\t\t<td><code>bumpE<\/code><\/td>\r\n\t\t\t<td><code>02AAE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bumpe;<\/td>\r\n\t\t\t<td><code>bumpe<\/code><\/td>\r\n\t\t\t<td><code>0224F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Bumpeq;<\/td>\r\n\t\t\t<td><code>Bumpeq<\/code><\/td>\r\n\t\t\t<td><code>0224E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&bumpeq;<\/td>\r\n\t\t\t<td><code>bumpeq<\/code><\/td>\r\n\t\t\t<td><code>0224F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-b","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"144","title":"[HTML5 Entities] C","post":"<p>All HTML5 entities starting with&nbsp;<strong>C<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cacute;<\/td>\r\n\t\t\t<td><code>Cacute<\/code><\/td>\r\n\t\t\t<td><code>00106<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cacute;<\/td>\r\n\t\t\t<td><code>cacute<\/code><\/td>\r\n\t\t\t<td><code>00107<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cap;<\/td>\r\n\t\t\t<td><code>Cap<\/code><\/td>\r\n\t\t\t<td><code>022D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cap;<\/td>\r\n\t\t\t<td><code>cap<\/code><\/td>\r\n\t\t\t<td><code>02229<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&capand;<\/td>\r\n\t\t\t<td><code>capand<\/code><\/td>\r\n\t\t\t<td><code>02A44<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&capbrcup;<\/td>\r\n\t\t\t<td><code>capbrcup<\/code><\/td>\r\n\t\t\t<td><code>02A49<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&capcap;<\/td>\r\n\t\t\t<td><code>capcap<\/code><\/td>\r\n\t\t\t<td><code>02A4B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&capcup;<\/td>\r\n\t\t\t<td><code>capcup<\/code><\/td>\r\n\t\t\t<td><code>02A47<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&capdot;<\/td>\r\n\t\t\t<td><code>capdot<\/code><\/td>\r\n\t\t\t<td><code>02A40<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CapitalDifferentialD;<\/td>\r\n\t\t\t<td><code>CapitalDifferentialD<\/code><\/td>\r\n\t\t\t<td><code>02145<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&caps;<\/td>\r\n\t\t\t<td><code>caps<\/code><\/td>\r\n\t\t\t<td><code>02229 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&caret;<\/td>\r\n\t\t\t<td><code>caret<\/code><\/td>\r\n\t\t\t<td><code>02041<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&caron;<\/td>\r\n\t\t\t<td><code>caron<\/code><\/td>\r\n\t\t\t<td><code>002C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cayleys;<\/td>\r\n\t\t\t<td><code>Cayleys<\/code><\/td>\r\n\t\t\t<td><code>0212D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccaps;<\/td>\r\n\t\t\t<td><code>ccaps<\/code><\/td>\r\n\t\t\t<td><code>02A4D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ccaron;<\/td>\r\n\t\t\t<td><code>Ccaron<\/code><\/td>\r\n\t\t\t<td><code>0010C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccaron;<\/td>\r\n\t\t\t<td><code>ccaron<\/code><\/td>\r\n\t\t\t<td><code>0010D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ccedil;<\/td>\r\n\t\t\t<td><code>Ccedil<\/code><\/td>\r\n\t\t\t<td><code>000C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccedil;<\/td>\r\n\t\t\t<td><code>ccedil<\/code><\/td>\r\n\t\t\t<td><code>000E7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ccirc;<\/td>\r\n\t\t\t<td><code>Ccirc<\/code><\/td>\r\n\t\t\t<td><code>00108<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccirc;<\/td>\r\n\t\t\t<td><code>ccirc<\/code><\/td>\r\n\t\t\t<td><code>00109<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cconint;<\/td>\r\n\t\t\t<td><code>Cconint<\/code><\/td>\r\n\t\t\t<td><code>02230<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccups;<\/td>\r\n\t\t\t<td><code>ccups<\/code><\/td>\r\n\t\t\t<td><code>02A4C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ccupssm;<\/td>\r\n\t\t\t<td><code>ccupssm<\/code><\/td>\r\n\t\t\t<td><code>02A50<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cdot;<\/td>\r\n\t\t\t<td><code>Cdot<\/code><\/td>\r\n\t\t\t<td><code>0010A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cdot;<\/td>\r\n\t\t\t<td><code>cdot<\/code><\/td>\r\n\t\t\t<td><code>0010B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cedil;<\/td>\r\n\t\t\t<td><code>cedil<\/code><\/td>\r\n\t\t\t<td><code>000B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cedilla;<\/td>\r\n\t\t\t<td><code>Cedilla<\/code><\/td>\r\n\t\t\t<td><code>000B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cemptyv;<\/td>\r\n\t\t\t<td><code>cemptyv<\/code><\/td>\r\n\t\t\t<td><code>029B2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cent;<\/td>\r\n\t\t\t<td><code>cent<\/code><\/td>\r\n\t\t\t<td><code>000A2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CenterDot;<\/td>\r\n\t\t\t<td><code>CenterDot<\/code><\/td>\r\n\t\t\t<td><code>000B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&centerdot;<\/td>\r\n\t\t\t<td><code>centerdot<\/code><\/td>\r\n\t\t\t<td><code>000B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cfr;<\/td>\r\n\t\t\t<td><code>Cfr<\/code><\/td>\r\n\t\t\t<td><code>0212D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cfr;<\/td>\r\n\t\t\t<td><code>cfr<\/code><\/td>\r\n\t\t\t<td><code>1D520<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CHcy;<\/td>\r\n\t\t\t<td><code>CHcy<\/code><\/td>\r\n\t\t\t<td><code>00427<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&chcy;<\/td>\r\n\t\t\t<td><code>chcy<\/code><\/td>\r\n\t\t\t<td><code>00447<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&check;<\/td>\r\n\t\t\t<td><code>check<\/code><\/td>\r\n\t\t\t<td><code>02713<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&checkmark;<\/td>\r\n\t\t\t<td><code>checkmark<\/code><\/td>\r\n\t\t\t<td><code>02713<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Chi;<\/td>\r\n\t\t\t<td><code>Chi<\/code><\/td>\r\n\t\t\t<td><code>003A7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&chi;<\/td>\r\n\t\t\t<td><code>chi<\/code><\/td>\r\n\t\t\t<td><code>003C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cir;<\/td>\r\n\t\t\t<td><code>cir<\/code><\/td>\r\n\t\t\t<td><code>025CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circ;<\/td>\r\n\t\t\t<td><code>circ<\/code><\/td>\r\n\t\t\t<td><code>002C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circeq;<\/td>\r\n\t\t\t<td><code>circeq<\/code><\/td>\r\n\t\t\t<td><code>02257<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circlearrowleft;<\/td>\r\n\t\t\t<td><code>circlearrowleft<\/code><\/td>\r\n\t\t\t<td><code>021BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circlearrowright;<\/td>\r\n\t\t\t<td><code>circlearrowright<\/code><\/td>\r\n\t\t\t<td><code>021BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circledast;<\/td>\r\n\t\t\t<td><code>circledast<\/code><\/td>\r\n\t\t\t<td><code>0229B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circledcirc;<\/td>\r\n\t\t\t<td><code>circledcirc<\/code><\/td>\r\n\t\t\t<td><code>0229A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circleddash;<\/td>\r\n\t\t\t<td><code>circleddash<\/code><\/td>\r\n\t\t\t<td><code>0229D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CircleDot;<\/td>\r\n\t\t\t<td><code>CircleDot<\/code><\/td>\r\n\t\t\t<td><code>02299<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circledR;<\/td>\r\n\t\t\t<td><code>circledR<\/code><\/td>\r\n\t\t\t<td><code>000AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&circledS;<\/td>\r\n\t\t\t<td><code>circledS<\/code><\/td>\r\n\t\t\t<td><code>024C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CircleMinus;<\/td>\r\n\t\t\t<td><code>CircleMinus<\/code><\/td>\r\n\t\t\t<td><code>02296<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CirclePlus;<\/td>\r\n\t\t\t<td><code>CirclePlus<\/code><\/td>\r\n\t\t\t<td><code>02295<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CircleTimes;<\/td>\r\n\t\t\t<td><code>CircleTimes<\/code><\/td>\r\n\t\t\t<td><code>02297<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cirE;<\/td>\r\n\t\t\t<td><code>cirE<\/code><\/td>\r\n\t\t\t<td><code>029C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cire;<\/td>\r\n\t\t\t<td><code>cire<\/code><\/td>\r\n\t\t\t<td><code>02257<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cirfnint;<\/td>\r\n\t\t\t<td><code>cirfnint<\/code><\/td>\r\n\t\t\t<td><code>02A10<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cirmid;<\/td>\r\n\t\t\t<td><code>cirmid<\/code><\/td>\r\n\t\t\t<td><code>02AEF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cirscir;<\/td>\r\n\t\t\t<td><code>cirscir<\/code><\/td>\r\n\t\t\t<td><code>029C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cwconint;<\/td>\r\n\t\t\t<td><code>cwconint<\/code><\/td>\r\n\t\t\t<td><code>02232<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ClockwiseContourIntegral;<\/td>\r\n\t\t\t<td><code>ClockwiseContourIntegral<\/code><\/td>\r\n\t\t\t<td><code>02232<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CloseCurlyDoubleQuote;<\/td>\r\n\t\t\t<td><code>CloseCurlyDoubleQuote<\/code><\/td>\r\n\t\t\t<td><code>0201D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CloseCurlyQuote;<\/td>\r\n\t\t\t<td><code>CloseCurlyQuote<\/code><\/td>\r\n\t\t\t<td><code>02019<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&clubs;<\/td>\r\n\t\t\t<td><code>clubs<\/code><\/td>\r\n\t\t\t<td><code>02663<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&clubsuit;<\/td>\r\n\t\t\t<td><code>clubsuit<\/code><\/td>\r\n\t\t\t<td><code>02663<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Colon;<\/td>\r\n\t\t\t<td><code>Colon<\/code><\/td>\r\n\t\t\t<td><code>02237<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&colon;<\/td>\r\n\t\t\t<td><code>colon<\/code><\/td>\r\n\t\t\t<td><code>0003A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Colone;<\/td>\r\n\t\t\t<td><code>Colone<\/code><\/td>\r\n\t\t\t<td><code>02A74<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&colone;<\/td>\r\n\t\t\t<td><code>colone<\/code><\/td>\r\n\t\t\t<td><code>02254<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&coloneq;<\/td>\r\n\t\t\t<td><code>coloneq<\/code><\/td>\r\n\t\t\t<td><code>02254<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&comma;<\/td>\r\n\t\t\t<td><code>comma<\/code><\/td>\r\n\t\t\t<td><code>0002C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&commat;<\/td>\r\n\t\t\t<td><code>commat<\/code><\/td>\r\n\t\t\t<td><code>00040<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&comp;<\/td>\r\n\t\t\t<td><code>comp<\/code><\/td>\r\n\t\t\t<td><code>02201<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&compfn;<\/td>\r\n\t\t\t<td><code>compfn<\/code><\/td>\r\n\t\t\t<td><code>02218<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&complement;<\/td>\r\n\t\t\t<td><code>complement<\/code><\/td>\r\n\t\t\t<td><code>02201<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&complexes;<\/td>\r\n\t\t\t<td><code>complexes<\/code><\/td>\r\n\t\t\t<td><code>02102<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cong;<\/td>\r\n\t\t\t<td><code>cong<\/code><\/td>\r\n\t\t\t<td><code>02245<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&congdot;<\/td>\r\n\t\t\t<td><code>congdot<\/code><\/td>\r\n\t\t\t<td><code>02A6D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Congruent;<\/td>\r\n\t\t\t<td><code>Congruent<\/code><\/td>\r\n\t\t\t<td><code>02261<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Conint;<\/td>\r\n\t\t\t<td><code>Conint<\/code><\/td>\r\n\t\t\t<td><code>0222F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&conint;<\/td>\r\n\t\t\t<td><code>conint<\/code><\/td>\r\n\t\t\t<td><code>0222E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ContourIntegral;<\/td>\r\n\t\t\t<td><code>ContourIntegral<\/code><\/td>\r\n\t\t\t<td><code>0222E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Copf;<\/td>\r\n\t\t\t<td><code>Copf<\/code><\/td>\r\n\t\t\t<td><code>02102<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&copf;<\/td>\r\n\t\t\t<td><code>copf<\/code><\/td>\r\n\t\t\t<td><code>1D554<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&coprod;<\/td>\r\n\t\t\t<td><code>coprod<\/code><\/td>\r\n\t\t\t<td><code>02210<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Coproduct;<\/td>\r\n\t\t\t<td><code>Coproduct<\/code><\/td>\r\n\t\t\t<td><code>02210<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&copy;<\/td>\r\n\t\t\t<td><code>copy<\/code><\/td>\r\n\t\t\t<td><code>000A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&copysr;<\/td>\r\n\t\t\t<td><code>copysr<\/code><\/td>\r\n\t\t\t<td><code>02117<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&crarr;<\/td>\r\n\t\t\t<td><code>crarr<\/code><\/td>\r\n\t\t\t<td><code>021B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cross;<\/td>\r\n\t\t\t<td><code>Cross<\/code><\/td>\r\n\t\t\t<td><code>02A2F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cross;<\/td>\r\n\t\t\t<td><code>cross<\/code><\/td>\r\n\t\t\t<td><code>02717<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cscr;<\/td>\r\n\t\t\t<td><code>Cscr<\/code><\/td>\r\n\t\t\t<td><code>1D49E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cscr;<\/td>\r\n\t\t\t<td><code>cscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&csub;<\/td>\r\n\t\t\t<td><code>csub<\/code><\/td>\r\n\t\t\t<td><code>02ACF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&csube;<\/td>\r\n\t\t\t<td><code>csube<\/code><\/td>\r\n\t\t\t<td><code>02AD1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&csup;<\/td>\r\n\t\t\t<td><code>csup<\/code><\/td>\r\n\t\t\t<td><code>02AD0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&csupe;<\/td>\r\n\t\t\t<td><code>csupe<\/code><\/td>\r\n\t\t\t<td><code>02AD2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ctdot;<\/td>\r\n\t\t\t<td><code>ctdot<\/code><\/td>\r\n\t\t\t<td><code>022EF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cudarrl;<\/td>\r\n\t\t\t<td><code>cudarrl<\/code><\/td>\r\n\t\t\t<td><code>02938<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cudarrr;<\/td>\r\n\t\t\t<td><code>cudarrr<\/code><\/td>\r\n\t\t\t<td><code>02935<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cuepr;<\/td>\r\n\t\t\t<td><code>cuepr<\/code><\/td>\r\n\t\t\t<td><code>022DE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cuesc;<\/td>\r\n\t\t\t<td><code>cuesc<\/code><\/td>\r\n\t\t\t<td><code>022DF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cularr;<\/td>\r\n\t\t\t<td><code>cularr<\/code><\/td>\r\n\t\t\t<td><code>021B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cularrp;<\/td>\r\n\t\t\t<td><code>cularrp<\/code><\/td>\r\n\t\t\t<td><code>0293D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Cup;<\/td>\r\n\t\t\t<td><code>Cup<\/code><\/td>\r\n\t\t\t<td><code>022D3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cup;<\/td>\r\n\t\t\t<td><code>cup<\/code><\/td>\r\n\t\t\t<td><code>0222A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cupbrcap;<\/td>\r\n\t\t\t<td><code>cupbrcap<\/code><\/td>\r\n\t\t\t<td><code>02A48<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&CupCap;<\/td>\r\n\t\t\t<td><code>CupCap<\/code><\/td>\r\n\t\t\t<td><code>0224D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cupcap;<\/td>\r\n\t\t\t<td><code>cupcap<\/code><\/td>\r\n\t\t\t<td><code>02A46<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cupcup;<\/td>\r\n\t\t\t<td><code>cupcup<\/code><\/td>\r\n\t\t\t<td><code>02A4A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cupdot;<\/td>\r\n\t\t\t<td><code>cupdot<\/code><\/td>\r\n\t\t\t<td><code>0228D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cupor;<\/td>\r\n\t\t\t<td><code>cupor<\/code><\/td>\r\n\t\t\t<td><code>02A45<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cups;<\/td>\r\n\t\t\t<td><code>cups<\/code><\/td>\r\n\t\t\t<td><code>0222A + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curarr;<\/td>\r\n\t\t\t<td><code>curarr<\/code><\/td>\r\n\t\t\t<td><code>021B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curarrm;<\/td>\r\n\t\t\t<td><code>curarrm<\/code><\/td>\r\n\t\t\t<td><code>0293C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curlyeqprec;<\/td>\r\n\t\t\t<td><code>curlyeqprec<\/code><\/td>\r\n\t\t\t<td><code>022DE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curlyeqsucc;<\/td>\r\n\t\t\t<td><code>curlyeqsucc<\/code><\/td>\r\n\t\t\t<td><code>022DF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curlyvee;<\/td>\r\n\t\t\t<td><code>curlyvee<\/code><\/td>\r\n\t\t\t<td><code>022CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curlywedge;<\/td>\r\n\t\t\t<td><code>curlywedge<\/code><\/td>\r\n\t\t\t<td><code>022CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curren;<\/td>\r\n\t\t\t<td><code>curren<\/code><\/td>\r\n\t\t\t<td><code>000A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curvearrowleft;<\/td>\r\n\t\t\t<td><code>curvearrowleft<\/code><\/td>\r\n\t\t\t<td><code>021B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&curvearrowright;<\/td>\r\n\t\t\t<td><code>curvearrowright<\/code><\/td>\r\n\t\t\t<td><code>021B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cuvee;<\/td>\r\n\t\t\t<td><code>cuvee<\/code><\/td>\r\n\t\t\t<td><code>022CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cuwed;<\/td>\r\n\t\t\t<td><code>cuwed<\/code><\/td>\r\n\t\t\t<td><code>022CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cwconint;<\/td>\r\n\t\t\t<td><code>cwconint<\/code><\/td>\r\n\t\t\t<td><code>02232<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cwint;<\/td>\r\n\t\t\t<td><code>cwint<\/code><\/td>\r\n\t\t\t<td><code>02231<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&cylcty;<\/td>\r\n\t\t\t<td><code>cylcty<\/code><\/td>\r\n\t\t\t<td><code>0232D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-c","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"145","title":"[HTML5 Entities] D","post":"<p>All HTML5 entities starting with&nbsp;<strong>D<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dagger;<\/td>\r\n\t\t\t<td><code>dagger<\/code><\/td>\r\n\t\t\t<td><code>02020<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&daleth;<\/td>\r\n\t\t\t<td><code>daleth<\/code><\/td>\r\n\t\t\t<td><code>02138<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Darr;<\/td>\r\n\t\t\t<td><code>Darr<\/code><\/td>\r\n\t\t\t<td><code>021A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dArr;<\/td>\r\n\t\t\t<td><code>dArr<\/code><\/td>\r\n\t\t\t<td><code>021D3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&darr;<\/td>\r\n\t\t\t<td><code>darr<\/code><\/td>\r\n\t\t\t<td><code>02193<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dash;<\/td>\r\n\t\t\t<td><code>dash<\/code><\/td>\r\n\t\t\t<td><code>02010<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dashv;<\/td>\r\n\t\t\t<td><code>Dashv<\/code><\/td>\r\n\t\t\t<td><code>02AE4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dashv;<\/td>\r\n\t\t\t<td><code>dashv<\/code><\/td>\r\n\t\t\t<td><code>022A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dbkarow;<\/td>\r\n\t\t\t<td><code>dbkarow<\/code><\/td>\r\n\t\t\t<td><code>0290F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dblac;<\/td>\r\n\t\t\t<td><code>dblac<\/code><\/td>\r\n\t\t\t<td><code>002DD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dcaron;<\/td>\r\n\t\t\t<td><code>Dcaron<\/code><\/td>\r\n\t\t\t<td><code>0010E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dcaron;<\/td>\r\n\t\t\t<td><code>dcaron<\/code><\/td>\r\n\t\t\t<td><code>0010F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dcy;<\/td>\r\n\t\t\t<td><code>Dcy<\/code><\/td>\r\n\t\t\t<td><code>00414<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dcy;<\/td>\r\n\t\t\t<td><code>dcy<\/code><\/td>\r\n\t\t\t<td><code>00434<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DD;<\/td>\r\n\t\t\t<td><code>DD<\/code><\/td>\r\n\t\t\t<td><code>02145<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dd;<\/td>\r\n\t\t\t<td><code>dd<\/code><\/td>\r\n\t\t\t<td><code>02146<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ddagger;<\/td>\r\n\t\t\t<td><code>ddagger<\/code><\/td>\r\n\t\t\t<td><code>02021<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ddarr;<\/td>\r\n\t\t\t<td><code>ddarr<\/code><\/td>\r\n\t\t\t<td><code>021CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DDotrahd;<\/td>\r\n\t\t\t<td><code>DDotrahd<\/code><\/td>\r\n\t\t\t<td><code>02911<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ddotseq;<\/td>\r\n\t\t\t<td><code>ddotseq<\/code><\/td>\r\n\t\t\t<td><code>02A77<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&deg;<\/td>\r\n\t\t\t<td><code>deg<\/code><\/td>\r\n\t\t\t<td><code>000B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Del;<\/td>\r\n\t\t\t<td><code>Del<\/code><\/td>\r\n\t\t\t<td><code>02207<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Delta;<\/td>\r\n\t\t\t<td><code>Delta<\/code><\/td>\r\n\t\t\t<td><code>00394<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&delta;<\/td>\r\n\t\t\t<td><code>delta<\/code><\/td>\r\n\t\t\t<td><code>003B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&demptyv;<\/td>\r\n\t\t\t<td><code>demptyv<\/code><\/td>\r\n\t\t\t<td><code>029B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dfisht;<\/td>\r\n\t\t\t<td><code>dfisht<\/code><\/td>\r\n\t\t\t<td><code>0297F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dfr;<\/td>\r\n\t\t\t<td><code>Dfr<\/code><\/td>\r\n\t\t\t<td><code>1D507<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dfr;<\/td>\r\n\t\t\t<td><code>dfr<\/code><\/td>\r\n\t\t\t<td><code>1D521<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dHar;<\/td>\r\n\t\t\t<td><code>dHar<\/code><\/td>\r\n\t\t\t<td><code>02965<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dharl;<\/td>\r\n\t\t\t<td><code>dharl<\/code><\/td>\r\n\t\t\t<td><code>021C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dharr;<\/td>\r\n\t\t\t<td><code>dharr<\/code><\/td>\r\n\t\t\t<td><code>021C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DiacriticalAcute;<\/td>\r\n\t\t\t<td><code>DiacriticalAcute<\/code><\/td>\r\n\t\t\t<td><code>000B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DiacriticalDot;<\/td>\r\n\t\t\t<td><code>DiacriticalDot<\/code><\/td>\r\n\t\t\t<td><code>002D9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DiacriticalDoubleAcute;<\/td>\r\n\t\t\t<td><code>DiacriticalDoubleAcute<\/code><\/td>\r\n\t\t\t<td><code>002DD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DiacriticalGrave;<\/td>\r\n\t\t\t<td><code>DiacriticalGrave<\/code><\/td>\r\n\t\t\t<td><code>00060<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DiacriticalTilde;<\/td>\r\n\t\t\t<td><code>DiacriticalTilde<\/code><\/td>\r\n\t\t\t<td><code>002DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&diam;<\/td>\r\n\t\t\t<td><code>diam<\/code><\/td>\r\n\t\t\t<td><code>022C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Diamond;<\/td>\r\n\t\t\t<td><code>Diamond<\/code><\/td>\r\n\t\t\t<td><code>022C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&diamond;<\/td>\r\n\t\t\t<td><code>diamond<\/code><\/td>\r\n\t\t\t<td><code>022C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&diamondsuit;<\/td>\r\n\t\t\t<td><code>diamondsuit<\/code><\/td>\r\n\t\t\t<td><code>02666<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&diams;<\/td>\r\n\t\t\t<td><code>diams<\/code><\/td>\r\n\t\t\t<td><code>02666<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&die;<\/td>\r\n\t\t\t<td><code>die<\/code><\/td>\r\n\t\t\t<td><code>000A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DifferentialD;<\/td>\r\n\t\t\t<td><code>DifferentialD<\/code><\/td>\r\n\t\t\t<td><code>02146<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&digamma;<\/td>\r\n\t\t\t<td><code>digamma<\/code><\/td>\r\n\t\t\t<td><code>003DD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&disin;<\/td>\r\n\t\t\t<td><code>disin<\/code><\/td>\r\n\t\t\t<td><code>022F2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&div;<\/td>\r\n\t\t\t<td><code>div<\/code><\/td>\r\n\t\t\t<td><code>000F7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&divide;<\/td>\r\n\t\t\t<td><code>divide<\/code><\/td>\r\n\t\t\t<td><code>000F7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&divideontimes;<\/td>\r\n\t\t\t<td><code>divideontimes<\/code><\/td>\r\n\t\t\t<td><code>022C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&divonx;<\/td>\r\n\t\t\t<td><code>divonx<\/code><\/td>\r\n\t\t\t<td><code>022C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DJcy;<\/td>\r\n\t\t\t<td><code>DJcy<\/code><\/td>\r\n\t\t\t<td><code>00402<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&djcy;<\/td>\r\n\t\t\t<td><code>djcy<\/code><\/td>\r\n\t\t\t<td><code>00452<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dlcorn;<\/td>\r\n\t\t\t<td><code>dlcorn<\/code><\/td>\r\n\t\t\t<td><code>0231E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dlcrop;<\/td>\r\n\t\t\t<td><code>dlcrop<\/code><\/td>\r\n\t\t\t<td><code>0230D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dollar;<\/td>\r\n\t\t\t<td><code>dollar<\/code><\/td>\r\n\t\t\t<td><code>00024<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dopf;<\/td>\r\n\t\t\t<td><code>Dopf<\/code><\/td>\r\n\t\t\t<td><code>1D53B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dopf;<\/td>\r\n\t\t\t<td><code>dopf<\/code><\/td>\r\n\t\t\t<td><code>1D555<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dot;<\/td>\r\n\t\t\t<td><code>Dot<\/code><\/td>\r\n\t\t\t<td><code>000A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dot;<\/td>\r\n\t\t\t<td><code>dot<\/code><\/td>\r\n\t\t\t<td><code>002D9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DotDot;<\/td>\r\n\t\t\t<td><code>DotDot<\/code><\/td>\r\n\t\t\t<td><code>020DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&doteq;<\/td>\r\n\t\t\t<td><code>doteq<\/code><\/td>\r\n\t\t\t<td><code>02250<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&doteqdot;<\/td>\r\n\t\t\t<td><code>doteqdot<\/code><\/td>\r\n\t\t\t<td><code>02251<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DotEqual;<\/td>\r\n\t\t\t<td><code>DotEqual<\/code><\/td>\r\n\t\t\t<td><code>02250<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dotminus;<\/td>\r\n\t\t\t<td><code>dotminus<\/code><\/td>\r\n\t\t\t<td><code>02238<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dotplus;<\/td>\r\n\t\t\t<td><code>dotplus<\/code><\/td>\r\n\t\t\t<td><code>02214<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dotsquare;<\/td>\r\n\t\t\t<td><code>dotsquare<\/code><\/td>\r\n\t\t\t<td><code>022A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&doublebarwedge;<\/td>\r\n\t\t\t<td><code>doublebarwedge<\/code><\/td>\r\n\t\t\t<td><code>02306<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleContourIntegral;<\/td>\r\n\t\t\t<td><code>DoubleContourIntegral<\/code><\/td>\r\n\t\t\t<td><code>0222F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleDot;<\/td>\r\n\t\t\t<td><code>DoubleDot<\/code><\/td>\r\n\t\t\t<td><code>000A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleDownArrow;<\/td>\r\n\t\t\t<td><code>DoubleDownArrow<\/code><\/td>\r\n\t\t\t<td><code>021D3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLeftArrow;<\/td>\r\n\t\t\t<td><code>DoubleLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>021D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLeftRightArrow;<\/td>\r\n\t\t\t<td><code>DoubleLeftRightArrow<\/code><\/td>\r\n\t\t\t<td><code>021D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLeftTee;<\/td>\r\n\t\t\t<td><code>DoubleLeftTee<\/code><\/td>\r\n\t\t\t<td><code>02AE4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLongLeftArrow;<\/td>\r\n\t\t\t<td><code>DoubleLongLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>027F8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLongLeftRightArrow;<\/td>\r\n\t\t\t<td><code>DoubleLongLeftRightArrow<\/code><\/td>\r\n\t\t\t<td><code>027FA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleLongRightArrow;<\/td>\r\n\t\t\t<td><code>DoubleLongRightArrow<\/code><\/td>\r\n\t\t\t<td><code>027F9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleRightArrow;<\/td>\r\n\t\t\t<td><code>DoubleRightArrow<\/code><\/td>\r\n\t\t\t<td><code>021D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleRightTee;<\/td>\r\n\t\t\t<td><code>DoubleRightTee<\/code><\/td>\r\n\t\t\t<td><code>022A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleUpArrow;<\/td>\r\n\t\t\t<td><code>DoubleUpArrow<\/code><\/td>\r\n\t\t\t<td><code>021D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleUpDownArrow;<\/td>\r\n\t\t\t<td><code>DoubleUpDownArrow<\/code><\/td>\r\n\t\t\t<td><code>021D5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DoubleVerticalBar;<\/td>\r\n\t\t\t<td><code>DoubleVerticalBar<\/code><\/td>\r\n\t\t\t<td><code>02225<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownArrow;<\/td>\r\n\t\t\t<td><code>DownArrow<\/code><\/td>\r\n\t\t\t<td><code>02193<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Downarrow;<\/td>\r\n\t\t\t<td><code>Downarrow<\/code><\/td>\r\n\t\t\t<td><code>021D3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&downarrow;<\/td>\r\n\t\t\t<td><code>downarrow<\/code><\/td>\r\n\t\t\t<td><code>02193<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownArrowBar;<\/td>\r\n\t\t\t<td><code>DownArrowBar<\/code><\/td>\r\n\t\t\t<td><code>02913<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownArrowUpArrow;<\/td>\r\n\t\t\t<td><code>DownArrowUpArrow<\/code><\/td>\r\n\t\t\t<td><code>021F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownBreve;<\/td>\r\n\t\t\t<td><code>DownBreve<\/code><\/td>\r\n\t\t\t<td><code>00311<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&downdownarrows;<\/td>\r\n\t\t\t<td><code>downdownarrows<\/code><\/td>\r\n\t\t\t<td><code>021CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&downharpoonleft;<\/td>\r\n\t\t\t<td><code>downharpoonleft<\/code><\/td>\r\n\t\t\t<td><code>021C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&downharpoonright;<\/td>\r\n\t\t\t<td><code>downharpoonright<\/code><\/td>\r\n\t\t\t<td><code>021C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownLeftRightVector;<\/td>\r\n\t\t\t<td><code>DownLeftRightVector<\/code><\/td>\r\n\t\t\t<td><code>02950<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownLeftTeeVector;<\/td>\r\n\t\t\t<td><code>DownLeftTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownLeftVector;<\/td>\r\n\t\t\t<td><code>DownLeftVector<\/code><\/td>\r\n\t\t\t<td><code>021BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownLeftVectorBar;<\/td>\r\n\t\t\t<td><code>DownLeftVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02956<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownRightTeeVector;<\/td>\r\n\t\t\t<td><code>DownRightTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownRightVector;<\/td>\r\n\t\t\t<td><code>DownRightVector<\/code><\/td>\r\n\t\t\t<td><code>021C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownRightVectorBar;<\/td>\r\n\t\t\t<td><code>DownRightVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02957<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownTee;<\/td>\r\n\t\t\t<td><code>DownTee<\/code><\/td>\r\n\t\t\t<td><code>022A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DownTeeArrow;<\/td>\r\n\t\t\t<td><code>DownTeeArrow<\/code><\/td>\r\n\t\t\t<td><code>021A7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&drbkarow;<\/td>\r\n\t\t\t<td><code>drbkarow<\/code><\/td>\r\n\t\t\t<td><code>02910<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&drcorn;<\/td>\r\n\t\t\t<td><code>drcorn<\/code><\/td>\r\n\t\t\t<td><code>0231F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&drcrop;<\/td>\r\n\t\t\t<td><code>drcrop<\/code><\/td>\r\n\t\t\t<td><code>0230C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dscr;<\/td>\r\n\t\t\t<td><code>Dscr<\/code><\/td>\r\n\t\t\t<td><code>1D49F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dscr;<\/td>\r\n\t\t\t<td><code>dscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DScy;<\/td>\r\n\t\t\t<td><code>DScy<\/code><\/td>\r\n\t\t\t<td><code>00405<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dscy;<\/td>\r\n\t\t\t<td><code>dscy<\/code><\/td>\r\n\t\t\t<td><code>00455<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dsol;<\/td>\r\n\t\t\t<td><code>dsol<\/code><\/td>\r\n\t\t\t<td><code>029F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Dstrok;<\/td>\r\n\t\t\t<td><code>Dstrok<\/code><\/td>\r\n\t\t\t<td><code>00110<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dstrok;<\/td>\r\n\t\t\t<td><code>dstrok<\/code><\/td>\r\n\t\t\t<td><code>00111<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dtdot;<\/td>\r\n\t\t\t<td><code>dtdot<\/code><\/td>\r\n\t\t\t<td><code>022F1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dtri;<\/td>\r\n\t\t\t<td><code>dtri<\/code><\/td>\r\n\t\t\t<td><code>025BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dtrif;<\/td>\r\n\t\t\t<td><code>dtrif<\/code><\/td>\r\n\t\t\t<td><code>025BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&duarr;<\/td>\r\n\t\t\t<td><code>duarr<\/code><\/td>\r\n\t\t\t<td><code>021F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&duhar;<\/td>\r\n\t\t\t<td><code>duhar<\/code><\/td>\r\n\t\t\t<td><code>0296F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dwangle;<\/td>\r\n\t\t\t<td><code>dwangle<\/code><\/td>\r\n\t\t\t<td><code>029A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&DZcy;<\/td>\r\n\t\t\t<td><code>DZcy<\/code><\/td>\r\n\t\t\t<td><code>0040F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dzcy;<\/td>\r\n\t\t\t<td><code>dzcy<\/code><\/td>\r\n\t\t\t<td><code>0045F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&dzigrarr;<\/td>\r\n\t\t\t<td><code>dzigrarr<\/code><\/td>\r\n\t\t\t<td><code>027FF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-d","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"146","title":"[HTML5 Entities] E","post":"<p>All HTML5 entities starting with&nbsp;<strong>E<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Eacute;<\/td>\r\n\t\t\t<td><code>Eacute<\/code><\/td>\r\n\t\t\t<td><code>000C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eacute;<\/td>\r\n\t\t\t<td><code>eacute<\/code><\/td>\r\n\t\t\t<td><code>000E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&easter;<\/td>\r\n\t\t\t<td><code>easter<\/code><\/td>\r\n\t\t\t<td><code>02A6E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ecaron;<\/td>\r\n\t\t\t<td><code>Ecaron<\/code><\/td>\r\n\t\t\t<td><code>0011A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ecaron;<\/td>\r\n\t\t\t<td><code>ecaron<\/code><\/td>\r\n\t\t\t<td><code>0011B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ecir;<\/td>\r\n\t\t\t<td><code>ecir<\/code><\/td>\r\n\t\t\t<td><code>02256<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ecirc;<\/td>\r\n\t\t\t<td><code>Ecirc<\/code><\/td>\r\n\t\t\t<td><code>000CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ecirc;<\/td>\r\n\t\t\t<td><code>ecirc<\/code><\/td>\r\n\t\t\t<td><code>000EA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ecolon;<\/td>\r\n\t\t\t<td><code>ecolon<\/code><\/td>\r\n\t\t\t<td><code>02255<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ecy;<\/td>\r\n\t\t\t<td><code>Ecy<\/code><\/td>\r\n\t\t\t<td><code>0042D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ecy;<\/td>\r\n\t\t\t<td><code>ecy<\/code><\/td>\r\n\t\t\t<td><code>0044D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eDDot;<\/td>\r\n\t\t\t<td><code>eDDot<\/code><\/td>\r\n\t\t\t<td><code>02A77<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Edot;<\/td>\r\n\t\t\t<td><code>Edot<\/code><\/td>\r\n\t\t\t<td><code>00116<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eDot;<\/td>\r\n\t\t\t<td><code>eDot<\/code><\/td>\r\n\t\t\t<td><code>02251<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&edot;<\/td>\r\n\t\t\t<td><code>edot<\/code><\/td>\r\n\t\t\t<td><code>00117<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ee;<\/td>\r\n\t\t\t<td><code>ee<\/code><\/td>\r\n\t\t\t<td><code>02147<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&efDot;<\/td>\r\n\t\t\t<td><code>efDot<\/code><\/td>\r\n\t\t\t<td><code>02252<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Efr;<\/td>\r\n\t\t\t<td><code>Efr<\/code><\/td>\r\n\t\t\t<td><code>1D508<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&efr;<\/td>\r\n\t\t\t<td><code>efr<\/code><\/td>\r\n\t\t\t<td><code>1D522<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eg;<\/td>\r\n\t\t\t<td><code>eg<\/code><\/td>\r\n\t\t\t<td><code>02A9A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Egrave;<\/td>\r\n\t\t\t<td><code>Egrave<\/code><\/td>\r\n\t\t\t<td><code>000C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&egrave;<\/td>\r\n\t\t\t<td><code>egrave<\/code><\/td>\r\n\t\t\t<td><code>000E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&egs;<\/td>\r\n\t\t\t<td><code>egs<\/code><\/td>\r\n\t\t\t<td><code>02A96<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&egsdot;<\/td>\r\n\t\t\t<td><code>egsdot<\/code><\/td>\r\n\t\t\t<td><code>02A98<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&el;<\/td>\r\n\t\t\t<td><code>el<\/code><\/td>\r\n\t\t\t<td><code>02A99<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Element;<\/td>\r\n\t\t\t<td><code>Element<\/code><\/td>\r\n\t\t\t<td><code>02208<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&elinters;<\/td>\r\n\t\t\t<td><code>elinters<\/code><\/td>\r\n\t\t\t<td><code>023E7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ell;<\/td>\r\n\t\t\t<td><code>ell<\/code><\/td>\r\n\t\t\t<td><code>02113<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&els;<\/td>\r\n\t\t\t<td><code>els<\/code><\/td>\r\n\t\t\t<td><code>02A95<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&elsdot;<\/td>\r\n\t\t\t<td><code>elsdot<\/code><\/td>\r\n\t\t\t<td><code>02A97<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Emacr;<\/td>\r\n\t\t\t<td><code>Emacr<\/code><\/td>\r\n\t\t\t<td><code>00112<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emacr;<\/td>\r\n\t\t\t<td><code>emacr<\/code><\/td>\r\n\t\t\t<td><code>00113<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&empty;<\/td>\r\n\t\t\t<td><code>empty<\/code><\/td>\r\n\t\t\t<td><code>02205<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emptyset;<\/td>\r\n\t\t\t<td><code>emptyset<\/code><\/td>\r\n\t\t\t<td><code>02205<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&EmptySmallSquare;<\/td>\r\n\t\t\t<td><code>EmptySmallSquare<\/code><\/td>\r\n\t\t\t<td><code>025FB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emptyv;<\/td>\r\n\t\t\t<td><code>emptyv<\/code><\/td>\r\n\t\t\t<td><code>02205<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&EmptyVerySmallSquare;<\/td>\r\n\t\t\t<td><code>EmptyVerySmallSquare<\/code><\/td>\r\n\t\t\t<td><code>025AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emsp;<\/td>\r\n\t\t\t<td><code>emsp<\/code><\/td>\r\n\t\t\t<td><code>02003<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emsp13;<\/td>\r\n\t\t\t<td><code>emsp13<\/code><\/td>\r\n\t\t\t<td><code>02004<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&emsp14;<\/td>\r\n\t\t\t<td><code>emsp14<\/code><\/td>\r\n\t\t\t<td><code>02005<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ENG;<\/td>\r\n\t\t\t<td><code>ENG<\/code><\/td>\r\n\t\t\t<td><code>0014A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eng;<\/td>\r\n\t\t\t<td><code>eng<\/code><\/td>\r\n\t\t\t<td><code>0014B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ensp;<\/td>\r\n\t\t\t<td><code>ensp<\/code><\/td>\r\n\t\t\t<td><code>02002<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Eogon;<\/td>\r\n\t\t\t<td><code>Eogon<\/code><\/td>\r\n\t\t\t<td><code>00118<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eogon;<\/td>\r\n\t\t\t<td><code>eogon<\/code><\/td>\r\n\t\t\t<td><code>00119<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Eopf;<\/td>\r\n\t\t\t<td><code>Eopf<\/code><\/td>\r\n\t\t\t<td><code>1D53C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eopf;<\/td>\r\n\t\t\t<td><code>eopf<\/code><\/td>\r\n\t\t\t<td><code>1D556<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&epar;<\/td>\r\n\t\t\t<td><code>epar<\/code><\/td>\r\n\t\t\t<td><code>022D5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eparsl;<\/td>\r\n\t\t\t<td><code>eparsl<\/code><\/td>\r\n\t\t\t<td><code>029E3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eplus;<\/td>\r\n\t\t\t<td><code>eplus<\/code><\/td>\r\n\t\t\t<td><code>02A71<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&epsi;<\/td>\r\n\t\t\t<td><code>epsi<\/code><\/td>\r\n\t\t\t<td><code>003B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Epsilon;<\/td>\r\n\t\t\t<td><code>Epsilon<\/code><\/td>\r\n\t\t\t<td><code>00395<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&epsilon;<\/td>\r\n\t\t\t<td><code>epsilon<\/code><\/td>\r\n\t\t\t<td><code>003B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&epsiv;<\/td>\r\n\t\t\t<td><code>epsiv<\/code><\/td>\r\n\t\t\t<td><code>003F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqcirc;<\/td>\r\n\t\t\t<td><code>eqcirc<\/code><\/td>\r\n\t\t\t<td><code>02256<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqcolon;<\/td>\r\n\t\t\t<td><code>eqcolon<\/code><\/td>\r\n\t\t\t<td><code>02255<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqsim;<\/td>\r\n\t\t\t<td><code>eqsim<\/code><\/td>\r\n\t\t\t<td><code>02242<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqslantgtr;<\/td>\r\n\t\t\t<td><code>eqslantgtr<\/code><\/td>\r\n\t\t\t<td><code>02A96<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqslantless;<\/td>\r\n\t\t\t<td><code>eqslantless<\/code><\/td>\r\n\t\t\t<td><code>02A95<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Equal;<\/td>\r\n\t\t\t<td><code>Equal<\/code><\/td>\r\n\t\t\t<td><code>02A75<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&equals;<\/td>\r\n\t\t\t<td><code>equals<\/code><\/td>\r\n\t\t\t<td><code>0003D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&EqualTilde;<\/td>\r\n\t\t\t<td><code>EqualTilde<\/code><\/td>\r\n\t\t\t<td><code>02242<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&equest;<\/td>\r\n\t\t\t<td><code>equest<\/code><\/td>\r\n\t\t\t<td><code>0225F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Equilibrium;<\/td>\r\n\t\t\t<td><code>Equilibrium<\/code><\/td>\r\n\t\t\t<td><code>021CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&equiv;<\/td>\r\n\t\t\t<td><code>equiv<\/code><\/td>\r\n\t\t\t<td><code>02261<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&equivDD;<\/td>\r\n\t\t\t<td><code>equivDD<\/code><\/td>\r\n\t\t\t<td><code>02A78<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eqvparsl;<\/td>\r\n\t\t\t<td><code>eqvparsl<\/code><\/td>\r\n\t\t\t<td><code>029E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&erarr;<\/td>\r\n\t\t\t<td><code>erarr<\/code><\/td>\r\n\t\t\t<td><code>02971<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&erDot;<\/td>\r\n\t\t\t<td><code>erDot<\/code><\/td>\r\n\t\t\t<td><code>02253<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Escr;<\/td>\r\n\t\t\t<td><code>Escr<\/code><\/td>\r\n\t\t\t<td><code>02130<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&escr;<\/td>\r\n\t\t\t<td><code>escr<\/code><\/td>\r\n\t\t\t<td><code>0212F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&esdot;<\/td>\r\n\t\t\t<td><code>esdot<\/code><\/td>\r\n\t\t\t<td><code>02250<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Esim;<\/td>\r\n\t\t\t<td><code>Esim<\/code><\/td>\r\n\t\t\t<td><code>02A73<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&esim;<\/td>\r\n\t\t\t<td><code>esim<\/code><\/td>\r\n\t\t\t<td><code>02242<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Eta;<\/td>\r\n\t\t\t<td><code>Eta<\/code><\/td>\r\n\t\t\t<td><code>00397<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eta;<\/td>\r\n\t\t\t<td><code>eta<\/code><\/td>\r\n\t\t\t<td><code>003B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ETH;<\/td>\r\n\t\t\t<td><code>ETH<\/code><\/td>\r\n\t\t\t<td><code>000D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&eth;<\/td>\r\n\t\t\t<td><code>eth<\/code><\/td>\r\n\t\t\t<td><code>000F0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Euml;<\/td>\r\n\t\t\t<td><code>Euml<\/code><\/td>\r\n\t\t\t<td><code>000CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&euml;<\/td>\r\n\t\t\t<td><code>euml<\/code><\/td>\r\n\t\t\t<td><code>000EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&euro;<\/td>\r\n\t\t\t<td><code>euro<\/code><\/td>\r\n\t\t\t<td><code>020AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&excl;<\/td>\r\n\t\t\t<td><code>excl<\/code><\/td>\r\n\t\t\t<td><code>00021<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Exists;<\/td>\r\n\t\t\t<td><code>Exists<\/code><\/td>\r\n\t\t\t<td><code>02203<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&exist;<\/td>\r\n\t\t\t<td><code>exist<\/code><\/td>\r\n\t\t\t<td><code>02203<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&expectation;<\/td>\r\n\t\t\t<td><code>expectation<\/code><\/td>\r\n\t\t\t<td><code>02130<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ExponentialE;<\/td>\r\n\t\t\t<td><code>ExponentialE<\/code><\/td>\r\n\t\t\t<td><code>02147<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&exponentiale;<\/td>\r\n\t\t\t<td><code>exponentiale<\/code><\/td>\r\n\t\t\t<td><code>02147<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-e","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"147","title":"[HTML5 Entities] F","post":"<p>All HTML5 entities starting with&nbsp;<strong>F.<\/strong><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fallingdotseq;<\/td>\r\n\t\t\t<td><code>fallingdotseq<\/code><\/td>\r\n\t\t\t<td><code>02252<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Fcy;<\/td>\r\n\t\t\t<td><code>Fcy<\/code><\/td>\r\n\t\t\t<td><code>00424<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fcy;<\/td>\r\n\t\t\t<td><code>fcy<\/code><\/td>\r\n\t\t\t<td><code>00444<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&female;<\/td>\r\n\t\t\t<td><code>female<\/code><\/td>\r\n\t\t\t<td><code>02640<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ffilig;<\/td>\r\n\t\t\t<td><code>ffilig<\/code><\/td>\r\n\t\t\t<td><code>0FB03<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fflig;<\/td>\r\n\t\t\t<td><code>fflig<\/code><\/td>\r\n\t\t\t<td><code>0FB00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ffllig;<\/td>\r\n\t\t\t<td><code>ffllig<\/code><\/td>\r\n\t\t\t<td><code>0FB04<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ffr;<\/td>\r\n\t\t\t<td><code>Ffr<\/code><\/td>\r\n\t\t\t<td><code>1D509<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ffr;<\/td>\r\n\t\t\t<td><code>ffr<\/code><\/td>\r\n\t\t\t<td><code>1D523<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&filig;<\/td>\r\n\t\t\t<td><code>filig<\/code><\/td>\r\n\t\t\t<td><code>0FB01<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&FilledSmallSquare;<\/td>\r\n\t\t\t<td><code>FilledSmallSquare<\/code><\/td>\r\n\t\t\t<td><code>025FC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&FilledVerySmallSquare;<\/td>\r\n\t\t\t<td><code>FilledVerySmallSquare<\/code><\/td>\r\n\t\t\t<td><code>025AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fjlig;<\/td>\r\n\t\t\t<td><code>fjlig<\/code><\/td>\r\n\t\t\t<td><code>00066 + 0006A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&flat;<\/td>\r\n\t\t\t<td><code>flat<\/code><\/td>\r\n\t\t\t<td><code>0266D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fllig;<\/td>\r\n\t\t\t<td><code>fllig<\/code><\/td>\r\n\t\t\t<td><code>0FB02<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fltns;<\/td>\r\n\t\t\t<td><code>fltns<\/code><\/td>\r\n\t\t\t<td><code>025B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fnof;<\/td>\r\n\t\t\t<td><code>fnof<\/code><\/td>\r\n\t\t\t<td><code>00192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Fopf;<\/td>\r\n\t\t\t<td><code>Fopf<\/code><\/td>\r\n\t\t\t<td><code>1D53D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fopf;<\/td>\r\n\t\t\t<td><code>fopf<\/code><\/td>\r\n\t\t\t<td><code>1D557<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ForAll;<\/td>\r\n\t\t\t<td><code>ForAll<\/code><\/td>\r\n\t\t\t<td><code>02200<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&forall;<\/td>\r\n\t\t\t<td><code>forall<\/code><\/td>\r\n\t\t\t<td><code>02200<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fork;<\/td>\r\n\t\t\t<td><code>fork<\/code><\/td>\r\n\t\t\t<td><code>022D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&forkv;<\/td>\r\n\t\t\t<td><code>forkv<\/code><\/td>\r\n\t\t\t<td><code>02AD9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Fouriertrf;<\/td>\r\n\t\t\t<td><code>Fouriertrf<\/code><\/td>\r\n\t\t\t<td><code>02131<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fpartint;<\/td>\r\n\t\t\t<td><code>fpartint<\/code><\/td>\r\n\t\t\t<td><code>02A0D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac12;<\/td>\r\n\t\t\t<td><code>frac12<\/code><\/td>\r\n\t\t\t<td><code>000BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac13;<\/td>\r\n\t\t\t<td><code>frac13<\/code><\/td>\r\n\t\t\t<td><code>02153<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac14;<\/td>\r\n\t\t\t<td><code>frac14<\/code><\/td>\r\n\t\t\t<td><code>000BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac15;<\/td>\r\n\t\t\t<td><code>frac15<\/code><\/td>\r\n\t\t\t<td><code>02155<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac16;<\/td>\r\n\t\t\t<td><code>frac16<\/code><\/td>\r\n\t\t\t<td><code>02159<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac18;<\/td>\r\n\t\t\t<td><code>frac18<\/code><\/td>\r\n\t\t\t<td><code>0215B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac23;<\/td>\r\n\t\t\t<td><code>frac23<\/code><\/td>\r\n\t\t\t<td><code>02154<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac25;<\/td>\r\n\t\t\t<td><code>frac25<\/code><\/td>\r\n\t\t\t<td><code>02156<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac34;<\/td>\r\n\t\t\t<td><code>frac34<\/code><\/td>\r\n\t\t\t<td><code>000BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac35;<\/td>\r\n\t\t\t<td><code>frac35<\/code><\/td>\r\n\t\t\t<td><code>02157<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac38;<\/td>\r\n\t\t\t<td><code>frac38<\/code><\/td>\r\n\t\t\t<td><code>0215C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac45;<\/td>\r\n\t\t\t<td><code>frac45<\/code><\/td>\r\n\t\t\t<td><code>02158<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac56;<\/td>\r\n\t\t\t<td><code>frac56<\/code><\/td>\r\n\t\t\t<td><code>0215A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac58;<\/td>\r\n\t\t\t<td><code>frac58<\/code><\/td>\r\n\t\t\t<td><code>0215D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frac78;<\/td>\r\n\t\t\t<td><code>frac78<\/code><\/td>\r\n\t\t\t<td><code>0215E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frasl;<\/td>\r\n\t\t\t<td><code>frasl<\/code><\/td>\r\n\t\t\t<td><code>02044<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&frown;<\/td>\r\n\t\t\t<td><code>frown<\/code><\/td>\r\n\t\t\t<td><code>02322<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Fscr;<\/td>\r\n\t\t\t<td><code>Fscr<\/code><\/td>\r\n\t\t\t<td><code>02131<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&fscr;<\/td>\r\n\t\t\t<td><code>fscr<\/code><\/td>\r\n\t\t\t<td><code>1D4BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-f","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"148","title":"[HTML5 Entities] G","post":"<p>All HTML5 entities starting with&nbsp;<strong>G.<\/strong><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gacute;<\/td>\r\n\t\t\t<td><code>gacute<\/code><\/td>\r\n\t\t\t<td><code>001F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gamma;<\/td>\r\n\t\t\t<td><code>Gamma<\/code><\/td>\r\n\t\t\t<td><code>00393<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gamma;<\/td>\r\n\t\t\t<td><code>gamma<\/code><\/td>\r\n\t\t\t<td><code>003B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gammad;<\/td>\r\n\t\t\t<td><code>Gammad<\/code><\/td>\r\n\t\t\t<td><code>003DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gammad;<\/td>\r\n\t\t\t<td><code>gammad<\/code><\/td>\r\n\t\t\t<td><code>003DD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gap;<\/td>\r\n\t\t\t<td><code>gap<\/code><\/td>\r\n\t\t\t<td><code>02A86<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gbreve;<\/td>\r\n\t\t\t<td><code>Gbreve<\/code><\/td>\r\n\t\t\t<td><code>0011E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gbreve;<\/td>\r\n\t\t\t<td><code>gbreve<\/code><\/td>\r\n\t\t\t<td><code>0011F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gcedil;<\/td>\r\n\t\t\t<td><code>Gcedil<\/code><\/td>\r\n\t\t\t<td><code>00122<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gcirc;<\/td>\r\n\t\t\t<td><code>Gcirc<\/code><\/td>\r\n\t\t\t<td><code>0011C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gcirc;<\/td>\r\n\t\t\t<td><code>gcirc<\/code><\/td>\r\n\t\t\t<td><code>0011D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gcy;<\/td>\r\n\t\t\t<td><code>Gcy<\/code><\/td>\r\n\t\t\t<td><code>00413<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gcy;<\/td>\r\n\t\t\t<td><code>gcy<\/code><\/td>\r\n\t\t\t<td><code>00433<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gdot;<\/td>\r\n\t\t\t<td><code>Gdot<\/code><\/td>\r\n\t\t\t<td><code>00120<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gdot;<\/td>\r\n\t\t\t<td><code>gdot<\/code><\/td>\r\n\t\t\t<td><code>00121<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gE;<\/td>\r\n\t\t\t<td><code>gE<\/code><\/td>\r\n\t\t\t<td><code>02267<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ge;<\/td>\r\n\t\t\t<td><code>ge<\/code><\/td>\r\n\t\t\t<td><code>02265<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gEl;<\/td>\r\n\t\t\t<td><code>gEl<\/code><\/td>\r\n\t\t\t<td><code>02A8C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gel;<\/td>\r\n\t\t\t<td><code>gel<\/code><\/td>\r\n\t\t\t<td><code>022DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&geq;<\/td>\r\n\t\t\t<td><code>geq<\/code><\/td>\r\n\t\t\t<td><code>02265<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&geqq;<\/td>\r\n\t\t\t<td><code>geqq<\/code><\/td>\r\n\t\t\t<td><code>02267<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&geqslant;<\/td>\r\n\t\t\t<td><code>geqslant<\/code><\/td>\r\n\t\t\t<td><code>02A7E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ges;<\/td>\r\n\t\t\t<td><code>ges<\/code><\/td>\r\n\t\t\t<td><code>02A7E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gescc;<\/td>\r\n\t\t\t<td><code>gescc<\/code><\/td>\r\n\t\t\t<td><code>02AA9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gesdot;<\/td>\r\n\t\t\t<td><code>gesdot<\/code><\/td>\r\n\t\t\t<td><code>02A80<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gesdoto;<\/td>\r\n\t\t\t<td><code>gesdoto<\/code><\/td>\r\n\t\t\t<td><code>02A82<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gesdotol;<\/td>\r\n\t\t\t<td><code>gesdotol<\/code><\/td>\r\n\t\t\t<td><code>02A84<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gesl;<\/td>\r\n\t\t\t<td><code>gesl<\/code><\/td>\r\n\t\t\t<td><code>022DB + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gesles;<\/td>\r\n\t\t\t<td><code>gesles<\/code><\/td>\r\n\t\t\t<td><code>02A94<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gfr;<\/td>\r\n\t\t\t<td><code>Gfr<\/code><\/td>\r\n\t\t\t<td><code>1D50A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gfr;<\/td>\r\n\t\t\t<td><code>gfr<\/code><\/td>\r\n\t\t\t<td><code>1D524<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gg;<\/td>\r\n\t\t\t<td><code>Gg<\/code><\/td>\r\n\t\t\t<td><code>022D9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gg;<\/td>\r\n\t\t\t<td><code>gg<\/code><\/td>\r\n\t\t\t<td><code>0226B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ggg;<\/td>\r\n\t\t\t<td><code>ggg<\/code><\/td>\r\n\t\t\t<td><code>022D9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gimel;<\/td>\r\n\t\t\t<td><code>gimel<\/code><\/td>\r\n\t\t\t<td><code>02137<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GJcy;<\/td>\r\n\t\t\t<td><code>GJcy<\/code><\/td>\r\n\t\t\t<td><code>00403<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gjcy;<\/td>\r\n\t\t\t<td><code>gjcy<\/code><\/td>\r\n\t\t\t<td><code>00453<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gl;<\/td>\r\n\t\t\t<td><code>gl<\/code><\/td>\r\n\t\t\t<td><code>02277<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gla;<\/td>\r\n\t\t\t<td><code>gla<\/code><\/td>\r\n\t\t\t<td><code>02AA5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&glE;<\/td>\r\n\t\t\t<td><code>glE<\/code><\/td>\r\n\t\t\t<td><code>02A92<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&glj;<\/td>\r\n\t\t\t<td><code>glj<\/code><\/td>\r\n\t\t\t<td><code>02AA4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gnap;<\/td>\r\n\t\t\t<td><code>gnap<\/code><\/td>\r\n\t\t\t<td><code>02A8A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gnapprox;<\/td>\r\n\t\t\t<td><code>gnapprox<\/code><\/td>\r\n\t\t\t<td><code>02A8A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gnE;<\/td>\r\n\t\t\t<td><code>gnE<\/code><\/td>\r\n\t\t\t<td><code>02269<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gne;<\/td>\r\n\t\t\t<td><code>gne<\/code><\/td>\r\n\t\t\t<td><code>02A88<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gneq;<\/td>\r\n\t\t\t<td><code>gneq<\/code><\/td>\r\n\t\t\t<td><code>02A88<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gneqq;<\/td>\r\n\t\t\t<td><code>gneqq<\/code><\/td>\r\n\t\t\t<td><code>02269<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gnsim;<\/td>\r\n\t\t\t<td><code>gnsim<\/code><\/td>\r\n\t\t\t<td><code>022E7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gopf;<\/td>\r\n\t\t\t<td><code>Gopf<\/code><\/td>\r\n\t\t\t<td><code>1D53E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gopf;<\/td>\r\n\t\t\t<td><code>gopf<\/code><\/td>\r\n\t\t\t<td><code>1D558<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&grave;<\/td>\r\n\t\t\t<td><code>grave<\/code><\/td>\r\n\t\t\t<td><code>00060<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterEqual;<\/td>\r\n\t\t\t<td><code>GreaterEqual<\/code><\/td>\r\n\t\t\t<td><code>02265<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterEqualLess;<\/td>\r\n\t\t\t<td><code>GreaterEqualLess<\/code><\/td>\r\n\t\t\t<td><code>022DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterFullEqual;<\/td>\r\n\t\t\t<td><code>GreaterFullEqual<\/code><\/td>\r\n\t\t\t<td><code>02267<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterGreater;<\/td>\r\n\t\t\t<td><code>GreaterGreater<\/code><\/td>\r\n\t\t\t<td><code>02AA2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterLess;<\/td>\r\n\t\t\t<td><code>GreaterLess<\/code><\/td>\r\n\t\t\t<td><code>02277<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterSlantEqual;<\/td>\r\n\t\t\t<td><code>GreaterSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>02A7E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GreaterTilde;<\/td>\r\n\t\t\t<td><code>GreaterTilde<\/code><\/td>\r\n\t\t\t<td><code>02273<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gscr;<\/td>\r\n\t\t\t<td><code>Gscr<\/code><\/td>\r\n\t\t\t<td><code>1D4A2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gscr;<\/td>\r\n\t\t\t<td><code>gscr<\/code><\/td>\r\n\t\t\t<td><code>0210A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gsim;<\/td>\r\n\t\t\t<td><code>gsim<\/code><\/td>\r\n\t\t\t<td><code>02273<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gsime;<\/td>\r\n\t\t\t<td><code>gsime<\/code><\/td>\r\n\t\t\t<td><code>02A8E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gsiml;<\/td>\r\n\t\t\t<td><code>gsiml<\/code><\/td>\r\n\t\t\t<td><code>02A90<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&GT;<\/td>\r\n\t\t\t<td><code>GT<\/code><\/td>\r\n\t\t\t<td><code>0003E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Gt;<\/td>\r\n\t\t\t<td><code>Gt<\/code><\/td>\r\n\t\t\t<td><code>0226B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtcc;<\/td>\r\n\t\t\t<td><code>gtcc<\/code><\/td>\r\n\t\t\t<td><code>02AA7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtcir;<\/td>\r\n\t\t\t<td><code>gtcir<\/code><\/td>\r\n\t\t\t<td><code>02A7A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtdot;<\/td>\r\n\t\t\t<td><code>gtdot<\/code><\/td>\r\n\t\t\t<td><code>022D7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtlPar;<\/td>\r\n\t\t\t<td><code>gtlPar<\/code><\/td>\r\n\t\t\t<td><code>02995<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtquest;<\/td>\r\n\t\t\t<td><code>gtquest<\/code><\/td>\r\n\t\t\t<td><code>02A7C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtrapprox;<\/td>\r\n\t\t\t<td><code>gtrapprox<\/code><\/td>\r\n\t\t\t<td><code>02A86<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtrarr;<\/td>\r\n\t\t\t<td><code>gtrarr<\/code><\/td>\r\n\t\t\t<td><code>02978<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtrdot;<\/td>\r\n\t\t\t<td><code>gtrdot<\/code><\/td>\r\n\t\t\t<td><code>022D7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtreqless;<\/td>\r\n\t\t\t<td><code>gtreqless<\/code><\/td>\r\n\t\t\t<td><code>022DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtreqqless;<\/td>\r\n\t\t\t<td><code>gtreqqless<\/code><\/td>\r\n\t\t\t<td><code>02A8C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtrless;<\/td>\r\n\t\t\t<td><code>gtrless<\/code><\/td>\r\n\t\t\t<td><code>02277<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gtrsim;<\/td>\r\n\t\t\t<td><code>gtrsim<\/code><\/td>\r\n\t\t\t<td><code>02273<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gvertneqq;<\/td>\r\n\t\t\t<td><code>gvertneqq<\/code><\/td>\r\n\t\t\t<td><code>02269 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&gvnE;<\/td>\r\n\t\t\t<td><code>gvnE<\/code><\/td>\r\n\t\t\t<td><code>02269 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-g","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"149","title":"[HTML5 Entities] H","post":"<p>All HTML5 entities starting with&nbsp;<strong>H<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hacek;<\/td>\r\n\t\t\t<td><code>Hacek<\/code><\/td>\r\n\t\t\t<td><code>002C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hairsp;<\/td>\r\n\t\t\t<td><code>hairsp<\/code><\/td>\r\n\t\t\t<td><code>0200A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&half;<\/td>\r\n\t\t\t<td><code>half<\/code><\/td>\r\n\t\t\t<td><code>000BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hamilt;<\/td>\r\n\t\t\t<td><code>hamilt<\/code><\/td>\r\n\t\t\t<td><code>0210B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&HARDcy;<\/td>\r\n\t\t\t<td><code>HARDcy<\/code><\/td>\r\n\t\t\t<td><code>0042A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hardcy;<\/td>\r\n\t\t\t<td><code>hardcy<\/code><\/td>\r\n\t\t\t<td><code>0044A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hArr;<\/td>\r\n\t\t\t<td><code>hArr<\/code><\/td>\r\n\t\t\t<td><code>021D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&harr;<\/td>\r\n\t\t\t<td><code>harr<\/code><\/td>\r\n\t\t\t<td><code>02194<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&harrcir;<\/td>\r\n\t\t\t<td><code>harrcir<\/code><\/td>\r\n\t\t\t<td><code>02948<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&harrw;<\/td>\r\n\t\t\t<td><code>harrw<\/code><\/td>\r\n\t\t\t<td><code>021AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hat;<\/td>\r\n\t\t\t<td><code>Hat<\/code><\/td>\r\n\t\t\t<td><code>0005E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hbar;<\/td>\r\n\t\t\t<td><code>hbar<\/code><\/td>\r\n\t\t\t<td><code>0210F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hcirc;<\/td>\r\n\t\t\t<td><code>Hcirc<\/code><\/td>\r\n\t\t\t<td><code>00124<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hcirc;<\/td>\r\n\t\t\t<td><code>hcirc<\/code><\/td>\r\n\t\t\t<td><code>00125<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hearts;<\/td>\r\n\t\t\t<td><code>hearts<\/code><\/td>\r\n\t\t\t<td><code>02665<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&heartsuit;<\/td>\r\n\t\t\t<td><code>heartsuit<\/code><\/td>\r\n\t\t\t<td><code>02665<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hellip;<\/td>\r\n\t\t\t<td><code>hellip<\/code><\/td>\r\n\t\t\t<td><code>02026<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hercon;<\/td>\r\n\t\t\t<td><code>hercon<\/code><\/td>\r\n\t\t\t<td><code>022B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hfr;<\/td>\r\n\t\t\t<td><code>Hfr<\/code><\/td>\r\n\t\t\t<td><code>0210C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hfr;<\/td>\r\n\t\t\t<td><code>hfr<\/code><\/td>\r\n\t\t\t<td><code>1D525<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&HilbertSpace;<\/td>\r\n\t\t\t<td><code>HilbertSpace<\/code><\/td>\r\n\t\t\t<td><code>0210B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hksearow;<\/td>\r\n\t\t\t<td><code>hksearow<\/code><\/td>\r\n\t\t\t<td><code>02925<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hkswarow;<\/td>\r\n\t\t\t<td><code>hkswarow<\/code><\/td>\r\n\t\t\t<td><code>02926<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hoarr;<\/td>\r\n\t\t\t<td><code>hoarr<\/code><\/td>\r\n\t\t\t<td><code>021FF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&homtht;<\/td>\r\n\t\t\t<td><code>homtht<\/code><\/td>\r\n\t\t\t<td><code>0223B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hookleftarrow;<\/td>\r\n\t\t\t<td><code>hookleftarrow<\/code><\/td>\r\n\t\t\t<td><code>021A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hookrightarrow;<\/td>\r\n\t\t\t<td><code>hookrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hopf;<\/td>\r\n\t\t\t<td><code>Hopf<\/code><\/td>\r\n\t\t\t<td><code>0210D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hopf;<\/td>\r\n\t\t\t<td><code>hopf<\/code><\/td>\r\n\t\t\t<td><code>1D559<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&horbar;<\/td>\r\n\t\t\t<td><code>horbar<\/code><\/td>\r\n\t\t\t<td><code>02015<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&HorizontalLine;<\/td>\r\n\t\t\t<td><code>HorizontalLine<\/code><\/td>\r\n\t\t\t<td><code>02500<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hscr;<\/td>\r\n\t\t\t<td><code>Hscr<\/code><\/td>\r\n\t\t\t<td><code>0210B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hscr;<\/td>\r\n\t\t\t<td><code>hscr<\/code><\/td>\r\n\t\t\t<td><code>1D4BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hslash;<\/td>\r\n\t\t\t<td><code>hslash<\/code><\/td>\r\n\t\t\t<td><code>0210F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Hstrok;<\/td>\r\n\t\t\t<td><code>Hstrok<\/code><\/td>\r\n\t\t\t<td><code>00126<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hstrok;<\/td>\r\n\t\t\t<td><code>hstrok<\/code><\/td>\r\n\t\t\t<td><code>00127<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&HumpDownHump;<\/td>\r\n\t\t\t<td><code>HumpDownHump<\/code><\/td>\r\n\t\t\t<td><code>0224E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&HumpEqual;<\/td>\r\n\t\t\t<td><code>HumpEqual<\/code><\/td>\r\n\t\t\t<td><code>0224F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hybull;<\/td>\r\n\t\t\t<td><code>hybull<\/code><\/td>\r\n\t\t\t<td><code>02043<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&hyphen;<\/td>\r\n\t\t\t<td><code>hyphen<\/code><\/td>\r\n\t\t\t<td><code>02010<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-h","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"150","title":"[HTML5 Entities] I","post":"<p>All HTML5 entities starting with&nbsp;<strong>I<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iacute;<\/td>\r\n\t\t\t<td><code>Iacute<\/code><\/td>\r\n\t\t\t<td><code>000CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iacute;<\/td>\r\n\t\t\t<td><code>iacute<\/code><\/td>\r\n\t\t\t<td><code>000ED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ic;<\/td>\r\n\t\t\t<td><code>ic<\/code><\/td>\r\n\t\t\t<td><code>02063<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Icirc;<\/td>\r\n\t\t\t<td><code>Icirc<\/code><\/td>\r\n\t\t\t<td><code>000CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&icirc;<\/td>\r\n\t\t\t<td><code>icirc<\/code><\/td>\r\n\t\t\t<td><code>000EE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Icy;<\/td>\r\n\t\t\t<td><code>Icy<\/code><\/td>\r\n\t\t\t<td><code>00418<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&icy;<\/td>\r\n\t\t\t<td><code>icy<\/code><\/td>\r\n\t\t\t<td><code>00438<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Idot;<\/td>\r\n\t\t\t<td><code>Idot<\/code><\/td>\r\n\t\t\t<td><code>00130<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&IEcy;<\/td>\r\n\t\t\t<td><code>IEcy<\/code><\/td>\r\n\t\t\t<td><code>00415<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iecy;<\/td>\r\n\t\t\t<td><code>iecy<\/code><\/td>\r\n\t\t\t<td><code>00435<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iexcl;<\/td>\r\n\t\t\t<td><code>iexcl<\/code><\/td>\r\n\t\t\t<td><code>000A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iff;<\/td>\r\n\t\t\t<td><code>iff<\/code><\/td>\r\n\t\t\t<td><code>021D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ifr;<\/td>\r\n\t\t\t<td><code>Ifr<\/code><\/td>\r\n\t\t\t<td><code>02111<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ifr;<\/td>\r\n\t\t\t<td><code>ifr<\/code><\/td>\r\n\t\t\t<td><code>1D526<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Igrave;<\/td>\r\n\t\t\t<td><code>Igrave<\/code><\/td>\r\n\t\t\t<td><code>000CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&igrave;<\/td>\r\n\t\t\t<td><code>igrave<\/code><\/td>\r\n\t\t\t<td><code>000EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ii;<\/td>\r\n\t\t\t<td><code>ii<\/code><\/td>\r\n\t\t\t<td><code>02148<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iiiint;<\/td>\r\n\t\t\t<td><code>iiiint<\/code><\/td>\r\n\t\t\t<td><code>02A0C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iiint;<\/td>\r\n\t\t\t<td><code>iiint<\/code><\/td>\r\n\t\t\t<td><code>0222D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iinfin;<\/td>\r\n\t\t\t<td><code>iinfin<\/code><\/td>\r\n\t\t\t<td><code>029DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iiota;<\/td>\r\n\t\t\t<td><code>iiota<\/code><\/td>\r\n\t\t\t<td><code>02129<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&IJlig;<\/td>\r\n\t\t\t<td><code>IJlig<\/code><\/td>\r\n\t\t\t<td><code>00132<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ijlig;<\/td>\r\n\t\t\t<td><code>ijlig<\/code><\/td>\r\n\t\t\t<td><code>00133<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Im;<\/td>\r\n\t\t\t<td><code>Im<\/code><\/td>\r\n\t\t\t<td><code>02111<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Imacr;<\/td>\r\n\t\t\t<td><code>Imacr<\/code><\/td>\r\n\t\t\t<td><code>0012A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imacr;<\/td>\r\n\t\t\t<td><code>imacr<\/code><\/td>\r\n\t\t\t<td><code>0012B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&image;<\/td>\r\n\t\t\t<td><code>image<\/code><\/td>\r\n\t\t\t<td><code>02111<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ImaginaryI;<\/td>\r\n\t\t\t<td><code>ImaginaryI<\/code><\/td>\r\n\t\t\t<td><code>02148<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imagline;<\/td>\r\n\t\t\t<td><code>imagline<\/code><\/td>\r\n\t\t\t<td><code>02110<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imagpart;<\/td>\r\n\t\t\t<td><code>imagpart<\/code><\/td>\r\n\t\t\t<td><code>02111<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imath;<\/td>\r\n\t\t\t<td><code>imath<\/code><\/td>\r\n\t\t\t<td><code>00131<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imof;<\/td>\r\n\t\t\t<td><code>imof<\/code><\/td>\r\n\t\t\t<td><code>022B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&imped;<\/td>\r\n\t\t\t<td><code>imped<\/code><\/td>\r\n\t\t\t<td><code>001B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Implies;<\/td>\r\n\t\t\t<td><code>Implies<\/code><\/td>\r\n\t\t\t<td><code>021D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&in;<\/td>\r\n\t\t\t<td><code>in<\/code><\/td>\r\n\t\t\t<td><code>02208<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&incare;<\/td>\r\n\t\t\t<td><code>incare<\/code><\/td>\r\n\t\t\t<td><code>02105<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&infin;<\/td>\r\n\t\t\t<td><code>infin<\/code><\/td>\r\n\t\t\t<td><code>0221E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&infintie;<\/td>\r\n\t\t\t<td><code>infintie<\/code><\/td>\r\n\t\t\t<td><code>029DD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&inodot;<\/td>\r\n\t\t\t<td><code>inodot<\/code><\/td>\r\n\t\t\t<td><code>00131<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Int;<\/td>\r\n\t\t\t<td><code>Int<\/code><\/td>\r\n\t\t\t<td><code>0222C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&int;<\/td>\r\n\t\t\t<td><code>int<\/code><\/td>\r\n\t\t\t<td><code>0222B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&intcal;<\/td>\r\n\t\t\t<td><code>intcal<\/code><\/td>\r\n\t\t\t<td><code>022BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&integers;<\/td>\r\n\t\t\t<td><code>integers<\/code><\/td>\r\n\t\t\t<td><code>02124<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Integral;<\/td>\r\n\t\t\t<td><code>Integral<\/code><\/td>\r\n\t\t\t<td><code>0222B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&intercal;<\/td>\r\n\t\t\t<td><code>intercal<\/code><\/td>\r\n\t\t\t<td><code>022BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Intersection;<\/td>\r\n\t\t\t<td><code>Intersection<\/code><\/td>\r\n\t\t\t<td><code>022C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&intlarhk;<\/td>\r\n\t\t\t<td><code>intlarhk<\/code><\/td>\r\n\t\t\t<td><code>02A17<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&intprod;<\/td>\r\n\t\t\t<td><code>intprod<\/code><\/td>\r\n\t\t\t<td><code>02A3C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&InvisibleComma;<\/td>\r\n\t\t\t<td><code>InvisibleComma<\/code><\/td>\r\n\t\t\t<td><code>02063<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&InvisibleTimes;<\/td>\r\n\t\t\t<td><code>InvisibleTimes<\/code><\/td>\r\n\t\t\t<td><code>02062<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&IOcy;<\/td>\r\n\t\t\t<td><code>IOcy<\/code><\/td>\r\n\t\t\t<td><code>00401<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iocy;<\/td>\r\n\t\t\t<td><code>iocy<\/code><\/td>\r\n\t\t\t<td><code>00451<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iogon;<\/td>\r\n\t\t\t<td><code>Iogon<\/code><\/td>\r\n\t\t\t<td><code>0012E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iogon;<\/td>\r\n\t\t\t<td><code>iogon<\/code><\/td>\r\n\t\t\t<td><code>0012F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iopf;<\/td>\r\n\t\t\t<td><code>Iopf<\/code><\/td>\r\n\t\t\t<td><code>1D540<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iopf;<\/td>\r\n\t\t\t<td><code>iopf<\/code><\/td>\r\n\t\t\t<td><code>1D55A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iota;<\/td>\r\n\t\t\t<td><code>Iota<\/code><\/td>\r\n\t\t\t<td><code>00399<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iota;<\/td>\r\n\t\t\t<td><code>iota<\/code><\/td>\r\n\t\t\t<td><code>003B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iprod;<\/td>\r\n\t\t\t<td><code>iprod<\/code><\/td>\r\n\t\t\t<td><code>02A3C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iquest;<\/td>\r\n\t\t\t<td><code>iquest<\/code><\/td>\r\n\t\t\t<td><code>000BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iscr;<\/td>\r\n\t\t\t<td><code>Iscr<\/code><\/td>\r\n\t\t\t<td><code>02110<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iscr;<\/td>\r\n\t\t\t<td><code>iscr<\/code><\/td>\r\n\t\t\t<td><code>1D4BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isin;<\/td>\r\n\t\t\t<td><code>isin<\/code><\/td>\r\n\t\t\t<td><code>02208<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isindot;<\/td>\r\n\t\t\t<td><code>isindot<\/code><\/td>\r\n\t\t\t<td><code>022F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isinE;<\/td>\r\n\t\t\t<td><code>isinE<\/code><\/td>\r\n\t\t\t<td><code>022F9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isins;<\/td>\r\n\t\t\t<td><code>isins<\/code><\/td>\r\n\t\t\t<td><code>022F4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isinsv;<\/td>\r\n\t\t\t<td><code>isinsv<\/code><\/td>\r\n\t\t\t<td><code>022F3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&isinv;<\/td>\r\n\t\t\t<td><code>isinv<\/code><\/td>\r\n\t\t\t<td><code>02208<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&it;<\/td>\r\n\t\t\t<td><code>it<\/code><\/td>\r\n\t\t\t<td><code>02062<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Itilde;<\/td>\r\n\t\t\t<td><code>Itilde<\/code><\/td>\r\n\t\t\t<td><code>00128<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&itilde;<\/td>\r\n\t\t\t<td><code>itilde<\/code><\/td>\r\n\t\t\t<td><code>00129<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iukcy;<\/td>\r\n\t\t\t<td><code>Iukcy<\/code><\/td>\r\n\t\t\t<td><code>00406<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iukcy;<\/td>\r\n\t\t\t<td><code>iukcy<\/code><\/td>\r\n\t\t\t<td><code>00456<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Iuml;<\/td>\r\n\t\t\t<td><code>Iuml<\/code><\/td>\r\n\t\t\t<td><code>000CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&iuml;<\/td>\r\n\t\t\t<td><code>iuml<\/code><\/td>\r\n\t\t\t<td><code>000EF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-i","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"151","title":"[HTML5 Entities] J","post":"<p>All HTML5 entities starting with&nbsp;<strong>J<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jcirc;<\/td>\r\n\t\t\t<td><code>Jcirc<\/code><\/td>\r\n\t\t\t<td><code>00134<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jcirc;<\/td>\r\n\t\t\t<td><code>jcirc<\/code><\/td>\r\n\t\t\t<td><code>00135<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jcy;<\/td>\r\n\t\t\t<td><code>Jcy<\/code><\/td>\r\n\t\t\t<td><code>00419<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jcy;<\/td>\r\n\t\t\t<td><code>jcy<\/code><\/td>\r\n\t\t\t<td><code>00439<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jfr;<\/td>\r\n\t\t\t<td><code>Jfr<\/code><\/td>\r\n\t\t\t<td><code>1D50D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jfr;<\/td>\r\n\t\t\t<td><code>jfr<\/code><\/td>\r\n\t\t\t<td><code>1D527<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jmath;<\/td>\r\n\t\t\t<td><code>jmath<\/code><\/td>\r\n\t\t\t<td><code>00237<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jopf;<\/td>\r\n\t\t\t<td><code>Jopf<\/code><\/td>\r\n\t\t\t<td><code>1D541<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jopf;<\/td>\r\n\t\t\t<td><code>jopf<\/code><\/td>\r\n\t\t\t<td><code>1D55B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jscr;<\/td>\r\n\t\t\t<td><code>Jscr<\/code><\/td>\r\n\t\t\t<td><code>1D4A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jscr;<\/td>\r\n\t\t\t<td><code>jscr<\/code><\/td>\r\n\t\t\t<td><code>1D4BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jsercy;<\/td>\r\n\t\t\t<td><code>Jsercy<\/code><\/td>\r\n\t\t\t<td><code>00408<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jsercy;<\/td>\r\n\t\t\t<td><code>jsercy<\/code><\/td>\r\n\t\t\t<td><code>00458<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Jukcy;<\/td>\r\n\t\t\t<td><code>Jukcy<\/code><\/td>\r\n\t\t\t<td><code>00404<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&jukcy;<\/td>\r\n\t\t\t<td><code>jukcy<\/code><\/td>\r\n\t\t\t<td><code>00454<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-j","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"152","title":"[HTML5 Entities] K","post":"<p>All HTML5 entities starting with&nbsp;<strong>K<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kappa;<\/td>\r\n\t\t\t<td><code>Kappa<\/code><\/td>\r\n\t\t\t<td><code>0039A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kappa;<\/td>\r\n\t\t\t<td><code>kappa<\/code><\/td>\r\n\t\t\t<td><code>003BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kappav;<\/td>\r\n\t\t\t<td><code>kappav<\/code><\/td>\r\n\t\t\t<td><code>003F0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kcedil;<\/td>\r\n\t\t\t<td><code>Kcedil<\/code><\/td>\r\n\t\t\t<td><code>00136<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kcedil;<\/td>\r\n\t\t\t<td><code>kcedil<\/code><\/td>\r\n\t\t\t<td><code>00137<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kcy;<\/td>\r\n\t\t\t<td><code>Kcy<\/code><\/td>\r\n\t\t\t<td><code>0041A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kcy;<\/td>\r\n\t\t\t<td><code>kcy<\/code><\/td>\r\n\t\t\t<td><code>0043A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kfr;<\/td>\r\n\t\t\t<td><code>Kfr<\/code><\/td>\r\n\t\t\t<td><code>1D50E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kfr;<\/td>\r\n\t\t\t<td><code>kfr<\/code><\/td>\r\n\t\t\t<td><code>1D528<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kgreen;<\/td>\r\n\t\t\t<td><code>kgreen<\/code><\/td>\r\n\t\t\t<td><code>00138<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&KHcy;<\/td>\r\n\t\t\t<td><code>KHcy<\/code><\/td>\r\n\t\t\t<td><code>00425<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&khcy;<\/td>\r\n\t\t\t<td><code>khcy<\/code><\/td>\r\n\t\t\t<td><code>00445<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&KJcy;<\/td>\r\n\t\t\t<td><code>KJcy<\/code><\/td>\r\n\t\t\t<td><code>0040C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kjcy;<\/td>\r\n\t\t\t<td><code>kjcy<\/code><\/td>\r\n\t\t\t<td><code>0045C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kopf;<\/td>\r\n\t\t\t<td><code>Kopf<\/code><\/td>\r\n\t\t\t<td><code>1D542<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kopf;<\/td>\r\n\t\t\t<td><code>kopf<\/code><\/td>\r\n\t\t\t<td><code>1D55C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Kscr;<\/td>\r\n\t\t\t<td><code>Kscr<\/code><\/td>\r\n\t\t\t<td><code>1D4A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&kscr;<\/td>\r\n\t\t\t<td><code>kscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-k","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"153","title":"[HTML5 Entities] L","post":"<p>All HTML5 entities starting with&nbsp;<strong>L<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lAarr;<\/td>\r\n\t\t\t<td><code>lAarr<\/code><\/td>\r\n\t\t\t<td><code>021DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lacute;<\/td>\r\n\t\t\t<td><code>Lacute<\/code><\/td>\r\n\t\t\t<td><code>00139<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lacute;<\/td>\r\n\t\t\t<td><code>lacute<\/code><\/td>\r\n\t\t\t<td><code>0013A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&laemptyv;<\/td>\r\n\t\t\t<td><code>laemptyv<\/code><\/td>\r\n\t\t\t<td><code>029B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lagran;<\/td>\r\n\t\t\t<td><code>lagran<\/code><\/td>\r\n\t\t\t<td><code>02112<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lambda;<\/td>\r\n\t\t\t<td><code>Lambda<\/code><\/td>\r\n\t\t\t<td><code>0039B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lambda;<\/td>\r\n\t\t\t<td><code>lambda<\/code><\/td>\r\n\t\t\t<td><code>003BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lang;<\/td>\r\n\t\t\t<td><code>Lang<\/code><\/td>\r\n\t\t\t<td><code>027EA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lang;<\/td>\r\n\t\t\t<td><code>lang<\/code><\/td>\r\n\t\t\t<td><code>027E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&langd;<\/td>\r\n\t\t\t<td><code>langd<\/code><\/td>\r\n\t\t\t<td><code>02991<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&langle;<\/td>\r\n\t\t\t<td><code>langle<\/code><\/td>\r\n\t\t\t<td><code>027E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lap;<\/td>\r\n\t\t\t<td><code>lap<\/code><\/td>\r\n\t\t\t<td><code>02A85<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Laplacetrf;<\/td>\r\n\t\t\t<td><code>Laplacetrf<\/code><\/td>\r\n\t\t\t<td><code>02112<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&laquo;<\/td>\r\n\t\t\t<td><code>laquo<\/code><\/td>\r\n\t\t\t<td><code>000AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Larr;<\/td>\r\n\t\t\t<td><code>Larr<\/code><\/td>\r\n\t\t\t<td><code>0219E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lArr;<\/td>\r\n\t\t\t<td><code>lArr<\/code><\/td>\r\n\t\t\t<td><code>021D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larr;<\/td>\r\n\t\t\t<td><code>larr<\/code><\/td>\r\n\t\t\t<td><code>02190<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrb;<\/td>\r\n\t\t\t<td><code>larrb<\/code><\/td>\r\n\t\t\t<td><code>021E4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrbfs;<\/td>\r\n\t\t\t<td><code>larrbfs<\/code><\/td>\r\n\t\t\t<td><code>0291F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrfs;<\/td>\r\n\t\t\t<td><code>larrfs<\/code><\/td>\r\n\t\t\t<td><code>0291D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrhk;<\/td>\r\n\t\t\t<td><code>larrhk<\/code><\/td>\r\n\t\t\t<td><code>021A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrlp;<\/td>\r\n\t\t\t<td><code>larrlp<\/code><\/td>\r\n\t\t\t<td><code>021AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrpl;<\/td>\r\n\t\t\t<td><code>larrpl<\/code><\/td>\r\n\t\t\t<td><code>02939<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrsim;<\/td>\r\n\t\t\t<td><code>larrsim<\/code><\/td>\r\n\t\t\t<td><code>02973<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&larrtl;<\/td>\r\n\t\t\t<td><code>larrtl<\/code><\/td>\r\n\t\t\t<td><code>021A2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lat;<\/td>\r\n\t\t\t<td><code>lat<\/code><\/td>\r\n\t\t\t<td><code>02AAB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lAtail;<\/td>\r\n\t\t\t<td><code>lAtail<\/code><\/td>\r\n\t\t\t<td><code>0291B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&latail;<\/td>\r\n\t\t\t<td><code>latail<\/code><\/td>\r\n\t\t\t<td><code>02919<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&late;<\/td>\r\n\t\t\t<td><code>late<\/code><\/td>\r\n\t\t\t<td><code>02AAD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lates;<\/td>\r\n\t\t\t<td><code>lates<\/code><\/td>\r\n\t\t\t<td><code>02AAD + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lBarr;<\/td>\r\n\t\t\t<td><code>lBarr<\/code><\/td>\r\n\t\t\t<td><code>0290E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbarr;<\/td>\r\n\t\t\t<td><code>lbarr<\/code><\/td>\r\n\t\t\t<td><code>0290C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbbrk;<\/td>\r\n\t\t\t<td><code>lbbrk<\/code><\/td>\r\n\t\t\t<td><code>02772<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbrace;<\/td>\r\n\t\t\t<td><code>lbrace<\/code><\/td>\r\n\t\t\t<td><code>0007B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbrack;<\/td>\r\n\t\t\t<td><code>lbrack<\/code><\/td>\r\n\t\t\t<td><code>0005B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbrke;<\/td>\r\n\t\t\t<td><code>lbrke<\/code><\/td>\r\n\t\t\t<td><code>0298B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbrksld;<\/td>\r\n\t\t\t<td><code>lbrksld<\/code><\/td>\r\n\t\t\t<td><code>0298F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lbrkslu;<\/td>\r\n\t\t\t<td><code>lbrkslu<\/code><\/td>\r\n\t\t\t<td><code>0298D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lcaron;<\/td>\r\n\t\t\t<td><code>Lcaron<\/code><\/td>\r\n\t\t\t<td><code>0013D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lcaron;<\/td>\r\n\t\t\t<td><code>lcaron<\/code><\/td>\r\n\t\t\t<td><code>0013E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lcedil;<\/td>\r\n\t\t\t<td><code>Lcedil<\/code><\/td>\r\n\t\t\t<td><code>0013B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lcedil;<\/td>\r\n\t\t\t<td><code>lcedil<\/code><\/td>\r\n\t\t\t<td><code>0013C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lceil;<\/td>\r\n\t\t\t<td><code>lceil<\/code><\/td>\r\n\t\t\t<td><code>02308<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lcub;<\/td>\r\n\t\t\t<td><code>lcub<\/code><\/td>\r\n\t\t\t<td><code>0007B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lcy;<\/td>\r\n\t\t\t<td><code>Lcy<\/code><\/td>\r\n\t\t\t<td><code>0041B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lcy;<\/td>\r\n\t\t\t<td><code>lcy<\/code><\/td>\r\n\t\t\t<td><code>0043B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldca;<\/td>\r\n\t\t\t<td><code>ldca<\/code><\/td>\r\n\t\t\t<td><code>02936<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldquo;<\/td>\r\n\t\t\t<td><code>ldquo<\/code><\/td>\r\n\t\t\t<td><code>0201C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldquor;<\/td>\r\n\t\t\t<td><code>ldquor<\/code><\/td>\r\n\t\t\t<td><code>0201E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldrdhar;<\/td>\r\n\t\t\t<td><code>ldrdhar<\/code><\/td>\r\n\t\t\t<td><code>02967<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldrushar;<\/td>\r\n\t\t\t<td><code>ldrushar<\/code><\/td>\r\n\t\t\t<td><code>0294B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ldsh;<\/td>\r\n\t\t\t<td><code>ldsh<\/code><\/td>\r\n\t\t\t<td><code>021B2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lE;<\/td>\r\n\t\t\t<td><code>lE<\/code><\/td>\r\n\t\t\t<td><code>02266<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&le;<\/td>\r\n\t\t\t<td><code>le<\/code><\/td>\r\n\t\t\t<td><code>02264<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftAngleBracket;<\/td>\r\n\t\t\t<td><code>LeftAngleBracket<\/code><\/td>\r\n\t\t\t<td><code>027E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftArrow;<\/td>\r\n\t\t\t<td><code>LeftArrow<\/code><\/td>\r\n\t\t\t<td><code>02190<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Leftarrow;<\/td>\r\n\t\t\t<td><code>Leftarrow<\/code><\/td>\r\n\t\t\t<td><code>021D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftarrow;<\/td>\r\n\t\t\t<td><code>leftarrow<\/code><\/td>\r\n\t\t\t<td><code>02190<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftArrowBar;<\/td>\r\n\t\t\t<td><code>LeftArrowBar<\/code><\/td>\r\n\t\t\t<td><code>021E4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftArrowRightArrow;<\/td>\r\n\t\t\t<td><code>LeftArrowRightArrow<\/code><\/td>\r\n\t\t\t<td><code>021C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftarrowtail;<\/td>\r\n\t\t\t<td><code>leftarrowtail<\/code><\/td>\r\n\t\t\t<td><code>021A2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftCeiling;<\/td>\r\n\t\t\t<td><code>LeftCeiling<\/code><\/td>\r\n\t\t\t<td><code>02308<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftDoubleBracket;<\/td>\r\n\t\t\t<td><code>LeftDoubleBracket<\/code><\/td>\r\n\t\t\t<td><code>027E6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftDownTeeVector;<\/td>\r\n\t\t\t<td><code>LeftDownTeeVector<\/code><\/td>\r\n\t\t\t<td><code>02961<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftDownVector;<\/td>\r\n\t\t\t<td><code>LeftDownVector<\/code><\/td>\r\n\t\t\t<td><code>021C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftDownVectorBar;<\/td>\r\n\t\t\t<td><code>LeftDownVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02959<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftFloor;<\/td>\r\n\t\t\t<td><code>LeftFloor<\/code><\/td>\r\n\t\t\t<td><code>0230A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftharpoondown;<\/td>\r\n\t\t\t<td><code>leftharpoondown<\/code><\/td>\r\n\t\t\t<td><code>021BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftharpoonup;<\/td>\r\n\t\t\t<td><code>leftharpoonup<\/code><\/td>\r\n\t\t\t<td><code>021BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftleftarrows;<\/td>\r\n\t\t\t<td><code>leftleftarrows<\/code><\/td>\r\n\t\t\t<td><code>021C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftRightArrow;<\/td>\r\n\t\t\t<td><code>LeftRightArrow<\/code><\/td>\r\n\t\t\t<td><code>02194<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Leftrightarrow;<\/td>\r\n\t\t\t<td><code>Leftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftrightarrow;<\/td>\r\n\t\t\t<td><code>leftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>02194<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftrightarrows;<\/td>\r\n\t\t\t<td><code>leftrightarrows<\/code><\/td>\r\n\t\t\t<td><code>021C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftrightharpoons;<\/td>\r\n\t\t\t<td><code>leftrightharpoons<\/code><\/td>\r\n\t\t\t<td><code>021CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftrightsquigarrow;<\/td>\r\n\t\t\t<td><code>leftrightsquigarrow<\/code><\/td>\r\n\t\t\t<td><code>021AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftRightVector;<\/td>\r\n\t\t\t<td><code>LeftRightVector<\/code><\/td>\r\n\t\t\t<td><code>0294E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTee;<\/td>\r\n\t\t\t<td><code>LeftTee<\/code><\/td>\r\n\t\t\t<td><code>022A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTeeArrow;<\/td>\r\n\t\t\t<td><code>LeftTeeArrow<\/code><\/td>\r\n\t\t\t<td><code>021A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTeeVector;<\/td>\r\n\t\t\t<td><code>LeftTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leftthreetimes;<\/td>\r\n\t\t\t<td><code>leftthreetimes<\/code><\/td>\r\n\t\t\t<td><code>022CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTriangle;<\/td>\r\n\t\t\t<td><code>LeftTriangle<\/code><\/td>\r\n\t\t\t<td><code>022B2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTriangleBar;<\/td>\r\n\t\t\t<td><code>LeftTriangleBar<\/code><\/td>\r\n\t\t\t<td><code>029CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftTriangleEqual;<\/td>\r\n\t\t\t<td><code>LeftTriangleEqual<\/code><\/td>\r\n\t\t\t<td><code>022B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftUpDownVector;<\/td>\r\n\t\t\t<td><code>LeftUpDownVector<\/code><\/td>\r\n\t\t\t<td><code>02951<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftUpTeeVector;<\/td>\r\n\t\t\t<td><code>LeftUpTeeVector<\/code><\/td>\r\n\t\t\t<td><code>02960<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftUpVector;<\/td>\r\n\t\t\t<td><code>LeftUpVector<\/code><\/td>\r\n\t\t\t<td><code>021BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftUpVectorBar;<\/td>\r\n\t\t\t<td><code>LeftUpVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02958<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftVector;<\/td>\r\n\t\t\t<td><code>LeftVector<\/code><\/td>\r\n\t\t\t<td><code>021BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LeftVectorBar;<\/td>\r\n\t\t\t<td><code>LeftVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02952<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lEg;<\/td>\r\n\t\t\t<td><code>lEg<\/code><\/td>\r\n\t\t\t<td><code>02A8B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leg;<\/td>\r\n\t\t\t<td><code>leg<\/code><\/td>\r\n\t\t\t<td><code>022DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leq;<\/td>\r\n\t\t\t<td><code>leq<\/code><\/td>\r\n\t\t\t<td><code>02264<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leqq;<\/td>\r\n\t\t\t<td><code>leqq<\/code><\/td>\r\n\t\t\t<td><code>02266<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&leqslant;<\/td>\r\n\t\t\t<td><code>leqslant<\/code><\/td>\r\n\t\t\t<td><code>02A7D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&les;<\/td>\r\n\t\t\t<td><code>les<\/code><\/td>\r\n\t\t\t<td><code>02A7D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lescc;<\/td>\r\n\t\t\t<td><code>lescc<\/code><\/td>\r\n\t\t\t<td><code>02AA8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesdot;<\/td>\r\n\t\t\t<td><code>lesdot<\/code><\/td>\r\n\t\t\t<td><code>02A7F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesdoto;<\/td>\r\n\t\t\t<td><code>lesdoto<\/code><\/td>\r\n\t\t\t<td><code>02A81<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesdotor;<\/td>\r\n\t\t\t<td><code>lesdotor<\/code><\/td>\r\n\t\t\t<td><code>02A83<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesg;<\/td>\r\n\t\t\t<td><code>lesg<\/code><\/td>\r\n\t\t\t<td><code>022DA + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesges;<\/td>\r\n\t\t\t<td><code>lesges<\/code><\/td>\r\n\t\t\t<td><code>02A93<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lessapprox;<\/td>\r\n\t\t\t<td><code>lessapprox<\/code><\/td>\r\n\t\t\t<td><code>02A85<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lessdot;<\/td>\r\n\t\t\t<td><code>lessdot<\/code><\/td>\r\n\t\t\t<td><code>022D6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesseqgtr;<\/td>\r\n\t\t\t<td><code>lesseqgtr<\/code><\/td>\r\n\t\t\t<td><code>022DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesseqqgtr;<\/td>\r\n\t\t\t<td><code>lesseqqgtr<\/code><\/td>\r\n\t\t\t<td><code>02A8B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessEqualGreater;<\/td>\r\n\t\t\t<td><code>LessEqualGreater<\/code><\/td>\r\n\t\t\t<td><code>022DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessFullEqual;<\/td>\r\n\t\t\t<td><code>LessFullEqual<\/code><\/td>\r\n\t\t\t<td><code>02266<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessGreater;<\/td>\r\n\t\t\t<td><code>LessGreater<\/code><\/td>\r\n\t\t\t<td><code>02276<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lessgtr;<\/td>\r\n\t\t\t<td><code>lessgtr<\/code><\/td>\r\n\t\t\t<td><code>02276<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessLess;<\/td>\r\n\t\t\t<td><code>LessLess<\/code><\/td>\r\n\t\t\t<td><code>02AA1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lesssim;<\/td>\r\n\t\t\t<td><code>lesssim<\/code><\/td>\r\n\t\t\t<td><code>02272<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessSlantEqual;<\/td>\r\n\t\t\t<td><code>LessSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>02A7D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LessTilde;<\/td>\r\n\t\t\t<td><code>LessTilde<\/code><\/td>\r\n\t\t\t<td><code>02272<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lfisht;<\/td>\r\n\t\t\t<td><code>lfisht<\/code><\/td>\r\n\t\t\t<td><code>0297C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lfloor;<\/td>\r\n\t\t\t<td><code>lfloor<\/code><\/td>\r\n\t\t\t<td><code>0230A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lfr;<\/td>\r\n\t\t\t<td><code>Lfr<\/code><\/td>\r\n\t\t\t<td><code>1D50F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lfr;<\/td>\r\n\t\t\t<td><code>lfr<\/code><\/td>\r\n\t\t\t<td><code>1D529<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lg;<\/td>\r\n\t\t\t<td><code>lg<\/code><\/td>\r\n\t\t\t<td><code>02276<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lgE;<\/td>\r\n\t\t\t<td><code>lgE<\/code><\/td>\r\n\t\t\t<td><code>02A91<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lHar;<\/td>\r\n\t\t\t<td><code>lHar<\/code><\/td>\r\n\t\t\t<td><code>02962<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lhard;<\/td>\r\n\t\t\t<td><code>lhard<\/code><\/td>\r\n\t\t\t<td><code>021BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lharu;<\/td>\r\n\t\t\t<td><code>lharu<\/code><\/td>\r\n\t\t\t<td><code>021BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lharul;<\/td>\r\n\t\t\t<td><code>lharul<\/code><\/td>\r\n\t\t\t<td><code>0296A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lhblk;<\/td>\r\n\t\t\t<td><code>lhblk<\/code><\/td>\r\n\t\t\t<td><code>02584<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LJcy;<\/td>\r\n\t\t\t<td><code>LJcy<\/code><\/td>\r\n\t\t\t<td><code>00409<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ljcy;<\/td>\r\n\t\t\t<td><code>ljcy<\/code><\/td>\r\n\t\t\t<td><code>00459<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ll;<\/td>\r\n\t\t\t<td><code>Ll<\/code><\/td>\r\n\t\t\t<td><code>022D8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ll;<\/td>\r\n\t\t\t<td><code>ll<\/code><\/td>\r\n\t\t\t<td><code>0226A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&llarr;<\/td>\r\n\t\t\t<td><code>llarr<\/code><\/td>\r\n\t\t\t<td><code>021C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&llcorner;<\/td>\r\n\t\t\t<td><code>llcorner<\/code><\/td>\r\n\t\t\t<td><code>0231E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lleftarrow;<\/td>\r\n\t\t\t<td><code>Lleftarrow<\/code><\/td>\r\n\t\t\t<td><code>021DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&llhard;<\/td>\r\n\t\t\t<td><code>llhard<\/code><\/td>\r\n\t\t\t<td><code>0296B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lltri;<\/td>\r\n\t\t\t<td><code>lltri<\/code><\/td>\r\n\t\t\t<td><code>025FA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lmidot;<\/td>\r\n\t\t\t<td><code>Lmidot<\/code><\/td>\r\n\t\t\t<td><code>0013F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lmidot;<\/td>\r\n\t\t\t<td><code>lmidot<\/code><\/td>\r\n\t\t\t<td><code>00140<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lmoust;<\/td>\r\n\t\t\t<td><code>lmoust<\/code><\/td>\r\n\t\t\t<td><code>023B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lmoustache;<\/td>\r\n\t\t\t<td><code>lmoustache<\/code><\/td>\r\n\t\t\t<td><code>023B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lnap;<\/td>\r\n\t\t\t<td><code>lnap<\/code><\/td>\r\n\t\t\t<td><code>02A89<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lnapprox;<\/td>\r\n\t\t\t<td><code>lnapprox<\/code><\/td>\r\n\t\t\t<td><code>02A89<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lnE;<\/td>\r\n\t\t\t<td><code>lnE<\/code><\/td>\r\n\t\t\t<td><code>02268<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lne;<\/td>\r\n\t\t\t<td><code>lne<\/code><\/td>\r\n\t\t\t<td><code>02A87<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lneq;<\/td>\r\n\t\t\t<td><code>lneq<\/code><\/td>\r\n\t\t\t<td><code>02A87<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lneqq;<\/td>\r\n\t\t\t<td><code>lneqq<\/code><\/td>\r\n\t\t\t<td><code>02268<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lnsim;<\/td>\r\n\t\t\t<td><code>lnsim<\/code><\/td>\r\n\t\t\t<td><code>022E6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&loang;<\/td>\r\n\t\t\t<td><code>loang<\/code><\/td>\r\n\t\t\t<td><code>027EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&loarr;<\/td>\r\n\t\t\t<td><code>loarr<\/code><\/td>\r\n\t\t\t<td><code>021FD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lobrk;<\/td>\r\n\t\t\t<td><code>lobrk<\/code><\/td>\r\n\t\t\t<td><code>027E6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LongLeftArrow;<\/td>\r\n\t\t\t<td><code>LongLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>027F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Longleftarrow;<\/td>\r\n\t\t\t<td><code>Longleftarrow<\/code><\/td>\r\n\t\t\t<td><code>027F8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&longleftarrow;<\/td>\r\n\t\t\t<td><code>longleftarrow<\/code><\/td>\r\n\t\t\t<td><code>027F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LongLeftRightArrow;<\/td>\r\n\t\t\t<td><code>LongLeftRightArrow<\/code><\/td>\r\n\t\t\t<td><code>027F7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Longleftrightarrow;<\/td>\r\n\t\t\t<td><code>Longleftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>027FA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&longleftrightarrow;<\/td>\r\n\t\t\t<td><code>longleftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>027F7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&longmapsto;<\/td>\r\n\t\t\t<td><code>longmapsto<\/code><\/td>\r\n\t\t\t<td><code>027FC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LongRightArrow;<\/td>\r\n\t\t\t<td><code>LongRightArrow<\/code><\/td>\r\n\t\t\t<td><code>027F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Longrightarrow;<\/td>\r\n\t\t\t<td><code>Longrightarrow<\/code><\/td>\r\n\t\t\t<td><code>027F9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&longrightarrow;<\/td>\r\n\t\t\t<td><code>longrightarrow<\/code><\/td>\r\n\t\t\t<td><code>027F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&looparrowleft;<\/td>\r\n\t\t\t<td><code>looparrowleft<\/code><\/td>\r\n\t\t\t<td><code>021AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&looparrowright;<\/td>\r\n\t\t\t<td><code>looparrowright<\/code><\/td>\r\n\t\t\t<td><code>021AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lopar;<\/td>\r\n\t\t\t<td><code>lopar<\/code><\/td>\r\n\t\t\t<td><code>02985<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lopf;<\/td>\r\n\t\t\t<td><code>Lopf<\/code><\/td>\r\n\t\t\t<td><code>1D543<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lopf;<\/td>\r\n\t\t\t<td><code>lopf<\/code><\/td>\r\n\t\t\t<td><code>1D55D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&loplus;<\/td>\r\n\t\t\t<td><code>loplus<\/code><\/td>\r\n\t\t\t<td><code>02A2D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lotimes;<\/td>\r\n\t\t\t<td><code>lotimes<\/code><\/td>\r\n\t\t\t<td><code>02A34<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lowast;<\/td>\r\n\t\t\t<td><code>lowast<\/code><\/td>\r\n\t\t\t<td><code>02217<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lowbar;<\/td>\r\n\t\t\t<td><code>lowbar<\/code><\/td>\r\n\t\t\t<td><code>0005F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LowerLeftArrow;<\/td>\r\n\t\t\t<td><code>LowerLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>02199<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&LowerRightArrow;<\/td>\r\n\t\t\t<td><code>LowerRightArrow<\/code><\/td>\r\n\t\t\t<td><code>02198<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&loz;<\/td>\r\n\t\t\t<td><code>loz<\/code><\/td>\r\n\t\t\t<td><code>025CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lozenge;<\/td>\r\n\t\t\t<td><code>lozenge<\/code><\/td>\r\n\t\t\t<td><code>025CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lozf;<\/td>\r\n\t\t\t<td><code>lozf<\/code><\/td>\r\n\t\t\t<td><code>029EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lpar;<\/td>\r\n\t\t\t<td><code>lpar<\/code><\/td>\r\n\t\t\t<td><code>00028<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lparlt;<\/td>\r\n\t\t\t<td><code>lparlt<\/code><\/td>\r\n\t\t\t<td><code>02993<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrarr;<\/td>\r\n\t\t\t<td><code>lrarr<\/code><\/td>\r\n\t\t\t<td><code>021C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrcorner;<\/td>\r\n\t\t\t<td><code>lrcorner<\/code><\/td>\r\n\t\t\t<td><code>0231F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrhar;<\/td>\r\n\t\t\t<td><code>lrhar<\/code><\/td>\r\n\t\t\t<td><code>021CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrhard;<\/td>\r\n\t\t\t<td><code>lrhard<\/code><\/td>\r\n\t\t\t<td><code>0296D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrm;<\/td>\r\n\t\t\t<td><code>lrm<\/code><\/td>\r\n\t\t\t<td><code>0200E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lrtri;<\/td>\r\n\t\t\t<td><code>lrtri<\/code><\/td>\r\n\t\t\t<td><code>022BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsaquo;<\/td>\r\n\t\t\t<td><code>lsaquo<\/code><\/td>\r\n\t\t\t<td><code>02039<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lscr;<\/td>\r\n\t\t\t<td><code>Lscr<\/code><\/td>\r\n\t\t\t<td><code>02112<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lscr;<\/td>\r\n\t\t\t<td><code>lscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lsh;<\/td>\r\n\t\t\t<td><code>Lsh<\/code><\/td>\r\n\t\t\t<td><code>021B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsh;<\/td>\r\n\t\t\t<td><code>lsh<\/code><\/td>\r\n\t\t\t<td><code>021B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsim;<\/td>\r\n\t\t\t<td><code>lsim<\/code><\/td>\r\n\t\t\t<td><code>02272<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsime;<\/td>\r\n\t\t\t<td><code>lsime<\/code><\/td>\r\n\t\t\t<td><code>02A8D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsimg;<\/td>\r\n\t\t\t<td><code>lsimg<\/code><\/td>\r\n\t\t\t<td><code>02A8F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsqb;<\/td>\r\n\t\t\t<td><code>lsqb<\/code><\/td>\r\n\t\t\t<td><code>0005B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsquo;<\/td>\r\n\t\t\t<td><code>lsquo<\/code><\/td>\r\n\t\t\t<td><code>02018<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lsquor;<\/td>\r\n\t\t\t<td><code>lsquor<\/code><\/td>\r\n\t\t\t<td><code>0201A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lstrok;<\/td>\r\n\t\t\t<td><code>Lstrok<\/code><\/td>\r\n\t\t\t<td><code>00141<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lstrok;<\/td>\r\n\t\t\t<td><code>lstrok<\/code><\/td>\r\n\t\t\t<td><code>00142<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Lt;<\/td>\r\n\t\t\t<td><code>Lt<\/code><\/td>\r\n\t\t\t<td><code>0226A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lt;<\/td>\r\n\t\t\t<td><code>lt<\/code><\/td>\r\n\t\t\t<td><code>0003C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltcc;<\/td>\r\n\t\t\t<td><code>ltcc<\/code><\/td>\r\n\t\t\t<td><code>02AA6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltcir;<\/td>\r\n\t\t\t<td><code>ltcir<\/code><\/td>\r\n\t\t\t<td><code>02A79<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltdot;<\/td>\r\n\t\t\t<td><code>ltdot<\/code><\/td>\r\n\t\t\t<td><code>022D6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lthree;<\/td>\r\n\t\t\t<td><code>lthree<\/code><\/td>\r\n\t\t\t<td><code>022CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltimes;<\/td>\r\n\t\t\t<td><code>ltimes<\/code><\/td>\r\n\t\t\t<td><code>022C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltlarr;<\/td>\r\n\t\t\t<td><code>ltlarr<\/code><\/td>\r\n\t\t\t<td><code>02976<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltquest;<\/td>\r\n\t\t\t<td><code>ltquest<\/code><\/td>\r\n\t\t\t<td><code>02A7B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltri;<\/td>\r\n\t\t\t<td><code>ltri<\/code><\/td>\r\n\t\t\t<td><code>025C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltrie;<\/td>\r\n\t\t\t<td><code>ltrie<\/code><\/td>\r\n\t\t\t<td><code>022B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltrif;<\/td>\r\n\t\t\t<td><code>ltrif<\/code><\/td>\r\n\t\t\t<td><code>025C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ltrPar;<\/td>\r\n\t\t\t<td><code>ltrPar<\/code><\/td>\r\n\t\t\t<td><code>02996<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lurdshar;<\/td>\r\n\t\t\t<td><code>lurdshar<\/code><\/td>\r\n\t\t\t<td><code>0294A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&luruhar;<\/td>\r\n\t\t\t<td><code>luruhar<\/code><\/td>\r\n\t\t\t<td><code>02966<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lvertneqq;<\/td>\r\n\t\t\t<td><code>lvertneqq<\/code><\/td>\r\n\t\t\t<td><code>02268 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&lvnE;<\/td>\r\n\t\t\t<td><code>lvnE<\/code><\/td>\r\n\t\t\t<td><code>02268 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-l","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"154","title":"[HTML5 Entities] M","post":"<p>All HTML5 entities starting with&nbsp;<strong>M.<\/strong><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&macr;<\/td>\r\n\t\t\t<td><code>macr<\/code><\/td>\r\n\t\t\t<td><code>000AF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&male;<\/td>\r\n\t\t\t<td><code>male<\/code><\/td>\r\n\t\t\t<td><code>02642<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&malt;<\/td>\r\n\t\t\t<td><code>malt<\/code><\/td>\r\n\t\t\t<td><code>02720<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&maltese;<\/td>\r\n\t\t\t<td><code>maltese<\/code><\/td>\r\n\t\t\t<td><code>02720<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Map;<\/td>\r\n\t\t\t<td><code>Map<\/code><\/td>\r\n\t\t\t<td><code>02905<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&map;<\/td>\r\n\t\t\t<td><code>map<\/code><\/td>\r\n\t\t\t<td><code>021A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mapsto;<\/td>\r\n\t\t\t<td><code>mapsto<\/code><\/td>\r\n\t\t\t<td><code>021A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mapstodown;<\/td>\r\n\t\t\t<td><code>mapstodown<\/code><\/td>\r\n\t\t\t<td><code>021A7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mapstoleft;<\/td>\r\n\t\t\t<td><code>mapstoleft<\/code><\/td>\r\n\t\t\t<td><code>021A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mapstoup;<\/td>\r\n\t\t\t<td><code>mapstoup<\/code><\/td>\r\n\t\t\t<td><code>021A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&marker;<\/td>\r\n\t\t\t<td><code>marker<\/code><\/td>\r\n\t\t\t<td><code>025AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mcomma;<\/td>\r\n\t\t\t<td><code>mcomma<\/code><\/td>\r\n\t\t\t<td><code>02A29<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mcy;<\/td>\r\n\t\t\t<td><code>Mcy<\/code><\/td>\r\n\t\t\t<td><code>0041C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mcy;<\/td>\r\n\t\t\t<td><code>mcy<\/code><\/td>\r\n\t\t\t<td><code>0043C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mdash;<\/td>\r\n\t\t\t<td><code>mdash<\/code><\/td>\r\n\t\t\t<td><code>02014<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mDDot;<\/td>\r\n\t\t\t<td><code>mDDot<\/code><\/td>\r\n\t\t\t<td><code>0223A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&measuredangle;<\/td>\r\n\t\t\t<td><code>measuredangle<\/code><\/td>\r\n\t\t\t<td><code>02221<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&MediumSpace;<\/td>\r\n\t\t\t<td><code>MediumSpace<\/code><\/td>\r\n\t\t\t<td><code>0205F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mellintrf;<\/td>\r\n\t\t\t<td><code>Mellintrf<\/code><\/td>\r\n\t\t\t<td><code>02133<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mfr;<\/td>\r\n\t\t\t<td><code>Mfr<\/code><\/td>\r\n\t\t\t<td><code>1D510<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mfr;<\/td>\r\n\t\t\t<td><code>mfr<\/code><\/td>\r\n\t\t\t<td><code>1D52A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mho;<\/td>\r\n\t\t\t<td><code>mho<\/code><\/td>\r\n\t\t\t<td><code>02127<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&micro;<\/td>\r\n\t\t\t<td><code>micro<\/code><\/td>\r\n\t\t\t<td><code>000B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mid;<\/td>\r\n\t\t\t<td><code>mid<\/code><\/td>\r\n\t\t\t<td><code>02223<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&midast;<\/td>\r\n\t\t\t<td><code>midast<\/code><\/td>\r\n\t\t\t<td><code>0002A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&midcir;<\/td>\r\n\t\t\t<td><code>midcir<\/code><\/td>\r\n\t\t\t<td><code>02AF0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&middot;<\/td>\r\n\t\t\t<td><code>middot<\/code><\/td>\r\n\t\t\t<td><code>000B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&minus;<\/td>\r\n\t\t\t<td><code>minus<\/code><\/td>\r\n\t\t\t<td><code>02212<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&minusb;<\/td>\r\n\t\t\t<td><code>minusb<\/code><\/td>\r\n\t\t\t<td><code>0229F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&minusd;<\/td>\r\n\t\t\t<td><code>minusd<\/code><\/td>\r\n\t\t\t<td><code>02238<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&minusdu;<\/td>\r\n\t\t\t<td><code>minusdu<\/code><\/td>\r\n\t\t\t<td><code>02A2A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&MinusPlus;<\/td>\r\n\t\t\t<td><code>MinusPlus<\/code><\/td>\r\n\t\t\t<td><code>02213<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mlcp;<\/td>\r\n\t\t\t<td><code>mlcp<\/code><\/td>\r\n\t\t\t<td><code>02ADB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mldr;<\/td>\r\n\t\t\t<td><code>mldr<\/code><\/td>\r\n\t\t\t<td><code>02026<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mnplus;<\/td>\r\n\t\t\t<td><code>mnplus<\/code><\/td>\r\n\t\t\t<td><code>02213<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&models;<\/td>\r\n\t\t\t<td><code>models<\/code><\/td>\r\n\t\t\t<td><code>022A7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mopf;<\/td>\r\n\t\t\t<td><code>Mopf<\/code><\/td>\r\n\t\t\t<td><code>1D544<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mopf;<\/td>\r\n\t\t\t<td><code>mopf<\/code><\/td>\r\n\t\t\t<td><code>1D55E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mp;<\/td>\r\n\t\t\t<td><code>mp<\/code><\/td>\r\n\t\t\t<td><code>02213<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mscr;<\/td>\r\n\t\t\t<td><code>Mscr<\/code><\/td>\r\n\t\t\t<td><code>02133<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mscr;<\/td>\r\n\t\t\t<td><code>mscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mstpos;<\/td>\r\n\t\t\t<td><code>mstpos<\/code><\/td>\r\n\t\t\t<td><code>0223E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Mu;<\/td>\r\n\t\t\t<td><code>Mu<\/code><\/td>\r\n\t\t\t<td><code>0039C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mu;<\/td>\r\n\t\t\t<td><code>mu<\/code><\/td>\r\n\t\t\t<td><code>003BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&multimap;<\/td>\r\n\t\t\t<td><code>multimap<\/code><\/td>\r\n\t\t\t<td><code>022B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&mumap;<\/td>\r\n\t\t\t<td><code>mumap<\/code><\/td>\r\n\t\t\t<td><code>022B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-m","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"155","title":"[HTML5 Entities] N","post":"<p>All HTML5 entities starting with&nbsp;<strong>N<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nabla;<\/td>\r\n\t\t\t<td><code>nabla<\/code><\/td>\r\n\t\t\t<td><code>02207<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Nacute;<\/td>\r\n\t\t\t<td><code>Nacute<\/code><\/td>\r\n\t\t\t<td><code>00143<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nacute;<\/td>\r\n\t\t\t<td><code>nacute<\/code><\/td>\r\n\t\t\t<td><code>00144<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nang;<\/td>\r\n\t\t\t<td><code>nang<\/code><\/td>\r\n\t\t\t<td><code>02220 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nap;<\/td>\r\n\t\t\t<td><code>nap<\/code><\/td>\r\n\t\t\t<td><code>02249<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&napE;<\/td>\r\n\t\t\t<td><code>napE<\/code><\/td>\r\n\t\t\t<td><code>02A70 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&napid;<\/td>\r\n\t\t\t<td><code>napid<\/code><\/td>\r\n\t\t\t<td><code>0224B + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&napos;<\/td>\r\n\t\t\t<td><code>napos<\/code><\/td>\r\n\t\t\t<td><code>00149<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&napprox;<\/td>\r\n\t\t\t<td><code>napprox<\/code><\/td>\r\n\t\t\t<td><code>02249<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&natur;<\/td>\r\n\t\t\t<td><code>natur<\/code><\/td>\r\n\t\t\t<td><code>0266E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&natural;<\/td>\r\n\t\t\t<td><code>natural<\/code><\/td>\r\n\t\t\t<td><code>0266E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&naturals;<\/td>\r\n\t\t\t<td><code>naturals<\/code><\/td>\r\n\t\t\t<td><code>02115<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;<\/td>\r\n\t\t\t<td><code>nbsp<\/code><\/td>\r\n\t\t\t<td><code>000A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbump;<\/td>\r\n\t\t\t<td><code>nbump<\/code><\/td>\r\n\t\t\t<td><code>0224E + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbumpe;<\/td>\r\n\t\t\t<td><code>nbumpe<\/code><\/td>\r\n\t\t\t<td><code>0224F + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncap;<\/td>\r\n\t\t\t<td><code>ncap<\/code><\/td>\r\n\t\t\t<td><code>02A43<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ncaron;<\/td>\r\n\t\t\t<td><code>Ncaron<\/code><\/td>\r\n\t\t\t<td><code>00147<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncaron;<\/td>\r\n\t\t\t<td><code>ncaron<\/code><\/td>\r\n\t\t\t<td><code>00148<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ncedil;<\/td>\r\n\t\t\t<td><code>Ncedil<\/code><\/td>\r\n\t\t\t<td><code>00145<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncedil;<\/td>\r\n\t\t\t<td><code>ncedil<\/code><\/td>\r\n\t\t\t<td><code>00146<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncong;<\/td>\r\n\t\t\t<td><code>ncong<\/code><\/td>\r\n\t\t\t<td><code>02247<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncongdot;<\/td>\r\n\t\t\t<td><code>ncongdot<\/code><\/td>\r\n\t\t\t<td><code>02A6D + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncup;<\/td>\r\n\t\t\t<td><code>ncup<\/code><\/td>\r\n\t\t\t<td><code>02A42<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ncy;<\/td>\r\n\t\t\t<td><code>Ncy<\/code><\/td>\r\n\t\t\t<td><code>0041D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ncy;<\/td>\r\n\t\t\t<td><code>ncy<\/code><\/td>\r\n\t\t\t<td><code>0043D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ndash;<\/td>\r\n\t\t\t<td><code>ndash<\/code><\/td>\r\n\t\t\t<td><code>02013<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ne;<\/td>\r\n\t\t\t<td><code>ne<\/code><\/td>\r\n\t\t\t<td><code>02260<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nearhk;<\/td>\r\n\t\t\t<td><code>nearhk<\/code><\/td>\r\n\t\t\t<td><code>02924<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&neArr;<\/td>\r\n\t\t\t<td><code>neArr<\/code><\/td>\r\n\t\t\t<td><code>021D7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nearr;<\/td>\r\n\t\t\t<td><code>nearr<\/code><\/td>\r\n\t\t\t<td><code>02197<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nearrow;<\/td>\r\n\t\t\t<td><code>nearrow<\/code><\/td>\r\n\t\t\t<td><code>02197<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nedot;<\/td>\r\n\t\t\t<td><code>nedot<\/code><\/td>\r\n\t\t\t<td><code>02250 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nequiv;<\/td>\r\n\t\t\t<td><code>nequiv<\/code><\/td>\r\n\t\t\t<td><code>02262<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nesear;<\/td>\r\n\t\t\t<td><code>nesear<\/code><\/td>\r\n\t\t\t<td><code>02928<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nesim;<\/td>\r\n\t\t\t<td><code>nesim<\/code><\/td>\r\n\t\t\t<td><code>02242 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NestedGreaterGreater;<\/td>\r\n\t\t\t<td><code>NestedGreaterGreater<\/code><\/td>\r\n\t\t\t<td><code>0226B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NestedLessLess;<\/td>\r\n\t\t\t<td><code>NestedLessLess<\/code><\/td>\r\n\t\t\t<td><code>0226A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NewLine;<\/td>\r\n\t\t\t<td><code>NewLine<\/code><\/td>\r\n\t\t\t<td><code>0000A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nexist;<\/td>\r\n\t\t\t<td><code>nexist<\/code><\/td>\r\n\t\t\t<td><code>02204<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nexists;<\/td>\r\n\t\t\t<td><code>nexists<\/code><\/td>\r\n\t\t\t<td><code>02204<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Nfr;<\/td>\r\n\t\t\t<td><code>Nfr<\/code><\/td>\r\n\t\t\t<td><code>1D511<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nfr;<\/td>\r\n\t\t\t<td><code>nfr<\/code><\/td>\r\n\t\t\t<td><code>1D52B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngE;<\/td>\r\n\t\t\t<td><code>ngE<\/code><\/td>\r\n\t\t\t<td><code>02267 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nge;<\/td>\r\n\t\t\t<td><code>nge<\/code><\/td>\r\n\t\t\t<td><code>02271<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngeq;<\/td>\r\n\t\t\t<td><code>ngeq<\/code><\/td>\r\n\t\t\t<td><code>02271<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngeqq;<\/td>\r\n\t\t\t<td><code>ngeqq<\/code><\/td>\r\n\t\t\t<td><code>02267 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngeqslant;<\/td>\r\n\t\t\t<td><code>ngeqslant<\/code><\/td>\r\n\t\t\t<td><code>02A7E + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nges;<\/td>\r\n\t\t\t<td><code>nges<\/code><\/td>\r\n\t\t\t<td><code>02A7E + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nGg;<\/td>\r\n\t\t\t<td><code>nGg<\/code><\/td>\r\n\t\t\t<td><code>022D9 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngsim;<\/td>\r\n\t\t\t<td><code>ngsim<\/code><\/td>\r\n\t\t\t<td><code>02275<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nGt;<\/td>\r\n\t\t\t<td><code>nGt<\/code><\/td>\r\n\t\t\t<td><code>0226B + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngt;<\/td>\r\n\t\t\t<td><code>ngt<\/code><\/td>\r\n\t\t\t<td><code>0226F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ngtr;<\/td>\r\n\t\t\t<td><code>ngtr<\/code><\/td>\r\n\t\t\t<td><code>0226F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nGtv;<\/td>\r\n\t\t\t<td><code>nGtv<\/code><\/td>\r\n\t\t\t<td><code>0226B + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nhArr;<\/td>\r\n\t\t\t<td><code>nhArr<\/code><\/td>\r\n\t\t\t<td><code>021CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nharr;<\/td>\r\n\t\t\t<td><code>nharr<\/code><\/td>\r\n\t\t\t<td><code>021AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nhpar;<\/td>\r\n\t\t\t<td><code>nhpar<\/code><\/td>\r\n\t\t\t<td><code>02AF2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ni;<\/td>\r\n\t\t\t<td><code>ni<\/code><\/td>\r\n\t\t\t<td><code>0220B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nis;<\/td>\r\n\t\t\t<td><code>nis<\/code><\/td>\r\n\t\t\t<td><code>022FC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nisd;<\/td>\r\n\t\t\t<td><code>nisd<\/code><\/td>\r\n\t\t\t<td><code>022FA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&niv;<\/td>\r\n\t\t\t<td><code>niv<\/code><\/td>\r\n\t\t\t<td><code>0220B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NJcy;<\/td>\r\n\t\t\t<td><code>NJcy<\/code><\/td>\r\n\t\t\t<td><code>0040A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&njcy;<\/td>\r\n\t\t\t<td><code>njcy<\/code><\/td>\r\n\t\t\t<td><code>0045A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nlArr;<\/td>\r\n\t\t\t<td><code>nlArr<\/code><\/td>\r\n\t\t\t<td><code>021CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nlarr;<\/td>\r\n\t\t\t<td><code>nlarr<\/code><\/td>\r\n\t\t\t<td><code>0219A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nldr;<\/td>\r\n\t\t\t<td><code>nldr<\/code><\/td>\r\n\t\t\t<td><code>02025<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nlE;<\/td>\r\n\t\t\t<td><code>nlE<\/code><\/td>\r\n\t\t\t<td><code>02266 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nle;<\/td>\r\n\t\t\t<td><code>nle<\/code><\/td>\r\n\t\t\t<td><code>02270<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nLeftarrow;<\/td>\r\n\t\t\t<td><code>nLeftarrow<\/code><\/td>\r\n\t\t\t<td><code>021CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nleftarrow;<\/td>\r\n\t\t\t<td><code>nleftarrow<\/code><\/td>\r\n\t\t\t<td><code>0219A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nLeftrightarrow;<\/td>\r\n\t\t\t<td><code>nLeftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nleftrightarrow;<\/td>\r\n\t\t\t<td><code>nleftrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nleq;<\/td>\r\n\t\t\t<td><code>nleq<\/code><\/td>\r\n\t\t\t<td><code>02270<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nleqq;<\/td>\r\n\t\t\t<td><code>nleqq<\/code><\/td>\r\n\t\t\t<td><code>02266 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nleqslant;<\/td>\r\n\t\t\t<td><code>nleqslant<\/code><\/td>\r\n\t\t\t<td><code>02A7D + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nles;<\/td>\r\n\t\t\t<td><code>nles<\/code><\/td>\r\n\t\t\t<td><code>02A7D + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nless;<\/td>\r\n\t\t\t<td><code>nless<\/code><\/td>\r\n\t\t\t<td><code>0226E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nLl;<\/td>\r\n\t\t\t<td><code>nLl<\/code><\/td>\r\n\t\t\t<td><code>022D8 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nlsim;<\/td>\r\n\t\t\t<td><code>nlsim<\/code><\/td>\r\n\t\t\t<td><code>02274<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nLt;<\/td>\r\n\t\t\t<td><code>nLt<\/code><\/td>\r\n\t\t\t<td><code>0226A + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nlt;<\/td>\r\n\t\t\t<td><code>nlt<\/code><\/td>\r\n\t\t\t<td><code>0226E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nltri;<\/td>\r\n\t\t\t<td><code>nltri<\/code><\/td>\r\n\t\t\t<td><code>022EA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nltrie;<\/td>\r\n\t\t\t<td><code>nltrie<\/code><\/td>\r\n\t\t\t<td><code>022EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nLtv;<\/td>\r\n\t\t\t<td><code>nLtv<\/code><\/td>\r\n\t\t\t<td><code>0226A + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nmid;<\/td>\r\n\t\t\t<td><code>nmid<\/code><\/td>\r\n\t\t\t<td><code>02224<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NoBreak;<\/td>\r\n\t\t\t<td><code>NoBreak<\/code><\/td>\r\n\t\t\t<td><code>02060<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NonBreakingSpace;<\/td>\r\n\t\t\t<td><code>NonBreakingSpace<\/code><\/td>\r\n\t\t\t<td><code>000A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Nopf;<\/td>\r\n\t\t\t<td><code>Nopf<\/code><\/td>\r\n\t\t\t<td><code>02115<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nopf;<\/td>\r\n\t\t\t<td><code>nopf<\/code><\/td>\r\n\t\t\t<td><code>1D55F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Not;<\/td>\r\n\t\t\t<td><code>Not<\/code><\/td>\r\n\t\t\t<td><code>02AEC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&not;<\/td>\r\n\t\t\t<td><code>not<\/code><\/td>\r\n\t\t\t<td><code>000AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotCongruent;<\/td>\r\n\t\t\t<td><code>NotCongruent<\/code><\/td>\r\n\t\t\t<td><code>02262<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotCupCap;<\/td>\r\n\t\t\t<td><code>NotCupCap<\/code><\/td>\r\n\t\t\t<td><code>0226D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotDoubleVerticalBar;<\/td>\r\n\t\t\t<td><code>NotDoubleVerticalBar<\/code><\/td>\r\n\t\t\t<td><code>02226<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotElement;<\/td>\r\n\t\t\t<td><code>NotElement<\/code><\/td>\r\n\t\t\t<td><code>02209<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotEqual;<\/td>\r\n\t\t\t<td><code>NotEqual<\/code><\/td>\r\n\t\t\t<td><code>02260<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotEqualTilde;<\/td>\r\n\t\t\t<td><code>NotEqualTilde<\/code><\/td>\r\n\t\t\t<td><code>02242 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotExists;<\/td>\r\n\t\t\t<td><code>NotExists<\/code><\/td>\r\n\t\t\t<td><code>02204<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreater;<\/td>\r\n\t\t\t<td><code>NotGreater<\/code><\/td>\r\n\t\t\t<td><code>0226F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterEqual;<\/td>\r\n\t\t\t<td><code>NotGreaterEqual<\/code><\/td>\r\n\t\t\t<td><code>02271<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterFullEqual;<\/td>\r\n\t\t\t<td><code>NotGreaterFullEqual<\/code><\/td>\r\n\t\t\t<td><code>02267 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterGreater;<\/td>\r\n\t\t\t<td><code>NotGreaterGreater<\/code><\/td>\r\n\t\t\t<td><code>0226B + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterLess;<\/td>\r\n\t\t\t<td><code>NotGreaterLess<\/code><\/td>\r\n\t\t\t<td><code>02279<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterSlantEqual;<\/td>\r\n\t\t\t<td><code>NotGreaterSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>02A7E + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotGreaterTilde;<\/td>\r\n\t\t\t<td><code>NotGreaterTilde<\/code><\/td>\r\n\t\t\t<td><code>02275<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotHumpDownHump;<\/td>\r\n\t\t\t<td><code>NotHumpDownHump<\/code><\/td>\r\n\t\t\t<td><code>0224E + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotHumpEqual;<\/td>\r\n\t\t\t<td><code>NotHumpEqual<\/code><\/td>\r\n\t\t\t<td><code>0224F + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notin;<\/td>\r\n\t\t\t<td><code>notin<\/code><\/td>\r\n\t\t\t<td><code>02209<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notindot;<\/td>\r\n\t\t\t<td><code>notindot<\/code><\/td>\r\n\t\t\t<td><code>022F5 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notinE;<\/td>\r\n\t\t\t<td><code>notinE<\/code><\/td>\r\n\t\t\t<td><code>022F9 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notinva;<\/td>\r\n\t\t\t<td><code>notinva<\/code><\/td>\r\n\t\t\t<td><code>02209<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notinvb;<\/td>\r\n\t\t\t<td><code>notinvb<\/code><\/td>\r\n\t\t\t<td><code>022F7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notinvc;<\/td>\r\n\t\t\t<td><code>notinvc<\/code><\/td>\r\n\t\t\t<td><code>022F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLeftTriangle;<\/td>\r\n\t\t\t<td><code>NotLeftTriangle<\/code><\/td>\r\n\t\t\t<td><code>022EA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLeftTriangleBar;<\/td>\r\n\t\t\t<td><code>NotLeftTriangleBar<\/code><\/td>\r\n\t\t\t<td><code>029CF + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLeftTriangleEqual;<\/td>\r\n\t\t\t<td><code>NotLeftTriangleEqual<\/code><\/td>\r\n\t\t\t<td><code>022EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLess;<\/td>\r\n\t\t\t<td><code>NotLess<\/code><\/td>\r\n\t\t\t<td><code>0226E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLessEqual;<\/td>\r\n\t\t\t<td><code>NotLessEqual<\/code><\/td>\r\n\t\t\t<td><code>02270<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLessGreater;<\/td>\r\n\t\t\t<td><code>NotLessGreater<\/code><\/td>\r\n\t\t\t<td><code>02278<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLessLess;<\/td>\r\n\t\t\t<td><code>NotLessLess<\/code><\/td>\r\n\t\t\t<td><code>0226A + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLessSlantEqual;<\/td>\r\n\t\t\t<td><code>NotLessSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>02A7D + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotLessTilde;<\/td>\r\n\t\t\t<td><code>NotLessTilde<\/code><\/td>\r\n\t\t\t<td><code>02274<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotNestedGreaterGreater;<\/td>\r\n\t\t\t<td><code>NotNestedGreaterGreater<\/code><\/td>\r\n\t\t\t<td><code>02AA2 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotNestedLessLess;<\/td>\r\n\t\t\t<td><code>NotNestedLessLess<\/code><\/td>\r\n\t\t\t<td><code>02AA1 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notni;<\/td>\r\n\t\t\t<td><code>notni<\/code><\/td>\r\n\t\t\t<td><code>0220C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notniva;<\/td>\r\n\t\t\t<td><code>notniva<\/code><\/td>\r\n\t\t\t<td><code>0220C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notnivb;<\/td>\r\n\t\t\t<td><code>notnivb<\/code><\/td>\r\n\t\t\t<td><code>022FE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&notnivc;<\/td>\r\n\t\t\t<td><code>notnivc<\/code><\/td>\r\n\t\t\t<td><code>022FD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotPrecedes;<\/td>\r\n\t\t\t<td><code>NotPrecedes<\/code><\/td>\r\n\t\t\t<td><code>02280<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotPrecedesEqual;<\/td>\r\n\t\t\t<td><code>NotPrecedesEqual<\/code><\/td>\r\n\t\t\t<td><code>02AAF + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotPrecedesSlantEqual;<\/td>\r\n\t\t\t<td><code>NotPrecedesSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>022E0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotReverseElement;<\/td>\r\n\t\t\t<td><code>NotReverseElement<\/code><\/td>\r\n\t\t\t<td><code>0220C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotRightTriangle;<\/td>\r\n\t\t\t<td><code>NotRightTriangle<\/code><\/td>\r\n\t\t\t<td><code>022EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotRightTriangleBar;<\/td>\r\n\t\t\t<td><code>NotRightTriangleBar<\/code><\/td>\r\n\t\t\t<td><code>029D0 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotRightTriangleEqual;<\/td>\r\n\t\t\t<td><code>NotRightTriangleEqual<\/code><\/td>\r\n\t\t\t<td><code>022ED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSquareSubset;<\/td>\r\n\t\t\t<td><code>NotSquareSubset<\/code><\/td>\r\n\t\t\t<td><code>0228F + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSquareSubsetEqual;<\/td>\r\n\t\t\t<td><code>NotSquareSubsetEqual<\/code><\/td>\r\n\t\t\t<td><code>022E2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSquareSuperset;<\/td>\r\n\t\t\t<td><code>NotSquareSuperset<\/code><\/td>\r\n\t\t\t<td><code>02290 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSquareSupersetEqual;<\/td>\r\n\t\t\t<td><code>NotSquareSupersetEqual<\/code><\/td>\r\n\t\t\t<td><code>022E3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSubset;<\/td>\r\n\t\t\t<td><code>NotSubset<\/code><\/td>\r\n\t\t\t<td><code>02282 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSubsetEqual;<\/td>\r\n\t\t\t<td><code>NotSubsetEqual<\/code><\/td>\r\n\t\t\t<td><code>02288<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSucceeds;<\/td>\r\n\t\t\t<td><code>NotSucceeds<\/code><\/td>\r\n\t\t\t<td><code>02281<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSucceedsEqual;<\/td>\r\n\t\t\t<td><code>NotSucceedsEqual<\/code><\/td>\r\n\t\t\t<td><code>02AB0 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSucceedsSlantEqual;<\/td>\r\n\t\t\t<td><code>NotSucceedsSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>022E1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSucceedsTilde;<\/td>\r\n\t\t\t<td><code>NotSucceedsTilde<\/code><\/td>\r\n\t\t\t<td><code>0227F + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSuperset;<\/td>\r\n\t\t\t<td><code>NotSuperset<\/code><\/td>\r\n\t\t\t<td><code>02283 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotSupersetEqual;<\/td>\r\n\t\t\t<td><code>NotSupersetEqual<\/code><\/td>\r\n\t\t\t<td><code>02289<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotTilde;<\/td>\r\n\t\t\t<td><code>NotTilde<\/code><\/td>\r\n\t\t\t<td><code>02241<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotTildeEqual;<\/td>\r\n\t\t\t<td><code>NotTildeEqual<\/code><\/td>\r\n\t\t\t<td><code>02244<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotTildeFullEqual;<\/td>\r\n\t\t\t<td><code>NotTildeFullEqual<\/code><\/td>\r\n\t\t\t<td><code>02247<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotTildeTilde;<\/td>\r\n\t\t\t<td><code>NotTildeTilde<\/code><\/td>\r\n\t\t\t<td><code>02249<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&NotVerticalBar;<\/td>\r\n\t\t\t<td><code>NotVerticalBar<\/code><\/td>\r\n\t\t\t<td><code>02224<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npar;<\/td>\r\n\t\t\t<td><code>npar<\/code><\/td>\r\n\t\t\t<td><code>02226<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nparallel;<\/td>\r\n\t\t\t<td><code>nparallel<\/code><\/td>\r\n\t\t\t<td><code>02226<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nparsl;<\/td>\r\n\t\t\t<td><code>nparsl<\/code><\/td>\r\n\t\t\t<td><code>02AFD + 020E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npart;<\/td>\r\n\t\t\t<td><code>npart<\/code><\/td>\r\n\t\t\t<td><code>02202 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npolint;<\/td>\r\n\t\t\t<td><code>npolint<\/code><\/td>\r\n\t\t\t<td><code>02A14<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npr;<\/td>\r\n\t\t\t<td><code>npr<\/code><\/td>\r\n\t\t\t<td><code>02280<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nprcue;<\/td>\r\n\t\t\t<td><code>nprcue<\/code><\/td>\r\n\t\t\t<td><code>022E0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npre;<\/td>\r\n\t\t\t<td><code>npre<\/code><\/td>\r\n\t\t\t<td><code>02AAF + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nprec;<\/td>\r\n\t\t\t<td><code>nprec<\/code><\/td>\r\n\t\t\t<td><code>02280<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&npreceq;<\/td>\r\n\t\t\t<td><code>npreceq<\/code><\/td>\r\n\t\t\t<td><code>02AAF + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrArr;<\/td>\r\n\t\t\t<td><code>nrArr<\/code><\/td>\r\n\t\t\t<td><code>021CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrarr;<\/td>\r\n\t\t\t<td><code>nrarr<\/code><\/td>\r\n\t\t\t<td><code>0219B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrarrc;<\/td>\r\n\t\t\t<td><code>nrarrc<\/code><\/td>\r\n\t\t\t<td><code>02933 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrarrw;<\/td>\r\n\t\t\t<td><code>nrarrw<\/code><\/td>\r\n\t\t\t<td><code>0219D + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nRightarrow;<\/td>\r\n\t\t\t<td><code>nRightarrow<\/code><\/td>\r\n\t\t\t<td><code>021CF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrightarrow;<\/td>\r\n\t\t\t<td><code>nrightarrow<\/code><\/td>\r\n\t\t\t<td><code>0219B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrtri;<\/td>\r\n\t\t\t<td><code>nrtri<\/code><\/td>\r\n\t\t\t<td><code>022EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nrtrie;<\/td>\r\n\t\t\t<td><code>nrtrie<\/code><\/td>\r\n\t\t\t<td><code>022ED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsc;<\/td>\r\n\t\t\t<td><code>nsc<\/code><\/td>\r\n\t\t\t<td><code>02281<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsccue;<\/td>\r\n\t\t\t<td><code>nsccue<\/code><\/td>\r\n\t\t\t<td><code>022E1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsce;<\/td>\r\n\t\t\t<td><code>nsce<\/code><\/td>\r\n\t\t\t<td><code>02AB0 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Nscr;<\/td>\r\n\t\t\t<td><code>Nscr<\/code><\/td>\r\n\t\t\t<td><code>1D4A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nscr;<\/td>\r\n\t\t\t<td><code>nscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nshortmid;<\/td>\r\n\t\t\t<td><code>nshortmid<\/code><\/td>\r\n\t\t\t<td><code>02224<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nshortparallel;<\/td>\r\n\t\t\t<td><code>nshortparallel<\/code><\/td>\r\n\t\t\t<td><code>02226<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsim;<\/td>\r\n\t\t\t<td><code>nsim<\/code><\/td>\r\n\t\t\t<td><code>02241<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsime;<\/td>\r\n\t\t\t<td><code>nsime<\/code><\/td>\r\n\t\t\t<td><code>02244<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsimeq;<\/td>\r\n\t\t\t<td><code>nsimeq<\/code><\/td>\r\n\t\t\t<td><code>02244<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsmid;<\/td>\r\n\t\t\t<td><code>nsmid<\/code><\/td>\r\n\t\t\t<td><code>02224<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nspar;<\/td>\r\n\t\t\t<td><code>nspar<\/code><\/td>\r\n\t\t\t<td><code>02226<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsqsube;<\/td>\r\n\t\t\t<td><code>nsqsube<\/code><\/td>\r\n\t\t\t<td><code>022E2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsqsupe;<\/td>\r\n\t\t\t<td><code>nsqsupe<\/code><\/td>\r\n\t\t\t<td><code>022E3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsub;<\/td>\r\n\t\t\t<td><code>nsub<\/code><\/td>\r\n\t\t\t<td><code>02284<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsubE;<\/td>\r\n\t\t\t<td><code>nsubE<\/code><\/td>\r\n\t\t\t<td><code>02AC5 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsube;<\/td>\r\n\t\t\t<td><code>nsube<\/code><\/td>\r\n\t\t\t<td><code>02288<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsubset;<\/td>\r\n\t\t\t<td><code>nsubset<\/code><\/td>\r\n\t\t\t<td><code>02282 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsubseteq;<\/td>\r\n\t\t\t<td><code>nsubseteq<\/code><\/td>\r\n\t\t\t<td><code>02288<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsubseteqq;<\/td>\r\n\t\t\t<td><code>nsubseteqq<\/code><\/td>\r\n\t\t\t<td><code>02AC5 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsucc;<\/td>\r\n\t\t\t<td><code>nsucc<\/code><\/td>\r\n\t\t\t<td><code>02281<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsucceq;<\/td>\r\n\t\t\t<td><code>nsucceq<\/code><\/td>\r\n\t\t\t<td><code>02AB0 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsup;<\/td>\r\n\t\t\t<td><code>nsup<\/code><\/td>\r\n\t\t\t<td><code>02285<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsupE;<\/td>\r\n\t\t\t<td><code>nsupE<\/code><\/td>\r\n\t\t\t<td><code>02AC6 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsupe;<\/td>\r\n\t\t\t<td><code>nsupe<\/code><\/td>\r\n\t\t\t<td><code>02289<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsupset;<\/td>\r\n\t\t\t<td><code>nsupset<\/code><\/td>\r\n\t\t\t<td><code>02283 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsupseteq;<\/td>\r\n\t\t\t<td><code>nsupseteq<\/code><\/td>\r\n\t\t\t<td><code>02289<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nsupseteqq;<\/td>\r\n\t\t\t<td><code>nsupseteqq<\/code><\/td>\r\n\t\t\t<td><code>02AC6 + 00338<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntgl;<\/td>\r\n\t\t\t<td><code>ntgl<\/code><\/td>\r\n\t\t\t<td><code>02279<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ntilde;<\/td>\r\n\t\t\t<td><code>Ntilde<\/code><\/td>\r\n\t\t\t<td><code>000D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntilde;<\/td>\r\n\t\t\t<td><code>ntilde<\/code><\/td>\r\n\t\t\t<td><code>000F1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntlg;<\/td>\r\n\t\t\t<td><code>ntlg<\/code><\/td>\r\n\t\t\t<td><code>02278<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntriangleleft;<\/td>\r\n\t\t\t<td><code>ntriangleleft<\/code><\/td>\r\n\t\t\t<td><code>022EA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntrianglelefteq;<\/td>\r\n\t\t\t<td><code>ntrianglelefteq<\/code><\/td>\r\n\t\t\t<td><code>022EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntriangleright;<\/td>\r\n\t\t\t<td><code>ntriangleright<\/code><\/td>\r\n\t\t\t<td><code>022EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ntrianglerighteq;<\/td>\r\n\t\t\t<td><code>ntrianglerighteq<\/code><\/td>\r\n\t\t\t<td><code>022ED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Nu;<\/td>\r\n\t\t\t<td><code>Nu<\/code><\/td>\r\n\t\t\t<td><code>0039D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nu;<\/td>\r\n\t\t\t<td><code>nu<\/code><\/td>\r\n\t\t\t<td><code>003BD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&num;<\/td>\r\n\t\t\t<td><code>num<\/code><\/td>\r\n\t\t\t<td><code>00023<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&numero;<\/td>\r\n\t\t\t<td><code>numero<\/code><\/td>\r\n\t\t\t<td><code>02116<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&numsp;<\/td>\r\n\t\t\t<td><code>numsp<\/code><\/td>\r\n\t\t\t<td><code>02007<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvap;<\/td>\r\n\t\t\t<td><code>nvap<\/code><\/td>\r\n\t\t\t<td><code>0224D + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nVDash;<\/td>\r\n\t\t\t<td><code>nVDash<\/code><\/td>\r\n\t\t\t<td><code>022AF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nVdash;<\/td>\r\n\t\t\t<td><code>nVdash<\/code><\/td>\r\n\t\t\t<td><code>022AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvDash;<\/td>\r\n\t\t\t<td><code>nvDash<\/code><\/td>\r\n\t\t\t<td><code>022AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvdash;<\/td>\r\n\t\t\t<td><code>nvdash<\/code><\/td>\r\n\t\t\t<td><code>022AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvge;<\/td>\r\n\t\t\t<td><code>nvge<\/code><\/td>\r\n\t\t\t<td><code>02265 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvgt;<\/td>\r\n\t\t\t<td><code>nvgt<\/code><\/td>\r\n\t\t\t<td><code>0003E + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvHarr;<\/td>\r\n\t\t\t<td><code>nvHarr<\/code><\/td>\r\n\t\t\t<td><code>02904<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvinfin;<\/td>\r\n\t\t\t<td><code>nvinfin<\/code><\/td>\r\n\t\t\t<td><code>029DE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvlArr;<\/td>\r\n\t\t\t<td><code>nvlArr<\/code><\/td>\r\n\t\t\t<td><code>02902<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvle;<\/td>\r\n\t\t\t<td><code>nvle<\/code><\/td>\r\n\t\t\t<td><code>02264 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvlt;<\/td>\r\n\t\t\t<td><code>nvlt<\/code><\/td>\r\n\t\t\t<td><code>0003C + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvltrie;<\/td>\r\n\t\t\t<td><code>nvltrie<\/code><\/td>\r\n\t\t\t<td><code>022B4 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvrArr;<\/td>\r\n\t\t\t<td><code>nvrArr<\/code><\/td>\r\n\t\t\t<td><code>02903<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvrtrie;<\/td>\r\n\t\t\t<td><code>nvrtrie<\/code><\/td>\r\n\t\t\t<td><code>022B5 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nvsim;<\/td>\r\n\t\t\t<td><code>nvsim<\/code><\/td>\r\n\t\t\t<td><code>0223C + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nwarhk;<\/td>\r\n\t\t\t<td><code>nwarhk<\/code><\/td>\r\n\t\t\t<td><code>02923<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nwArr;<\/td>\r\n\t\t\t<td><code>nwArr<\/code><\/td>\r\n\t\t\t<td><code>021D6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nwarr;<\/td>\r\n\t\t\t<td><code>nwarr<\/code><\/td>\r\n\t\t\t<td><code>02196<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nwarrow;<\/td>\r\n\t\t\t<td><code>nwarrow<\/code><\/td>\r\n\t\t\t<td><code>02196<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nwnear;<\/td>\r\n\t\t\t<td><code>nwnear<\/code><\/td>\r\n\t\t\t<td><code>02927<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-n","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"156","title":"[HTML5 Entities] O","post":"<p>All HTML5 entities starting with&nbsp;<strong>O.<\/strong><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Oacute;<\/td>\r\n\t\t\t<td><code>Oacute<\/code><\/td>\r\n\t\t\t<td><code>000D3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oacute;<\/td>\r\n\t\t\t<td><code>oacute<\/code><\/td>\r\n\t\t\t<td><code>000F3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oast;<\/td>\r\n\t\t\t<td><code>oast<\/code><\/td>\r\n\t\t\t<td><code>0229B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ocir;<\/td>\r\n\t\t\t<td><code>ocir<\/code><\/td>\r\n\t\t\t<td><code>0229A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ocirc;<\/td>\r\n\t\t\t<td><code>Ocirc<\/code><\/td>\r\n\t\t\t<td><code>000D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ocirc;<\/td>\r\n\t\t\t<td><code>ocirc<\/code><\/td>\r\n\t\t\t<td><code>000F4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ocy;<\/td>\r\n\t\t\t<td><code>Ocy<\/code><\/td>\r\n\t\t\t<td><code>0041E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ocy;<\/td>\r\n\t\t\t<td><code>ocy<\/code><\/td>\r\n\t\t\t<td><code>0043E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&odash;<\/td>\r\n\t\t\t<td><code>odash<\/code><\/td>\r\n\t\t\t<td><code>0229D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Odblac;<\/td>\r\n\t\t\t<td><code>Odblac<\/code><\/td>\r\n\t\t\t<td><code>00150<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&odblac;<\/td>\r\n\t\t\t<td><code>odblac<\/code><\/td>\r\n\t\t\t<td><code>00151<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&odiv;<\/td>\r\n\t\t\t<td><code>odiv<\/code><\/td>\r\n\t\t\t<td><code>02A38<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&odot;<\/td>\r\n\t\t\t<td><code>odot<\/code><\/td>\r\n\t\t\t<td><code>02299<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&odsold;<\/td>\r\n\t\t\t<td><code>odsold<\/code><\/td>\r\n\t\t\t<td><code>029BC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OElig;<\/td>\r\n\t\t\t<td><code>OElig<\/code><\/td>\r\n\t\t\t<td><code>00152<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oelig;<\/td>\r\n\t\t\t<td><code>oelig<\/code><\/td>\r\n\t\t\t<td><code>00153<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ofcir;<\/td>\r\n\t\t\t<td><code>ofcir<\/code><\/td>\r\n\t\t\t<td><code>029BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ofr;<\/td>\r\n\t\t\t<td><code>Ofr<\/code><\/td>\r\n\t\t\t<td><code>1D512<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ofr;<\/td>\r\n\t\t\t<td><code>ofr<\/code><\/td>\r\n\t\t\t<td><code>1D52C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ogon;<\/td>\r\n\t\t\t<td><code>ogon<\/code><\/td>\r\n\t\t\t<td><code>002DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ograve;<\/td>\r\n\t\t\t<td><code>Ograve<\/code><\/td>\r\n\t\t\t<td><code>000D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ograve;<\/td>\r\n\t\t\t<td><code>ograve<\/code><\/td>\r\n\t\t\t<td><code>000F2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ogt;<\/td>\r\n\t\t\t<td><code>ogt<\/code><\/td>\r\n\t\t\t<td><code>029C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ohbar;<\/td>\r\n\t\t\t<td><code>ohbar<\/code><\/td>\r\n\t\t\t<td><code>029B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ohm;<\/td>\r\n\t\t\t<td><code>ohm<\/code><\/td>\r\n\t\t\t<td><code>003A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oint;<\/td>\r\n\t\t\t<td><code>oint<\/code><\/td>\r\n\t\t\t<td><code>0222E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&olarr;<\/td>\r\n\t\t\t<td><code>olarr<\/code><\/td>\r\n\t\t\t<td><code>021BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&olcir;<\/td>\r\n\t\t\t<td><code>olcir<\/code><\/td>\r\n\t\t\t<td><code>029BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&olcross;<\/td>\r\n\t\t\t<td><code>olcross<\/code><\/td>\r\n\t\t\t<td><code>029BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oline;<\/td>\r\n\t\t\t<td><code>oline<\/code><\/td>\r\n\t\t\t<td><code>0203E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&olt;<\/td>\r\n\t\t\t<td><code>olt<\/code><\/td>\r\n\t\t\t<td><code>029C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Omacr;<\/td>\r\n\t\t\t<td><code>Omacr<\/code><\/td>\r\n\t\t\t<td><code>0014C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&omacr;<\/td>\r\n\t\t\t<td><code>omacr<\/code><\/td>\r\n\t\t\t<td><code>0014D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Omega;<\/td>\r\n\t\t\t<td><code>Omega<\/code><\/td>\r\n\t\t\t<td><code>003A9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&omega;<\/td>\r\n\t\t\t<td><code>omega<\/code><\/td>\r\n\t\t\t<td><code>003C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Omicron;<\/td>\r\n\t\t\t<td><code>Omicron<\/code><\/td>\r\n\t\t\t<td><code>0039F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&omicron;<\/td>\r\n\t\t\t<td><code>omicron<\/code><\/td>\r\n\t\t\t<td><code>003BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&omid;<\/td>\r\n\t\t\t<td><code>omid<\/code><\/td>\r\n\t\t\t<td><code>029B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ominus;<\/td>\r\n\t\t\t<td><code>ominus<\/code><\/td>\r\n\t\t\t<td><code>02296<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Oopf;<\/td>\r\n\t\t\t<td><code>Oopf<\/code><\/td>\r\n\t\t\t<td><code>1D546<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oopf;<\/td>\r\n\t\t\t<td><code>oopf<\/code><\/td>\r\n\t\t\t<td><code>1D560<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&opar;<\/td>\r\n\t\t\t<td><code>opar<\/code><\/td>\r\n\t\t\t<td><code>029B7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OpenCurlyDoubleQuote;<\/td>\r\n\t\t\t<td><code>OpenCurlyDoubleQuote<\/code><\/td>\r\n\t\t\t<td><code>0201C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OpenCurlyQuote;<\/td>\r\n\t\t\t<td><code>OpenCurlyQuote<\/code><\/td>\r\n\t\t\t<td><code>02018<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&operp;<\/td>\r\n\t\t\t<td><code>operp<\/code><\/td>\r\n\t\t\t<td><code>029B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oplus;<\/td>\r\n\t\t\t<td><code>oplus<\/code><\/td>\r\n\t\t\t<td><code>02295<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Or;<\/td>\r\n\t\t\t<td><code>Or<\/code><\/td>\r\n\t\t\t<td><code>02A54<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&or;<\/td>\r\n\t\t\t<td><code>or<\/code><\/td>\r\n\t\t\t<td><code>02228<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&orarr;<\/td>\r\n\t\t\t<td><code>orarr<\/code><\/td>\r\n\t\t\t<td><code>021BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ord;<\/td>\r\n\t\t\t<td><code>ord<\/code><\/td>\r\n\t\t\t<td><code>02A5D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&order;<\/td>\r\n\t\t\t<td><code>order<\/code><\/td>\r\n\t\t\t<td><code>02134<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&orderof;<\/td>\r\n\t\t\t<td><code>orderof<\/code><\/td>\r\n\t\t\t<td><code>02134<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ordf;<\/td>\r\n\t\t\t<td><code>ordf<\/code><\/td>\r\n\t\t\t<td><code>000AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ordm;<\/td>\r\n\t\t\t<td><code>ordm<\/code><\/td>\r\n\t\t\t<td><code>000BA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&origof;<\/td>\r\n\t\t\t<td><code>origof<\/code><\/td>\r\n\t\t\t<td><code>022B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oror;<\/td>\r\n\t\t\t<td><code>oror<\/code><\/td>\r\n\t\t\t<td><code>02A56<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&orslope;<\/td>\r\n\t\t\t<td><code>orslope<\/code><\/td>\r\n\t\t\t<td><code>02A57<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&orv;<\/td>\r\n\t\t\t<td><code>orv<\/code><\/td>\r\n\t\t\t<td><code>02A5B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oS;<\/td>\r\n\t\t\t<td><code>oS<\/code><\/td>\r\n\t\t\t<td><code>024C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Oscr;<\/td>\r\n\t\t\t<td><code>Oscr<\/code><\/td>\r\n\t\t\t<td><code>1D4AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oscr;<\/td>\r\n\t\t\t<td><code>oscr<\/code><\/td>\r\n\t\t\t<td><code>02134<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Oslash;<\/td>\r\n\t\t\t<td><code>Oslash<\/code><\/td>\r\n\t\t\t<td><code>000D8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&oslash;<\/td>\r\n\t\t\t<td><code>oslash<\/code><\/td>\r\n\t\t\t<td><code>000F8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&osol;<\/td>\r\n\t\t\t<td><code>osol<\/code><\/td>\r\n\t\t\t<td><code>02298<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Otilde;<\/td>\r\n\t\t\t<td><code>Otilde<\/code><\/td>\r\n\t\t\t<td><code>000D5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&otilde;<\/td>\r\n\t\t\t<td><code>otilde<\/code><\/td>\r\n\t\t\t<td><code>000F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Otimes;<\/td>\r\n\t\t\t<td><code>Otimes<\/code><\/td>\r\n\t\t\t<td><code>02A37<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&otimes;<\/td>\r\n\t\t\t<td><code>otimes<\/code><\/td>\r\n\t\t\t<td><code>02297<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&otimesas;<\/td>\r\n\t\t\t<td><code>otimesas<\/code><\/td>\r\n\t\t\t<td><code>02A36<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ouml;<\/td>\r\n\t\t\t<td><code>Ouml<\/code><\/td>\r\n\t\t\t<td><code>000D6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ouml;<\/td>\r\n\t\t\t<td><code>ouml<\/code><\/td>\r\n\t\t\t<td><code>000F6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ovbar;<\/td>\r\n\t\t\t<td><code>ovbar<\/code><\/td>\r\n\t\t\t<td><code>0233D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OverBar;<\/td>\r\n\t\t\t<td><code>OverBar<\/code><\/td>\r\n\t\t\t<td><code>0203E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OverBrace;<\/td>\r\n\t\t\t<td><code>OverBrace<\/code><\/td>\r\n\t\t\t<td><code>023DE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OverBracket;<\/td>\r\n\t\t\t<td><code>OverBracket<\/code><\/td>\r\n\t\t\t<td><code>023B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&OverParenthesis;<\/td>\r\n\t\t\t<td><code>OverParenthesis<\/code><\/td>\r\n\t\t\t<td><code>023DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-o","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"157","title":"[HTML5 Entities] P","post":"<p>All HTML5 entities starting with&nbsp;<strong>P<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&par;<\/td>\r\n\t\t\t<td><code>par<\/code><\/td>\r\n\t\t\t<td><code>02225<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&para;<\/td>\r\n\t\t\t<td><code>para<\/code><\/td>\r\n\t\t\t<td><code>000B6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&parallel;<\/td>\r\n\t\t\t<td><code>parallel<\/code><\/td>\r\n\t\t\t<td><code>02225<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&parsim;<\/td>\r\n\t\t\t<td><code>parsim<\/code><\/td>\r\n\t\t\t<td><code>02AF3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&parsl;<\/td>\r\n\t\t\t<td><code>parsl<\/code><\/td>\r\n\t\t\t<td><code>02AFD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&part;<\/td>\r\n\t\t\t<td><code>part<\/code><\/td>\r\n\t\t\t<td><code>02202<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&PartialD;<\/td>\r\n\t\t\t<td><code>PartialD<\/code><\/td>\r\n\t\t\t<td><code>02202<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Pcy;<\/td>\r\n\t\t\t<td><code>Pcy<\/code><\/td>\r\n\t\t\t<td><code>0041F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pcy;<\/td>\r\n\t\t\t<td><code>pcy<\/code><\/td>\r\n\t\t\t<td><code>0043F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&percnt;<\/td>\r\n\t\t\t<td><code>percnt<\/code><\/td>\r\n\t\t\t<td><code>00025<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&period;<\/td>\r\n\t\t\t<td><code>period<\/code><\/td>\r\n\t\t\t<td><code>0002E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&permil;<\/td>\r\n\t\t\t<td><code>permil<\/code><\/td>\r\n\t\t\t<td><code>02030<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&perp;<\/td>\r\n\t\t\t<td><code>perp<\/code><\/td>\r\n\t\t\t<td><code>022A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pertenk;<\/td>\r\n\t\t\t<td><code>pertenk<\/code><\/td>\r\n\t\t\t<td><code>02031<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Pfr;<\/td>\r\n\t\t\t<td><code>Pfr<\/code><\/td>\r\n\t\t\t<td><code>1D513<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pfr;<\/td>\r\n\t\t\t<td><code>pfr<\/code><\/td>\r\n\t\t\t<td><code>1D52D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Phi;<\/td>\r\n\t\t\t<td><code>Phi<\/code><\/td>\r\n\t\t\t<td><code>003A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&phi;<\/td>\r\n\t\t\t<td><code>phi<\/code><\/td>\r\n\t\t\t<td><code>003C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&phiv;<\/td>\r\n\t\t\t<td><code>phiv<\/code><\/td>\r\n\t\t\t<td><code>003D5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&phmmat;<\/td>\r\n\t\t\t<td><code>phmmat<\/code><\/td>\r\n\t\t\t<td><code>02133<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&phone;<\/td>\r\n\t\t\t<td><code>phone<\/code><\/td>\r\n\t\t\t<td><code>0260E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Pi;<\/td>\r\n\t\t\t<td><code>Pi<\/code><\/td>\r\n\t\t\t<td><code>003A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pi;<\/td>\r\n\t\t\t<td><code>pi<\/code><\/td>\r\n\t\t\t<td><code>003C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pitchfork;<\/td>\r\n\t\t\t<td><code>pitchfork<\/code><\/td>\r\n\t\t\t<td><code>022D4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&piv;<\/td>\r\n\t\t\t<td><code>piv<\/code><\/td>\r\n\t\t\t<td><code>003D6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&planck;<\/td>\r\n\t\t\t<td><code>planck<\/code><\/td>\r\n\t\t\t<td><code>0210F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&planckh;<\/td>\r\n\t\t\t<td><code>planckh<\/code><\/td>\r\n\t\t\t<td><code>0210E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plankv;<\/td>\r\n\t\t\t<td><code>plankv<\/code><\/td>\r\n\t\t\t<td><code>0210F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plus;<\/td>\r\n\t\t\t<td><code>plus<\/code><\/td>\r\n\t\t\t<td><code>0002B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plusacir;<\/td>\r\n\t\t\t<td><code>plusacir<\/code><\/td>\r\n\t\t\t<td><code>02A23<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plusb;<\/td>\r\n\t\t\t<td><code>plusb<\/code><\/td>\r\n\t\t\t<td><code>0229E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pluscir;<\/td>\r\n\t\t\t<td><code>pluscir<\/code><\/td>\r\n\t\t\t<td><code>02A22<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plusdo;<\/td>\r\n\t\t\t<td><code>plusdo<\/code><\/td>\r\n\t\t\t<td><code>02214<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plusdu;<\/td>\r\n\t\t\t<td><code>plusdu<\/code><\/td>\r\n\t\t\t<td><code>02A25<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pluse;<\/td>\r\n\t\t\t<td><code>pluse<\/code><\/td>\r\n\t\t\t<td><code>02A72<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plusmn;<\/td>\r\n\t\t\t<td><code>plusmn<\/code><\/td>\r\n\t\t\t<td><code>000B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plussim;<\/td>\r\n\t\t\t<td><code>plussim<\/code><\/td>\r\n\t\t\t<td><code>02A26<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&plustwo;<\/td>\r\n\t\t\t<td><code>plustwo<\/code><\/td>\r\n\t\t\t<td><code>02A27<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pm;<\/td>\r\n\t\t\t<td><code>pm<\/code><\/td>\r\n\t\t\t<td><code>000B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Poincareplane;<\/td>\r\n\t\t\t<td><code>Poincareplane<\/code><\/td>\r\n\t\t\t<td><code>0210C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pointint;<\/td>\r\n\t\t\t<td><code>pointint<\/code><\/td>\r\n\t\t\t<td><code>02A15<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Popf;<\/td>\r\n\t\t\t<td><code>Popf<\/code><\/td>\r\n\t\t\t<td><code>02119<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&popf;<\/td>\r\n\t\t\t<td><code>popf<\/code><\/td>\r\n\t\t\t<td><code>1D561<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pound;<\/td>\r\n\t\t\t<td><code>pound<\/code><\/td>\r\n\t\t\t<td><code>000A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Pr;<\/td>\r\n\t\t\t<td><code>Pr<\/code><\/td>\r\n\t\t\t<td><code>02ABB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pr;<\/td>\r\n\t\t\t<td><code>pr<\/code><\/td>\r\n\t\t\t<td><code>0227A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prap;<\/td>\r\n\t\t\t<td><code>prap<\/code><\/td>\r\n\t\t\t<td><code>02AB7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prcue;<\/td>\r\n\t\t\t<td><code>prcue<\/code><\/td>\r\n\t\t\t<td><code>0227C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prE;<\/td>\r\n\t\t\t<td><code>prE<\/code><\/td>\r\n\t\t\t<td><code>02AB3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pre;<\/td>\r\n\t\t\t<td><code>pre<\/code><\/td>\r\n\t\t\t<td><code>02AAF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prec;<\/td>\r\n\t\t\t<td><code>prec<\/code><\/td>\r\n\t\t\t<td><code>0227A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&precapprox;<\/td>\r\n\t\t\t<td><code>precapprox<\/code><\/td>\r\n\t\t\t<td><code>02AB7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&preccurlyeq;<\/td>\r\n\t\t\t<td><code>preccurlyeq<\/code><\/td>\r\n\t\t\t<td><code>0227C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Precedes;<\/td>\r\n\t\t\t<td><code>Precedes<\/code><\/td>\r\n\t\t\t<td><code>0227A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&PrecedesEqual;<\/td>\r\n\t\t\t<td><code>PrecedesEqual<\/code><\/td>\r\n\t\t\t<td><code>02AAF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&PrecedesSlantEqual;<\/td>\r\n\t\t\t<td><code>PrecedesSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>0227C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&PrecedesTilde;<\/td>\r\n\t\t\t<td><code>PrecedesTilde<\/code><\/td>\r\n\t\t\t<td><code>0227E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&preceq;<\/td>\r\n\t\t\t<td><code>preceq<\/code><\/td>\r\n\t\t\t<td><code>02AAF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&precnapprox;<\/td>\r\n\t\t\t<td><code>precnapprox<\/code><\/td>\r\n\t\t\t<td><code>02AB9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&precneqq;<\/td>\r\n\t\t\t<td><code>precneqq<\/code><\/td>\r\n\t\t\t<td><code>02AB5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&precnsim;<\/td>\r\n\t\t\t<td><code>precnsim<\/code><\/td>\r\n\t\t\t<td><code>022E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&precsim;<\/td>\r\n\t\t\t<td><code>precsim<\/code><\/td>\r\n\t\t\t<td><code>0227E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Prime;<\/td>\r\n\t\t\t<td><code>Prime<\/code><\/td>\r\n\t\t\t<td><code>02033<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prime;<\/td>\r\n\t\t\t<td><code>prime<\/code><\/td>\r\n\t\t\t<td><code>02032<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&primes;<\/td>\r\n\t\t\t<td><code>primes<\/code><\/td>\r\n\t\t\t<td><code>02119<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prnap;<\/td>\r\n\t\t\t<td><code>prnap<\/code><\/td>\r\n\t\t\t<td><code>02AB9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prnE;<\/td>\r\n\t\t\t<td><code>prnE<\/code><\/td>\r\n\t\t\t<td><code>02AB5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prnsim;<\/td>\r\n\t\t\t<td><code>prnsim<\/code><\/td>\r\n\t\t\t<td><code>022E8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prod;<\/td>\r\n\t\t\t<td><code>prod<\/code><\/td>\r\n\t\t\t<td><code>0220F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Product;<\/td>\r\n\t\t\t<td><code>Product<\/code><\/td>\r\n\t\t\t<td><code>0220F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&profalar;<\/td>\r\n\t\t\t<td><code>profalar<\/code><\/td>\r\n\t\t\t<td><code>0232E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&profline;<\/td>\r\n\t\t\t<td><code>profline<\/code><\/td>\r\n\t\t\t<td><code>02312<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&profsurf;<\/td>\r\n\t\t\t<td><code>profsurf<\/code><\/td>\r\n\t\t\t<td><code>02313<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prop;<\/td>\r\n\t\t\t<td><code>prop<\/code><\/td>\r\n\t\t\t<td><code>0221D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Proportion;<\/td>\r\n\t\t\t<td><code>Proportion<\/code><\/td>\r\n\t\t\t<td><code>02237<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Proportional;<\/td>\r\n\t\t\t<td><code>Proportional<\/code><\/td>\r\n\t\t\t<td><code>0221D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&propto;<\/td>\r\n\t\t\t<td><code>propto<\/code><\/td>\r\n\t\t\t<td><code>0221D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prsim;<\/td>\r\n\t\t\t<td><code>prsim<\/code><\/td>\r\n\t\t\t<td><code>0227E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&prurel;<\/td>\r\n\t\t\t<td><code>prurel<\/code><\/td>\r\n\t\t\t<td><code>022B0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Pscr;<\/td>\r\n\t\t\t<td><code>Pscr<\/code><\/td>\r\n\t\t\t<td><code>1D4AB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&pscr;<\/td>\r\n\t\t\t<td><code>pscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Psi;<\/td>\r\n\t\t\t<td><code>Psi<\/code><\/td>\r\n\t\t\t<td><code>003A8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&psi;<\/td>\r\n\t\t\t<td><code>psi<\/code><\/td>\r\n\t\t\t<td><code>003C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&puncsp;<\/td>\r\n\t\t\t<td><code>puncsp<\/code><\/td>\r\n\t\t\t<td><code>02008<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-p","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"158","title":"[HTML5 Entities] Q","post":"<p>All HTML5 entities starting with&nbsp;<strong>Q<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Qfr;<\/td>\r\n\t\t\t<td><code>Qfr<\/code><\/td>\r\n\t\t\t<td><code>1D514<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&qfr;<\/td>\r\n\t\t\t<td><code>qfr<\/code><\/td>\r\n\t\t\t<td><code>1D52E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&qint;<\/td>\r\n\t\t\t<td><code>qint<\/code><\/td>\r\n\t\t\t<td><code>02A0C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Qopf;<\/td>\r\n\t\t\t<td><code>Qopf<\/code><\/td>\r\n\t\t\t<td><code>0211A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&qopf;<\/td>\r\n\t\t\t<td><code>qopf<\/code><\/td>\r\n\t\t\t<td><code>1D562<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&qprime;<\/td>\r\n\t\t\t<td><code>qprime<\/code><\/td>\r\n\t\t\t<td><code>02057<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Qscr;<\/td>\r\n\t\t\t<td><code>Qscr<\/code><\/td>\r\n\t\t\t<td><code>1D4AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&qscr;<\/td>\r\n\t\t\t<td><code>qscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quaternions;<\/td>\r\n\t\t\t<td><code>quaternions<\/code><\/td>\r\n\t\t\t<td><code>0210D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quatint;<\/td>\r\n\t\t\t<td><code>quatint<\/code><\/td>\r\n\t\t\t<td><code>02A16<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quest;<\/td>\r\n\t\t\t<td><code>quest<\/code><\/td>\r\n\t\t\t<td><code>0003F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&questeq;<\/td>\r\n\t\t\t<td><code>questeq<\/code><\/td>\r\n\t\t\t<td><code>0225F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot;<\/td>\r\n\t\t\t<td><code>quot<\/code><\/td>\r\n\t\t\t<td><code>00022<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-q","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"159","title":"[HTML5 Entities] R","post":"<p>All HTML5 entities starting with <strong>R<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rAarr;<\/td>\r\n\t\t\t<td><code>rAarr<\/code><\/td>\r\n\t\t\t<td><code>021DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&race;<\/td>\r\n\t\t\t<td><code>race<\/code><\/td>\r\n\t\t\t<td><code>0223D + 00331<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Racute;<\/td>\r\n\t\t\t<td><code>Racute<\/code><\/td>\r\n\t\t\t<td><code>00154<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&racute;<\/td>\r\n\t\t\t<td><code>racute<\/code><\/td>\r\n\t\t\t<td><code>00155<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&radic;<\/td>\r\n\t\t\t<td><code>radic<\/code><\/td>\r\n\t\t\t<td><code>0221A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&raemptyv;<\/td>\r\n\t\t\t<td><code>raemptyv<\/code><\/td>\r\n\t\t\t<td><code>029B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rang;<\/td>\r\n\t\t\t<td><code>Rang<\/code><\/td>\r\n\t\t\t<td><code>027EB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rang;<\/td>\r\n\t\t\t<td><code>rang<\/code><\/td>\r\n\t\t\t<td><code>027E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rangd;<\/td>\r\n\t\t\t<td><code>rangd<\/code><\/td>\r\n\t\t\t<td><code>02992<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&range;<\/td>\r\n\t\t\t<td><code>range<\/code><\/td>\r\n\t\t\t<td><code>029A5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rangle;<\/td>\r\n\t\t\t<td><code>rangle<\/code><\/td>\r\n\t\t\t<td><code>027E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&raquo;<\/td>\r\n\t\t\t<td><code>raquo<\/code><\/td>\r\n\t\t\t<td><code>000BB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rarr;<\/td>\r\n\t\t\t<td><code>Rarr<\/code><\/td>\r\n\t\t\t<td><code>021A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rArr;<\/td>\r\n\t\t\t<td><code>rArr<\/code><\/td>\r\n\t\t\t<td><code>021D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarr;<\/td>\r\n\t\t\t<td><code>rarr<\/code><\/td>\r\n\t\t\t<td><code>02192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrap;<\/td>\r\n\t\t\t<td><code>rarrap<\/code><\/td>\r\n\t\t\t<td><code>02975<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrb;<\/td>\r\n\t\t\t<td><code>rarrb<\/code><\/td>\r\n\t\t\t<td><code>021E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrbfs;<\/td>\r\n\t\t\t<td><code>rarrbfs<\/code><\/td>\r\n\t\t\t<td><code>02920<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrc;<\/td>\r\n\t\t\t<td><code>rarrc<\/code><\/td>\r\n\t\t\t<td><code>02933<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrfs;<\/td>\r\n\t\t\t<td><code>rarrfs<\/code><\/td>\r\n\t\t\t<td><code>0291E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrhk;<\/td>\r\n\t\t\t<td><code>rarrhk<\/code><\/td>\r\n\t\t\t<td><code>021AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrlp;<\/td>\r\n\t\t\t<td><code>rarrlp<\/code><\/td>\r\n\t\t\t<td><code>021AC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrpl;<\/td>\r\n\t\t\t<td><code>rarrpl<\/code><\/td>\r\n\t\t\t<td><code>02945<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrsim;<\/td>\r\n\t\t\t<td><code>rarrsim<\/code><\/td>\r\n\t\t\t<td><code>02974<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rarrtl;<\/td>\r\n\t\t\t<td><code>Rarrtl<\/code><\/td>\r\n\t\t\t<td><code>02916<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrtl;<\/td>\r\n\t\t\t<td><code>rarrtl<\/code><\/td>\r\n\t\t\t<td><code>021A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rarrw;<\/td>\r\n\t\t\t<td><code>rarrw<\/code><\/td>\r\n\t\t\t<td><code>0219D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rAtail;<\/td>\r\n\t\t\t<td><code>rAtail<\/code><\/td>\r\n\t\t\t<td><code>0291C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ratail;<\/td>\r\n\t\t\t<td><code>ratail<\/code><\/td>\r\n\t\t\t<td><code>0291A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ratio;<\/td>\r\n\t\t\t<td><code>ratio<\/code><\/td>\r\n\t\t\t<td><code>02236<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rationals;<\/td>\r\n\t\t\t<td><code>rationals<\/code><\/td>\r\n\t\t\t<td><code>0211A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RBarr;<\/td>\r\n\t\t\t<td><code>RBarr<\/code><\/td>\r\n\t\t\t<td><code>02910<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rBarr;<\/td>\r\n\t\t\t<td><code>rBarr<\/code><\/td>\r\n\t\t\t<td><code>0290F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbarr;<\/td>\r\n\t\t\t<td><code>rbarr<\/code><\/td>\r\n\t\t\t<td><code>0290D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbbrk;<\/td>\r\n\t\t\t<td><code>rbbrk<\/code><\/td>\r\n\t\t\t<td><code>02773<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbrace;<\/td>\r\n\t\t\t<td><code>rbrace<\/code><\/td>\r\n\t\t\t<td><code>0007D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbrack;<\/td>\r\n\t\t\t<td><code>rbrack<\/code><\/td>\r\n\t\t\t<td><code>0005D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbrke;<\/td>\r\n\t\t\t<td><code>rbrke<\/code><\/td>\r\n\t\t\t<td><code>0298C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbrksld;<\/td>\r\n\t\t\t<td><code>rbrksld<\/code><\/td>\r\n\t\t\t<td><code>0298E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rbrkslu;<\/td>\r\n\t\t\t<td><code>rbrkslu<\/code><\/td>\r\n\t\t\t<td><code>02990<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rcaron;<\/td>\r\n\t\t\t<td><code>Rcaron<\/code><\/td>\r\n\t\t\t<td><code>00158<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rcaron;<\/td>\r\n\t\t\t<td><code>rcaron<\/code><\/td>\r\n\t\t\t<td><code>00159<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rcedil;<\/td>\r\n\t\t\t<td><code>Rcedil<\/code><\/td>\r\n\t\t\t<td><code>00156<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rcedil;<\/td>\r\n\t\t\t<td><code>rcedil<\/code><\/td>\r\n\t\t\t<td><code>00157<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rceil;<\/td>\r\n\t\t\t<td><code>rceil<\/code><\/td>\r\n\t\t\t<td><code>02309<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rcub;<\/td>\r\n\t\t\t<td><code>rcub<\/code><\/td>\r\n\t\t\t<td><code>0007D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rcy;<\/td>\r\n\t\t\t<td><code>Rcy<\/code><\/td>\r\n\t\t\t<td><code>00420<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rcy;<\/td>\r\n\t\t\t<td><code>rcy<\/code><\/td>\r\n\t\t\t<td><code>00440<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rdca;<\/td>\r\n\t\t\t<td><code>rdca<\/code><\/td>\r\n\t\t\t<td><code>02937<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rdldhar;<\/td>\r\n\t\t\t<td><code>rdldhar<\/code><\/td>\r\n\t\t\t<td><code>02969<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rdquo;<\/td>\r\n\t\t\t<td><code>rdquo<\/code><\/td>\r\n\t\t\t<td><code>0201D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rdquor;<\/td>\r\n\t\t\t<td><code>rdquor<\/code><\/td>\r\n\t\t\t<td><code>0201D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rdsh;<\/td>\r\n\t\t\t<td><code>rdsh<\/code><\/td>\r\n\t\t\t<td><code>021B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Re;<\/td>\r\n\t\t\t<td><code>Re<\/code><\/td>\r\n\t\t\t<td><code>0211C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&real;<\/td>\r\n\t\t\t<td><code>real<\/code><\/td>\r\n\t\t\t<td><code>0211C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&realine;<\/td>\r\n\t\t\t<td><code>realine<\/code><\/td>\r\n\t\t\t<td><code>0211B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&realpart;<\/td>\r\n\t\t\t<td><code>realpart<\/code><\/td>\r\n\t\t\t<td><code>0211C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&reals;<\/td>\r\n\t\t\t<td><code>reals<\/code><\/td>\r\n\t\t\t<td><code>0211D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rect;<\/td>\r\n\t\t\t<td><code>rect<\/code><\/td>\r\n\t\t\t<td><code>025AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&reg;<\/td>\r\n\t\t\t<td><code>reg<\/code><\/td>\r\n\t\t\t<td><code>000AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ReverseElement;<\/td>\r\n\t\t\t<td><code>ReverseElement<\/code><\/td>\r\n\t\t\t<td><code>0220B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ReverseEquilibrium;<\/td>\r\n\t\t\t<td><code>ReverseEquilibrium<\/code><\/td>\r\n\t\t\t<td><code>021CB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ReverseUpEquilibrium;<\/td>\r\n\t\t\t<td><code>ReverseUpEquilibrium<\/code><\/td>\r\n\t\t\t<td><code>0296F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rfisht;<\/td>\r\n\t\t\t<td><code>rfisht<\/code><\/td>\r\n\t\t\t<td><code>0297D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rfloor;<\/td>\r\n\t\t\t<td><code>rfloor<\/code><\/td>\r\n\t\t\t<td><code>0230B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rfr;<\/td>\r\n\t\t\t<td><code>Rfr<\/code><\/td>\r\n\t\t\t<td><code>0211C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rfr;<\/td>\r\n\t\t\t<td><code>rfr<\/code><\/td>\r\n\t\t\t<td><code>1D52F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rHar;<\/td>\r\n\t\t\t<td><code>rHar<\/code><\/td>\r\n\t\t\t<td><code>02964<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rhard;<\/td>\r\n\t\t\t<td><code>rhard<\/code><\/td>\r\n\t\t\t<td><code>021C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rharu;<\/td>\r\n\t\t\t<td><code>rharu<\/code><\/td>\r\n\t\t\t<td><code>021C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rharul;<\/td>\r\n\t\t\t<td><code>rharul<\/code><\/td>\r\n\t\t\t<td><code>0296C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rho;<\/td>\r\n\t\t\t<td><code>Rho<\/code><\/td>\r\n\t\t\t<td><code>003A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rho;<\/td>\r\n\t\t\t<td><code>rho<\/code><\/td>\r\n\t\t\t<td><code>003C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rhov;<\/td>\r\n\t\t\t<td><code>rhov<\/code><\/td>\r\n\t\t\t<td><code>003F1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightAngleBracket;<\/td>\r\n\t\t\t<td><code>RightAngleBracket<\/code><\/td>\r\n\t\t\t<td><code>027E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightArrow;<\/td>\r\n\t\t\t<td><code>RightArrow<\/code><\/td>\r\n\t\t\t<td><code>02192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rightarrow;<\/td>\r\n\t\t\t<td><code>Rightarrow<\/code><\/td>\r\n\t\t\t<td><code>021D2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightarrow;<\/td>\r\n\t\t\t<td><code>rightarrow<\/code><\/td>\r\n\t\t\t<td><code>02192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightArrowBar;<\/td>\r\n\t\t\t<td><code>RightArrowBar<\/code><\/td>\r\n\t\t\t<td><code>021E5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightArrowLeftArrow;<\/td>\r\n\t\t\t<td><code>RightArrowLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>021C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightarrowtail;<\/td>\r\n\t\t\t<td><code>rightarrowtail<\/code><\/td>\r\n\t\t\t<td><code>021A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightCeiling;<\/td>\r\n\t\t\t<td><code>RightCeiling<\/code><\/td>\r\n\t\t\t<td><code>02309<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightDoubleBracket;<\/td>\r\n\t\t\t<td><code>RightDoubleBracket<\/code><\/td>\r\n\t\t\t<td><code>027E7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightDownTeeVector;<\/td>\r\n\t\t\t<td><code>RightDownTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightDownVector;<\/td>\r\n\t\t\t<td><code>RightDownVector<\/code><\/td>\r\n\t\t\t<td><code>021C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightDownVectorBar;<\/td>\r\n\t\t\t<td><code>RightDownVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02955<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightFloor;<\/td>\r\n\t\t\t<td><code>RightFloor<\/code><\/td>\r\n\t\t\t<td><code>0230B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightharpoondown;<\/td>\r\n\t\t\t<td><code>rightharpoondown<\/code><\/td>\r\n\t\t\t<td><code>021C1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightharpoonup;<\/td>\r\n\t\t\t<td><code>rightharpoonup<\/code><\/td>\r\n\t\t\t<td><code>021C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightleftarrows;<\/td>\r\n\t\t\t<td><code>rightleftarrows<\/code><\/td>\r\n\t\t\t<td><code>021C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightleftharpoons;<\/td>\r\n\t\t\t<td><code>rightleftharpoons<\/code><\/td>\r\n\t\t\t<td><code>021CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightrightarrows;<\/td>\r\n\t\t\t<td><code>rightrightarrows<\/code><\/td>\r\n\t\t\t<td><code>021C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightsquigarrow;<\/td>\r\n\t\t\t<td><code>rightsquigarrow<\/code><\/td>\r\n\t\t\t<td><code>0219D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTee;;<\/td>\r\n\t\t\t<td><code>RightTee;<\/code><\/td>\r\n\t\t\t<td><code>022A2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTeeArrow;<\/td>\r\n\t\t\t<td><code>RightTeeArrow<\/code><\/td>\r\n\t\t\t<td><code>021A6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTeeVector;<\/td>\r\n\t\t\t<td><code>RightTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rightthreetimes;<\/td>\r\n\t\t\t<td><code>rightthreetimes<\/code><\/td>\r\n\t\t\t<td><code>022CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTriangle;<\/td>\r\n\t\t\t<td><code>RightTriangle<\/code><\/td>\r\n\t\t\t<td><code>022B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTriangleBar;<\/td>\r\n\t\t\t<td><code>RightTriangleBar<\/code><\/td>\r\n\t\t\t<td><code>029D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightTriangleEqual;<\/td>\r\n\t\t\t<td><code>RightTriangleEqual<\/code><\/td>\r\n\t\t\t<td><code>022B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightUpDownVector;<\/td>\r\n\t\t\t<td><code>RightUpDownVector<\/code><\/td>\r\n\t\t\t<td><code>0294F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightUpTeeVector;<\/td>\r\n\t\t\t<td><code>RightUpTeeVector<\/code><\/td>\r\n\t\t\t<td><code>0295C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightUpVector;<\/td>\r\n\t\t\t<td><code>RightUpVector<\/code><\/td>\r\n\t\t\t<td><code>021BE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightUpVectorBar;<\/td>\r\n\t\t\t<td><code>RightUpVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02954<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightVector;<\/td>\r\n\t\t\t<td><code>RightVector<\/code><\/td>\r\n\t\t\t<td><code>021C0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RightVectorBar;<\/td>\r\n\t\t\t<td><code>RightVectorBar<\/code><\/td>\r\n\t\t\t<td><code>02953<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ring;<\/td>\r\n\t\t\t<td><code>ring<\/code><\/td>\r\n\t\t\t<td><code>002DA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&risingdotseq;<\/td>\r\n\t\t\t<td><code>risingdotseq<\/code><\/td>\r\n\t\t\t<td><code>02253<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rlarr;<\/td>\r\n\t\t\t<td><code>rlarr<\/code><\/td>\r\n\t\t\t<td><code>021C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rlhar;<\/td>\r\n\t\t\t<td><code>rlhar<\/code><\/td>\r\n\t\t\t<td><code>021CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rlm;<\/td>\r\n\t\t\t<td><code>rlm<\/code><\/td>\r\n\t\t\t<td><code>0200F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rmoust;<\/td>\r\n\t\t\t<td><code>rmoust<\/code><\/td>\r\n\t\t\t<td><code>023B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rmoustache;<\/td>\r\n\t\t\t<td><code>rmoustache<\/code><\/td>\r\n\t\t\t<td><code>023B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rnmid;<\/td>\r\n\t\t\t<td><code>rnmid<\/code><\/td>\r\n\t\t\t<td><code>02AEE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&roang;<\/td>\r\n\t\t\t<td><code>roang<\/code><\/td>\r\n\t\t\t<td><code>027ED<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&roarr;<\/td>\r\n\t\t\t<td><code>roarr<\/code><\/td>\r\n\t\t\t<td><code>021FE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&robrk;<\/td>\r\n\t\t\t<td><code>robrk<\/code><\/td>\r\n\t\t\t<td><code>027E7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ropar;<\/td>\r\n\t\t\t<td><code>ropar<\/code><\/td>\r\n\t\t\t<td><code>02986<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Ropf;<\/td>\r\n\t\t\t<td><code>Ropf<\/code><\/td>\r\n\t\t\t<td><code>0211D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ropf;<\/td>\r\n\t\t\t<td><code>ropf<\/code><\/td>\r\n\t\t\t<td><code>1D563<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&roplus;<\/td>\r\n\t\t\t<td><code>roplus<\/code><\/td>\r\n\t\t\t<td><code>02A2E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rotimes;<\/td>\r\n\t\t\t<td><code>rotimes<\/code><\/td>\r\n\t\t\t<td><code>02A35<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RoundImplies;<\/td>\r\n\t\t\t<td><code>RoundImplies<\/code><\/td>\r\n\t\t\t<td><code>02970<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rpar;<\/td>\r\n\t\t\t<td><code>rpar<\/code><\/td>\r\n\t\t\t<td><code>00029<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rpargt;<\/td>\r\n\t\t\t<td><code>rpargt<\/code><\/td>\r\n\t\t\t<td><code>02994<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rppolint;<\/td>\r\n\t\t\t<td><code>rppolint<\/code><\/td>\r\n\t\t\t<td><code>02A12<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rrarr;<\/td>\r\n\t\t\t<td><code>rrarr<\/code><\/td>\r\n\t\t\t<td><code>021C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rrightarrow;<\/td>\r\n\t\t\t<td><code>Rrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rsaquo;<\/td>\r\n\t\t\t<td><code>rsaquo<\/code><\/td>\r\n\t\t\t<td><code>0203A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rscr;<\/td>\r\n\t\t\t<td><code>Rscr<\/code><\/td>\r\n\t\t\t<td><code>0211B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rscr;<\/td>\r\n\t\t\t<td><code>rscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Rsh;<\/td>\r\n\t\t\t<td><code>Rsh<\/code><\/td>\r\n\t\t\t<td><code>021B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rsh;<\/td>\r\n\t\t\t<td><code>rsh<\/code><\/td>\r\n\t\t\t<td><code>021B1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rsqb;<\/td>\r\n\t\t\t<td><code>rsqb<\/code><\/td>\r\n\t\t\t<td><code>0005D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rsquo;<\/td>\r\n\t\t\t<td><code>rsquo<\/code><\/td>\r\n\t\t\t<td><code>02019<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rsquor;<\/td>\r\n\t\t\t<td><code>rsquor<\/code><\/td>\r\n\t\t\t<td><code>02019<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rthree;<\/td>\r\n\t\t\t<td><code>rthree<\/code><\/td>\r\n\t\t\t<td><code>022CC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rtimes;<\/td>\r\n\t\t\t<td><code>rtimes<\/code><\/td>\r\n\t\t\t<td><code>022CA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rtri;<\/td>\r\n\t\t\t<td><code>rtri<\/code><\/td>\r\n\t\t\t<td><code>025B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rtrie;<\/td>\r\n\t\t\t<td><code>rtrie<\/code><\/td>\r\n\t\t\t<td><code>022B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rtrif;<\/td>\r\n\t\t\t<td><code>rtrif<\/code><\/td>\r\n\t\t\t<td><code>025B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rtriltri;<\/td>\r\n\t\t\t<td><code>rtriltri<\/code><\/td>\r\n\t\t\t<td><code>029CE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&RuleDelayed;<\/td>\r\n\t\t\t<td><code>RuleDelayed<\/code><\/td>\r\n\t\t\t<td><code>029F4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ruluhar;<\/td>\r\n\t\t\t<td><code>ruluhar<\/code><\/td>\r\n\t\t\t<td><code>02968<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&rx;<\/td>\r\n\t\t\t<td><code>rx<\/code><\/td>\r\n\t\t\t<td><code>0211E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-r","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"160","title":"[HTML5 Entities] S","post":"<p>All HTML5 entities starting with&nbsp;<strong>S.<\/strong><\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sacute;<\/td>\r\n\t\t\t<td><code>Sacute<\/code><\/td>\r\n\t\t\t<td><code>0015A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sacute;<\/td>\r\n\t\t\t<td><code>sacute<\/code><\/td>\r\n\t\t\t<td><code>0015B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sbquo;<\/td>\r\n\t\t\t<td><code>sbquo<\/code><\/td>\r\n\t\t\t<td><code>0201A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sc;<\/td>\r\n\t\t\t<td><code>Sc<\/code><\/td>\r\n\t\t\t<td><code>02ABC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sc;<\/td>\r\n\t\t\t<td><code>sc<\/code><\/td>\r\n\t\t\t<td><code>0227B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scap;<\/td>\r\n\t\t\t<td><code>scap<\/code><\/td>\r\n\t\t\t<td><code>02AB8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Scaron;<\/td>\r\n\t\t\t<td><code>Scaron<\/code><\/td>\r\n\t\t\t<td><code>00160<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scaron;<\/td>\r\n\t\t\t<td><code>scaron<\/code><\/td>\r\n\t\t\t<td><code>00161<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sccue;<\/td>\r\n\t\t\t<td><code>sccue<\/code><\/td>\r\n\t\t\t<td><code>0227D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scE;<\/td>\r\n\t\t\t<td><code>scE<\/code><\/td>\r\n\t\t\t<td><code>02AB4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sce;<\/td>\r\n\t\t\t<td><code>sce<\/code><\/td>\r\n\t\t\t<td><code>02AB0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Scedil;<\/td>\r\n\t\t\t<td><code>Scedil<\/code><\/td>\r\n\t\t\t<td><code>0015E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scedil;<\/td>\r\n\t\t\t<td><code>scedil<\/code><\/td>\r\n\t\t\t<td><code>0015F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Scirc;<\/td>\r\n\t\t\t<td><code>Scirc<\/code><\/td>\r\n\t\t\t<td><code>0015C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scirc;<\/td>\r\n\t\t\t<td><code>scirc<\/code><\/td>\r\n\t\t\t<td><code>0015D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scnap;<\/td>\r\n\t\t\t<td><code>scnap<\/code><\/td>\r\n\t\t\t<td><code>02ABA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scnE;<\/td>\r\n\t\t\t<td><code>scnE<\/code><\/td>\r\n\t\t\t<td><code>02AB6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scnsim;<\/td>\r\n\t\t\t<td><code>scnsim<\/code><\/td>\r\n\t\t\t<td><code>022E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scpolint;<\/td>\r\n\t\t\t<td><code>scpolint<\/code><\/td>\r\n\t\t\t<td><code>02A13<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scsim;<\/td>\r\n\t\t\t<td><code>scsim<\/code><\/td>\r\n\t\t\t<td><code>0227F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Scy;<\/td>\r\n\t\t\t<td><code>Scy<\/code><\/td>\r\n\t\t\t<td><code>00421<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&scy;<\/td>\r\n\t\t\t<td><code>scy<\/code><\/td>\r\n\t\t\t<td><code>00441<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sdot;<\/td>\r\n\t\t\t<td><code>sdot<\/code><\/td>\r\n\t\t\t<td><code>022C5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sdotb;<\/td>\r\n\t\t\t<td><code>sdotb<\/code><\/td>\r\n\t\t\t<td><code>022A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sdote;<\/td>\r\n\t\t\t<td><code>sdote<\/code><\/td>\r\n\t\t\t<td><code>02A66<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&searhk;<\/td>\r\n\t\t\t<td><code>searhk<\/code><\/td>\r\n\t\t\t<td><code>02925<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&seArr;<\/td>\r\n\t\t\t<td><code>seArr<\/code><\/td>\r\n\t\t\t<td><code>021D8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&searr;<\/td>\r\n\t\t\t<td><code>searr<\/code><\/td>\r\n\t\t\t<td><code>02198<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&searrow;<\/td>\r\n\t\t\t<td><code>searrow<\/code><\/td>\r\n\t\t\t<td><code>02198<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sect;<\/td>\r\n\t\t\t<td><code>sect<\/code><\/td>\r\n\t\t\t<td><code>000A7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&semi;<\/td>\r\n\t\t\t<td><code>semi<\/code><\/td>\r\n\t\t\t<td><code>0003B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&seswar;<\/td>\r\n\t\t\t<td><code>seswar<\/code><\/td>\r\n\t\t\t<td><code>02929<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&setminus;<\/td>\r\n\t\t\t<td><code>setminus<\/code><\/td>\r\n\t\t\t<td><code>02216<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&setmn;<\/td>\r\n\t\t\t<td><code>setmn<\/code><\/td>\r\n\t\t\t<td><code>02216<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sext;<\/td>\r\n\t\t\t<td><code>sext<\/code><\/td>\r\n\t\t\t<td><code>02736<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sfr;<\/td>\r\n\t\t\t<td><code>Sfr<\/code><\/td>\r\n\t\t\t<td><code>1D516<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sfr;<\/td>\r\n\t\t\t<td><code>sfr<\/code><\/td>\r\n\t\t\t<td><code>1D530<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sfrown;<\/td>\r\n\t\t\t<td><code>sfrown<\/code><\/td>\r\n\t\t\t<td><code>02322<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sharp;<\/td>\r\n\t\t\t<td><code>sharp<\/code><\/td>\r\n\t\t\t<td><code>0266F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SHCHcy;<\/td>\r\n\t\t\t<td><code>SHCHcy<\/code><\/td>\r\n\t\t\t<td><code>00429<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&shchcy;<\/td>\r\n\t\t\t<td><code>shchcy<\/code><\/td>\r\n\t\t\t<td><code>00449<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SHcy;<\/td>\r\n\t\t\t<td><code>SHcy<\/code><\/td>\r\n\t\t\t<td><code>00428<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&shcy;<\/td>\r\n\t\t\t<td><code>shcy<\/code><\/td>\r\n\t\t\t<td><code>00448<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ShortDownArrow;<\/td>\r\n\t\t\t<td><code>ShortDownArrow<\/code><\/td>\r\n\t\t\t<td><code>02193<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ShortLeftArrow;<\/td>\r\n\t\t\t<td><code>ShortLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>02190<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&shortmid;<\/td>\r\n\t\t\t<td><code>shortmid<\/code><\/td>\r\n\t\t\t<td><code>02223<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&shortparallel;<\/td>\r\n\t\t\t<td><code>shortparallel<\/code><\/td>\r\n\t\t\t<td><code>02225<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ShortRightArrow;<\/td>\r\n\t\t\t<td><code>ShortRightArrow<\/code><\/td>\r\n\t\t\t<td><code>02192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ShortUpArrow;<\/td>\r\n\t\t\t<td><code>ShortUpArrow<\/code><\/td>\r\n\t\t\t<td><code>02191<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&shy;<\/td>\r\n\t\t\t<td><code>shy<\/code><\/td>\r\n\t\t\t<td><code>000AD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sigma;<\/td>\r\n\t\t\t<td><code>Sigma<\/code><\/td>\r\n\t\t\t<td><code>003A3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sigma;<\/td>\r\n\t\t\t<td><code>sigma<\/code><\/td>\r\n\t\t\t<td><code>003C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sigmaf;<\/td>\r\n\t\t\t<td><code>sigmaf<\/code><\/td>\r\n\t\t\t<td><code>003C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sigmav;<\/td>\r\n\t\t\t<td><code>sigmav<\/code><\/td>\r\n\t\t\t<td><code>003C2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sim;<\/td>\r\n\t\t\t<td><code>sim<\/code><\/td>\r\n\t\t\t<td><code>0223C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simdot;<\/td>\r\n\t\t\t<td><code>simdot<\/code><\/td>\r\n\t\t\t<td><code>02A6A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sime;<\/td>\r\n\t\t\t<td><code>sime<\/code><\/td>\r\n\t\t\t<td><code>02243<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simeq;<\/td>\r\n\t\t\t<td><code>simeq<\/code><\/td>\r\n\t\t\t<td><code>02243<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simg;<\/td>\r\n\t\t\t<td><code>simg<\/code><\/td>\r\n\t\t\t<td><code>02A9E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simgE;<\/td>\r\n\t\t\t<td><code>simgE<\/code><\/td>\r\n\t\t\t<td><code>02AA0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&siml;<\/td>\r\n\t\t\t<td><code>siml<\/code><\/td>\r\n\t\t\t<td><code>02A9D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simlE;<\/td>\r\n\t\t\t<td><code>simlE<\/code><\/td>\r\n\t\t\t<td><code>02A9F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simne;<\/td>\r\n\t\t\t<td><code>simne<\/code><\/td>\r\n\t\t\t<td><code>02246<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simplus;<\/td>\r\n\t\t\t<td><code>simplus<\/code><\/td>\r\n\t\t\t<td><code>02A24<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&simrarr;<\/td>\r\n\t\t\t<td><code>simrarr<\/code><\/td>\r\n\t\t\t<td><code>02972<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&slarr;<\/td>\r\n\t\t\t<td><code>slarr<\/code><\/td>\r\n\t\t\t<td><code>02190<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SmallCircle;<\/td>\r\n\t\t\t<td><code>SmallCircle<\/code><\/td>\r\n\t\t\t<td><code>02218<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smallsetminus;<\/td>\r\n\t\t\t<td><code>smallsetminus<\/code><\/td>\r\n\t\t\t<td><code>02216<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smashp;<\/td>\r\n\t\t\t<td><code>smashp<\/code><\/td>\r\n\t\t\t<td><code>02A33<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smeparsl;<\/td>\r\n\t\t\t<td><code>smeparsl<\/code><\/td>\r\n\t\t\t<td><code>029E4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smid;<\/td>\r\n\t\t\t<td><code>smid<\/code><\/td>\r\n\t\t\t<td><code>02223<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smile;<\/td>\r\n\t\t\t<td><code>smile<\/code><\/td>\r\n\t\t\t<td><code>02323<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smt;<\/td>\r\n\t\t\t<td><code>smt<\/code><\/td>\r\n\t\t\t<td><code>02AAA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smte;<\/td>\r\n\t\t\t<td><code>smte<\/code><\/td>\r\n\t\t\t<td><code>02AAC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&smtes;<\/td>\r\n\t\t\t<td><code>smtes<\/code><\/td>\r\n\t\t\t<td><code>02AAC + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SOFTcy;<\/td>\r\n\t\t\t<td><code>SOFTcy<\/code><\/td>\r\n\t\t\t<td><code>0042C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&softcy;<\/td>\r\n\t\t\t<td><code>softcy<\/code><\/td>\r\n\t\t\t<td><code>0044C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sol;<\/td>\r\n\t\t\t<td><code>sol<\/code><\/td>\r\n\t\t\t<td><code>0002F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&solb;<\/td>\r\n\t\t\t<td><code>solb<\/code><\/td>\r\n\t\t\t<td><code>029C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&solbar;<\/td>\r\n\t\t\t<td><code>solbar<\/code><\/td>\r\n\t\t\t<td><code>0233F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sopf;<\/td>\r\n\t\t\t<td><code>Sopf<\/code><\/td>\r\n\t\t\t<td><code>1D54A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sopf;<\/td>\r\n\t\t\t<td><code>sopf<\/code><\/td>\r\n\t\t\t<td><code>1D564<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&spades;<\/td>\r\n\t\t\t<td><code>spades<\/code><\/td>\r\n\t\t\t<td><code>02660<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&spadesuit;<\/td>\r\n\t\t\t<td><code>spadesuit<\/code><\/td>\r\n\t\t\t<td><code>02660<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&spar;<\/td>\r\n\t\t\t<td><code>spar<\/code><\/td>\r\n\t\t\t<td><code>02225<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqcap;<\/td>\r\n\t\t\t<td><code>sqcap<\/code><\/td>\r\n\t\t\t<td><code>02293<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqcaps;<\/td>\r\n\t\t\t<td><code>sqcaps<\/code><\/td>\r\n\t\t\t<td><code>02293 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqcup;<\/td>\r\n\t\t\t<td><code>sqcup<\/code><\/td>\r\n\t\t\t<td><code>02294<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqcups;<\/td>\r\n\t\t\t<td><code>sqcups<\/code><\/td>\r\n\t\t\t<td><code>02294 + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sqrt;<\/td>\r\n\t\t\t<td><code>Sqrt<\/code><\/td>\r\n\t\t\t<td><code>0221A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsub;<\/td>\r\n\t\t\t<td><code>sqsub<\/code><\/td>\r\n\t\t\t<td><code>0228F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsube;<\/td>\r\n\t\t\t<td><code>sqsube<\/code><\/td>\r\n\t\t\t<td><code>02291<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsubset;<\/td>\r\n\t\t\t<td><code>sqsubset<\/code><\/td>\r\n\t\t\t<td><code>0228F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsubseteq;<\/td>\r\n\t\t\t<td><code>sqsubseteq<\/code><\/td>\r\n\t\t\t<td><code>02291<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsup;<\/td>\r\n\t\t\t<td><code>sqsup<\/code><\/td>\r\n\t\t\t<td><code>02290<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsupe;<\/td>\r\n\t\t\t<td><code>sqsupe<\/code><\/td>\r\n\t\t\t<td><code>02292<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsupset;<\/td>\r\n\t\t\t<td><code>sqsupset<\/code><\/td>\r\n\t\t\t<td><code>02290<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sqsupseteq;<\/td>\r\n\t\t\t<td><code>sqsupseteq<\/code><\/td>\r\n\t\t\t<td><code>02292<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&squ;<\/td>\r\n\t\t\t<td><code>squ<\/code><\/td>\r\n\t\t\t<td><code>025A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Square;<\/td>\r\n\t\t\t<td><code>Square<\/code><\/td>\r\n\t\t\t<td><code>025A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&square;<\/td>\r\n\t\t\t<td><code>square<\/code><\/td>\r\n\t\t\t<td><code>025A1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareIntersection;<\/td>\r\n\t\t\t<td><code>SquareIntersection<\/code><\/td>\r\n\t\t\t<td><code>02293<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareSubset;<\/td>\r\n\t\t\t<td><code>SquareSubset<\/code><\/td>\r\n\t\t\t<td><code>0228F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareSubsetEqual;<\/td>\r\n\t\t\t<td><code>SquareSubsetEqual<\/code><\/td>\r\n\t\t\t<td><code>02291<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareSuperset;<\/td>\r\n\t\t\t<td><code>SquareSuperset<\/code><\/td>\r\n\t\t\t<td><code>02290<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareSupersetEqual;<\/td>\r\n\t\t\t<td><code>SquareSupersetEqual<\/code><\/td>\r\n\t\t\t<td><code>02292<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SquareUnion;<\/td>\r\n\t\t\t<td><code>SquareUnion<\/code><\/td>\r\n\t\t\t<td><code>02294<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&squarf;<\/td>\r\n\t\t\t<td><code>squarf<\/code><\/td>\r\n\t\t\t<td><code>025AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&squf;<\/td>\r\n\t\t\t<td><code>squf<\/code><\/td>\r\n\t\t\t<td><code>025AA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&srarr;<\/td>\r\n\t\t\t<td><code>srarr<\/code><\/td>\r\n\t\t\t<td><code>02192<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sscr;<\/td>\r\n\t\t\t<td><code>Sscr<\/code><\/td>\r\n\t\t\t<td><code>1D4AE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sscr;<\/td>\r\n\t\t\t<td><code>sscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ssetmn;<\/td>\r\n\t\t\t<td><code>ssetmn<\/code><\/td>\r\n\t\t\t<td><code>02216<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ssmile;<\/td>\r\n\t\t\t<td><code>ssmile<\/code><\/td>\r\n\t\t\t<td><code>02323<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sstarf;<\/td>\r\n\t\t\t<td><code>sstarf<\/code><\/td>\r\n\t\t\t<td><code>022C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Star;<\/td>\r\n\t\t\t<td><code>Star<\/code><\/td>\r\n\t\t\t<td><code>022C6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&star;<\/td>\r\n\t\t\t<td><code>star<\/code><\/td>\r\n\t\t\t<td><code>02606<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&starf;<\/td>\r\n\t\t\t<td><code>starf<\/code><\/td>\r\n\t\t\t<td><code>02605<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&straightepsilon;<\/td>\r\n\t\t\t<td><code>straightepsilon<\/code><\/td>\r\n\t\t\t<td><code>003F5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&straightphi;<\/td>\r\n\t\t\t<td><code>straightphi<\/code><\/td>\r\n\t\t\t<td><code>003D5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&strns;<\/td>\r\n\t\t\t<td><code>strns<\/code><\/td>\r\n\t\t\t<td><code>000AF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sub;<\/td>\r\n\t\t\t<td><code>Sub<\/code><\/td>\r\n\t\t\t<td><code>022D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sub;<\/td>\r\n\t\t\t<td><code>sub<\/code><\/td>\r\n\t\t\t<td><code>02282<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subdot;<\/td>\r\n\t\t\t<td><code>subdot<\/code><\/td>\r\n\t\t\t<td><code>02ABD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subE;<\/td>\r\n\t\t\t<td><code>subE<\/code><\/td>\r\n\t\t\t<td><code>02AC5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sube;<\/td>\r\n\t\t\t<td><code>sube<\/code><\/td>\r\n\t\t\t<td><code>02286<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subedot;<\/td>\r\n\t\t\t<td><code>subedot<\/code><\/td>\r\n\t\t\t<td><code>02AC3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&submult;<\/td>\r\n\t\t\t<td><code>submult<\/code><\/td>\r\n\t\t\t<td><code>02AC1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subnE;<\/td>\r\n\t\t\t<td><code>subnE<\/code><\/td>\r\n\t\t\t<td><code>02ACB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subne;<\/td>\r\n\t\t\t<td><code>subne<\/code><\/td>\r\n\t\t\t<td><code>0228A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subplus;<\/td>\r\n\t\t\t<td><code>subplus<\/code><\/td>\r\n\t\t\t<td><code>02ABF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subrarr;<\/td>\r\n\t\t\t<td><code>subrarr<\/code><\/td>\r\n\t\t\t<td><code>02979<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Subset;<\/td>\r\n\t\t\t<td><code>Subset<\/code><\/td>\r\n\t\t\t<td><code>022D0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subset;<\/td>\r\n\t\t\t<td><code>subset<\/code><\/td>\r\n\t\t\t<td><code>02282<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subseteq;<\/td>\r\n\t\t\t<td><code>subseteq<\/code><\/td>\r\n\t\t\t<td><code>02286<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subseteqq;<\/td>\r\n\t\t\t<td><code>subseteqq<\/code><\/td>\r\n\t\t\t<td><code>02AC5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SubsetEqual;<\/td>\r\n\t\t\t<td><code>SubsetEqual<\/code><\/td>\r\n\t\t\t<td><code>02286<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subsetneq;<\/td>\r\n\t\t\t<td><code>subsetneq<\/code><\/td>\r\n\t\t\t<td><code>0228A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subsetneqq;<\/td>\r\n\t\t\t<td><code>subsetneqq<\/code><\/td>\r\n\t\t\t<td><code>02ACB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subsim;<\/td>\r\n\t\t\t<td><code>subsim<\/code><\/td>\r\n\t\t\t<td><code>02AC7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subsub;<\/td>\r\n\t\t\t<td><code>subsub<\/code><\/td>\r\n\t\t\t<td><code>02AD5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&subsup;<\/td>\r\n\t\t\t<td><code>subsup<\/code><\/td>\r\n\t\t\t<td><code>02AD3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succ;<\/td>\r\n\t\t\t<td><code>succ<\/code><\/td>\r\n\t\t\t<td><code>0227B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succapprox;<\/td>\r\n\t\t\t<td><code>succapprox<\/code><\/td>\r\n\t\t\t<td><code>02AB8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succcurlyeq;<\/td>\r\n\t\t\t<td><code>succcurlyeq<\/code><\/td>\r\n\t\t\t<td><code>0227D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Succeeds;<\/td>\r\n\t\t\t<td><code>Succeeds<\/code><\/td>\r\n\t\t\t<td><code>0227B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SucceedsEqual;<\/td>\r\n\t\t\t<td><code>SucceedsEqual<\/code><\/td>\r\n\t\t\t<td><code>02AB0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SucceedsSlantEqual;<\/td>\r\n\t\t\t<td><code>SucceedsSlantEqual<\/code><\/td>\r\n\t\t\t<td><code>0227D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SucceedsTilde;<\/td>\r\n\t\t\t<td><code>SucceedsTilde<\/code><\/td>\r\n\t\t\t<td><code>0227F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succeq;<\/td>\r\n\t\t\t<td><code>succeq<\/code><\/td>\r\n\t\t\t<td><code>02AB0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succnapprox;<\/td>\r\n\t\t\t<td><code>succnapprox<\/code><\/td>\r\n\t\t\t<td><code>02ABA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succneqq;<\/td>\r\n\t\t\t<td><code>succneqq<\/code><\/td>\r\n\t\t\t<td><code>02AB6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succnsim;<\/td>\r\n\t\t\t<td><code>succnsim<\/code><\/td>\r\n\t\t\t<td><code>022E9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&succsim;<\/td>\r\n\t\t\t<td><code>succsim<\/code><\/td>\r\n\t\t\t<td><code>0227F<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SuchThat;<\/td>\r\n\t\t\t<td><code>SuchThat<\/code><\/td>\r\n\t\t\t<td><code>0220B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sum;<\/td>\r\n\t\t\t<td><code>Sum<\/code><\/td>\r\n\t\t\t<td><code>02211<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sum;<\/td>\r\n\t\t\t<td><code>sum<\/code><\/td>\r\n\t\t\t<td><code>02211<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sung;<\/td>\r\n\t\t\t<td><code>sung<\/code><\/td>\r\n\t\t\t<td><code>0266A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Sup;<\/td>\r\n\t\t\t<td><code>Sup<\/code><\/td>\r\n\t\t\t<td><code>022D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sup;<\/td>\r\n\t\t\t<td><code>sup<\/code><\/td>\r\n\t\t\t<td><code>02283<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sup1;<\/td>\r\n\t\t\t<td><code>sup1<\/code><\/td>\r\n\t\t\t<td><code>000B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sup2;<\/td>\r\n\t\t\t<td><code>sup2<\/code><\/td>\r\n\t\t\t<td><code>000B2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&sup3;<\/td>\r\n\t\t\t<td><code>sup3<\/code><\/td>\r\n\t\t\t<td><code>000B3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supdot;<\/td>\r\n\t\t\t<td><code>supdot<\/code><\/td>\r\n\t\t\t<td><code>02ABE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supdsub;<\/td>\r\n\t\t\t<td><code>supdsub<\/code><\/td>\r\n\t\t\t<td><code>02AD8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supE;<\/td>\r\n\t\t\t<td><code>supE<\/code><\/td>\r\n\t\t\t<td><code>02AC6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supe;<\/td>\r\n\t\t\t<td><code>supe<\/code><\/td>\r\n\t\t\t<td><code>02287<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supedot;<\/td>\r\n\t\t\t<td><code>supedot<\/code><\/td>\r\n\t\t\t<td><code>02AC4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Superset;<\/td>\r\n\t\t\t<td><code>Superset<\/code><\/td>\r\n\t\t\t<td><code>02283<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&SupersetEqual;<\/td>\r\n\t\t\t<td><code>SupersetEqual<\/code><\/td>\r\n\t\t\t<td><code>02287<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&suphsol;<\/td>\r\n\t\t\t<td><code>suphsol<\/code><\/td>\r\n\t\t\t<td><code>027C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&suphsub;<\/td>\r\n\t\t\t<td><code>suphsub<\/code><\/td>\r\n\t\t\t<td><code>02AD7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&suplarr;<\/td>\r\n\t\t\t<td><code>suplarr<\/code><\/td>\r\n\t\t\t<td><code>0297B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supmult;<\/td>\r\n\t\t\t<td><code>supmult<\/code><\/td>\r\n\t\t\t<td><code>02AC2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supnE;<\/td>\r\n\t\t\t<td><code>supnE<\/code><\/td>\r\n\t\t\t<td><code>02ACC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supne;<\/td>\r\n\t\t\t<td><code>supne<\/code><\/td>\r\n\t\t\t<td><code>0228B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supplus;<\/td>\r\n\t\t\t<td><code>supplus<\/code><\/td>\r\n\t\t\t<td><code>02AC0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Supset;<\/td>\r\n\t\t\t<td><code>Supset<\/code><\/td>\r\n\t\t\t<td><code>022D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supset;<\/td>\r\n\t\t\t<td><code>supset<\/code><\/td>\r\n\t\t\t<td><code>02283<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supseteq;<\/td>\r\n\t\t\t<td><code>supseteq<\/code><\/td>\r\n\t\t\t<td><code>02287<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supseteqq;<\/td>\r\n\t\t\t<td><code>supseteqq<\/code><\/td>\r\n\t\t\t<td><code>02AC6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supsetneq;<\/td>\r\n\t\t\t<td><code>supsetneq<\/code><\/td>\r\n\t\t\t<td><code>0228B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supsetneqq;<\/td>\r\n\t\t\t<td><code>supsetneqq<\/code><\/td>\r\n\t\t\t<td><code>02ACC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supsim;<\/td>\r\n\t\t\t<td><code>supsim<\/code><\/td>\r\n\t\t\t<td><code>02AC8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supsub;<\/td>\r\n\t\t\t<td><code>supsub<\/code><\/td>\r\n\t\t\t<td><code>02AD4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&supsup;<\/td>\r\n\t\t\t<td><code>supsup<\/code><\/td>\r\n\t\t\t<td><code>02AD6<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&swarhk;<\/td>\r\n\t\t\t<td><code>swarhk<\/code><\/td>\r\n\t\t\t<td><code>02926<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&swArr;<\/td>\r\n\t\t\t<td><code>swArr<\/code><\/td>\r\n\t\t\t<td><code>021D9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&swarr;<\/td>\r\n\t\t\t<td><code>swarr<\/code><\/td>\r\n\t\t\t<td><code>02199<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&swarrow;<\/td>\r\n\t\t\t<td><code>swarrow<\/code><\/td>\r\n\t\t\t<td><code>02199<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&swnwar;<\/td>\r\n\t\t\t<td><code>swnwar<\/code><\/td>\r\n\t\t\t<td><code>0292A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&szlig;<\/td>\r\n\t\t\t<td><code>szlig<\/code><\/td>\r\n\t\t\t<td><code>000DF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-s","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"161","title":"[HTML5 Entities] T","post":"<p>All HTML5 entities starting with&nbsp;<strong>T<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Character<\/td>\r\n\t\t\t<td>Entity Name<\/td>\r\n\t\t\t<td>Hexadecimal<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tab;<\/td>\r\n\t\t\t<td><code>Tab<\/code><\/td>\r\n\t\t\t<td><code>00009<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&target;<\/td>\r\n\t\t\t<td><code>target<\/code><\/td>\r\n\t\t\t<td><code>02316<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tau;<\/td>\r\n\t\t\t<td><code>Tau<\/code><\/td>\r\n\t\t\t<td><code>003A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tau;<\/td>\r\n\t\t\t<td><code>tau<\/code><\/td>\r\n\t\t\t<td><code>003C4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tbrk;<\/td>\r\n\t\t\t<td><code>tbrk<\/code><\/td>\r\n\t\t\t<td><code>023B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tcaron;<\/td>\r\n\t\t\t<td><code>Tcaron<\/code><\/td>\r\n\t\t\t<td><code>00164<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tcaron;<\/td>\r\n\t\t\t<td><code>tcaron<\/code><\/td>\r\n\t\t\t<td><code>00165<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tcedil;<\/td>\r\n\t\t\t<td><code>Tcedil<\/code><\/td>\r\n\t\t\t<td><code>00162<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tcedil;<\/td>\r\n\t\t\t<td><code>tcedil<\/code><\/td>\r\n\t\t\t<td><code>00163<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tcy;<\/td>\r\n\t\t\t<td><code>Tcy<\/code><\/td>\r\n\t\t\t<td><code>00422<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tcy;<\/td>\r\n\t\t\t<td><code>tcy<\/code><\/td>\r\n\t\t\t<td><code>00442<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tdot;<\/td>\r\n\t\t\t<td><code>tdot<\/code><\/td>\r\n\t\t\t<td><code>020DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&telrec;<\/td>\r\n\t\t\t<td><code>telrec<\/code><\/td>\r\n\t\t\t<td><code>02315<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tfr;<\/td>\r\n\t\t\t<td><code>Tfr<\/code><\/td>\r\n\t\t\t<td><code>1D517<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tfr;<\/td>\r\n\t\t\t<td><code>tfr<\/code><\/td>\r\n\t\t\t<td><code>1D531<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&there4;<\/td>\r\n\t\t\t<td><code>there4<\/code><\/td>\r\n\t\t\t<td><code>02234<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Therefore;<\/td>\r\n\t\t\t<td><code>Therefore<\/code><\/td>\r\n\t\t\t<td><code>02234<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&therefore;<\/td>\r\n\t\t\t<td><code>therefore<\/code><\/td>\r\n\t\t\t<td><code>02234<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Theta;<\/td>\r\n\t\t\t<td><code>Theta<\/code><\/td>\r\n\t\t\t<td><code>00398<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&theta;<\/td>\r\n\t\t\t<td><code>theta<\/code><\/td>\r\n\t\t\t<td><code>003B8<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thetasym;<\/td>\r\n\t\t\t<td><code>thetasym<\/code><\/td>\r\n\t\t\t<td><code>003D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thetav;<\/td>\r\n\t\t\t<td><code>thetav<\/code><\/td>\r\n\t\t\t<td><code>003D1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thickapprox;<\/td>\r\n\t\t\t<td><code>thickapprox<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thicksim;<\/td>\r\n\t\t\t<td><code>thicksim<\/code><\/td>\r\n\t\t\t<td><code>0223C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ThickSpace;<\/td>\r\n\t\t\t<td><code>ThickSpace<\/code><\/td>\r\n\t\t\t<td><code>0205F + 0200A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thinsp;<\/td>\r\n\t\t\t<td><code>thinsp<\/code><\/td>\r\n\t\t\t<td><code>02009<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&ThinSpace;<\/td>\r\n\t\t\t<td><code>ThinSpace<\/code><\/td>\r\n\t\t\t<td><code>02009<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thkap;<\/td>\r\n\t\t\t<td><code>thkap<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thksim;<\/td>\r\n\t\t\t<td><code>thksim<\/code><\/td>\r\n\t\t\t<td><code>0223C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&THORN;<\/td>\r\n\t\t\t<td><code>THORN<\/code><\/td>\r\n\t\t\t<td><code>000DE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&thorn;<\/td>\r\n\t\t\t<td><code>thorn<\/code><\/td>\r\n\t\t\t<td><code>000FE<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tilde;<\/td>\r\n\t\t\t<td><code>Tilde<\/code><\/td>\r\n\t\t\t<td><code>0223C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tilde;<\/td>\r\n\t\t\t<td><code>tilde<\/code><\/td>\r\n\t\t\t<td><code>002DC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TildeEqual;<\/td>\r\n\t\t\t<td><code>TildeEqual<\/code><\/td>\r\n\t\t\t<td><code>02243<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TildeFullEqual;<\/td>\r\n\t\t\t<td><code>TildeFullEqual<\/code><\/td>\r\n\t\t\t<td><code>02245<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TildeTilde;<\/td>\r\n\t\t\t<td><code>TildeTilde<\/code><\/td>\r\n\t\t\t<td><code>02248<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&times;<\/td>\r\n\t\t\t<td><code>times<\/code><\/td>\r\n\t\t\t<td><code>000D7<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&timesb;<\/td>\r\n\t\t\t<td><code>timesb<\/code><\/td>\r\n\t\t\t<td><code>022A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&timesbar;<\/td>\r\n\t\t\t<td><code>timesbar<\/code><\/td>\r\n\t\t\t<td><code>02A31<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&timesd;<\/td>\r\n\t\t\t<td><code>timesd<\/code><\/td>\r\n\t\t\t<td><code>02A30<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tint;<\/td>\r\n\t\t\t<td><code>tint<\/code><\/td>\r\n\t\t\t<td><code>0222D<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&toea;<\/td>\r\n\t\t\t<td><code>toea<\/code><\/td>\r\n\t\t\t<td><code>02928<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&top;<\/td>\r\n\t\t\t<td><code>top<\/code><\/td>\r\n\t\t\t<td><code>022A4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&topbot;<\/td>\r\n\t\t\t<td><code>topbot<\/code><\/td>\r\n\t\t\t<td><code>02336<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&topcir;<\/td>\r\n\t\t\t<td><code>topcir<\/code><\/td>\r\n\t\t\t<td><code>02AF1<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Topf;<\/td>\r\n\t\t\t<td><code>Topf<\/code><\/td>\r\n\t\t\t<td><code>1D54B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&topf;<\/td>\r\n\t\t\t<td><code>topf<\/code><\/td>\r\n\t\t\t<td><code>1D565<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&topfork;<\/td>\r\n\t\t\t<td><code>topfork<\/code><\/td>\r\n\t\t\t<td><code>02ADA<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tosa;<\/td>\r\n\t\t\t<td><code>tosa<\/code><\/td>\r\n\t\t\t<td><code>02929<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tprime;<\/td>\r\n\t\t\t<td><code>tprime<\/code><\/td>\r\n\t\t\t<td><code>02034<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TRADE;<\/td>\r\n\t\t\t<td><code>TRADE<\/code><\/td>\r\n\t\t\t<td><code>02122<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trade;<\/td>\r\n\t\t\t<td><code>trade<\/code><\/td>\r\n\t\t\t<td><code>02122<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triangle;<\/td>\r\n\t\t\t<td><code>triangle<\/code><\/td>\r\n\t\t\t<td><code>025B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triangledown;<\/td>\r\n\t\t\t<td><code>triangledown<\/code><\/td>\r\n\t\t\t<td><code>025BF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triangleleft;<\/td>\r\n\t\t\t<td><code>triangleleft<\/code><\/td>\r\n\t\t\t<td><code>025C3<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trianglelefteq;<\/td>\r\n\t\t\t<td><code>trianglelefteq<\/code><\/td>\r\n\t\t\t<td><code>022B4<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triangleq;<\/td>\r\n\t\t\t<td><code>triangleq<\/code><\/td>\r\n\t\t\t<td><code>0225C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triangleright;<\/td>\r\n\t\t\t<td><code>triangleright<\/code><\/td>\r\n\t\t\t<td><code>025B9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trianglerighteq;<\/td>\r\n\t\t\t<td><code>trianglerighteq<\/code><\/td>\r\n\t\t\t<td><code>022B5<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tridot;<\/td>\r\n\t\t\t<td><code>tridot<\/code><\/td>\r\n\t\t\t<td><code>025EC<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trie;<\/td>\r\n\t\t\t<td><code>trie<\/code><\/td>\r\n\t\t\t<td><code>0225C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triminus;<\/td>\r\n\t\t\t<td><code>triminus<\/code><\/td>\r\n\t\t\t<td><code>02A3A<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TripleDot;<\/td>\r\n\t\t\t<td><code>TripleDot<\/code><\/td>\r\n\t\t\t<td><code>020DB<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&triplus;<\/td>\r\n\t\t\t<td><code>triplus<\/code><\/td>\r\n\t\t\t<td><code>02A39<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trisb;<\/td>\r\n\t\t\t<td><code>trisb<\/code><\/td>\r\n\t\t\t<td><code>029CD<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tritime;<\/td>\r\n\t\t\t<td><code>tritime<\/code><\/td>\r\n\t\t\t<td><code>02A3B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&trpezium;<\/td>\r\n\t\t\t<td><code>trpezium<\/code><\/td>\r\n\t\t\t<td><code>023E2<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tscr;<\/td>\r\n\t\t\t<td><code>Tscr<\/code><\/td>\r\n\t\t\t<td><code>1D4AF<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tscr;<\/td>\r\n\t\t\t<td><code>tscr<\/code><\/td>\r\n\t\t\t<td><code>1D4C9<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TScy;<\/td>\r\n\t\t\t<td><code>TScy<\/code><\/td>\r\n\t\t\t<td><code>00426<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tscy;<\/td>\r\n\t\t\t<td><code>tscy<\/code><\/td>\r\n\t\t\t<td><code>00446<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&TSHcy;<\/td>\r\n\t\t\t<td><code>TSHcy<\/code><\/td>\r\n\t\t\t<td><code>0040B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tshcy;<\/td>\r\n\t\t\t<td><code>tshcy<\/code><\/td>\r\n\t\t\t<td><code>0045B<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&Tstrok;<\/td>\r\n\t\t\t<td><code>Tstrok<\/code><\/td>\r\n\t\t\t<td><code>00166<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&tstrok;<\/td>\r\n\t\t\t<td><code>tstrok<\/code><\/td>\r\n\t\t\t<td><code>00167<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&twixt;<\/td>\r\n\t\t\t<td><code>twixt<\/code><\/td>\r\n\t\t\t<td><code>0226C<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&twoheadleftarrow;<\/td>\r\n\t\t\t<td><code>twoheadleftarrow<\/code><\/td>\r\n\t\t\t<td><code>0219E<\/code><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>&twoheadrightarrow;<\/td>\r\n\t\t\t<td><code>twoheadrightarrow<\/code><\/td>\r\n\t\t\t<td><code>021A0<\/code><\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>","slur":"html5-entities-t","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"162","title":"[HTML5 Entities] U","post":"<p>All HTML5 entities starting with&nbsp;<strong>U.<\/strong><\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uacute;<\/td>\r\n\t\t\t<td><code>Uacute<\/code><\/td>\r\n\t\t\t<td><code>000DA<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uacute;<\/td>\r\n\t\t\t<td><code>uacute<\/code><\/td>\r\n\t\t\t<td><code>000FA<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uarr;<\/td>\r\n\t\t\t<td><code>Uarr<\/code><\/td>\r\n\t\t\t<td><code>0219F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uArr;<\/td>\r\n\t\t\t<td><code>uArr<\/code><\/td>\r\n\t\t\t<td><code>021D1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uarr;<\/td>\r\n\t\t\t<td><code>uarr<\/code><\/td>\r\n\t\t\t<td><code>02191<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uarrocir;<\/td>\r\n\t\t\t<td><code>Uarrocir<\/code><\/td>\r\n\t\t\t<td><code>02949<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ubrcy;<\/td>\r\n\t\t\t<td><code>Ubrcy<\/code><\/td>\r\n\t\t\t<td><code>0040E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ubrcy;<\/td>\r\n\t\t\t<td><code>ubrcy<\/code><\/td>\r\n\t\t\t<td><code>0045E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ubreve;<\/td>\r\n\t\t\t<td><code>Ubreve<\/code><\/td>\r\n\t\t\t<td><code>0016C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ubreve;<\/td>\r\n\t\t\t<td><code>ubreve<\/code><\/td>\r\n\t\t\t<td><code>0016D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ucirc;<\/td>\r\n\t\t\t<td><code>Ucirc<\/code><\/td>\r\n\t\t\t<td><code>000DB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ucirc;<\/td>\r\n\t\t\t<td><code>ucirc<\/code><\/td>\r\n\t\t\t<td><code>000FB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ucy;<\/td>\r\n\t\t\t<td><code>Ucy<\/code><\/td>\r\n\t\t\t<td><code>00423<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ucy;<\/td>\r\n\t\t\t<td><code>ucy<\/code><\/td>\r\n\t\t\t<td><code>00443<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&udarr;<\/td>\r\n\t\t\t<td><code>udarr<\/code><\/td>\r\n\t\t\t<td><code>021C5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Udblac;<\/td>\r\n\t\t\t<td><code>Udblac<\/code><\/td>\r\n\t\t\t<td><code>00170<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&udblac;<\/td>\r\n\t\t\t<td><code>udblac<\/code><\/td>\r\n\t\t\t<td><code>00171<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&udhar;<\/td>\r\n\t\t\t<td><code>udhar<\/code><\/td>\r\n\t\t\t<td><code>0296E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ufisht;<\/td>\r\n\t\t\t<td><code>ufisht<\/code><\/td>\r\n\t\t\t<td><code>0297E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ufr;<\/td>\r\n\t\t\t<td><code>Ufr<\/code><\/td>\r\n\t\t\t<td><code>1D518<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ufr;<\/td>\r\n\t\t\t<td><code>ufr<\/code><\/td>\r\n\t\t\t<td><code>1D532<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ugrave;<\/td>\r\n\t\t\t<td><code>Ugrave<\/code><\/td>\r\n\t\t\t<td><code>000D9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ugrave;<\/td>\r\n\t\t\t<td><code>ugrave<\/code><\/td>\r\n\t\t\t<td><code>000F9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uHar;<\/td>\r\n\t\t\t<td><code>uHar<\/code><\/td>\r\n\t\t\t<td><code>02963<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uharl;<\/td>\r\n\t\t\t<td><code>uharl<\/code><\/td>\r\n\t\t\t<td><code>021BF<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uharr;<\/td>\r\n\t\t\t<td><code>uharr<\/code><\/td>\r\n\t\t\t<td><code>021BE<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uhblk;<\/td>\r\n\t\t\t<td><code>uhblk<\/code><\/td>\r\n\t\t\t<td><code>02580<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ulcorn;<\/td>\r\n\t\t\t<td><code>ulcorn<\/code><\/td>\r\n\t\t\t<td><code>0231C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ulcorner;<\/td>\r\n\t\t\t<td><code>ulcorner<\/code><\/td>\r\n\t\t\t<td><code>0231C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ulcrop;<\/td>\r\n\t\t\t<td><code>ulcrop<\/code><\/td>\r\n\t\t\t<td><code>0230F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ultri;<\/td>\r\n\t\t\t<td><code>ultri<\/code><\/td>\r\n\t\t\t<td><code>025F8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Umacr;<\/td>\r\n\t\t\t<td><code>Umacr<\/code><\/td>\r\n\t\t\t<td><code>0016A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&umacr;<\/td>\r\n\t\t\t<td><code>umacr<\/code><\/td>\r\n\t\t\t<td><code>0016B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uml;<\/td>\r\n\t\t\t<td><code>uml<\/code><\/td>\r\n\t\t\t<td><code>000A8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UnderBar;<\/td>\r\n\t\t\t<td><code>UnderBar<\/code><\/td>\r\n\t\t\t<td><code>0005F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UnderBrace;<\/td>\r\n\t\t\t<td><code>UnderBrace<\/code><\/td>\r\n\t\t\t<td><code>023DF<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UnderBracket;<\/td>\r\n\t\t\t<td><code>UnderBracket<\/code><\/td>\r\n\t\t\t<td><code>023B5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UnderParenthesis;<\/td>\r\n\t\t\t<td><code>UnderParenthesis<\/code><\/td>\r\n\t\t\t<td><code>023DD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Union;<\/td>\r\n\t\t\t<td><code>Union<\/code><\/td>\r\n\t\t\t<td><code>022C3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UnionPlus;<\/td>\r\n\t\t\t<td><code>UnionPlus<\/code><\/td>\r\n\t\t\t<td><code>0228E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uogon;<\/td>\r\n\t\t\t<td><code>Uogon<\/code><\/td>\r\n\t\t\t<td><code>00172<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uogon;<\/td>\r\n\t\t\t<td><code>uogon<\/code><\/td>\r\n\t\t\t<td><code>00173<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uopf;<\/td>\r\n\t\t\t<td><code>Uopf<\/code><\/td>\r\n\t\t\t<td><code>1D54C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uopf;<\/td>\r\n\t\t\t<td><code>uopf<\/code><\/td>\r\n\t\t\t<td><code>1D566<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpArrow;<\/td>\r\n\t\t\t<td><code>UpArrow<\/code><\/td>\r\n\t\t\t<td><code>02191<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uparrow;<\/td>\r\n\t\t\t<td><code>Uparrow<\/code><\/td>\r\n\t\t\t<td><code>021D1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uparrow;<\/td>\r\n\t\t\t<td><code>uparrow<\/code><\/td>\r\n\t\t\t<td><code>02191<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpArrowBar;<\/td>\r\n\t\t\t<td><code>UpArrowBar<\/code><\/td>\r\n\t\t\t<td><code>02912<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpArrowDownArrow;<\/td>\r\n\t\t\t<td><code>UpArrowDownArrow<\/code><\/td>\r\n\t\t\t<td><code>021C5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpDownArrow;<\/td>\r\n\t\t\t<td><code>UpDownArrow<\/code><\/td>\r\n\t\t\t<td><code>02195<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Updownarrow;<\/td>\r\n\t\t\t<td><code>Updownarrow<\/code><\/td>\r\n\t\t\t<td><code>021D5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&updownarrow;<\/td>\r\n\t\t\t<td><code>updownarrow<\/code><\/td>\r\n\t\t\t<td><code>02195<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpEquilibrium;<\/td>\r\n\t\t\t<td><code>UpEquilibrium<\/code><\/td>\r\n\t\t\t<td><code>0296E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upharpoonleft;<\/td>\r\n\t\t\t<td><code>upharpoonleft<\/code><\/td>\r\n\t\t\t<td><code>021BF<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upharpoonright;<\/td>\r\n\t\t\t<td><code>upharpoonright<\/code><\/td>\r\n\t\t\t<td><code>021BE<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uplus;<\/td>\r\n\t\t\t<td><code>uplus<\/code><\/td>\r\n\t\t\t<td><code>0228E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpperLeftArrow;<\/td>\r\n\t\t\t<td><code>UpperLeftArrow<\/code><\/td>\r\n\t\t\t<td><code>02196<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpperRightArrow;<\/td>\r\n\t\t\t<td><code>UpperRightArrow<\/code><\/td>\r\n\t\t\t<td><code>02197<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Upsi;<\/td>\r\n\t\t\t<td><code>Upsi<\/code><\/td>\r\n\t\t\t<td><code>003D2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upsi;<\/td>\r\n\t\t\t<td><code>upsi<\/code><\/td>\r\n\t\t\t<td><code>003C5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upsih;<\/td>\r\n\t\t\t<td><code>upsih<\/code><\/td>\r\n\t\t\t<td><code>003D2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Upsilon;<\/td>\r\n\t\t\t<td><code>Upsilon<\/code><\/td>\r\n\t\t\t<td><code>003A5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upsilon;<\/td>\r\n\t\t\t<td><code>upsilon<\/code><\/td>\r\n\t\t\t<td><code>003C5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpTee;<\/td>\r\n\t\t\t<td><code>UpTee<\/code><\/td>\r\n\t\t\t<td><code>022A5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&UpTeeArrow;<\/td>\r\n\t\t\t<td><code>UpTeeArrow<\/code><\/td>\r\n\t\t\t<td><code>021A5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&upuparrows;<\/td>\r\n\t\t\t<td><code>upuparrows<\/code><\/td>\r\n\t\t\t<td><code>021C8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&urcorn;<\/td>\r\n\t\t\t<td><code>urcorn<\/code><\/td>\r\n\t\t\t<td><code>0231D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&urcorner;<\/td>\r\n\t\t\t<td><code>urcorner<\/code><\/td>\r\n\t\t\t<td><code>0231D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&urcrop;<\/td>\r\n\t\t\t<td><code>urcrop<\/code><\/td>\r\n\t\t\t<td><code>0230E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uring;<\/td>\r\n\t\t\t<td><code>Uring<\/code><\/td>\r\n\t\t\t<td><code>0016E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uring;<\/td>\r\n\t\t\t<td><code>uring<\/code><\/td>\r\n\t\t\t<td><code>0016F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&urtri;<\/td>\r\n\t\t\t<td><code>urtri<\/code><\/td>\r\n\t\t\t<td><code>025F9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uscr;<\/td>\r\n\t\t\t<td><code>Uscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B0<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uscr;<\/td>\r\n\t\t\t<td><code>uscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CA<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&utdot;<\/td>\r\n\t\t\t<td><code>utdot<\/code><\/td>\r\n\t\t\t<td><code>022F0<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Utilde;<\/td>\r\n\t\t\t<td><code>Utilde<\/code><\/td>\r\n\t\t\t<td><code>00168<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&utilde;<\/td>\r\n\t\t\t<td><code>utilde<\/code><\/td>\r\n\t\t\t<td><code>00169<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&utri;<\/td>\r\n\t\t\t<td><code>utri<\/code><\/td>\r\n\t\t\t<td><code>025B5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&utrif;<\/td>\r\n\t\t\t<td><code>utrif<\/code><\/td>\r\n\t\t\t<td><code>025B4<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uuarr;<\/td>\r\n\t\t\t<td><code>uuarr<\/code><\/td>\r\n\t\t\t<td><code>021C8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Uuml;<\/td>\r\n\t\t\t<td><code>Uuml<\/code><\/td>\r\n\t\t\t<td><code>000DC<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uuml;<\/td>\r\n\t\t\t<td><code>uuml<\/code><\/td>\r\n\t\t\t<td><code>000FC<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&uwangle;<\/td>\r\n\t\t\t<td><code>uwangle<\/code><\/td>\r\n\t\t\t<td><code>029A7<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-u","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"163","title":"[HTML5 Entities] V","post":"<p>All HTML5 entities starting with&nbsp;<strong>V<\/strong>.<\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&vangrt;<\/td>\r\n\t\t\t<td><code>vangrt<\/code><\/td>\r\n\t\t\t<td><code>0299C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varepsilon;<\/td>\r\n\t\t\t<td><code>varepsilon<\/code><\/td>\r\n\t\t\t<td><code>003F5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varkappa;<\/td>\r\n\t\t\t<td><code>varkappa<\/code><\/td>\r\n\t\t\t<td><code>003F0<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varnothing;<\/td>\r\n\t\t\t<td><code>varnothing<\/code><\/td>\r\n\t\t\t<td><code>02205<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varphi;<\/td>\r\n\t\t\t<td><code>varphi<\/code><\/td>\r\n\t\t\t<td><code>003D5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varpi;<\/td>\r\n\t\t\t<td><code>varpi<\/code><\/td>\r\n\t\t\t<td><code>003D6<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varpropto;<\/td>\r\n\t\t\t<td><code>varpropto<\/code><\/td>\r\n\t\t\t<td><code>0221D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vArr;<\/td>\r\n\t\t\t<td><code>vArr<\/code><\/td>\r\n\t\t\t<td><code>021D5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varr;<\/td>\r\n\t\t\t<td><code>varr<\/code><\/td>\r\n\t\t\t<td><code>02195<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varrho;<\/td>\r\n\t\t\t<td><code>varrho<\/code><\/td>\r\n\t\t\t<td><code>003F1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varsigma;<\/td>\r\n\t\t\t<td><code>varsigma<\/code><\/td>\r\n\t\t\t<td><code>003C2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varsubsetneq;<\/td>\r\n\t\t\t<td><code>varsubsetneq<\/code><\/td>\r\n\t\t\t<td><code>0228A + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varsubsetneqq;<\/td>\r\n\t\t\t<td><code>varsubsetneqq<\/code><\/td>\r\n\t\t\t<td><code>02ACB + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varsupsetneq;<\/td>\r\n\t\t\t<td><code>varsupsetneq<\/code><\/td>\r\n\t\t\t<td><code>0228B + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&varsupsetneqq;<\/td>\r\n\t\t\t<td><code>varsupsetneqq<\/code><\/td>\r\n\t\t\t<td><code>02ACC + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vartheta;<\/td>\r\n\t\t\t<td><code>vartheta<\/code><\/td>\r\n\t\t\t<td><code>003D1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vartriangleleft;<\/td>\r\n\t\t\t<td><code>vartriangleleft<\/code><\/td>\r\n\t\t\t<td><code>022B2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vartriangleright;<\/td>\r\n\t\t\t<td><code>vartriangleright<\/code><\/td>\r\n\t\t\t<td><code>022B3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vbar;<\/td>\r\n\t\t\t<td><code>Vbar<\/code><\/td>\r\n\t\t\t<td><code>02AEB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vBar;<\/td>\r\n\t\t\t<td><code>vBar<\/code><\/td>\r\n\t\t\t<td><code>02AE8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vBarv;<\/td>\r\n\t\t\t<td><code>vBarv<\/code><\/td>\r\n\t\t\t<td><code>02AE9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vcy;<\/td>\r\n\t\t\t<td><code>Vcy<\/code><\/td>\r\n\t\t\t<td><code>00412<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vcy;<\/td>\r\n\t\t\t<td><code>vcy<\/code><\/td>\r\n\t\t\t<td><code>00432<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VDash;<\/td>\r\n\t\t\t<td><code>VDash<\/code><\/td>\r\n\t\t\t<td><code>022AB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vdash;<\/td>\r\n\t\t\t<td><code>Vdash<\/code><\/td>\r\n\t\t\t<td><code>022A9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vDash;<\/td>\r\n\t\t\t<td><code>vDash<\/code><\/td>\r\n\t\t\t<td><code>022A8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vdash;<\/td>\r\n\t\t\t<td><code>vdash<\/code><\/td>\r\n\t\t\t<td><code>022A2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vdashl;<\/td>\r\n\t\t\t<td><code>Vdashl<\/code><\/td>\r\n\t\t\t<td><code>02AE6<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vee;<\/td>\r\n\t\t\t<td><code>Vee<\/code><\/td>\r\n\t\t\t<td><code>022C1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vee;<\/td>\r\n\t\t\t<td><code>vee<\/code><\/td>\r\n\t\t\t<td><code>02228<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&veebar;<\/td>\r\n\t\t\t<td><code>veebar<\/code><\/td>\r\n\t\t\t<td><code>022BB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&veeeq;<\/td>\r\n\t\t\t<td><code>veeeq<\/code><\/td>\r\n\t\t\t<td><code>0225A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vellip;<\/td>\r\n\t\t\t<td><code>vellip<\/code><\/td>\r\n\t\t\t<td><code>022EE<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Verbar;<\/td>\r\n\t\t\t<td><code>Verbar<\/code><\/td>\r\n\t\t\t<td><code>02016<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&verbar;<\/td>\r\n\t\t\t<td><code>verbar<\/code><\/td>\r\n\t\t\t<td><code>0007C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vert;<\/td>\r\n\t\t\t<td><code>Vert<\/code><\/td>\r\n\t\t\t<td><code>02016<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vert;<\/td>\r\n\t\t\t<td><code>vert<\/code><\/td>\r\n\t\t\t<td><code>0007C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VerticalBar;<\/td>\r\n\t\t\t<td><code>VerticalBar<\/code><\/td>\r\n\t\t\t<td><code>02223<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VerticalLine;<\/td>\r\n\t\t\t<td><code>VerticalLine<\/code><\/td>\r\n\t\t\t<td><code>0007C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VerticalSeparator;<\/td>\r\n\t\t\t<td><code>VerticalSeparator<\/code><\/td>\r\n\t\t\t<td><code>02758<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VerticalTilde;<\/td>\r\n\t\t\t<td><code>VerticalTilde<\/code><\/td>\r\n\t\t\t<td><code>02240<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&VeryThinSpace;<\/td>\r\n\t\t\t<td><code>VeryThinSpace<\/code><\/td>\r\n\t\t\t<td><code>0200A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vfr;<\/td>\r\n\t\t\t<td><code>Vfr<\/code><\/td>\r\n\t\t\t<td><code>1D519<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vfr;<\/td>\r\n\t\t\t<td><code>vfr<\/code><\/td>\r\n\t\t\t<td><code>1D533<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vltri;<\/td>\r\n\t\t\t<td><code>vltri<\/code><\/td>\r\n\t\t\t<td><code>022B2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vnsub;<\/td>\r\n\t\t\t<td><code>vnsub<\/code><\/td>\r\n\t\t\t<td><code>02282 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vnsup;<\/td>\r\n\t\t\t<td><code>vnsup<\/code><\/td>\r\n\t\t\t<td><code>02283 + 020D2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vopf;<\/td>\r\n\t\t\t<td><code>Vopf<\/code><\/td>\r\n\t\t\t<td><code>1D54D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vopf;<\/td>\r\n\t\t\t<td><code>vopf<\/code><\/td>\r\n\t\t\t<td><code>1D567<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vprop;<\/td>\r\n\t\t\t<td><code>vprop<\/code><\/td>\r\n\t\t\t<td><code>0221D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vrtri;<\/td>\r\n\t\t\t<td><code>vrtri<\/code><\/td>\r\n\t\t\t<td><code>022B3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vscr;<\/td>\r\n\t\t\t<td><code>Vscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vscr;<\/td>\r\n\t\t\t<td><code>vscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vsubnE;<\/td>\r\n\t\t\t<td><code>vsubnE<\/code><\/td>\r\n\t\t\t<td><code>02ACB + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vsubne;<\/td>\r\n\t\t\t<td><code>vsubne<\/code><\/td>\r\n\t\t\t<td><code>0228A + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vsupnE;<\/td>\r\n\t\t\t<td><code>vsupnE<\/code><\/td>\r\n\t\t\t<td><code>02ACC + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vsupne;<\/td>\r\n\t\t\t<td><code>vsupne<\/code><\/td>\r\n\t\t\t<td><code>0228B + 0FE00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Vvdash;<\/td>\r\n\t\t\t<td><code>Vvdash<\/code><\/td>\r\n\t\t\t<td><code>022AA<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&vzigzag;<\/td>\r\n\t\t\t<td><code>vzigzag<\/code><\/td>\r\n\t\t\t<td><code>0299A<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-v","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"164","title":"[HTML5 Entities] W","post":"<p>All HTML5 entities starting with <strong>W<\/strong>.<\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&Wcirc;<\/td>\r\n\t\t\t<td><code>Wcirc<\/code><\/td>\r\n\t\t\t<td><code>00174<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wcirc;<\/td>\r\n\t\t\t<td><code>wcirc<\/code><\/td>\r\n\t\t\t<td><code>00175<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wedbar;<\/td>\r\n\t\t\t<td><code>wedbar<\/code><\/td>\r\n\t\t\t<td><code>02A5F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Wedge;<\/td>\r\n\t\t\t<td><code>Wedge<\/code><\/td>\r\n\t\t\t<td><code>022C0<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wedge;<\/td>\r\n\t\t\t<td><code>wedge<\/code><\/td>\r\n\t\t\t<td><code>02227<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wedgeq;<\/td>\r\n\t\t\t<td><code>wedgeq<\/code><\/td>\r\n\t\t\t<td><code>02259<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&weierp;<\/td>\r\n\t\t\t<td><code>weierp<\/code><\/td>\r\n\t\t\t<td><code>02118<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Wfr;<\/td>\r\n\t\t\t<td><code>Wfr<\/code><\/td>\r\n\t\t\t<td><code>1D51A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wfr;<\/td>\r\n\t\t\t<td><code>wfr<\/code><\/td>\r\n\t\t\t<td><code>1D534<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Wopf;<\/td>\r\n\t\t\t<td><code>Wopf<\/code><\/td>\r\n\t\t\t<td><code>1D54E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wopf;<\/td>\r\n\t\t\t<td><code>wopf<\/code><\/td>\r\n\t\t\t<td><code>1D568<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wp;<\/td>\r\n\t\t\t<td><code>wp<\/code><\/td>\r\n\t\t\t<td><code>02118<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wr;<\/td>\r\n\t\t\t<td><code>wr<\/code><\/td>\r\n\t\t\t<td><code>02240<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wreath;<\/td>\r\n\t\t\t<td><code>wreath<\/code><\/td>\r\n\t\t\t<td><code>02240<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Wscr;<\/td>\r\n\t\t\t<td><code>Wscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&wscr;<\/td>\r\n\t\t\t<td><code>wscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CC<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-w","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"165","title":"[HTML5 Entities] X","post":"<p>All HTML5 entities starting with&nbsp;<strong>X<\/strong>.<\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&xcap;<\/td>\r\n\t\t\t<td><code>xcap<\/code><\/td>\r\n\t\t\t<td><code>022C2<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xcirc;<\/td>\r\n\t\t\t<td><code>xcirc<\/code><\/td>\r\n\t\t\t<td><code>025EF<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xcup;<\/td>\r\n\t\t\t<td><code>xcup<\/code><\/td>\r\n\t\t\t<td><code>022C3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xdtri;<\/td>\r\n\t\t\t<td><code>xdtri<\/code><\/td>\r\n\t\t\t<td><code>025BD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Xfr;<\/td>\r\n\t\t\t<td><code>Xfr<\/code><\/td>\r\n\t\t\t<td><code>1D51B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xfr;<\/td>\r\n\t\t\t<td><code>xfr<\/code><\/td>\r\n\t\t\t<td><code>1D535<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xhArr;<\/td>\r\n\t\t\t<td><code>xhArr<\/code><\/td>\r\n\t\t\t<td><code>027FA<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xharr;<\/td>\r\n\t\t\t<td><code>xharr<\/code><\/td>\r\n\t\t\t<td><code>027F7<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Xi;<\/td>\r\n\t\t\t<td><code>Xi<\/code><\/td>\r\n\t\t\t<td><code>0039E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xi;<\/td>\r\n\t\t\t<td><code>xi<\/code><\/td>\r\n\t\t\t<td><code>003BE<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xlArr;<\/td>\r\n\t\t\t<td><code>xlArr<\/code><\/td>\r\n\t\t\t<td><code>027F8<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xlarr;<\/td>\r\n\t\t\t<td><code>xlarr<\/code><\/td>\r\n\t\t\t<td><code>027F5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xmap;<\/td>\r\n\t\t\t<td><code>xmap<\/code><\/td>\r\n\t\t\t<td><code>027FC<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xnis;<\/td>\r\n\t\t\t<td><code>xnis<\/code><\/td>\r\n\t\t\t<td><code>022FB<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xodot;<\/td>\r\n\t\t\t<td><code>xodot<\/code><\/td>\r\n\t\t\t<td><code>02A00<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Xopf;<\/td>\r\n\t\t\t<td><code>Xopf<\/code><\/td>\r\n\t\t\t<td><code>1D54F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xopf;<\/td>\r\n\t\t\t<td><code>xopf<\/code><\/td>\r\n\t\t\t<td><code>1D569<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xoplus;<\/td>\r\n\t\t\t<td><code>xoplus<\/code><\/td>\r\n\t\t\t<td><code>02A01<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xotime;<\/td>\r\n\t\t\t<td><code>xotime<\/code><\/td>\r\n\t\t\t<td><code>02A02<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xrArr;<\/td>\r\n\t\t\t<td><code>xrArr<\/code><\/td>\r\n\t\t\t<td><code>027F9<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xrarr;<\/td>\r\n\t\t\t<td><code>xrarr<\/code><\/td>\r\n\t\t\t<td><code>027F6<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Xscr;<\/td>\r\n\t\t\t<td><code>Xscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xscr;<\/td>\r\n\t\t\t<td><code>xscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xsqcup;<\/td>\r\n\t\t\t<td><code>xsqcup<\/code><\/td>\r\n\t\t\t<td><code>02A06<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xuplus;<\/td>\r\n\t\t\t<td><code>xuplus<\/code><\/td>\r\n\t\t\t<td><code>02A04<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xutri;<\/td>\r\n\t\t\t<td><code>xutri<\/code><\/td>\r\n\t\t\t<td><code>025B3<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xvee;<\/td>\r\n\t\t\t<td><code>xvee<\/code><\/td>\r\n\t\t\t<td><code>022C1<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&xwedge;<\/td>\r\n\t\t\t<td><code>xwedge<\/code><\/td>\r\n\t\t\t<td><code>022C0<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-x","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"166","title":"[HTML5 Entities] Y","post":"<p>All HTML5 entities starting with&nbsp;<strong>Y<\/strong>.<\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&Yacute;<\/td>\r\n\t\t\t<td><code>Yacute<\/code><\/td>\r\n\t\t\t<td><code>000DD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yacute;<\/td>\r\n\t\t\t<td><code>yacute<\/code><\/td>\r\n\t\t\t<td><code>000FD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&YAcy;<\/td>\r\n\t\t\t<td><code>YAcy<\/code><\/td>\r\n\t\t\t<td><code>0042F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yacy;<\/td>\r\n\t\t\t<td><code>yacy<\/code><\/td>\r\n\t\t\t<td><code>0044F<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ycirc;<\/td>\r\n\t\t\t<td><code>Ycirc<\/code><\/td>\r\n\t\t\t<td><code>00176<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ycirc;<\/td>\r\n\t\t\t<td><code>ycirc<\/code><\/td>\r\n\t\t\t<td><code>00177<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Ycy;<\/td>\r\n\t\t\t<td><code>Ycy<\/code><\/td>\r\n\t\t\t<td><code>0042B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ycy;<\/td>\r\n\t\t\t<td><code>ycy<\/code><\/td>\r\n\t\t\t<td><code>0044B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yen;<\/td>\r\n\t\t\t<td><code>yen<\/code><\/td>\r\n\t\t\t<td><code>000A5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Yfr;<\/td>\r\n\t\t\t<td><code>Yfr<\/code><\/td>\r\n\t\t\t<td><code>1D51C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yfr;<\/td>\r\n\t\t\t<td><code>yfr<\/code><\/td>\r\n\t\t\t<td><code>1D536<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&YIcy;<\/td>\r\n\t\t\t<td><code>YIcy<\/code><\/td>\r\n\t\t\t<td><code>00407<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yicy;<\/td>\r\n\t\t\t<td><code>yicy<\/code><\/td>\r\n\t\t\t<td><code>00457<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Yopf;<\/td>\r\n\t\t\t<td><code>Yopf<\/code><\/td>\r\n\t\t\t<td><code>1D550<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yopf;<\/td>\r\n\t\t\t<td><code>yopf<\/code><\/td>\r\n\t\t\t<td><code>1D56A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Yscr;<\/td>\r\n\t\t\t<td><code>Yscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B4<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yscr;<\/td>\r\n\t\t\t<td><code>yscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CE<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&YUcy;<\/td>\r\n\t\t\t<td><code>YUcy<\/code><\/td>\r\n\t\t\t<td><code>0042E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yucy;<\/td>\r\n\t\t\t<td><code>yucy<\/code><\/td>\r\n\t\t\t<td><code>0044E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Yuml;<\/td>\r\n\t\t\t<td><code>Yuml<\/code><\/td>\r\n\t\t\t<td><code>00178<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&yuml;<\/td>\r\n\t\t\t<td><code>yuml<\/code><\/td>\r\n\t\t\t<td><code>000FF<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-y","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"167","title":"[HTML5 Entities] Z","post":"<p>All HTML5 entities starting with&nbsp;<strong>Z<\/strong>.<\/p>\r\n\r\n<table>\r\n<tbody><tr>\r\n<td>Character<\/td>\r\n<td>Entity Name<\/td>\r\n<td>Hexadecimal<\/td>\r\n<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zacute;<\/td>\r\n\t\t\t<td><code>Zacute<\/code><\/td>\r\n\t\t\t<td><code>00179<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zacute;<\/td>\r\n\t\t\t<td><code>zacute<\/code><\/td>\r\n\t\t\t<td><code>0017A<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zcaron;<\/td>\r\n\t\t\t<td><code>Zcaron<\/code><\/td>\r\n\t\t\t<td><code>0017D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zcaron;<\/td>\r\n\t\t\t<td><code>zcaron<\/code><\/td>\r\n\t\t\t<td><code>0017E<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zcy;<\/td>\r\n\t\t\t<td><code>Zcy<\/code><\/td>\r\n\t\t\t<td><code>00417<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zcy;<\/td>\r\n\t\t\t<td><code>zcy<\/code><\/td>\r\n\t\t\t<td><code>00437<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zdot;<\/td>\r\n\t\t\t<td><code>Zdot<\/code><\/td>\r\n\t\t\t<td><code>0017B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zdot;<\/td>\r\n\t\t\t<td><code>zdot<\/code><\/td>\r\n\t\t\t<td><code>0017C<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zeetrf;<\/td>\r\n\t\t\t<td><code>zeetrf<\/code><\/td>\r\n\t\t\t<td><code>02128<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ZeroWidthSpace;<\/td>\r\n\t\t\t<td><code>ZeroWidthSpace<\/code><\/td>\r\n\t\t\t<td><code>0200B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zeta;<\/td>\r\n\t\t\t<td><code>Zeta<\/code><\/td>\r\n\t\t\t<td><code>00396<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zeta;<\/td>\r\n\t\t\t<td><code>zeta<\/code><\/td>\r\n\t\t\t<td><code>003B6<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zfr;<\/td>\r\n\t\t\t<td><code>Zfr<\/code><\/td>\r\n\t\t\t<td><code>02128<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zfr;<\/td>\r\n\t\t\t<td><code>zfr<\/code><\/td>\r\n\t\t\t<td><code>1D537<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&ZHcy;<\/td>\r\n\t\t\t<td><code>ZHcy<\/code><\/td>\r\n\t\t\t<td><code>00416<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zhcy;<\/td>\r\n\t\t\t<td><code>zhcy<\/code><\/td>\r\n\t\t\t<td><code>00436<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zigrarr;<\/td>\r\n\t\t\t<td><code>zigrarr<\/code><\/td>\r\n\t\t\t<td><code>021DD<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zopf;<\/td>\r\n\t\t\t<td><code>Zopf<\/code><\/td>\r\n\t\t\t<td><code>02124<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zopf;<\/td>\r\n\t\t\t<td><code>zopf<\/code><\/td>\r\n\t\t\t<td><code>1D56B<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&Zscr;<\/td>\r\n\t\t\t<td><code>Zscr<\/code><\/td>\r\n\t\t\t<td><code>1D4B5<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zscr;<\/td>\r\n\t\t\t<td><code>zscr<\/code><\/td>\r\n\t\t\t<td><code>1D4CF<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zwj;<\/td>\r\n\t\t\t<td><code>zwj<\/code><\/td>\r\n\t\t\t<td><code>0200D<\/code><\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>&zwnj;<\/td>\r\n\t\t\t<td><code>zwnj<\/code><\/td>\r\n\t\t\t<td><code>0200C<\/code><\/td>\r\n\t\t<\/tr>\r\n<\/tbody><\/table>","slur":"html5-entities-z","cat":"Website","subcat":"HTML5 Entities","video":"","diff":"1","quiz":""},
{"id":"168","title":"The HTML5 Guide","post":"<p>Without HTML, there would be no internet as we know it today. Internet in itself is nothing more than an <em>inter<\/em>connected <em>net<\/em>work of servers, and when you access such a server, you access its filesystem. For example, the homepage of nearly every website is a file called <em>index.html<\/em>. When your browser requests a certain URL, all it does is ask the corresponding server for that file. Once it has received it, it parses the file as HTML code and displays it in an interactive way. It might contain links pointing to other files on the same server, or even links pointing to a different server, creating that interconnected network.<\/p> \r\n\r\n<p>As you can see, a website is nothing more than a set of files on a server. The most important building block out of these is the HTML file that is requested first, which this course will teach you all about. When you&rsquo;re done, you can use this fundamental knowledge to continue learning the other languages of the web to craft stunning websites and maybe even games or apps.<\/p>\r\n\r\n<p>Originally, the web was intended for public sharing of text only. With time, however, it has grown into a massive multimedia platform. Therefore, learning pure HTML these days isn&rsquo;t enough, which is why I decided to create two separate courses teaching you how to create (dynamic) graphics on the web (<strong><em>canvas<\/em><\/strong> and <strong><em>SVG<\/em><\/strong>).<\/p>\r\n\r\n<p>I hope this course will be the start of your journey into the wonderful world of the web!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>What is HTML?<\/li>\r\n\t<li>Tags &amp; Elements<\/li>\r\n\t<li>Page Structure: Head &amp; Body<\/li>\r\n\t<li>Attributes<\/li>\r\n\t<li>Blocks<\/li>\r\n\t<li>Paragraphs &amp; Headings<\/li>\r\n\t<li>Links<\/li>\r\n\t<li>Images<\/li>\r\n\t<li>Lists<\/li>\r\n\t<li>Text Formatting<\/li>\r\n\t<li>Code Formatting<\/li>\r\n\t<li>Quotations &amp; Citations<\/li>\r\n\t<li>Tables<\/li>\r\n\t<li>Forms<\/li>\r\n\t<li>The Input Element<\/li>\r\n\t<li>Input Attributes<\/li>\r\n\t<li>Form Elements<\/li>\r\n\t<li>Iframes<\/li>\r\n\t<li>Head<\/li>\r\n\t<li>Charsets, Symbols &amp; Entities<\/li>\r\n\t<li>Audio &amp; Video<\/li>\r\n\t<li>HTML5 Elements<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n","slur":"the-html5-guide","cat":"Website","subcat":"HTML5","video":"","diff":"1","quiz":""},
{"id":"169","title":"[HTML5] What is HTML?","post":"<p>HTML means <strong>H<\/strong>yper<strong>T<\/strong>ext <strong>M<\/strong>arkup <strong>L<\/strong>anguage. HTML5 simply means the fifth version of the language, the one that is in development at the moment and the best so far. Most of it is implemented by all browsers &ndash; when something is not present, I&rsquo;ll mention it.<\/p> \r\n\r\n<p>The first thing to notice is that it isn&rsquo;t a <em>programming<\/em> or <em>scripting<\/em> language. It&rsquo;s a <strong>markup language<\/strong>. All it does is group text or media inside so-called tags or elements, so that each element can then be styled or programmed later on with another language. It can be written in a simple text editor, is readable by anyone, and doesn&rsquo;t have to be compiled. It is the most basic structure of a webpage; if your text isn&rsquo;t divided into different elements with specific names, you have no way of styling the text or attaching some other (programming) function to it. Also, browsers (or other web devices) have no idea about how to interpret your page.<\/p>\r\n\r\n<p>This is a good thing for most people. HTML is very easy to learn and use, and after creating a few webpages you&rsquo;ve probably seen all that there is to it. I, however, still recommend reading through the whole course, trying out the examples, and testing yourself if you really understand something. After all, <em>a good start is half the battle<\/em>!<\/p>\r\n\r\n<h2>Creating HTML pages<\/h2>\r\n\r\n<p>You can use the <strong><em>live html editor<\/em><\/strong> on this website to experiment and create, but sooner or later you&rsquo;ll need to have your own HTML files to play with. Using the standard simple text editor that's included with your OS is perfectly possible; just save the files with <code>.html<\/code> at the end and you&rsquo;re fine. You can then right-click and choose to open the file with your browser to preview it.<\/p>\r\n\r\n<p>When your projects grow in size, however, it&rsquo;s useful to get a specialized editor. I recommend these:<\/p>\r\n\r\n<ul>\r\n\t<li>Brackets.io (free)<\/li>\r\n\t<li>Sublime Text (not free)<\/li>\r\n<\/ul>\r\n\r\n<p>Now we&rsquo;re ready to kick off!<\/p>\r\n","slur":"html5-what-is-html","cat":"Website","subcat":"HTML5","video":"","diff":"1","quiz":""},
{"id":"170","title":"[HTML5] Tags & Elements","post":"<p>Tags define elements. An opening tag signals the start of a certain element, and a closing tag closes it. Which tag you use defines which element is created, that is, in what way the text inside the element is categorized or formatted.<\/p> \r\n\r\n<img src=\"media\/HTMLTagsElements.png\" \/>\r\n\r\n<p><em>NOTE: Hover over code examples to make a test button appear. Click it to test or see the code in the live HTML editor<\/em><\/p>\r\n\r\n<h2>Nesting Tags<\/h2>\r\n\r\n<p>Because tags define groups within your webpage, you will also have to put smaller elements inside of bigger ones, and those inside even bigger ones, until you reach the top of your document. This is called nesting tags, and you can nest as many tags inside others as you like (as long as you properly open and close them). However, it is recommended to not create a very deep nesting structure, because it&rsquo;s hard for you to understand, and takes more loading time.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;atag&gt;\r\n\t&lt;anothertag&gt;\r\n\t\t&lt;lasttag&gt;\r\n\t\t\tContent\r\n\t\t&lt;\/lasttag&gt;\r\n\t&lt;\/anothertag&gt;\r\n&lt;\/atag&gt;\r\n<\/pre>\r\n\r\n<h2>Self-closing Tags<\/h2>\r\n\r\n<p>A number of elements that are <em>self-closing <\/em>exist, because they never have any text that could be put between opening and closing tag. They require a special type of tag: <code>&lt;tagname \/&gt;<\/code><\/p>\r\n\r\n<img src=\"media\/HTMLSelfClosingTag.png\" \/>\r\n\r\n<h2>Layout &amp; Semantics<\/h2>\r\n\r\n<p>Most tags have some standard design rules applied to them. For example, a heading will automatically be bigger than a paragraph. It&rsquo;s therefore easy to get into the habit of misusing certain tags to get a layout you want.<\/p>\r\n\r\n<p>Don&rsquo;t. HTML is for marking up your webpage, for setting up a basic structure. <strong>CSS <\/strong>&ndash; the next language you should learn after HTML &ndash; is for layout. A common expression in the web world is &ldquo;<em>keep semantics and design completely separate<\/em>&rdquo;, which simply means that you should choose your HTML tags based on what the data inside the element <em>means<\/em>.<\/p>\r\n\r\n<p>Text inside paragraph tags should be a paragraph, text inside a heading should be the headline of an article, text inside an emphasis tag should be in need of emphasis &ndash; you get the idea. HTML5 introduced a lot of semantic elements, which will be discussed in the last few chapters, but for now remember that we&rsquo;re doing absolutely nothing with layout or design just yet.<\/p>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>Just as with any language, HTML provides the opportunity for the developer to add comments to the code. When the page is interpreted by the computer comments are <em>completely ignored<\/em>, which means they don&rsquo;t add to loading time or change the page in any way &ndash; they only increase file size a tiny bit.<\/p>\r\n\r\n<p>You can use comments to explain why you wrote certain parts in a certain way, what you still have to do, or to quickly include\/exclude blocks of HTML to test which one works better.<\/p>\r\n\r\n<p>Comments work like this:<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;!-- This is a comment about something --&gt;\r\n<\/pre>\r\n\r\n<h2>Important Notes<\/h2>\r\n\r\n<p>Everything in your HTML file needs to be structured using tags, which means&nbsp;HTML ignores whitespace and hard returns.<\/p>\r\n\r\n<p>If you type multiple space characters after each other, they are automatically reduced to a single one. If you want to prevent that, you need to add a <strong>non-breaking space:<\/strong><code>&amp;nbsp;<\/code><\/p>\r\n\r\n<p>If you want a <em>return<\/em> (or <em>enter<\/em>), you need to add the <strong>break<\/strong> tag: <code>&lt;br\/&gt;<\/code><\/p>\r\n\r\n<pre data-lang=\"html\">\r\nI want three spaces here: &amp;nbsp;&amp;nbsp;&lt;br\/&gt;\r\nAnd that was a line break&lt;br\/&gt;\r\nAnd another one&lt;br\/&gt;&lt;br\/&gt;\r\nLots of linebreaks here.\r\n<\/pre>\r\n\r\n<p>But, keep in mind what I just told you about semantics. If you want some white space between two paragraphs, use a paragraph tag for that, not one or two &lt;br\/&gt; tags. If you want some space between certain (emphasized) words, consider styling them with CSS later instead of using a lot of non-breaking spaces.<\/p>\r\n","slur":"html5-tags-elements","cat":"Website","subcat":"HTML5","video":"","diff":"1","quiz":"0?Tag?A word between &lt; and &gt; signs that signals the start or end of an element@\r\n0?Self-closing Tag?Special type of tag used for some elements that don't allow content inside them@\r\n0?Nesting?The ability to place tags inside each other to create complex document structures@\r\n1?Write a comment?Use <code>&lt;-- TEXT -&gt;<\/code>@\r\n1?Add a non-breaking space?Use <code>&amp;nbsp;<\/code>@\r\n1?Add a line break?Use <code>&lt;br \/&gt;<\/code>"},
{"id":"171","title":"[HTML5] Page Structure: Head & Body","post":"<p>Every HTML document needs a specific basic structure. This is nothing too fancy, just a few tags that determine where everything needs to be. The bare minimum for creating a web page is this small framework:<\/p> \r\n\r\n<pre data-lang=\"html\">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&#x9;&lt;head&gt;\r\n&#x9;&#x9;&lt;!-- Head Content --&gt;\r\n&#x9;&lt;\/head&gt;\r\n\r\n&#x9;&lt;body&gt;\r\n&#x9;&#x9;&lt;!-- Body Content --&gt;\r\n&#x9;&lt;\/body&gt;\r\n&lt;\/html&gt;\r\n<\/pre>\r\n\r\n<p>At the top is something unique, the <strong>doctype declaration<\/strong>. This tells the browser what version of HTML to use, but has become somewhat redundant now that nearly everything is interpreted the right way using HTML5. Nevertheless, it&rsquo;s wise to always include it to ensure maximum compatibility among (older versions of) browsers.<\/p>\r\n\r\n<p>After the doctype comes an <strong>html<\/strong> tag, and your whole webpage lives inside that element. The only necessary elements are the <strong>head<\/strong> and the <strong>body<\/strong> (in that order).<\/p>\r\n\r\n<h2>The Head Tag<\/h2>\r\n\r\n<p>The head tag <em>describes<\/em> your web page &ndash; anything you put in it is not visible on the page. You can use it to add metadata such as a description, keywords and title.<\/p>\r\n\r\n<p>Its primary use, however, is loading external files to use on the page, such as scripts and stylesheets.<\/p>\r\n\r\n<p>More about what you can put inside the head tag can be found in the chapter <em>Head<\/em>.<\/p>\r\n\r\n<h2>The Body Tag<\/h2>\r\n\r\n<p>The body tag <em>is<\/em> the web page. Everything that is inside it is laid out underneath each other on the page, from top to bottom.<\/p>\r\n\r\n<p>Unlike the head tag, there are <em>a lot<\/em> of elements you can put in there, and those will be discussed in the rest of this course.<\/p>\r\n","slur":"html5-page-structure-head-body","cat":"Website","subcat":"HTML5","video":"","diff":"1","quiz":"3?The <code>&lt;head&gt;<\/code> tag?Describes your webpage with metadata, isn't displayed@\r\n3?The <code>&lt;body&gt;<\/code> tag?Contains all the (visible) content of the page@\r\n3?The <code>&lt;html&gt;<\/code> tag?Contains everything related to the current page"},
{"id":"172","title":"[HTML5] Attributes","post":"<p>Every HTML element can have <strong>attributes<\/strong>. They provide additional information about an element, and are often necessary in self-closing tags. Attributes are always specified in the start tag, and follow the pattern of <code><attr>attribute<\/attr>=&rdquo;value&rdquo;<\/code>.<\/p> \r\n\r\n<p><img src=\"media\/HTMLAttributes.png\" \/><\/p>\r\n\r\n<p>Attributes need to be lowercase, but you can use single or double quotes for the value.<\/p>\r\n\r\n<p><em>Example: Hover over <span title=\"Yay, a title!\" style=\"font-weight:bold;\">this piece of text<\/span> to see the title (tooltip) attribute in action<\/em><\/p>\r\n\r\n<h2>Standard (&ldquo;Global&rdquo;) Attributes<\/h2>\r\n\r\n<p>The attributes presented in the table below are automatically available for every element. Pay special attention to the <code>class<\/code> and <code>id<\/code> attributes, as you'll need them a lot as you continue. You can forget the others for now.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Values      <\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>accesskey<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Character<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies a key combination that can be used to access a certain element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>class<\/code> &amp; <code>id<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Anything<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specify a class or ID name for an element so that we can access it via other languages.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>contenteditable<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>true<\/code> | <code>false<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes an element editable<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>data-*<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Anything<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Used to create your own attributes, again so that we can use other languages with our HTML<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>dir<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ltr<\/code> | <code>rtl<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the direction of the text; left to right or right to left.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>hidden<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>hidden<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Hides an element completely, but keeps its children accessible.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lang<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Language<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the language of the element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>spellcheck<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>true<\/code> | <code>false<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Enables spell checking on the element. The element needs to be editable to use this.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tabindex<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the order of the elements if the user presses tab<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>title<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Anything<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>If the user hovers over the element for about a second, this title will appear next to the cursor (it could be called a built-in <em>tooltip<\/em>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;!-- Specifies the language used within the element, and we add our own invented attribute we could use later on when styling or scripting the element --&#x3E;\r\n&#x3C;p lang=&#x22;en-UK&#x22; data-something=&#x22;paragraph1&#x22;&#x3E;This is some English text!&#x3C;\/p&#x3E;\r\n<\/pre>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>As you can see, the <code>hidden<\/code> attribute has only one value. This simply means that you use <code><attr>hidden<\/attr>=&rdquo;hidden&rdquo;<\/code> if you want to hide something, and don&rsquo;t use this attribute at all otherwise. Elements are visible by default (which is only logical), so hiding them should be something special.<\/p>\r\n\r\n<p>These types of attributes are said to be <strong>minimized<\/strong>, and an alternative syntax for them is to only use the attribute name, without any value. This isn&rsquo;t fully supported though, so I don&rsquo;t recommend using that form, unless you really want your code to be as small and clean as possible.<\/p>\r\n\r\n<p>Furthermore, it&rsquo;s unwise to use the <strong>lang<\/strong> attribute on every element. Usually it is set once in the html tag: <code>&lt;html lang=&rdquo;en-US&rdquo;&gt;<\/code>.<\/p>\r\n\r\n<p>Most of these aren&rsquo;t very important though, for most standard tags in HTML are without any of these attributes. But, self-closing tags don&rsquo;t have content, which means they rely on attributes to fill in the gaps. The same used to be true for some elements like tables (you can set the width and height as attributes), but as I said earlier: it&rsquo;s recommended to keep style and design separate from the mark up. You&rsquo;ll see these important attributes later on when I talk about the specific tag they belong to.<\/p>\r\n\r\n<p>Now we can finally start learning all the actual tags and elements!<\/p>\r\n","slur":"html5-attributes","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Add attributes to an element?Type name-value pairs in the opening tag of an element@\r\n1?Write a single attribute?Use <code>name=\"value\"<\/code>@\r\n1?Add a tooltip?Use the <code>title<\/code> attribute@\r\n1?Hide an element?Use the minimized <code>hidden<\/code> attribute@\r\n1?Add a class to an element?Use the <code>class<\/code> attribute@"},
{"id":"173","title":"[HTML5] Blocks","post":"<p>The concept of HTML blocks is usually saved for last, because it is totally anti-semantic and doesn&rsquo;t have much use at this particular moment. Nevertheless, it forms a <em>very<\/em> large part of the modern web, and I think it should be one of the first things you learn. It&rsquo;s very simple actually, but I only saw them for the first time after about 6 months of trying to create something with HTML, and I could then throw away a half year&rsquo;s work.<\/p> \r\n\r\n<h2>Meet the block elements<\/h2>\r\n\r\n<p>There are two block elements:<\/p>\r\n\r\n<ul>\r\n\t<li><code>&lt;div&gt;<\/code> Short for division, which means this is simply a way of grouping content again and again. But it doesn&rsquo;t tell you what type of group it creates, which means that the div is mostly used for structuring the document and styling it. It actually creates a block around everything that&rsquo;s inside it, and elements before or after it are placed completely above or below it. It is therefore called a <em>block-level element<\/em>.<\/li>\r\n\t<li><code>&lt;span&gt;<\/code> Does the same as div, but is an <em>inline element<\/em>. This means that it doesn&rsquo;t create a block around the elements inside, but keeps those elements within the same line. Mostly used for identifying small elements, like a number that needs to be coloured red, or a catchphrase that has to be made fancy.<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;div&gt;\r\n&#x9;A big block grouped together&lt;br\/&gt;\r\n&#x9;An &lt;span&gt;inline alteration&lt;\/span&gt; in the mark up\r\n&lt;\/div&gt;\r\n<\/pre>\r\n\r\n<p>At the end of this course, we will look at some specific tags that have been introduced for HTML5, that do the same thing but <em>are<\/em> semantic.<\/p>\r\n\r\n<h2>Horizontal Rule<\/h2>\r\n\r\n<p>Before HTML5, the <code>&lt;hr&gt;<\/code> (or <code>&lt;hr\/&gt;<\/code>) tag was used to define a horizontal line &ndash; it was purely for layout. Nowadays though, it has shifted towards a more semantic meaning: to separate content or define a thematic break. Not every browser displays the actual line anymore, and if you want a horizontal line you should do so using CSS.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\nText, article, whatever.\r\n&lt;hr\/&gt;\r\nDiscussing something else under the line.\r\n<\/pre>\r\n","slur":"html5-blocks","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"0?Block Element?An element that doesn't allow other elements besides it and automatically takes up full width@\r\n0?Inline Element?An element that only takes up as much space as the content inside wants, and tries to stay on the same line as the elements around it@\r\n0?Horizontal Rule?A line that runs horizontally across the full width of the page@\r\n1?Create a block-level element without semantic meaning?Use <code>&lt;div&gt;<\/code>@\r\n1?Create an inline element without semantic meaning?Use <code>&lt;span&gt;<\/code>@\r\n1?Create a horizontal rule?Use <code>&lt;hr \/&gt;<\/code>"},
{"id":"174","title":"[HTML5] Paragraphs & Headings","post":"<p>Most of the web consists of articles. Blogs, news websites, tutorial websites (like this one), you name it. And as you probably know, every article consists of a heading, multiple subheadings, and text divided into paragraphs. That&rsquo;s why HTML has good support for multiple headings and paragraphs.<\/p> \r\n\r\n<h2>Headings<\/h2>\r\n\r\n<p>You have 6 tags available to you: <code>&lt;h1&gt;<\/code> up to and including <code>&lt;h6&gt;<\/code>.<\/p>\r\n\r\n<p>These are all block-level elements, which are automatically bold and scaled from large to small respectively. However, it shouldn&rsquo;t be their design that interests you. Search engines in particular, scan a page for headings to see what the most important keywords or phrases are. You should only use the first header tag once on your page. And no, not for your logo or company one-liner. Use the first header for the actual title of the article or page, and then move your way downwards for every sublevel of headers.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;h1&gt;Biggest heading&lt;\/h1&gt;\r\n&lt;h2&gt;Less Big&lt;\/h2&gt;\r\n&lt;h3&gt;Neutral&lt;\/h3&gt;\r\n&lt;h4&gt;Neutral&lt;\/h4&gt;\r\n&lt;h5&gt;Small&lt;\/h5&gt;\r\n&lt;h6&gt;Tiniest Heading&lt;\/h6&gt;\r\n<\/pre>\r\n\r\n<h2>Paragraphs<\/h2>\r\n\r\n<p>Paragraphs are the easiest of them all: a simple <code>&lt;p&gt;<\/code> tag does wonders.<\/p>\r\n\r\n<p>Paragraphs are block-level elements as well, but they don&rsquo;t have their font size or style altered in any other way. They are &ldquo;clean&rdquo;, so to speak, and really allow you to focus on the text inside.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;p&gt;I am a paragraph and I like it!&lt;\/p&gt;\r\n<\/pre>","slur":"html5-paragraphs-headings","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Create a pargraph?Use <code>&lt;p&gt;<\/code>@\r\n1?Create the most important heading?Use <code>&lt;h1&gt;<\/code>@\r\n1?Create a heading in the third level of the hierarchy?Use <code>&lt;h3&gt;<\/code>"},
{"id":"175","title":"[HTML5] Links","post":"<p>Links are vital to any webpage. Without (hyper)links, the only way to access anything on your site would be by typing out the full URL. Not only is that an unnecessarily large amount of work, it is also impossible for everyone to know and remember those URLs.<\/p> \r\n\r\n<p>At the time HTML was invented, however, the concept of hyperlinks wasn&rsquo;t yet in existence. Some other functionality was also desired, and they decided to group those into so-called <strong>anchor points<\/strong>.<\/p>\r\n\r\n<p>When you let down the anchor of a ship, you lock the ship into a position. Anything can happen on the ship, it may even move a bit with the movement of the water, but it will always be tied to that anchor point.<\/p>\r\n\r\n<p>An HTML anchor point works the same way. It simply says that whatever is inside it is linked to a certain other spot. This may be another website, or a spot within the same page. The other website may change some things, but the link still exists and points to the same spot. Linking within the same page then requires two anchor points, because the anchor refers to a specific thing within the ship, and that thing needs to be tied up as well.<\/p>\r\n\r\n<p>This may all seem a bit vague or complicated, but it&rsquo;s actually very simple once we see it in detail.<\/p>\r\n\r\n<h2>Anchor Tag<\/h2>\r\n\r\n<p>As expected, the anchor tag looks like this:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;a href=&ldquo;<em>URL<\/em>&rdquo;&gt; <em>link text<\/em> &lt;\/a&gt;<\/code><\/p>\r\n\r\n<p>As you can see, the link doesn&rsquo;t have to be text. If you want, you can put whole pages within a link, but the biggest links on a page are usually large headers or images. The URL it links to is set within the <code>href<\/code> attribute.<\/p>\r\n\r\n<p>When linking to something on your own website, you can work with <strong>relative links<\/strong>: you simply leave out the domain name and only put the filename into the <em>href attribute<\/em>. Your browser will automatically interpret it as a file on the server it&rsquo;s currently on.<\/p>\r\n\r\n<p>NOTE: Text within an anchor element is automatically styled blue and underlined.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;a href=&quot;http:\/\/google.com&quot;&gt;This is a link to Google!&lt;\/a&gt;\r\n&lt;a href=&quot;contact.html&quot;&gt;This is a link to the page contact.html on the same website&lt;\/a&gt;\r\n<\/pre>\r\n\r\n<h2>Target<\/h2>\r\n\r\n<p>The <code>target<\/code> attribute can easily be confused with the <em>href attribute<\/em>, but they do something completely different. The best way to keep them apart is to remember that <em>href<\/em> stands for <strong>hyperlink reference<\/strong>, while the target attribute specifies <strong>where<\/strong> to open the link.<\/p>\r\n\r\n<p>There are two options:<\/p>\r\n\r\n<ul>\r\n\t<li><code>_blank:<\/code> opens in a new window or tab<\/li>\r\n\t<li><code>_top:<\/code> opens in full body of same window or tab<\/li>\r\n<\/ul>\r\n\r\n<p>There&rsquo;s also two other values the target attribute can obtain, but those are specific to frames, and therefore discussed in the <em>iframes<\/em> chapter.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;a href=&quot;http:\/\/google.com&quot; target=&quot;_blank&quot;&gt;Opens google in a new window or tab (depends on browser)&lt;\/a&gt;\r\n<\/pre>\r\n\r\n<h2>Local Linking<\/h2>\r\n\r\n<p>This requires two anchor points: the anchor\/hyperlink, and the spot on the page that is being linked to.<\/p>\r\n\r\n<p>The spot linked to needs to have a <code>name<\/code> attribute set; the value can be anything.<\/p>\r\n\r\n<p>The anchor needs to have a hyperlink reference of the form <code>#name<\/code>.<\/p>\r\n\r\n<p>The rest is automatically taken care of by the browser!<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;!-- This anchor point is put at the top of a certain section of a page --&gt;\r\n&lt;a name=&quot;somename&quot;&gt;&lt;\/a&gt;\r\n&lt;!-- This is an actual hyperlink --&gt;\r\n&lt;a href=&quot;somepage.html#name&quot;&gt;Link to that specific section on the page somepage.html&lt;\/a&gt;\r\n<\/pre>\r\n","slur":"html5-links","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Create a link?Use <code>&lt;a&gt;<\/code>@\r\n1?Open links in a new window?Use <code>target=\"_blank\"<\/code>@\r\n1?Specify a link's URL?Use the <code>href<\/code> attribute@\r\n1?Link to a specific anchor point on a page?Use <code>href=\"somepage.html#nameofpoint\"<\/code>"},
{"id":"176","title":"[HTML5] Images","post":"<p>Images are pretty straightforward. You create images by using the self-closing <code>&lt;img \/&gt;<\/code> tag. There are two important attributes you need to supply.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\"><code><attr>src<\/attr>=&rdquo;url&rdquo;<\/code>: src stands for <em>source<\/em> and needs a URL pointing to an image file. This can be a relative link to a file on your own server, or a link to an image on another website.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code><attr>alt<\/attr>=&rdquo;text&rdquo;<\/code>: the alt text is displayed when the image can&rsquo;t be loaded. When the link to the image is broken, or somebody uses a screen reader, the alt text will tell them what should have been there.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;img src=&quot;somefile.jpg&quot; alt=&quot;This is some file&quot; \/&gt;\r\n<\/pre>\r\n\r\n<h2>Image Formats<\/h2>\r\n\r\n<p>The most common image format on the web is .<strong>jpg<\/strong> or .<strong>png<\/strong> (with transparency), and .<strong>gif<\/strong> for animated images. They are known for their small file size and therefore quick loading times. But, HTML supports nearly all image formats, so anything goes really.<\/p>\r\n\r\n<p>NOTE: Always specify the size (width and height) of (large) images with CSS. If you don&rsquo;t, the page will change layout all the time while the image is loading, because it is adjusting to the current image dimensions in real time.<\/p>\r\n\r\n<h2>Image Maps<\/h2>\r\n\r\n<p>If you want to define certain special (clickable) areas on an image, you need to use image maps.<\/p>\r\n\r\n<p>The <code>&lt;map&gt;<\/code> tag introduces a set of areas to be mapped, which are defined with the <code>&lt;area \/&gt;<\/code> tag.<\/p>\r\n\r\n<p>Linking an image with its map is done by giving your <em>img tag<\/em> the attribute <code><attr>usemap<\/attr>=&rdquo;#namehere&rdquo;<\/code>, and your <em>map tag<\/em> the attribute <code><attr>name<\/attr>=&rdquo;namehere&rdquo;<\/code> (just like with local anchor points).<\/p>\r\n\r\n<p>Defining your areas is done by using one of these three attribute pairs (for a rectangle, circle or polygon, respectively):<\/p>\r\n\r\n<code class=\"longsyntax\">shape=&rdquo;rect&rdquo; coords=&rdquo;x<sub>1<\/sub>,y<sub>1<\/sub>,x<sub>2<\/sub>,y<sub>2<\/sub>&rdquo;\r\nshape=&rdquo;circle&rdquo; coords=&rdquo;x,y,radius&rdquo;\r\nshape=&rdquo;poly&rdquo; coords=&rdquo;x<sub>1<\/sub>,y<sub>1<\/sub>,&hellip;.,x<sub>n<\/sub>,y<sub>n<\/sub>&rdquo;<\/code>\r\n\r\n<p>And lastly, an <code>href<\/code> attribute is provided to define what the area links to.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;img src=&quot;somefile.png&quot; alt=&quot;This is an image&quot; usemap=&quot;#imagemap&quot;&gt;\r\n\r\n&lt;map name=&quot;imagemap&quot;&gt;\r\n  &lt;area shape=&quot;rect&quot; coords=&quot;0,0,100,100&quot; href=&quot;somepage.html&quot; alt=&quot;Links to some page&quot;&gt;\r\n  &lt;area shape=&quot;circle&quot; coords=&quot;0,0,50&quot; href=&quot;anotherpage.html&quot; alt=&quot;Links to another page&quot;&gt;\r\n&lt;\/map&gt;\r\n<\/pre>\r\n","slur":"html5-images","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Create an image?Use <code>&lt;img \/&gt;<\/code>@\r\n1?Specify the source URL of an image?Use the <code>src<\/code> attribute@\r\n1?Specify a textual description of the image?Use the <code>alt<\/code> attribute@\r\n1?Turn parts of an image into links?Use image maps@\r\n1?Create an image map?Use <code>&lt;map&gt;<\/code>@\r\n1?Specify the shape of an image map area?Use the <code>shape<\/code> and <code>coords<\/code> attributes"},
{"id":"177","title":"[HTML5] Lists","post":"<p>There are three types of lists: ordered, unordered and description. Because we want our HTML to strictly define what category a certain piece of text belongs to, we need a different set of tags for each of them. But luckily, the basic idea and structure remain the same.<\/p> \r\n\r\n<h2>How Lists Work<\/h2>\r\n\r\n<p>Lists work by telling the browser when it wants to start one, and then using a list tag to define when one particular list item starts (and ends). An abstract list structure looks like this:<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;!-- General structure of HTML lists --&gt;\r\n&lt;listcontainer&gt;\r\n&#x9;&lt;listitem&gt; Content &lt;\/listitem&gt;\r\n&#x9;&lt;listitem&gt; Content &lt;\/listitem&gt;\r\n&lt;\/listcontainer&gt;\r\n<\/pre>\r\n\r\n<p>If you accidentally put text in there without list item tags surrounding it, the text would still be indented (because it is within a list element), but it wouldn&rsquo;t have a bullet or number in front of it.<\/p>\r\n\r\n<h2>Ordered Lists<\/h2>\r\n\r\n<p>Lists where the items need to be in a particular order; a step-by-step plan, a top 10 of greatest love songs, etcetera. Such a list is started with the <code>&lt;ol&gt;<\/code> tag, and every list item is introduced with the <code>&lt;li&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;ol&gt;\r\n&#x9;&lt;li&gt; Content &lt;\/li&gt;\r\n&#x9;&lt;li&gt; Content &lt;\/li&gt;\r\n&lt;\/ol&gt;\r\n<\/pre>\r\n\r\n<p>You can use the <code>type<\/code> attribute to define whether to use numbers ( <em>1, 2, &hellip;<\/em> ), roman numbers ( <em>I or i<\/em> ) or letters ( <em>A or a<\/em> ) in front of the list items, but I recommend defining this in the CSS and leaving the HTML clean.<\/p>\r\n\r\n<h2>Unordered Lists<\/h2>\r\n\r\n<p>Lists where the items need not be in a particular order; a collection of tips and tricks, a grocery list, etcetera. Such a list is started with the <code>&lt;ul&gt;<\/code> tag, and also uses <code>&lt;li&gt;<\/code> for the items.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;ul&gt;\r\n&#x9;&lt;li&gt; Content &lt;\/li&gt;\r\n&#x9;&lt;li&gt; Content &lt;\/li&gt;\r\n&lt;\/ul&gt;\r\n<\/pre>\r\n\r\n<h2>Description Lists<\/h2>\r\n\r\n<p>A list of terms with a description for each of them. These are started with the <code>&lt;dl&gt;<\/code> tag. The definition is within an <code>&lt;dt&gt;<\/code> element, while the corresponding decription is put underneath it with <code>&lt;dd&gt;<\/code><\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;dl&gt;\r\n&#x9;&lt;dt&gt; Definition &lt;\/dt&gt;\r\n&#x9;&#x9;&lt;dd&gt; Description &lt;\/dd&gt;\r\n&#x9;&lt;dt&gt; Definition &lt;\/dt&gt;\r\n&#x9;&#x9;&lt;dd&gt; Description &lt;\/dd&gt;\r\n&lt;\/dl&gt;\r\n<\/pre>\r\n","slur":"html5-lists","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"0?Ordered List?A list where ranking of the items is important@\r\n0?Unordered List?A list where each element has equal importance@\r\n0?Description List?A list of term-definition pairs@\r\n1?Create a list item?Use <code>&lt;li&gt;<\/code>@\r\n1?Create an ordered list?Use <code>&lt;ol&gt;<\/code>@\r\n1?Create an unordered list?Use <code>&lt;ul&gt;<\/code>@\r\n1?Create a description list?Use <code>&lt;dt&gt;<\/code> and <code>&lt;dd&gt;<\/code> tags"},
{"id":"178","title":"[HTML5] Text Formatting","post":"<p>Lots of times within this course, I have made important words stand out by making them <strong>bold<\/strong> or <em>emphasized<\/em>. This isn&rsquo;t done by pure CSS, but with special (semantic) HTML tags. Those words and phrases I highlighted not only need to look like they stand out, they actually are the most important ones of the story, and therefore need to have the same added importance within the HTML. All the formatting tags are regular ones which are easy to understand, so I&rsquo;ve put together a nice table for you.<\/p> \r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Tag<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;b&gt;<\/code>, <code>&lt;strong&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Both define bold text, but the second one has semantic importance<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-weight:bold;\">bold<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;i&gt;<\/code>, <code>&lt;em&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Both define italic text, but the second one has semantic importance<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"font-style:italic;\">italic<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;sub&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines subscripted text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A<sub>subscript<\/sub>B<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;sup&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines superscripted text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A<sup>superscript<\/sup>B<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;ins&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inserted (= added) text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><u>inserted<\/u><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;del&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Deleted (= removed) text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><s>removed<\/s><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;mark&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines marked (= highlighted) text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><mark>marked<\/mark><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;small&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines smaller text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><small>small<\/small><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>I recommend using the <code>&lt;b&gt;<\/code>, <code>&lt;i&gt;<\/code> and <code>&lt;small&gt;<\/code> elements sparingly. The effect they create can easily be reproduced by using CSS, which robs them of all their functionality really.<\/p>\r\n\r\n<p>The inserted and deleted text are for showing edits &ndash; after the article was published some parts turned out to be false, or some new information was discovered, and that&rsquo;s the semantic importance of these tags.<\/p>\r\n","slur":"html5-text-formatting","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Emphasize something both visually and semantically?Use <code>&lt;strong&gt;<\/code> or <code>&lt;em&gt;<\/code>@\r\n1?Create superscripted text?Use <code>&lt;sup&gt;<\/code>@\r\n1?Create subscripted text?Use <code>&lt;sub&gt;<\/code>"},
{"id":"179","title":"[HTML5] Code Formatting","post":"<p>One tricky area for a markup language is how to format (computer) code. If you&rsquo;d just throw the computer code inside some paragraph tags, HTML would strip it of all formatting and maybe even interpret some of it as HTML code, making the whole incomprehensible. On top of that, anything related to computers is not normal text, and therefore needs to have their own tag for maintaining your high semantic standards.<\/p> \r\n\r\n<p>That&rsquo;s why the <code>&lt;pre&gt;<\/code> tag has been invented, for <strong>preformatted text<\/strong>. Anything inside it will keep its formatting and will not wrap if the element is too small for what&rsquo;s inside.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;pre&gt;\r\nSome\r\nText\r\nThat\r\n&#x9;Needs\r\nTo Keep\r\n&#x9;Its\r\n&#x9;&#x9;Formatting\r\n&lt;\/pre&gt;\r\n<\/pre>\r\n\r\n<p>If you only need only a single line of code, you can use the <code>&lt;code&gt;<\/code> tag. For example, everytime I present syntax or &ldquo;code words&rdquo; to you, I wrap it inside this element.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;code&gt;var i = 2;&lt;\/code&gt;\r\n<\/pre>\r\n\r\n<p>For computer <strong>output<\/strong>, the result of executing that code, you have to use the <code>&lt;samp&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;samp&gt;Error 102589: i already defined! Stopped execution. &lt;\/samp&gt;\r\n<\/pre>\r\n\r\n<p>For <strong>keyboard input<\/strong> is the <code>&lt;kbd&gt;<\/code> tag, and (mathematical) variables have the <code>&lt;var&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;kbd&gt;File | Save As .. &lt;\/kbd&gt;\r\n&lt;var&gt;E = mc<sup>2<\/sup>&lt;\/var&gt;\r\n<\/pre>\r\n\r\n<p>All of these have their own important specific uses, but the <code>&lt;pre&gt;<\/code> tag is by far the most commonly used. For instance, all code examples on this website are wrapped inside one.<\/p>\r\n","slur":"html5-code-formatting","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Create text that preserves whitespace and linebreaks?Use <code>&lt;pre&gt;<\/code>@\r\n1?Create text that preserves whitespace, but only works for single lines?Use <code>&lt;code&gt;<\/code>@\r\n1?Create text that should be read as keyboard or software input?Use <code>&lt;kbd&gt;<\/code>"},
{"id":"180","title":"[HTML5] Quotations & Citations","post":"<p>We&rsquo;ve already seen tags to format small bits of text and (computer) code on your web page, which means there&rsquo;s only one thing left that we haven&rsquo;t discussed yet: blocks of text that refer to another source or have a greater meaning.<\/p> \r\n\r\n<h2>Quotations<\/h2>\r\n<p>When dealing with short (inline) quotations, the very simple <code>&lt;q&gt;<\/code> tag is used. Browsers usually automatically add quotes around it.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;q&gt;A nice quote here&lt;\/q&gt;\r\n<\/pre>\r\n\r\n<h2>Blockquotes<\/h2>\r\n\r\n<p>A quote larger than that is called a blockquote, and therefore needs the <code>&lt;blockquote&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;blockquote&gt;A nice, BIG quote here spanning multiple lines&lt;\/blockquote&gt;\r\n<\/pre>\r\n\r\n<h2>Citations<\/h2>\r\n\r\n<p>To cite something, usually the title of a work, you use the <code>&lt;cite&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;cite&gt;To be, or not to be. That is the question. &lt;\/cite&gt;\r\n<\/pre>\r\n\r\n<h2>Abbreviations<\/h2>\r\n\r\n<p>If you&rsquo;re using an abbreviation or acronym, it&rsquo;s best to wrap it inside the <code>&lt;abbr&gt;<\/code> tag. This allows you to add a title attribute that shows the full word or phrase when you hover over the abbreviation.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;abbr title=&quot;World Wildlife Fund&quot; &gt;WWF&lt;\/abbr&gt;\r\n<\/pre>\r\n\r\n<h2>Contact Information<\/h2>\r\n\r\n<p>For displaying contact information, the <code>&lt;address&gt;<\/code> tag can help. Most browsers add a line break before and after the element, and display the text in italics.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;address&gt;Somestreet 21<br\/>England&lt;\/address&gt;\r\n<\/pre>\r\n\r\n<h2>Text Direction<\/h2>\r\n\r\n<p>If a certain piece of text needs to be displayed from right to left instead of the usual left to right, you can use the so-called <code>&lt;bdo&gt;<\/code> tag, which stands for <strong>bi-directional override<\/strong>. The tag itself does nothing &ndash; you still need to add the <code>dir<\/code> attribute.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;bdo dir=&quot;rtl&quot; &gt;Some Arabic text maybe.&lt;\/bdo&gt;\r\n<\/pre>\r\n","slur":"html5-quotations-citations","cat":"Website","subcat":"HTML5","video":"","diff":"2","quiz":"1?Create single-line quotations?Use <code>&lt;q&gt;<\/code>@\r\n1?Create multi-line quotations?Use <code>&lt;blockquote&gt;<\/code>@\r\n1?Change text direction?Use the <code>&lt;bdo&gt;<\/code> tag with the <code>dir<\/code> attribute@\r\n1?Add a citation?Use <code>&lt;cite&gt;<\/code>"},
{"id":"181","title":"[HTML5] Tables","post":"<p>Tables are used to display tabular data. This may sound obvious, but tables are misused far too often for layout purposes. Tables automatically distribute the width and height evenly among its cells, which is why people think they are perfect for responsive websites. If the user resizes the browser window, all elements on your page, such as the main content and sidebar, are automatically scaled with it. But semantically, you couldn&rsquo;t be more wrong. You should only use tables for displaying data that is best displayed using rows and columns (<em>tabular data<\/em>). For example: competition results in the soccer league, financial figures of the last quartile, or to teach some concept in a concise manner (as I use it frequently on this website).<\/p> \r\n\r\n<h2>The &lt;table&gt;, &lt;tr&gt; and &lt;td&gt; tags<\/h2>\r\n\r\n<p>If you want, you can view tables as a combination of two lists: rows and columns.<\/p>\r\n\r\n<p>The <code>&lt;table&gt;<\/code> tag introduces a table, while the <code>&lt;tr&gt;<\/code> tag starts a table row (horizontal list), which contains <code>&lt;td&gt;<\/code> tags that contain table data. Those make up the columns, or (vertical) lists.<\/p>\r\n\r\n<p>HTML expects you to get the correct amount of cells in every row, which is determined by the first row. If you put one cell less in the second row, it will just leave a gap in the table. If you put one cell more in the second row, it will add it as if it were an extra column, but the whole layout and structure will be destroyed.<\/p>\r\n\r\n<p>By default, tables are only as wide and high as they need to be to contain all the table data. That, however, makes for a very messy look, so the first thing people usually do is stretching the table to 100% using CSS, and increasing the white space around the rows and columns.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;table&gt;\r\n&#x9;&lt;tr&gt;\r\n&#x9;&#x9;&lt;td&gt;Row 1, Column 1&lt;\/td&gt;\r\n&#x9;&#x9;&lt;td&gt;Row 1, Column 2&lt;\/td&gt;\r\n&#x9;&lt;\/tr&gt;\r\n&#x9;&lt;tr&gt;\r\n&#x9;&#x9;&lt;td&gt;Row 2, Column 1&lt;\/td&gt;\r\n&#x9;&#x9;&lt;td&gt;Row 2, Column 2&lt;\/td&gt;\r\n&#x9;&lt;\/tr&gt;\r\n&lt;\/table&gt;\r\n<\/pre>\r\n\r\n<h2>Table Headings<\/h2>\r\n\r\n<p>Most tables have certain categories displayed in the top row. These define what is inside the table, and therefore need their own tag. Instead of &lt;td&gt;, you need to use the <code>&lt;th&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;table&gt;\r\n&#x9;&lt;tr&gt;\r\n&#x9;&#x9;&lt;th&gt;Column 1&lt;\/th&gt;\r\n&#x9;&#x9;&lt;th&gt;Column 2&lt;\/th&gt;\r\n&#x9;&lt;\/tr&gt;\r\n&#x9;&lt;tr&gt;\r\n&#x9;&#x9;&lt;td&gt;Content&lt;\/td&gt;\r\n&#x9;&#x9;&lt;td&gt;Other Content&lt;\/td&gt;\r\n&#x9;&lt;\/tr&gt;\r\n&lt;\/table&gt;\r\n<\/pre>\r\n\r\n<p>Table headings are automatically embolded.<\/p>\r\n\r\n<h2>Irregular Tables<\/h2>\r\n\r\n<p>Some tables have a cell that spans multiple rows, or multiple columns. These properties can <em>not<\/em> be set with CSS, and therefore need to be added to the corresponding elements as attributes:<\/p>\r\n\r\n<p><code><attr>colspan<\/attr>=&rdquo;value&rdquo;<\/code>: how many columns a cell spans. Default is 1, increasing the number makes the cell wider towards the right.<\/p>\r\n\r\n<p><code><attr>rowspan<\/attr>=&rdquo;value&rdquo;<\/code>: how many rows a cell spans. Default is 1, increasing the number makes the cell larger towards the bottom.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;!-- USING COLSPAN --&gt;\r\n&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;!-- Category with only one cell needed --&gt;\r\n    &lt;th&gt;Name&lt;\/th&gt;\r\n    &lt;!-- Category spanning multiple cells --&gt;\r\n    &lt;th colspan=&quot;2&quot;&gt;Favourite Food&lt;\/th&gt;\r\n  &lt;\/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Adam Johnson&lt;\/td&gt;\r\n    &lt;td&gt;Apples&lt;\/td&gt;\r\n    &lt;td&gt;Bread&lt;\/td&gt;\r\n  &lt;\/tr&gt;\r\n&lt;\/table&gt;\r\n\r\n&lt;!-- USING ROWSPAN --&gt;\r\n&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Name&lt;\/th&gt;\r\n    &lt;td&gt;Adam Johnson&lt;\/td&gt;\r\n  &lt;\/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;th rowspan=&quot;2&quot;&gt;Favourite Food&lt;\/th&gt;\r\n    &lt;td&gt;Apples&lt;\/td&gt;\r\n  &lt;\/tr&gt;\r\n  &lt;tr&gt;\r\n  &#x9;&lt;td&gt;Bread&lt;\/td&gt;\r\n  &lt;\/tr&gt;\r\n&lt;\/table&gt;\r\n<\/pre>\r\n\r\n<p>As you can see in the example, if you increase one of these attributes, you need to count yourself how many cells you need to leave out in the next column(s) or row(s) respectively.<\/p>\r\n\r\n<h2>Captions<\/h2>\r\n\r\n<p>Captions are titles for your table. They should follow the &lt;table&gt; tag immediately, and are automatically centred above the table. They are created with the <code>&lt;caption&gt;<\/code> tag.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;table&#x3E;\r\n&#x9;&#x3C;caption&#x3E;SOME CAPTION&#x3C;\/caption&#x3E;\r\n&#x9;&#x3C;tr&#x3E;\r\n&#x9;&#x9;&#x3C;td&#x3E;Content&#x3C;\/td&#x3E;\r\n&#x9;&#x9;&#x3C;td&#x3E;Other Content&#x3C;\/td&#x3E;\r\n&#x9;&#x3C;\/tr&#x3E;\r\n&#x3C;\/table&#x3E;\r\n<\/pre>\r\n\r\n<h2>Grouping Tags<\/h2>\r\n\r\n<p>You can&rsquo;t use a div or span to group multiple rows, columns or cells for semantic or layout matters, which is why some grouping tags were invented.<\/p>\r\n\r\n<table>\r\n\t<tr><td>Element<\/td><td>Description<\/td><\/tr>\r\n\t<tr><td><code>&lt;colgroup&gt;<\/code><\/td><td>Groups multiple columns<\/td><\/tr>\r\n\t<tr><td><code>&lt;col&gt;<\/code><\/td><td>Specifies properties for one column<\/td><\/tr>\r\n\t<tr><td><code>&lt;thead&gt;<\/code><\/td><td>Groups the header content<\/td><\/tr>\r\n\t<tr><td><code>&lt;tbody&gt;<\/code><\/td><td>Groups the body content<\/td><\/tr>\r\n\t<tr><td><code>&lt;tfoot&gt;<\/code><\/td><td>Groups the footer content<\/td><\/tr>\r\n<\/table>\r\n\r\n<p>The &lt;thead&gt; and &lt;tbody&gt; elements are often automatically inserted by browsers when parsing your page.<\/p>\r\n","slur":"html5-tables","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Start a table environment?Use <code>&lt;table&gt;<\/code>@\r\n1?Create a row in a table?Use <code>&lt;tr&gt;<\/code>@\r\n1?Create a single cell within a table?Use <code>&lt;td&gt;<\/code>@\r\n1?Make a cell span multiple columns?Use the <code>colspan<\/code> attribute@\r\n1?Make a cell span multiple rows?Use the <code>rowspan<\/code> attribute@\r\n1?Add a caption to the table?Use <code>&lt;caption&gt;<\/code>"},
{"id":"182","title":"[HTML5] Forms","post":"<p>Forms in HTML are, just as in the real world, used to collect user input. You log in to websites using a form, send mails using a form, upload a blog post, send a tweet &ndash; the list goes on and on. It&rsquo;s therefore not strange that forms are quite a large topic in HTML, and therefore split up into 4 chapters. This one will discuss the basic structure, while the others go over all the possibilities you have for populating your forms.<\/p> \r\n\r\n<h2>The &lt;form&gt; tag<\/h2>\r\n\r\n<p>Forms are enclosed by <code>&lt;form&gt;<\/code> tags. You can put any HTML you want within a form element, but a form element can never submit data from elements that are <em>not<\/em> inside it.<\/p>\r\n\r\n<h2>The Action Attribute<\/h2>\r\n\r\n<p>Because HTML itself was not made to actually <em>do<\/em> things &ndash; like manipulating data &ndash; you need to specify the action that needs to be performed by the form. This action means moving to a different file that can handle the input. Therefore, there&rsquo;s an <code>action<\/code> attribute that takes a link to a file\/page as value.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;form action=&quot;processingpage.html&quot;&gt;\r\n&#x9;Form Elements Here\r\n&lt;\/form&gt;\r\n<\/pre>\r\n\r\n<p>When the input is dealt with, the user is usually referred back with a message saying submission was successful (or not). Not only is this user-friendly, but it also protects this vulnerable action page (because it contains user input data).<\/p>\r\n\r\n<p>NOTE: The form only moves to the action page when the user presses a submit button within the form. It doesn&rsquo;t send the data there straight away or &ldquo;in real-time&rdquo;.<\/p>\r\n\r\n<h2>The Method Attribute<\/h2>\r\n\r\n<p>There are two ways to perform the action, using the <strong>GET<\/strong> method and the <strong>POST <\/strong>method. These are specified as <code><attr>method<\/attr>=&rdquo;GET&rdquo;<\/code> or <code><attr>method<\/attr>=&rdquo;POST&rdquo;<\/code> attributes in the form tag. Use&hellip;<\/p>\r\n\r\n<ul>\r\n\t<li><code>GET<\/code> when the submission is passive and doesn&rsquo;t contain sensitive information. The GET method passes on the data using parameters in the URL. It is quick, but has size limitations and is best suited to short amounts of data.<\/li>\r\n\t<li><code>POST<\/code> when the form is updating data or includes sensitive information (e.g., passwords). The submitted data is not visible to anybody accessing the page, which means it offers better security and can handle larger amounts of data.<\/li>\r\n<\/ul>\r\n\r\n<h2>The Name Attribute<\/h2>\r\n\r\n<p>Every form-related element can take a <code>name<\/code> attribute, which can take any value you want to give it. This attribute is very important: only elements with a specified name attribute are included on submission. When you learn other web languages that can deal with user input, you&rsquo;ll see that those names are vital to retrieving the data.<\/p>\r\n\r\n<h2>Fieldset and Legend<\/h2>\r\n\r\n<p>To group related data within a form, you can use the <code>&lt;fieldset&gt;<\/code> element. The <code>&lt;legend&gt;<\/code> element defines a caption or title for this group, and follows the &lt;fieldset&gt; tag immediately (just as with tables and captions).<\/p>\r\n\r\n<h2>Labels<\/h2>\r\n\r\n<p>The <code>&lt;label&gt;<\/code> tag defines a label for an input element, such as a description of the option a checkbox represents or question you need to answer in a text field.<\/p>\r\n\r\n<h2>Basic Form Example<\/h2>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;form action=&quot;processingpage.html&quot; method=&quot;POST&quot;&gt;\r\n&#x9;&lt;fieldset&gt;\r\n&#x9;&#x9;&lt;legend&gt;Textual input&lt;\/legend&gt;\r\n&#x9;&#x9;&lt;input name=&quot;username&quot; type=&quot;text&quot; \/&gt; \r\n&#x9;&#x9;&lt;input name=&quot;fullName&quot; type=&quot;text&quot; \/&gt; \r\n&#x9;&lt;\/fieldset&gt;\r\n&lt;\/form&gt;\r\n<\/pre>\r\n","slur":"html5-forms","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Create a form?Use <code>&lt;form&gt;<\/code>@\r\n1?Specify the location a form submits to?Use the <code>action<\/code> attribute@\r\n1?Specify the submitting method to use (GET or POST)?Use the <code>method<\/code> attribute@\r\n1?Include input fields on submission?Give input fields different <code>name<\/code> attributes@\r\n1?Assign a caption to a group of input elements?Use <code>&lt;fieldset&gt;<\/code> and <code>&lt;legend&gt;<\/code> tags"},
{"id":"183","title":"[HTML5] The Input Element","post":"<p>The input element is the heart and soul of every form.<\/p> \r\n\r\n<p>It is represented by the <em>self-closing<\/em> <code>&lt;input \/&gt;<\/code> tag, which is a special one: its role changes completely based on the <code>type<\/code> attribute.<\/p>\r\n\r\n<h2>Text<\/h2>\r\n\r\n<p>To define a one-line input field for text input, use <code>&lt;input <attr>type<\/attr>=&rdquo;text&rdquo; \/&gt;<\/code>.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    Please type your username: \r\n&#x9;&#x3C;input type=&#x22;text&#x22; \/&#x3E; \r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>Passwords<\/h2>\r\n\r\n<p>To define a password field, use <code>&lt;input <attr>type<\/attr>=&rdquo;password&rdquo; \/&gt;<\/code>. Password fields are simply input fields, but with asterisks\/dots to hide what you type.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    Please type password:\r\n&#x9;&#x3C;input type=&#x22;password&#x22; \/&#x3E; \r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>Radio<\/h2>\r\n\r\n<p>To define a radio button, use <code>&lt;input <attr>type<\/attr>=&rdquo;radio&rdquo; \/&gt;<\/code>. Radio buttons let a user select <em>only one<\/em> of a number of options. Options belong together when they have the same <em>name<\/em>.<\/p>\r\n\r\n<p>By default, when the page loads, the none of the radio buttons is selected.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    Gender:\r\n&#x9;&#x3C;input type=&#x22;radio&#x22; \/&#x3E; Male  \r\n&#x9;&#x3C;input type=&#x22;radio&#x22; \/&#x3E; Female \r\n&#x9;&#x3C;input type=&#x22;radio&#x22; \/&#x3E; Both?\r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>Checkbox<\/h2>\r\n\r\n<p>To define a checkbox, use <code>&lt;input <attr>type<\/attr>=&rdquo;checkbox&rdquo; \/&gt;<\/code>. Checkboxes let you turn a certain option or possibility on\/off, which means each one can be chosen individually and needs a different name.<\/p>\r\n\r\n<p>By default, when the page loads, all checkboxes are off.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    Which fruit(s) would you like to buy?\r\n&#x9;&#x3C;input type=&#x22;checkbox&#x22; \/&#x3E; Apple\r\n&#x9;&#x3C;input type=&#x22;checkbox&#x22; \/&#x3E; Berries\r\n&#x9;&#x3C;input type=&#x22;checkbox&#x22; \/&#x3E; Pear\r\n&#x9;&#x3C;input type=&#x22;checkbox&#x22; \/&#x3E; Kiwi\r\n&#x9;&#x3C;input type=&#x22;checkbox&#x22; \/&#x3E; Banana\r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>Submit<\/h2>\r\n\r\n<p>The submit button of a form is created with <code>&lt;input <attr>type<\/attr>=&rdquo;submit&rdquo; \/&gt;<\/code>. It automatically submits the form, which means no additional scripting or anything of the kind is needed. The button has a default text that reads &lsquo;submit&rsquo; in the browser&rsquo;s language, but you can easily change that using the <code>value<\/code> attribute.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    &#x3C;input type=&#x22;submit&#x22; value=&#x22;SEND THIS THING!&#x22; \/&#x3E;\r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>Button<\/h2>\r\n\r\n<p>A simple button is created with <code>&lt;input <attr>type<\/attr>=&rdquo;button&rdquo; \/&gt;<\/code>. This button has the standard look, feel and animations of a button &ndash; but it doesn&rsquo;t do anything. Any function should be given to it via a scripting language.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    &#x3C;input type=&#x22;button&#x22; value=&#x22;Clicking this button doesn&#x27;t send the form, but probably does some other extremely useful things&#x22; \/&#x3E;\r\n&#x3C;\/form&#x3E;\r\n\r\n<\/pre>\r\n\r\n<h2>File<\/h2>\r\n\r\n<p>An input field that holds a file is created with <code>&lt;input <attr>type<\/attr>=&rdquo;file&rdquo; \/&gt;<\/code>. The way this works depends on the browser and operating system of the user. It&rsquo;s used with forms for uploading files.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form&#x3E;\r\n    Please upload a profile picture:\r\n    &#x3C;input type=&#x22;file&#x22; \/&#x3E;\r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<h2>HTML5 (Text) Types<\/h2>\r\n\r\n<p>These types have been added in HTML5, but not all of them are supported by all browsers. If a browser doesn&rsquo;t support it, it will display a regular one-line text field. If it is supported, the browser will automatically display some extra helpful tools or, in some rare cases, standard layout.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Type<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>color<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>date<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a date<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>datetime<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a date and time (with timezone)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>datetime-local<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a date and time (without timezone)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>email<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be of email format<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>month<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a month and year<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>number<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>range<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a value within a range &ndash; usually displayed as a slider<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>search<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a search term<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tel<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be of telephone number format<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>time<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a time (no timezone)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>url<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a URL<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>week<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Input has to be a week (agenda picker appears)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>","slur":"html5-input-element","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Create a regular text field?Use <code>type=\"text\"<\/code>@\r\n1?Create a password field?Use <code>type=\"password\"<\/code>@\r\n1?Create a submit button?Use <code>type=\"submit\"<\/code>@\r\n1?Create a box to check on and off?Use <code>type=\"checkbox\"<\/code>@\r\n1?Create buttons of which only one can be selected at a time?Use <code>type=\"radio\"<\/code>"},
{"id":"184","title":"[HTML5] Input Attributes","post":"<p>The important <code>&lt;input&gt;<\/code> element has a lot of attributes that can help define or restrict the expected input.<\/p> \r\n\r\n<p>All of these attributes are simply for making clear what you expect from your users and improving the layout. They can be changed by anybody who knows something about HTML, which means you will need to write code on the server to check if the data is within your restrictions.<\/p>\r\n\r\n<h2>The value attribute<\/h2>\r\n\r\n<p>The <code>value<\/code> attribute specifies an initial value for an input field.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;input type=&quot;submit&quot; value=&quot;Submit Me!&quot; \/&gt;\r\n<\/pre>\r\n\r\n<h2>The readonly attribute<\/h2>\r\n\r\n<p>The <code>readonly<\/code> attribute specifies that an input field is <em>read only<\/em> and cannot be changed.<\/p>\r\n\r\n<p><em>Why would you want to include a readonly input field? Doesn&rsquo;t that defeat the purpose of input?<\/em> Well, for example, sometimes the form needs to send additional data that is not input by the user, but generated by the browser or server. That data is usually put into a (hidden) readonly field.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\nYour ID number: &lt;input type=&quot;text&quot; value=&quot;06869359503&quot; readonly \/&gt;\r\n<\/pre>\r\n\r\n<p>May be minimized; <code>readonly<\/code> means the same as <code><attr>readonly<\/attr>=&rdquo;readonly&rdquo;<\/code><\/p>\r\n\r\n<h2>The disabled attribute<\/h2>\r\n\r\n<p>The <code>disabled<\/code> attribute specifies that an input field is disabled. A disabled element is un-usable, un-clickable and will not be submitted.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;input type=&quot;submit&quot; value=&quot;Can&apos;t Submit (Not all required fields filled)&quot; disabled \/&gt;\r\n<\/pre>\r\n\r\n<p>May be minimized; <code>disabled<\/code> means the same as <code><attr>disabled<\/attr>=&rdquo;disabled&rdquo;<\/code><\/p>\r\n\r\n<h2>The selected attribute<\/h2>\r\n\r\n<p>The <code>selected<\/code> attribute specifies that an input field is selected. For example, you can pre-select a few checkboxes or a certain radiobutton.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\nWhat is your favourite food?\r\n&lt;input type=&quot;radio&quot; name=&quot;radioGroup&quot; value=&quot;Apples&quot; \/&gt;\r\n&lt;input type=&quot;radio&quot; name=&quot;radioGroup&quot; value=&quot;Bananas&quot; selected \/&gt;\r\n&lt;input type=&quot;radio&quot; name=&quot;radioGroup&quot; value=&quot;Pears&quot; \/&gt;\r\n<\/pre>\r\n\r\n<p>May be minimized; <code>selected<\/code> means the same as <code><attr>selected<\/attr>=&rdquo;selected&rdquo;<\/code><\/p>\r\n\r\n<h2>The maxlength attribute<\/h2>\r\n\r\n<p>The <code>maxlength<\/code> attribute specifies a maximum allowed length (in characters) for an input field. It doesn&rsquo;t provide any feedback &ndash; if the user crosses the limit, it simply doesn&rsquo;t register keypresses anymore.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\nUsername: &lt;input type=&quot;text&quot; maxlength=&quot;10&quot; placeholder=&quot;Maximum 10 characters&quot; \/&gt;\r\n<\/pre>\r\n\r\n<h2>HTML5 Attributes<\/h2>\r\n\r\n<p>These attributes have been introduced in HTML5 and are mostly implemented, but not completely supported everywhere yet. If it&rsquo;s not supported, it will just be ignored &ndash; your page will still load perfectly fine.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Values           <\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>autocomplete<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>on<\/code> | <code>off<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>If the user has filled in this form or input element before, autocomplete his inputs<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>autofocus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>minimized<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies that this input element automatically gets focus when the page loads<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>form<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>form ID<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies which form an input element belongs to, in case it isn&rsquo;t placed within a form element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>formaction<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>URL<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Can only be set for submit buttons. If the button is clicked, it goes to this URL instead of the one specified in the form element (it overrides the action attribute).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>formenctype<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>enctype<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies how form-data should be encrypted. The default is fine for almost all cases, which means you can forget about this one. Forms that upload files, however, require enctype <code>multipart\/form-data<\/code>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>formmethod<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>get<\/code> | <code>post<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Just as the formaction, it works only for submit buttons, and overrides the method set on the whole form.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>formnovalidate<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>minimized<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Works only on submit buttons. If the button is clicked, the browser doesn&rsquo;t check (<em>validate<\/em>) whether input fields have the correct input.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>formtarget<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>_blank<\/code> | <code>_top<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>By default, when the form submits you are taken to the URL specified in the action attribute <em>within the same window<\/em>. If you set the target to <code>_blank<\/code>, your form is submitted into a new tab or window.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>list<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>datalist ID<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Links an input element with a datalist (discussed in next chapter). Such an input element doesn&rsquo;t need a type attribute specified.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies a minimum value for an input field<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies a maximum value for an input field<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>multiple<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>minimized<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Works with <em>email<\/em> and <em>file<\/em> input elements, and if specified, allows multiple to be entered<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pattern<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>regular expression<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies a regular expression that an input field is checked against. Works with <em>text, search, url, tel, email<\/em> and <em>password<\/em>. Regular expressions are not part of HTML and will be discussed in another course.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>placeholder<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Anything<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Works with <em>text, search, url, tel, email<\/em> and <em>password<\/em>. If the field is empty, it displays (in grey) a hint about what the user should enter.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>required<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>minimized<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies a field <strong>must<\/strong> be filled out before the form can be submitted<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>step<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies an interval with which an input field should jump. You could use it, for example, to only let the user enter multiples of three.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>novalidate<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>minimized<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The equivalent of <code>formnovalidate<\/code>, but is an attribute of the whole form.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n","slur":"html5-input-attributes","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Make an element readonly, but still submit it?Use the (minimized) <code>readonly<\/code> attribute@\r\n1?Make an element readonly and un-submittable?Use the (minimized) <code>disabled<\/code> attribute@\r\n1?Pre-select a radio button or checkbox?Use the (minimized) <code>selected<\/code> attribute@\r\n1?Specify a maximum length for an input field?Use the <code>maxlength<\/code> attribute@\r\n1?Pre-define a value for an input field?Use the <code>value<\/code> attribute"},
{"id":"185","title":"[HTML5] Form Elements","post":"<p>Besides the input element, there are a few other very important elements in the world of forms. I will discuss those handful here, and that will wrap up this section of multiple chapters about forms.<\/p> \r\n\r\n<h2>Textareas<\/h2>\r\n\r\n<p>If you want more than a one-line input field, so-called text areas are the way to go. They are created with the <code>&lt;textarea&gt;<\/code> tag. If you want some text already in it, you can simply put that within the element.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;textarea&gt;Text already inside.&lt;\/textarea&gt;\r\n<\/pre>\r\n\r\n<p>Every browser automatically adds the possibility to resize textareas by dragging the lower right corner. They only way to prevent that, is via CSS.<\/p>\r\n\r\n<h2>Drop-Down Lists<\/h2>\r\n\r\n<p>A drop-down list is a list that appears below the input field when you click on it. You can then choose one of the options as your input. The <code>&lt;select&gt;<\/code> element defines a drop-down list, while the <code>&lt;option&gt;<\/code> element defines an option. The text within the option element is what is displayed to the user, but what&#39;s within the <code>value<\/code> attribute is what is submitted.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\nWhat is your favourite fruit?\r\n&lt;select&gt;\r\n&#x9;&lt;option value=&quot;A&quot;&gt;Apples&lt;\/option&gt;\r\n&#x9;&lt;option value=&quot;B&quot;&gt;Bananas&lt;\/option&gt;\r\n&#x9;&lt;option value=&quot;P&quot;&gt;Pears&lt;\/option&gt;\r\n&lt;\/select&gt;\r\n<\/pre>\r\n\r\n<p>By default, when the page loads, the first item is selected. You can use the <em>selected<\/em> attribute, from the previous chapter, to select another by default.<\/p>\r\n\r\n<h2>Buttons<\/h2>\r\n\r\n<p>Just as the input buttons, these do nothing by default. It simply creates a clickable button, and you have to script any function you want it to have. They are created with the <code>&lt;button&gt;<\/code> tag, whatever text is inside the element is displayed on the button.<\/p>\r\n\r\n<h2>Datalist<\/h2>\r\n\r\n<p>Datalists are used to give a list of pre-defined options with an input text field. You can type anything you want into the field, but a list of options will appear underneath for you to quickly click or see what kind of answer is expected from the answer. If you want to restrict the input field to only those pre-defined inputs, you&rsquo;ll be better off with checkboxes or radio buttons. A datalist is created with the <code>&lt;datalist&gt;<\/code> tag, which holds <em>self closing<\/em> <code>&lt;option&gt;<\/code> tags that display all options. This datalist is then linked with an input field using the <code>id<\/code> and <code>list<\/code> attributes:<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;input list=&quot;fruit&quot;&gt;\r\n\r\n&lt;datalist id=&quot;fruit&quot;&gt;\r\n  &lt;option value=&quot;Apples&quot;&gt;\r\n  &lt;option value=&quot;Bananas&quot;&gt;\r\n  &lt;option value=&quot;Pears&quot;&gt;\r\n&lt;\/datalist&gt;\r\n<\/pre>\r\n\r\n<h2>Output<\/h2>\r\n\r\n<p>The <code>&lt;output&gt;<\/code> element represents the result of a calculation. HTML, however, still can&rsquo;t do scripting or programming tasks, so the calculation still has to be performed using another scripting language. Therefore, this element mostly has semantical value: anywhere something is calculated, you use this element to display the result. It takes a <code>for<\/code> attribute that contains the <code>id<\/code>s of the fields that went into the calculation, split by a white space. Unless you&rsquo;ve learnt JavaScript already, I suggest leaving this element alone for now.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;form oninput=&quot;result.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;\r\n  0 &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot;&gt; 100\r\n   + &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot;&gt;\r\n   = &lt;output name=&quot;result&quot; for=&quot;a b&quot;&gt;&lt;\/output&gt;\r\n&lt;\/form&gt;\r\n<\/pre>\r\n","slur":"html5-form-elements","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Create multiline text fields?Use <code>&lt;textarea&gt;<\/code>@\r\n1?Create an item for a dropdown or data list?Use <code>&lt;option&gt;<\/code>@\r\n1?Create dropdown lists?Use <code>&lt;select&gt;<\/code>@\r\n1?Create lists with a predefined set of options?Use <code>&lt;datalist&gt;<\/code>"},
{"id":"186","title":"[HTML5] Iframes","post":"<p>The very last (basic) element we still have to discuss, is the <code>&lt;iframe&gt;<\/code> tag. Iframe is short for <em>interactive frame<\/em>, which simply means that you load another webpage within a frame on your own webpage. Iframes are often viewed as clumsy and nasty elements, but sometimes there&rsquo;s simply no workaround. For example, the Live HTML editor you&rsquo;ve seen throughout this course, uses an Iframe to load your code from.<\/p> \r\n\r\n<h2>Linking<\/h2>\r\n\r\n<p>To tell the iframe what URL to display, you need to specify an <code>src<\/code> attribute. If you leave it out, the iframe is simply left blank. Any text you put within the iframe element is <em>only<\/em> displayed if the user&rsquo;s browser doesn&rsquo;t support iframes.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;iframe src=&quot;http:\/\/google.com&quot;&gt;Sorry, your browser doesn&apos;t support iframes&lt;\/iframe&gt;\r\n<\/pre>\r\n\r\n<h2>Target<\/h2>\r\n\r\n<p>In the chapter on <em>anchor points<\/em> we&rsquo;ve already seen the target attribute and two of its values: <code>_blank<\/code> and <code>_top<\/code>. Now that we know about frames, we can add two three more:<\/p>\r\n\r\n<ul>\r\n\t<li><code>_self<\/code>: opens the link in the same frame<\/li>\r\n\t<li><code>_parent<\/code>: opens the link in the parent frame. For example, if you have a single iframe on your webpage, the parent frame of that iframe is your webpage itself.<\/li>\r\n\t<li><code>&lt;iframe name&gt;<\/code>: opens the link in the iframe with its name attribute set to the specified value.<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;a href=&quot;http:\/\/google.com&quot; target=&quot;theFrame&quot;&gt;Open it in the frame!&lt;\/a&gt;\r\n&lt;iframe name=&quot;theFrame&quot;&gt;&lt;\/iframe&gt;\r\n<\/pre>\r\n","slur":"html5-iframes","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Open a link in the same frame?Use <code>target=\"_self\"<\/code>@\r\n1?Open a link in its parent frame?Use <code>target=\"_parent\"<\/code>@\r\n1?Specify the URL an iframe should display?Use the <code>src<\/code> attribute"},
{"id":"187","title":"[HTML5] Head","post":"<p>The <code>&lt;head&gt;<\/code> tag has been mentioned earlier, but without any specifics. Here I will give a brief overview of all the elements it can contain.<\/p> \r\n\r\n<h2>The &lt;title&gt; element<\/h2>\r\n\r\n<p>The <code>&lt;title&gt;<\/code> tag defines a title for the document. It has three primary uses:<\/p>\r\n\r\n<ul>\r\n\t<li>It defines a title in the browser tab<\/li>\r\n\t<li>It displays a title for the page in search engine results<\/li>\r\n\t<li>It provides a title for the page when it is bookmarked or added to favourites<\/li>\r\n<\/ul>\r\n\r\n<p>If you leave it out, the title of the page will just be its URL. I strongly recommend always using a meaningful title tag within your page.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;title&gt;Professional Panda&lt;\/title&gt;\r\n<\/pre>\r\n\r\n<h2>The &lt;base&gt; element<\/h2>\r\n\r\n<p>The <code>&lt;base&gt;<\/code> element specifies the base URL and base target for all anchor points on the page. Relative links will start at the base URL, and all links with no target set will follow this base target. The base element has <strong>no end tag<\/strong>.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;base href=&quot;http:\/\/somesite.com\/somepath\/&quot; target=&quot;_blank&quot;&gt;\r\n<\/pre>\r\n\r\n<h2>The &lt;meta&gt; element<\/h2>\r\n\r\n<p>The <code>&lt;meta \/&gt;<\/code> element provides metadata about the document. That metadata is never displayed, and can come in many different forms.<\/p>\r\n\r\n<p>The type of metadata it contains can be defined using several different attributes. A <code>content<\/code> attribute is used to specify the value of that metadata.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><attr>name<\/attr>=&rdquo;keywords&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Keywords for search engines<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><attr>name<\/attr>=&rdquo;description&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A description of your page, sometimes used by search engines.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><attr>charset<\/attr>=&rdquo;UTF-8&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines what character set is used on the page. Doesn&rsquo;t need a content attribute, because the charset is already given this way. More on character sets in the next chapter.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><attr>name<\/attr>=&rdquo;author&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Gives an author for the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><attr>http-equiv<\/attr>=&rdquo;refresh&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Refreshes the page. The content attribute specifies how many seconds are between each refresh<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;meta name=&quot;author&quot; content=&quot;Tom Cruise&quot;&gt;\r\n<\/pre>\r\n\r\n<h2>Loading\/Linking External Files<\/h2>\r\n\r\n<p>The <code>&lt;script&gt;<\/code> tag loads an external script file into the page (e.g., JavaScript).<\/p>\r\n\r\n<p>The <code>&lt;link&gt;<\/code> tag links a different type of external file (e.g., CSS).<\/p>\r\n\r\n<p>The <code>&lt;style&gt;<\/code> tag is used to write CSS within the HTML page itself. I don&rsquo;t recommend using this, keep markup and layout separate!<\/p>\r\n\r\n<p>Each of these tags will be elaborated on further in their corresponding courses.<\/p>\r\n","slur":"html5-head","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Give your webpage a name?Use <code>&lt;title&gt;<\/code>@\r\n1?Specify a standard URL for all links?Use <code>&lt;base&gt;<\/code>@\r\n1?Provide data about the webpage?Use <code>&lt;meta \/&gt;<\/code> tag with different attributes@\r\n1?Load script files into the page?Use <code>&lt;script&gt;<\/code>@\r\n1?Load files into the page to change its design?Use <code>&lt;style&gt;<\/code>"},
{"id":"188","title":"[HTML5] Charsets, Symbols & Entities","post":"<p>In the chapter on the <em>head<\/em> tag, we briefly discussed setting a <strong>charset<\/strong> for the document. Charset is an abbreviation for <em>character set<\/em>, which is simply the set of all possible characters. It&rsquo;s an enormous list of codes that represent lowercase letters, uppercase letters, punctuation symbols, accents, etcetera.<\/p> \r\n\r\n<p>UTF-8 is the default charset for HTML. It contains <em>a lot<\/em> of characters, more than you&rsquo;ll ever need, but it also contains the vital ones that you&rsquo;ll run into very often. There&rsquo;s two reasons why you could need to use a symbol or entity from a charset: there&rsquo;s no way to simply type the symbol with your keyboard, or the symbol is used in HTML.<\/p>\r\n\r\n<p>The first reasons depends a bit on your computer setup of course, but the second one is a recurring problem among HTML beginners. For example, say you want to use a <em>smaller than<\/em> ( &lt; ) symbol. If you&rsquo;d just type it, HTML would think you were starting a tag and do crazy things. There&rsquo;s no other way to solve this problem than by using entities.<\/p>\r\n\r\n<h2>Forming Symbols and Entities<\/h2>\r\n\r\n<p>There&rsquo;s actually no distinction between symbols and entities &ndash; both work in exactly the same way. The only reason I&rsquo;m calling them separately here is because there is a difference in their function. Entities replace characters used within HTML, while symbols are special characters that may not be present on your keyboard. Entities are necessary, symbols are often fancy.<\/p>\r\n\r\n<p>There are two ways to write them: <strong>&amp;entityname; <\/strong>or <strong>&amp;#hexcode;<\/strong><\/p>\r\n\r\n<p>Of course, it&rsquo;s far easier to remember them or see what an entity means if you only use the way with the <em>entityname<\/em> in it. However, not all of them have names, and a lot of the names are not so straightforward, so it really doesn&rsquo;t matter which way you write them.<\/p>\r\n\r\n<p>Some common ones are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Entity Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Entity Number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>non-breaking space<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;nbsp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#160;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&lt;&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>less than<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;lt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#60;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&gt;&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>greater than<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#62;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&amp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>ampersand<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;amp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#38;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&euro;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>euro<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;euro;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#8364;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&copy;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>copyright<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;copy;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#169;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&reg;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>registered trademark<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;reg;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;#174;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>NOTE: The non-breaking space has been mentioned at the start of this course &ndash; you&rsquo;ve already seen a (very important) entity without knowing it! If you have forgotten, check the <em>Tags &amp; Elements<\/em> chapter again<\/p>\r\n\r\n<h2>Diacritical Marks<\/h2>\r\n\r\n<p>A diacritical mark is a &ldquo;glyph&rdquo; added to a letter, which we often call an accent. You can use such an entity with the vowel it belongs to right before it, to connect them:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Mark<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>HTML Construction<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&#768;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>a&amp;#768;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&agrave;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&#769;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>a&amp;#769;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&aacute;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&#770;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>a&amp;#770;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&acirc;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&#771;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>a&amp;#771;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&atilde;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>List of all HTML5 entities<\/h2>\r\n\r\n<p>Just for you, I have compiled a list of <em>all<\/em> entities available in UTF-8, the HTML5 standard. Use it as a reference or &ldquo;html5 google&rdquo; if you need a certain entity or symbol when creating a webpage.<\/p>\r\n\r\n<p>NOTE: Not all fonts have all entities, you can only be sure of that if you buy professional fonts.<\/p>\r\n\r\n<p>NOTE 2: Not all browsers support all entities, but their support &ndash; at this moment &ndash; is big enough that I suspect you won&rsquo;t run into any problems.<\/p>\r\n\r\n<p><strong><em>LINK TO ENTITY &ldquo;COURSE&rdquo;<\/em><\/strong><\/p>\r\n","slur":"html5-charset-symbols-entities","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":""},
{"id":"189","title":"[HTML5] Audio & Video","post":"<p>We&rsquo;ve seen text, pictures, and all sorts of interactive elements. What we haven&rsquo;t yet seen, is anything related to audio or video. You might think that this is more difficult than everything we&rsquo;ve discussed so far, but in HTML5 this has actually become really easy.<\/p> \r\n\r\n<h2>The &lt;audio&gt; tag<\/h2>\r\n\r\n<p>An audio block is defined by the <code>&lt;audio&gt;<\/code> tag. Within the audio element you have to supply the source, which is done with the <code>&lt;source&gt;<\/code> tag. The source tag, ironically, takes the <code><attr>src<\/attr><\/code> attribute and another <code><attr>type<\/attr><\/code> attribute that specifies the type of file in the source.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;audio&gt;\r\n  &lt;source src=&quot;somefile.ogg&quot; type=&quot;audio\/ogg&quot;&gt;\r\n  &lt;source src=&quot;somefile.mp3&quot; type=&quot;audio\/mpeg&quot;&gt;\r\nSorry, your browser does not support the audio element.\r\n&lt;\/audio&gt;\r\n<\/pre>\r\n\r\n<p>Any text placed within the &lt;audio&gt; tag is displayed if the user&rsquo;s browser can&rsquo;t play the audio.<\/p>\r\n\r\n<p>Only three audio formats are supported:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>.mp3<\/strong>, audio\/mpeg<\/li>\r\n\t<li><strong>.wav<\/strong>, audio\/wav<\/li>\r\n\t<li><strong>.ogg<\/strong>, audio\/ogg<\/li>\r\n<\/ul>\r\n\r\n<h2>The &lt;video&gt; tag<\/h2>\r\n\r\n<p>The <code>&lt;video&gt;<\/code> tag works exactly the same way, but for video.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;video&gt;\r\n  &lt;source src=&quot;somefile.ogg&quot; type=&quot;audio\/ogg&quot;&gt;\r\n  &lt;source src=&quot;somefile.mp4&quot; type=&quot;audio\/mp4&quot;&gt;\r\nSorry, your browser does not support the video element.\r\n&lt;\/video&gt;\r\n<\/pre>\r\n\r\n<p>Only three video formats are supported:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>.mp4<\/strong>, video\/mp4<\/li>\r\n\t<li><strong>.webm<\/strong>, video\/webm<\/li>\r\n\t<li><strong>.ogg<\/strong>, video\/ogg<\/li>\r\n<\/ul>\r\n\r\n<h2>Awesome Attributes<\/h2>\r\n\r\n<p>The browser will take care of the rest. But, there are two (minimized) attributes you can set (within the opening <code>&lt;audio&gt;<\/code> or <code>&lt;video&gt;<\/code> tag):<\/p>\r\n\r\n<ul>\r\n\t<li><code>autoplay<\/code>, if you want to automatically play the audio\/video<\/li>\r\n\t<li><code>controls<\/code>, if you want to display controls with the audio\/video. How these look and work depend on the browser.<\/li>\r\n<\/ul>\r\n\r\n<p>If you want more functionality, you&rsquo;ll have to script it yourself &ndash; HTML is not meant for that.<\/p>\r\n\r\n<h2>The &lt;object&gt; tag<\/h2>\r\n\r\n<p>If you need any other type of media on your page, you&rsquo;ll have to resort to the <code>&lt;object&gt;<\/code> tag. This tag only signals the browser that a special object is on the page. To actually make such an object element work, the browser would have to natively support that specific media type or the user has to install a plugin. The object it represents is provided with the <code>data<\/code> attribute. You <em>can<\/em> specify the type with the <code>type<\/code> attribute.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&lt;object data=&quot;someCoolGame.swf&quot;&gt;&lt;\/object&gt;\r\n<\/pre>\r\n\r\n<p>NOTE: HTML5 introduced the <code>&lt;embed&gt;<\/code> tag which works exactly the same way. At the moment, I haven&rsquo;t (yet) discovered why you should use one over the other. Do whatever you like.<\/p>\r\n","slur":"html5-audio-video","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":"1?Provide a source file for audio or video?Use <code>&lt;source&gt;<\/code>@\r\n1?Provide a URL where a source file is located?Use the <code>src<\/code> attribute@\r\n1?Specify the file type of an audio or video source?Use the <code>type<\/code> attribute@\r\n1?Play the audio or video once its loaded?Use the (minimized) <code>autoplay<\/code> attribute"},
{"id":"190","title":"[HTML5] HTML5 Elements","post":"<p>Because this whole course has been HTML5, we&rsquo;ve already seen the majority of extra features and elements. The only thing, in the whole HTML world, that&rsquo;s left to learn are the new <strong>semantic<\/strong> (or structural) <strong>elements<\/strong> in HTML5. These elements do nothing else than create structure in your document &ndash; they should replace <code>&lt;span&gt;<\/code> or <code>&lt;div&gt;<\/code> tags whenever possible.<\/p> \r\n\r\n<p>I suggest you read through this list, and then look back whenever you start a new project to see if you can create a good (semantic) structure with these tags. Most of them have no default layout attached to them, which means structuring your document well from the beginning only has advantages!<\/p>\r\n\r\n<h2>The List<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Element<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;article&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines an article. For example: a blog post, a news article, a report.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;aside&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines content aside from the (main) page content. For example: sidebars<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;bdi&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Does the same as &lt;bdo&gt;: defines an area where the text might be formatted in a different direction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;details&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines additional details that the user can decide to view or hide<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;dialog&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a dialog box or window<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;figure&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines self-contained content. For example: illustrations, diagrams, photos.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;figcaption&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a caption for a &lt;figure&gt; element.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;footer&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a footer for the document or section<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;header&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a header for the document or section<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;main&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines the main content of the document. Often the same as the article tag, unless there are multiple articles on one page.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;menuitem&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a command or menu item that the user can invoke (from a popup menu)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;meter&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a scalar measurement within a known range (a gauge)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;nav&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a navigation section (with links)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;progress&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines the progress of a task (not necessarily a progress bar)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;ruby&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a ruby annotation (for East Asian typography)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;rt&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines an explanation\/pronunciation of characters in a ruby annotation<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;rp&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines what to show in browsers that do not support ruby annotation<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;section&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a section in the document, like paragraphs under a sub header in an article.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;summary&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a visible heading for a &lt;details&gt; element.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;time&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a date or time<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;wbr&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines a <em>possible<\/em> line-break. If you don&rsquo;t want browsers breaking your text at the wrong places (or not at all), you can define them.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n","slur":"html5-new-elements","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":""},
{"id":"191","title":"[HTML5] Conclusion: what now?","post":"<p>That&rsquo;s it. You&rsquo;ve seen everything that&rsquo;s in the HTML universe, but there&rsquo;s still a lot you haven&rsquo;t learnt. How to design a webpage, for example. Or how to create a fancy intro animation or layout that changes if the user resizes the browser window. Or how to read data from a server to display as a blog post.<\/p> \r\n\r\n<p>These are all controlled by other languages. This may sound as if you have to learn a dozen different syntaxes, but luckily all those languages are among the easiest and tie in with each other. They all have HTML at their core, and all their functionality is based on styling or manipulating it.<\/p>\r\n\r\n<p>If you haven&rsquo;t already, I suggest you play with this awesome mark up language a bit. Maybe try to build a few webpages for one or two days, or just read the whole course again to see if you understand everything. But, after you&rsquo;ve done that, you should forget about reading up on HTML and start learning the other languages. HTML is simple and small, the languages that make it beautiful and great are more complex and require more of your time. And in the end &ndash; if there&rsquo;s something you don&rsquo;t know or understand, you can simply <em>look it up on the internet<\/em>. (funny, how people read webpages to learn how to create webpages.)<\/p>\r\n\r\n<ul>\r\n\t<li><strong>CSS:<\/strong> Cascading Style Sheets. Used for visual design and usability (how a website works, functions and feels).<\/li>\r\n\t<li><strong>JavaScript:<\/strong> Scripting language. Used for adding any dynamic behaviour to the website &ndash; moving pieces, animations, drag and drop, etcetera.<\/li>\r\n\t<li><strong>PHP:<\/strong> Hypertext Preprocessor. What this strictly means, is that it can perform functions to change the HTML before the HTML is finalized and parsed by the browser. In practice, this means that that PHP can load data from a <strong>server<\/strong> and inject it into a webpage before it loads (like blog posts). Once a page has loaded, PHP has no use anymore.<\/li>\r\n<\/ul>\r\n\r\n<p>The order I put these in is not entirely random. In fact, I strongly recommend learning them in this particular order. If you know CSS, you can already create a lot of stunning websites. If you don&rsquo;t know CSS, learning JavaScript and PHP is quite useless if you are seriously considering creating a web project, and even difficult without that prior knowledge.<\/p>\r\n\r\n<p>I hope to have inspired you. See you at the CSS course!<\/p>\r\n","slur":"html5-conclusion","cat":"Website","subcat":"HTML5","video":"","diff":"3","quiz":""},
{"id":"192","title":"The CSS3 Guide","post":"<p>CSS is the programming language for layout and design, and it stands for Cascading Style Sheets. <strong>Style sheets<\/strong> refer to the CSS files that tell a browser how to <em>style<\/em> certain elements, while <strong>cascading<\/strong> simply means that the browser chooses which rules to apply depending on their syntax and placement. (Don&rsquo;t worry, the concept of cascading is explained in detail in the <em>Priorities &amp; Inheritance<\/em> chapter.)<\/p> \r\n\r\n<p>You&rsquo;ve probably just learned HTML, and are eager to know how you can make all those tags look good. Well, this is the guide for you! You can do virtually anything with CSS, and most of the functionality is supported in all major (&lsquo;modern&rsquo;) browsers. In fact, you&rsquo;ll spend much more time playing with CSS than HTML when building a website.<\/p>\r\n\r\n<p>You want some nice colours? CSS! You want animations when hovering over something? CSS! You want different fonts and typography? You get the idea. CSS is simple, clear, capable &ndash; there&rsquo;s really no reason <em>not<\/em> to learn it.<\/p>\r\n\r\n<p>CSS3 is the latest version of this amazing language, and probably the last one. <em>Why?!<\/em> Because since this version, all functionality is created as <em>modules<\/em>. These modules can be adopted by browsers one at a time, and all fit nicely together, which means the language keeps growing and growing. Therefore, even though this is the third version of CSS, you should just look at it as being <em>the<\/em> only CSS there is. This guide will try to talk you through <em>everything<\/em> that is CSS. But, as that is a bit much, the focus lies on the basics and the most commonly used functionality. There&rsquo;s only one fundamental syntax, which means that most of the chapters just show you different ways to fill it in, instead of introducing completely different concepts. Have fun!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Linking CSS &amp; HTML<\/li>\r\n\t<li>Syntax<\/li>\r\n\t<li>Selectors<\/li>\r\n\t<li>Priorities &amp; Inheritance<\/li>\r\n\t<li>Colours &amp; Units<\/li>\r\n\t<li>The Box Model<\/li>\r\n\t<li>Margin, Padding &amp; Dimensions<\/li>\r\n\t<li>Border<\/li>\r\n\t<li>Display<\/li>\r\n\t<li>Positioning<\/li>\r\n\t<li>Alignment<\/li>\r\n\t<li>Text<\/li>\r\n\t<li>Fonts<\/li>\r\n\t<li>Backgrounds &amp; Images<\/li>\r\n\t<li>Lists, Tables &amp; Links<\/li>\r\n\t<li>Pseudo-classes<\/li>\r\n\t<li>Pseudo-elements<\/li>\r\n\t<li>Shadows<\/li>\r\n\t<li>Gradients<\/li>\r\n\t<li>Transforms<\/li>\r\n\t<li>Transitions &amp; Animations<\/li>\r\n\t<li>Responsive Design<\/li>\r\n\t<li>Flexbox<\/li>\r\n\t<li>Multicolumn<\/li>\r\n\t<li>Counters &amp; Filters<\/li>\r\n\t<li>Media Queries<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"the-css3-guide","cat":"Website","subcat":"CSS3","video":"","diff":"1","quiz":""},
{"id":"193","title":"[CSS3] Linking CSS & HTML","post":"<p>Without HTML elements, CSS can&rsquo;t do anything. Therefore, the first step is to link an HTML document with a set of CSS rules. Three ways for doing this are available to us: <strong>inline styles, style element<\/strong> and an external <strong>style sheet<\/strong>. I highly recommend the last one, but the first two also have their uses (and are quite common), so I will discuss all three options.<\/p> \r\n\r\n<h2>Inline Styles<\/h2>\r\n\r\n<p>Inline styles are embedded within the HTML document itself. Every HTML element can take the <code>style<\/code> <strong>attribute<\/strong>, which takes CSS code as value.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;!-- Makes this element&#x27;s text colour red --&#x3E;\r\n&#x3C;p style=&#x22;color:red&#x22;&#x3E;Some styled text!&#x3C;\/p&#x3E;\r\n<\/pre>\r\n\r\n<p>Therefore, anything you write there applies to this specific element only, and can&rsquo;t be easily copied or changed. Because of these major downsides, I recommend against this technique. It is, however, cleaner and faster in cases where you want to style a very specific element in an unique way (for example, a single letter in an article that you want a certain colour that you don&rsquo;t use anywhere else).<\/p>\r\n\r\n<h2>Style Element<\/h2>\r\n\r\n<p>The <code>&lt;style&gt;<\/code> tag can be put in the head section of an HTML document, and all its content will be parsed as CSS code. Basically, this allows you to use all the functionality that CSS provides in the same way as external style sheets would. But, it&rsquo;s still embedded within the HTML, which means that you&rsquo;d have to copy the code between documents if you want them to have the same style.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;style type=&#x22;text\/css&#x22;&#x3E;\r\n\/* CSS Code Here *\/\r\n&#x3C;\/style&#x3E;\r\n<\/pre>\r\n\r\n<p>Only use this when you really have no other choice, or it&rsquo;s a very small project with only one file.<\/p>\r\n\r\n<h2>Style Sheet<\/h2>\r\n\r\n<p>The last option is to put all the CSS code in an external file, which carries the extension <code>.css<\/code>. Then, use the <code>&lt;link&gt;<\/code> tag to link it to an HTML file. This link tag is also put in the head section, as style sheets are not part of the content but <em>describe<\/em> the page.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;link rel=&#x22;stylesheet&#x22; type=&#x22;text\/css&#x22; href=&#x22;linktostylesheet.css&#x22;&#x3E;\r\n<\/pre>\r\n\r\n<p>The <code>rel<\/code> attribute defines what relation the linked file has with the HTML file. It is always necessary, because other file types could also be linked, and HTML wants to know.<\/p>\r\n\r\n<p>Style sheets can be easily shared among multiple HTML files, can apply the same style to all sorts of groups of elements, and are usually <em>cached<\/em> by browsers (which means they are saved and don&rsquo;t need to be reloaded every time a user visits a webpage). As you can see, external style sheets are the way to go!<\/p>\r\n\r\n<h2>Final Note<\/h2>\r\n\r\n<p>In this course, all code examples can be viewed in the live html editor by hovering over them and clicking the button that appears. As this is a pure CSS tutorial, however, we focus on that, and you&rsquo;ll have to write some HTML tags yourself to test out the code. See it as an educational exercise!<\/p>\r\n","slur":"css3-linking-html","cat":"Website","subcat":"CSS3","video":"","diff":"1","quiz":"1?Add styles to one particular element?Use the <code>style<\/code> attribute@\r\n1?Add an external CSS file to an HTML page?Use the <code>&lt;link&gt;<\/code> tag@\r\n1?Embed CSS rules into an HTML page?Use the <code>&lt;style&gt;<\/code> tag"},
{"id":"194","title":"[CSS3] Syntax","post":"<p>Every bit of CSS starts with a <strong>selector<\/strong>, which is then followed by one or multiple <strong>declarations<\/strong>.<\/p>\r\n\r\n<p>The role of the selector is to select a certain group of elements (for example, all <code>&lt;p&gt;<\/code> tags), while the declarations <em>declare<\/em> what style is assigned to those elements. Opening and closing braces are used to show when a certain group of declarations starts and ends.<\/p> \r\n\r\n<p><img src=\"media\/CSS3SelectorsDeclarations.png\" \/><\/p>\r\n\r\n<p>Selectors can be built from many small items with a certain functionality, which will all be discussed in the next chapter.<\/p>\r\n\r\n<h2>Declarations<\/h2>\r\n\r\n<p>Every declaration consists of two elements: <strong>property<\/strong> and <strong>value<\/strong>. The property and value are connected with a colon, and a semicolon is placed at the end to signal the end of the declaration.<\/p>\r\n\r\n<p>The property determines <em>what<\/em> exactly of the element is being styled. For example, <em>font-size <\/em>alters the size of all text within the element.<\/p>\r\n\r\n<p>The value determines <em>how<\/em> the property is being styled\/altered. For example, you could set the font-size to <em>16px<\/em> (16 pixels).<\/p>\r\n\r\n<img src=\"media\/CSS3PropertiesValues.png\" \/>\r\n\r\n<h2>A Note on Inline Styles<\/h2>\r\n\r\n<p>Because inline styles only work on the element they are set on, they don&rsquo;t require selectors. You only need to provide the declarations.<\/p>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>Just as with HTML, or any computer language really, CSS offers you the possibility to add comments within your code. These comments have no influence at all on the page - they are simply there to remind yourself about what certain parts do, or certain bugs you still need to fix.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n\/* This is a comment\r\nIt can span multiple lines *\/\r\n<\/pre>\r\n\r\n<h2>That&rsquo;s It!<\/h2>\r\n\r\n<p>This is all the syntax there is. The rest of this course, with the exception of the next chapter, is about all the different existing properties and the values they can take. All declarations can be applied to all elements, but some are specific to certain elements and don&rsquo;t affect others. Nevertheless, CSS will never throw errors if you do something wrong &ndash; it will just do the best it can with what you give it. Most of the times CSS provides an elegant solution to a problem, but sometimes you&rsquo;ll need to exploit some of the oddities or of the language &ndash; we like to call those things <em>CSS hacks<\/em>. Therefore, there are usually multiple ways to do something, and sometimes they require extra HTML elements and\/or some advanced CSS magic. Don&rsquo;t be afraid to experiment!<\/p>\r\n","slur":"css3-syntax","cat":"Website","subcat":"CSS3","video":"","diff":"1","quiz":"0?Selector?A syntax that selects certain elements onto which to apply styling rules@\r\n0?Declaration?A single CSS styling rule, of the form <code>property:value;<\/code>@\r\n0?Property?A certain aspect of an element that can be styled with CSS@\r\n0?Comment?A note you can leave for yourself within CSS files to explain what you did and why"},
{"id":"195","title":"[CSS3] Selectors","post":"<p>There&rsquo;s a handful of different selectors available, that allow you to select any element(s) you wish &ndash; however specific or general. You can combine these in any way you like, and in any number. You could write a rule that selects all <code>p<\/code> (paragraph tags) that are direct children of <code>div<\/code>, or select every <code>input<\/code> with <code><attr>type<\/attr>=&rdquo;text&rdquo;<\/code>, or even select a specific <code>span<\/code> tag ten levels deep in some HTML structure. The possibilities are endless!<\/p> \r\n\r\n<h2>Universal Selector<\/h2>\r\n\r\n<p>Let&rsquo;s start off simple. The asterisk ( <code>*<\/code> ) selects <em>every element<\/em>. This is useful, for example, if you want to set a base font family for the entire page.<\/p>\r\n\r\n<h2>Element Selector<\/h2>\r\n\r\n<p>To select all tags of a certain kind, you simply use the tag name without the <code>&lt;<\/code> and <code>&gt;<\/code> around it.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example: <code>&lt;p&gt;<\/code> becomes <code>p<\/code>, <code>&lt;h1&gt;<\/code> becomes <code>h1<\/code>\r\n\r\n<pre data-lang=\"css\">\r\n\/* Selects all paragraph elements *\/\r\np {\r\n\tcolor:red;\r\n}\r\n\r\n\/* Selects all input elements *\/\r\ninput {\r\n\tfont-size:24px;\r\n}\r\n<\/pre>\r\n\r\n<h2>ID and Class Selector<\/h2>\r\n\r\n<p>In the HTML tutorial, we&rsquo;ve already seen the <strong>id<\/strong> and <strong>class<\/strong> attributes that are available to every element.<\/p>\r\n\r\n<p>The idea is that every <em>id<\/em> is <strong>unique<\/strong>. Only one element can have a certain id.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To select the element with a certain id, use <code>#theIDName<\/code><\/p>\r\n\r\n<p>If you want multiple elements to have the same styling rules applied, you use <em>class<\/em>. You can give as many elements as you want the same class name.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To select all elements in a certain class, use <code>.theClassName<\/code><\/p>\r\n\r\n<pre data-lang=\"css\">\r\n\/* Selects the element with ID panda *\/\r\n#panda {\r\n\tcolor:red;\r\n}\r\n\r\n\/* Selects all elements with class panda *\/\r\n.panda {\r\n\tfont-size:24px;\r\n}\r\n<\/pre>\r\n\r\n<h2>Attribute Selector<\/h2>\r\n\r\n<p>The last option is to select elements based on their attributes. Such a selector is enclosed within brackets, and can do two things:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Select everything that has a certain <em>attribute<\/em>: <code>[attribute]<\/code><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Select everything that has a certain attribute set to a certain <em>value<\/em>: <code>[<attr>attribute<\/attr>=value]<\/code><\/p>\r\n\r\n<pre data-lang=\"css\">\r\n\/* Selects all elements with the src attribute set *\/\r\n[src] {\r\n\tcolor:red;\r\n}\r\n\r\n\/* Selects all elements with the src attribute set, with a value of panda.jpg *\/\r\n[src=\"panda.jpg\"] {\r\n\tfont-size:24px;\r\n}\r\n<\/pre>\r\n\r\n<h2>Element-Specific Selectors<\/h2>\r\n\r\n<p>The last two categories can be combined with element selectors. To select a specific element with a certain ID, Class or Attribute, you simply put all the components right after each other. For example:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>a.coolLink<\/code> selects all anchor tags with a class <em>coolLink<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>input[type=&rdquo;password&rdquo;]<\/code> selects all password input tags.<\/p>\r\n\r\n<p>You are also allowed to use as many ID, Class and Attribute selectors after each other in this manner. The possibilities are endless! But, more than two of these after each other is very uncommon, because it&rsquo;s often just more complex than necessary.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n\/*Selects the anchor element with ID coolLink, all span elements with class panda, and all text input fields *\/\r\na#coolLink, span.panda, input[type=\"text\"] {\r\n\tcolor:red;\r\n}\r\n<\/pre>\r\n<h2>Connecting the Dots<\/h2>\r\n\r\n<p>Putting them directly next to each other doesn&rsquo;t work for everything, and most components need to be connected in another way. They can be separated by white space or a few predetermined special characters, and what you put between them largely determines how the selector functions. I&rsquo;ve put together a nice table for you.\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Selector<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem1<\/em>, <em>elem2<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Starts a new selector (makes elem1 and elem2 two different selectors)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem1 elem2<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elem2 that are children of elem1, even if there are other tags between them<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem1<\/em> &gt; <em>elem2<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elem2 that are <em>direct children<\/em> of elem1 (no other layers\/tags between them)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem1<\/em> + <em>elem2<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects the first elem2 that is a sibling of elem1.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem1<\/em> ~ <em>elem2<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects <em>all<\/em> elem2 that are siblings of elem1<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>attr<\/em> ~= <em>val<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elements that have attr set, with a value <em>containing<\/em> val<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>attr<\/em> |= <em>value<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elements that have attr set, with a value <em>starting with<\/em> val<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>attr<\/em> ^= <em>value<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elements with attr set to a value <em>starting with <\/em>val<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>attr<\/em> $= <em>value<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elements with attr set to a value <em>ending in<\/em> val<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>attr<\/em> *= <em>value<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all elements with attr set to a value <em>containing<\/em> val<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n\r\n<p>As you can see, the attribute selectors have some overlapping functionality. The difference is, that some attributes have a value that has white space or dashes in it. For example, you could set <code><attr>class<\/attr>=&rdquo;class1 class2 class3&rdquo;<\/code> on a certain element. The <strong>~=<\/strong> and <strong>|=<\/strong> work for those cases, while the other two do not.<\/p>\r\n","slur":"css3-selectors","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Select every element?Use <code>*<\/code>@\r\n1?Select all elements with class &ldquo;panda&rdquo;?Use <code>.panda<\/code>@\r\n1?Select the element with ID &ldquo;panda&rdquo;?Use <code>#panda<\/code>@\r\n1?Select all paragraph elements?Use <code>p<\/code>@\r\n1?Select all anchor points?Use <code>a<\/code>@\r\n1?Select all elements with the &ldquo;src&rdquo; attribute?Use <code>[src]<\/code>@\r\n1?Select all images with paragraph tags as their parent?Use <code>p &gt; img<\/code>@\r\n1?Select all anchor points directly after another anchor point?Use <code>a + a<\/code>@\r\n1?Select all images with their source attribute set?Use <code>img[src]<\/code>"},
{"id":"196","title":"[CSS3] Priorities & Inheritance","post":"<p>When two selectors target the same element(s), we speak of <em>conflicting styles<\/em>. So, with all those different possibilities and style rules, how does CSS decide what styles to use (in the end)?<\/p> \r\n\r\n<p>Well, there&rsquo;s two concepts that play a role here: <strong>inheritance <\/strong>(style rules that are automatically applied) and <strong>specificity <\/strong>(how specific the selector is).<\/p>\r\n\r\n<h2>Inheritance<\/h2>\r\n\r\n<p>All HTML elements come with a standard design &ndash; a CSS declaration for every known property. These are the same among all modern browsers, and most of those properties are set to the expected settings. For example, text alignment is automatically left for all elements. Setting a CSS property to the value <code>initial<\/code> will always reset it to what it automatically was.<\/p>\r\n\r\n<p>On top of that, elements can inherit styles from <em>all<\/em> their parents. Some properties automatically do this, but you can always force it by setting a property to the value <code>inherit<\/code>. For example, if you make all the text inside a certain element red, you can easily extend these styles to all children nodes by using this value. Now, if you were to change the text colour of that element, all children would automatically follow along!<\/p>\r\n\r\n<p>All properties can have those two values, which also means that they can cause unexpected &lsquo;bugs&rsquo;. If something doesn&rsquo;t style the way it should, it&rsquo;s possible that it automatically inherits styles that overrule whatever you wrote.<\/p>\r\n\r\n<h2>Specificity<\/h2>\r\n\r\n<p>CSS selects <strong>the most specific selector<\/strong>, which depends on two things: placement and content.<\/p>\r\n\r\n<h2>Placement<\/h2>\r\n\r\n<p>Placement means that, if two selectors are equally specific, CSS chooses the <strong>last selector<\/strong> it finds, reading the style sheet from top to bottom.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tcolor:red;\r\n}\r\n\r\np {\r\n\tcolor:blue;\r\n}\r\n\/* All paragraphs will have text colour blue *\/\r\n<\/pre>\r\n\r\n<p>Inline styles are read even later by CSS, because they are embedded within the HTML, and <strong>always<\/strong> overrule everything. That&rsquo;s why you need to be careful with inline styles.<\/p>\r\n\r\n<h2>Content<\/h2>\r\n\r\n<p>There&rsquo;s actually a little formula you can calculate specificity with, using all elements within a selector. In this case, a higher score means it is more specific, and is more likely to be chosen by CSS as the final declarations. Each component in a selector is given a specificity score according to this table:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Component<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>In Code<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Score<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>ID Selector<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>#something<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>100<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Class selector<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>.something<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>10<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Anything else<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>something<\/code>, <code>[something=&rdquo;something&rdquo;]<\/code>, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>The formula is: <em>add up the specificity score of all elements.<\/em><\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example: <code>p div span<\/code> has score 3, while <code>#mainStuff span<\/code> has score 101. Therefore, span elements within the element with ID <code>#mainStuff<\/code> will be styled according to what belongs to the second selector.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#mainContent p .firstSentence {\r\n\tfont-family:Helvetica;\r\n}\r\n\r\n#mainContent p {\r\n\tfont-family:Arial;\r\n}\r\n\r\n\/* Paragraphs within the element with ID mainContent will have Arial as font, \r\nexcept for elements within paragraphs with class firstSentence *\/\r\n<\/pre>\r\n\r\n<h2>The important keyword<\/h2>\r\n\r\n<p>There&rsquo;s one exception. You can boost the importance of a declaration by adding the magic words <code>!important<\/code> before the closing semicolon. This will tell CSS to ignore all those rules about specifics and inheritance, and just use this attribute.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tcolor:blue !important;\r\n}\r\n\r\n#mainContent p {\r\n\tcolor:red;\r\n}\r\n\/* Paragraphs will have a blue text colour *\/\r\n<\/pre>\r\n\r\n<p>I am, however, against using this. A good CSS structure should prevent using this, and has better performance, readability and scalability. If you find yourself adding this keyword to something, there&rsquo;s no turning back &ndash; your style sheet will keep growing on important keywords, until it&rsquo;s all a big mess. If you find yourself eager to use it, try to think of a better way to structure your code to prevent it.<\/p>\r\n","slur":"css3-priorities-inheritance-important","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"0?Placement?In case of conflicting styles, CSS uses the one that is declared last@\r\n0?Specificity?In case of conflicting styles, CSS makes a decision which to apply based on placement and selector content@\r\n0?Inheritance?Elements automatically inherit some property values from their parents or default browser settings@\r\n1?Set a property to its first value?Use the value <code>initial<\/code>@\r\n1?Set a property to get its value from its parent?Use the value <code>inherit<\/code>@\r\n1?Make declaration overrule all the others?Use the keyword <code>!important<\/code> right after the property value"},
{"id":"197","title":"[CSS3] Colours & Units","post":"<p>The majority of CSS properties take <strong>numbers<\/strong> or <strong>colours<\/strong> as values. A number by itself doesn&rsquo;t mean anything, which is why every number needs some <strong>unit<\/strong> after it. On the other hand, we can&rsquo;t describe a colour to a computer, which is why we need ways to input them. This chapter is about just that, and is the last one before we can finally begin discussing all the wonderful ways you can style things using CSS!<\/p> \r\n\r\n<h2>Units<\/h2>\r\n\r\n<p>CSS has a bunch of predefined units you can use for your numbers. Those can be categorised as <strong>absolute units<\/strong> and <strong>relative units<\/strong>. These units are added directly behind the number &ndash; there&rsquo;s no white space between them (e.g., 100 pixels is denoted as <code>100px<\/code>).<\/p>\r\n\r\n<p>NOTE: When a property has value 0, you don&rsquo;t need to supply a unit. Zero is always zero.<\/p>\r\n\r\n<p>NOTE 2: As you will see later on, some properties take multiple arguments, and therefore multiple numbers. You can use different units for the different numbers if you want.<\/p>\r\n\r\n<h2>Absolute Units<\/h2>\r\n\r\n<p>This type of unit has a fixed length, and doesn&rsquo;t depend on the size or settings of the parent element or browser window an element is displayed in.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Unit<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Notes<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cm<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Centimetres<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mm<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Millimetres<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>10 mm = 1 cm<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>in<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inches<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1 in = 2.54 cm = 96 px<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>px<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Pixels<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Standard font-size is 16px<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pt<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Points<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1 pt = (1\/72) of an inch<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Picas<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1 pc = 12 pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: Viewing devices come in lots of different resolutions these days, which means a pixel doesn&rsquo;t always mean or look the same. Fortunately, however, most high resolution screens make up for it by treating one CSS pixel as multiple pixels on their device. You shouldn&rsquo;t run into many problems, but it has become more common these days to use relative units for everything.<\/p>\r\n\r\n<h2>Relative Units<\/h2>\r\n\r\n<p>This type of unit scales with the size of other elements or the browser window. Because devices can have a lot of different screen sizes, it&rsquo;s recommended to make as much as possible of your design <strong>responsive<\/strong>. This simply means that the layout easily adapts to changes in viewport size ( = dimensions of the browser window viewing the page).<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Unit<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>em<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to the font-size of the element<\/p>\r\n\r\n\t\t\t<p>(for example: 2em means two times the size of the current font)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Percentage of initial setting<\/p>\r\n\r\n\t\t\t<p>(for example: setting 100% width on a table means it spans across the full width of its parent element)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vw<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to 1% of the viewport width<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vh<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to 1% of the viewport height<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vmin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to 1% of the smaller dimension of the viewport<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vmax<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to 1% of the bigger dimension of the viewport<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>rem<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to the font-size of the root element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ch<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to the width of the &ldquo;0&rdquo; (zero) of the current font<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ex<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Relative to the x-height of the font (rarely used; only interesting to typographers)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Colours<\/h2>\r\n\r\n<p>CSS has around 175 colour names automatically supported, such as <em>red<\/em>, <em>orange<\/em> and <em>pink<\/em>. With a colour spectrum of over 16 million colours, however, that is a bit limiting. Therefore, other methods are used within CSS.<\/p>\r\n\r\n<h5>RGB<\/h5>\r\n\r\n<p><strong>RGB<\/strong> uses three channels as input: <strong>red<\/strong>, <strong>green<\/strong> and <strong>blue<\/strong>. Each of these can take a value between 0 and 255; 0 means the colour isn&rsquo;t present at all, and 255 means the colour is fully represented.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example: <code>rgb(255,0,0)<\/code>is pure red, <code>rgb(0,0,255)<\/code> pure blue, <code>rgb(122,122,122)<\/code> is grey.<\/p>\r\n\r\n<p><strong>RGBA<\/strong> works the same way, but takes an extra <strong>alpha<\/strong> parameter that specifies the opacity of the colour. It doesn&rsquo;t actually change the colour, but determines to what extent underlying colours in the design influence it. An alpha of 0 means the colour is fully transparent (not visible), and an alpha of 1 means you can&rsquo;t see through it.<\/p>\r\n\r\n<h5>HEX<\/h5>\r\n\r\n<p><strong>HEX<\/strong> a different, shorter way of writing RGB colours. It uses a base-16 system. This simply means that we use the numbers 0 &ndash; 9, and then say A = 10, B = 11, C = 12, D = 13, E = 14 and F = 15. This way, we can represent those numbers (between 0 and 255) with only two digits: 00 up to and including FF.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example: <code>#FF0000<\/code> is pure red, <code>#0000FF<\/code> is pure blue, <code>#7A7A7A<\/code> is grey<\/p>\r\n\r\n<p><strong>HEX shortcut<\/strong> is an even shorter way to display colours. If a colour has repeating digits, we can write a hex code with only one digit per channel.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example:<code> #F00<\/code> is pure red, <code>#00F<\/code> is pure blue, <code>#FFF<\/code> is the whitest white.<\/p>\r\n\r\n<h5>HSL<\/h5>\r\n\r\n<p><strong>HSL<\/strong> is an entirely different way of representing colours. It uses <strong>hue<\/strong>, <strong>saturation<\/strong> and <strong>luminosity<\/strong> as arguments. These translate to <em>colour, pureness <\/em>and <em>brightness<\/em>. Hue gets a value between 0 and 360 degrees, saturation and luminosity from 0 to 100%.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">For example: <code>hsl(0,100,50)<\/code> is full red, <code>hsl(240,100,50)<\/code> pure blue, <code>hsl(0,0,50)<\/code> is grey.<\/p>\r\n\r\n<p><strong>HSLA<\/strong> works the same way, but takes an extra alpha parameter (just as RGBA).<\/p>\r\n\r\n<p>This might be much to take in now, but I assure you that you&rsquo;ll get the hang of it quickly once you start playing around with it. I prefer working with HSL, but it takes some getting used to, and if I know what colour I want it&rsquo;s usually quicker to write them with <em>hex<\/em> or <em>rgb<\/em>. Colours with an alpha component are a bit heavier for the browser, but these days that shouldn&rsquo;t be a problem for most systems.<\/p>\r\n\r\n<p>Usually though, people create a colour palette before they start designing, and I recommend doing that. There are lots of tools out there that let you pick colours that look good together, and they often immediately provide the CSS colour codes with it, so colours shouldn&rsquo;t be much of an issue!<\/p>","slur":"css3-colours-units","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"0?Absolute Unit?A unit that is fixed and independent of window size@\r\n0?Relative Unit?A unit that changes based on the size of its parent elements@\r\n0?RGB?System that represents colours based on the amount of red, green, and blue.\r\n0?HSL?System that represents colours based on the hue, saturation, and lightness@\r\n0?HEX?System that represents colours using a hexadecimal system, based on the amount of red, green, and blue.@\r\n0?Alpha?Transparency, or how much you can see through an object@\r\n1?Add a unit to a value?Place the unit directly behind the value, with no space between@\r\n1?Type the colour yellow using RGB?Use <code>rgb(255,255,0)<\/code>@\r\n1?Type the colour black using HSL?Use <code>hsl(0,0,0)<\/code>@\r\n1?Type the colour green using HEX?Use <code>00FF00<\/code>@\r\n1?Make an element half te size of its parent?Use the value <code>50%<\/code>@\r\n1?Type a half transparent colour red using RGB?Use <code>rgb(255,0,0,0.5)<\/code>"},
{"id":"198","title":"[CSS3] The Box Model","post":"<p>As far as CSS is concerned, all HTML elements are little boxes. Boxes with certain dimensions and position, with a border and some empty space.<\/p> \r\n\r\n<p>Whatever the shape of its children or parent elements, everything is a box. This may seem as if it restricts your options (what if you wanted a circular element?), but it actually enables you to create a vast array of different designs in an easy way. Rectangles are simple and intuitive geometry, especially for <em>rectangular<\/em> browser windows, which means it isn&rsquo;t hard to find out what effect a certain CSS declaration will have.<\/p>\r\n\r\n<h2>A Very Important Image<\/h2>\r\n\r\n<p><img src=\"media\/CSS3BoxModel.png\" \/><\/p>\r\n\r\n<p>Remember this image very well. It is a very simple overview of what lies at the core of CSS. Every box can be styled with these properties to be at any position, at any size. Using padding you can even position and scale the content that is inside, while the border provides a way to distinguish different elements on the page.<\/p>\r\n\r\n<p>Whenever you create a new design for anything on your website, I think it is useful to always start with the box model. First look at those basic properties and see what you can get by only setting those, and only then look further to more advanced properties to achieve the exact look you want.<\/p>\r\n\r\n<p>For example, say you wanted to offset a certain element X, 100 pixels to the right. You could place an element before X in the HTML structure, and make that element a hundred pixels wide. But, the easier way would be to make the left margin of X one hundred pixels exactly.<\/p>\r\n\r\n<h2>Seriously, everything&rsquo;s a box<\/h2>\r\n\r\n<p>Even the body element that is required for every HTML page. Most browsers automatically add some padding to this element to offset all content from the sides of the browser window &ndash; much like there&rsquo;s always some white space around the borders when you print something on A4. Keep this in mind, and know that you could just select the body element with CSS to override those standard rules.<\/p>\r\n","slur":"css3-box-model","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"0?Margin?Empty space around an element@\r\n0?Border?Outline or stroke around an element@\r\n0?Padding?Empty space within an element"},
{"id":"199","title":"[CSS3] Margin, Padding & Dimensions","post":"<p>By default, every element scales to fit all the content that is inside. This means that if you type a really long sentence, the element would become wider than the screen and you would have to scroll to read it all. This also means that if you type something really short, you get a nice clean box around it with perfect dimensions. Webpages, however, are not made to extend in width but in height. We read from top to bottom, so it&rsquo;s only logical that you have to scroll down to read further on large webpages. Therefore, if you set or restrict the width of an element, text that reaches the end of the line will automatically continue on the next line below &ndash; like we&rsquo;re used to. Nice!<\/p> \r\n\r\n<h2>Setting width and height<\/h2>\r\n\r\n<p>As expected, we use the <code>width<\/code> and <code>height<\/code> properties for this. These can take any number as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.someBox {\r\n\twidth:500px;\r\n\theight:100%;\r\n}\r\n<\/pre>\r\n\r\n<h2>Restricting width and height<\/h2>\r\n\r\n<p>If we want our webpage to be responsive, i.e. scale with different viewport sizes, a fixed size for each element isn&rsquo;t going to help us. It&rsquo;s therefore common practice to set the size of an element in percentages, and then restrict it to make sure it doesn&rsquo;t get too small or large.<\/p>\r\n\r\n<p>The <code>max-width<\/code> and <code>max-height<\/code> properties set a maximum, while <code>min-width<\/code> and <code>min-height<\/code> properties set the minimum. Again, you can provide a number as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.someBox {\r\n\tmax-width:100%;\r\n\tmax-height:100%;\r\n\tmin-width:500px;\r\n\tmin-height:500px;\r\n}\r\n\/* Box scales with the page and content, but stays within 500px - 100% bounds*\/\r\n<\/pre>\r\n\r\n<h2>Padding<\/h2>\r\n\r\n<p>Padding refers to the white space between the content of a box and its border. There are four sides for which we can set this: left, top, right, bottom.<\/p>\r\n\r\n<p>To set a value for these individually, we use <code>padding-left<\/code>, <code>padding-top<\/code>, <code>padding-right<\/code>, and <code>padding-bottom<\/code> after each other.<\/p>\r\n\r\n<p>But, we can also take a shortcut. The <code>padding<\/code> property can take one to four arguments:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Declaration<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Explanation<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>padding: <em>a b c d<\/em>;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets top, right, bottom and left side to a, b, c, d respectively<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>padding: <em>a b c<\/em>;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets top to a, right and left to b, and bottom to c<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>padding: <em>a b<\/em>;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets top and bottom to a, right and left to b<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>padding: <em>a<\/em>;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets all sides to a<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>It&rsquo;s okay though not to use these shortcuts until you are comfortable with setting them individually.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.someBox {\r\n\tpadding:20px;\r\n}\r\n\/* Content of the box has 20px white space all around it *\/\r\n<\/pre>\r\n\r\n<h2>Margin<\/h2>\r\n\r\n<p>Margin refers to the white space between the border of a box and the outside world (&ldquo;the other boxes&rdquo;).<\/p>\r\n\r\n<p>Again, we can set the same four sides with <code>margin-left<\/code>, <code>margin-top<\/code>, <code>margin-right<\/code>, and <code>margin-bottom<\/code>.<\/p>\r\n\r\n<p>There&rsquo;s also the <code>margin<\/code> shortcut that can take one to four arguments in exactly the same way as padding. Margin and padding are practically the same concept, it&rsquo;s just that one is on the inside of the box, and the order at the outside.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.someBox {\r\n\tmargin:20px;\r\n}\r\n\/* The whole box has 20px white space all around it *\/\r\n<\/pre>\r\n\r\n<h2>Box Sizing<\/h2>\r\n\r\n<p>Now, there&rsquo;s one small obstacle. When we set a width or height for an element, it does <strong>not<\/strong> take into account the padding, border and margin. For example, if we set an element to a width of 100 pixels, and then add a padding of 10 pixels, the resulting element on screen will take up 110 pixels.<\/p>\r\n\r\n<p>If we want the browser to take padding and border into account, we need to set the <code>box-sizing<\/code> property. The default value is <code>content-box<\/code>, but we want it to be <code>border-box<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.someBox {\r\n\tbox-sizing:border-box;\r\n}\r\n<\/pre>\r\n\r\n<p><em>Why doesn&rsquo;t it take margin into account?<\/em> Because margin isn&rsquo;t important for an element&rsquo;s size &ndash; it&rsquo;s mainly for positioning purposes (to offset it or give it some breathing space). Other elements can sit within the margin, and you won&rsquo;t notice because they can&rsquo;t collide with the content within the box.<\/p>","slur":"css3-margin-padding-dimensions","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Set the width of an element?Use the <code>width<\/code> property@\r\n1?Set the height of an element?Use the <code>height<\/code> property@\r\n1?Set the maximum height of an element?Use the <code>max-height<\/code> property@\r\n1?Set the maximum width of an element?Use the <code>max-width<\/code> property@\r\n1?Set the minimum height of an element?Use the <code>min-height<\/code> property@\r\n1?Set the minimum width of an element?Use the <code>min-width<\/code> property@\r\n1?Adjust the padding on the left side of an element?Use the <code>padding-left<\/code> property@\r\n1?Adjust the padding on the right side of an element?Use the <code>padding-right<\/code> property@\r\n1?Adjust the margin on the top side of an element?Use the <code>margin-top<\/code> property@\r\n1?Adjust the margin on the bottom side of an element?Use the <code>margin-bottom<\/code> property@\r\n1?Set an equal margin for all sides of an element?Use the <code>margin<\/code> property@\r\n1?Set an equal padding for all sides of an element?Use the <code>padding<\/code> property"},
{"id":"200","title":"[CSS3] Borders","post":"<p>Borders are more important than you think. When most people think about borders, especially on the web, they paint a picture of an ugly, grey, thin line around something. Yes, those are the default borders that come with some elements, but those are <em>bad borders<\/em>. In web design, borders are used very often to subtly make a distinction between different groups or content. The other option you have with borders is to go big or go home &ndash; for example, this website uses a huge border to the left of every article to separate content and navigation, and that border forms a significant part of the overall design.<\/p> \r\n\r\n<p>Every element can have a border around it, at all four sides. These can be as large as you want to be, take on certain styles (solid or dots for example), and use colours or images to fill them in. If you find the corners too sharp, you can make them round. As you can see, somehow, a lot of attention was paid to borders when CSS was created.<\/p>\r\n\r\n<h2>The Syntax<\/h2>\r\n\r\n<p>First, we&rsquo;ll focus on the syntax for giving one side of an element a border. As expected, the properties for these are <code>border-left<\/code>, <code>border-top<\/code>, <code>border-right<\/code>, and <code>border-bottom<\/code>. It needs three arguments, which are <strong>width, style<\/strong> and <strong>colour<\/strong>, respectively.<\/p>\r\n\r\n<ul>\r\n\t<li>The width determines the size of the border, and takes any <em>positive<\/em> number.<\/li>\r\n\t<li>The style <strong>must<\/strong> be set to something, or the border won&rsquo;t display. The list of border styles can be found at the end of this chapter.<\/li>\r\n\t<li>The colour speaks for itself &ndash; it can use any valid CSS colour code.<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tborder-bottom:1px solid green;\r\n\tborder-left:3px solid black;\r\n\tborder-right:8px dotted red;\r\n\tborder-top:2px solid purple;\r\n}\r\n<\/pre>\r\n\r\n<p>If you want to alter one of those three arguments individually, you can do that as well! Simply add <code>-width<\/code>, <code>-style<\/code> or <code>-color<\/code> to the end.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tborder-left-width:1px;\r\n\tborder-left-style:solid;\r\n\tborder-left-color:green;\r\n}\r\n<\/pre>\r\n\r\n<h2>The Shortcut Syntax<\/h2>\r\n\r\n<p>Luckily, the syntax for setting multiple borders in one declaration is the same as we&rsquo;ve seen with padding and margin, and uses the <code>border<\/code> property. The only difference here is that every value is actually three values.<\/p>\r\n\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tborder:1px solid green;\r\n}\r\n\r\np {\r\n\tborder-bottom:1px solid green;\r\n\tborder-left:1px solid green;\r\n\tborder-right:1px solid green;\r\n\tborder-top:1px solid green;\r\n}\r\n\r\n\/* These two styles are identical *\/\r\n<\/pre>\r\n\r\n<p>But, because of that multitude of arguments, you can also set one of them for multiple borders at the same time, using the <code>border-width<\/code>, <code>border-style<\/code> and <code>border-color<\/code> properties.<\/p>\r\n\r\n<h2>Round Borders<\/h2>\r\n\r\n<p>With round borders, I mean the roundness of the corners. If you set it to some high value, the box will look like an ellipse or circle &ndash; but it&rsquo;s still a box.<\/p>\r\n\r\n<p>You can create them by setting the <code>border-radius<\/code> property. By default, a border has a sharp edge and therefore border radius 0.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tborder-radius:50%;\r\n}\r\n<\/pre>\r\n\r\n<h2>Outlines<\/h2>\r\n\r\n<p>Sometimes, we need more than one border. To be able to do so, we can essentially fill some of the element&rsquo;s margin, creating a border around the border. We can only do this once though: if you want a massive amount of borders, just create multiple nested elements. This is done with the <code>outline<\/code> property, which accepts the same arguments.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\toutline:5px solid green;\r\n}\r\n<\/pre>\r\n\r\n<p>The outline is in the margin, so it doesn&rsquo;t add to the element&rsquo;s width or height.<\/p>\r\n\r\n<h2>Image Borders<\/h2>\r\n\r\n<p>Using an image as a border is a tricky business. It allows you to create all sorts of fancy borders you couldn&rsquo;t possibly get with the normal syntax, but it takes some preparation. The property to use is <code>border-image<\/code>.<\/p>\r\n\r\n<p>First of all, the border-image won&rsquo;t work if you don&rsquo;t set a border width, so don&rsquo;t forget that. The reason for this is that the image scales with the border width, so the default width of 0px leaves you with no image.<\/p>\r\n\r\n<p>It takes three arguments: an <strong>image<\/strong>, how to <strong>slice<\/strong> the image, and how to <strong>apply<\/strong> the image.<\/p>\r\n\r\n<p>The image is provided by URL, which means <code><attr>url(<\/attr>&lsquo;pathtofile.jpg&rsquo;<attr>)<\/attr><\/code>. CSS can handle pretty much any file type, but <em>jpg<\/em>, <em>png<\/em> and <em>gif<\/em> are favourites.<\/p>\r\n\r\n<p><img src=\"media\/CSS3BorderImage.png\" \/><\/p>\r\n\r\n<p>Slicing the image is done by defining what part of the image is border, and what is not. It works the same way as the normal shortcut syntax for border width, and works from the outside to the inside. See the image for clarification &ndash; I can&rsquo;t really explain this in words.<\/p>\r\n\r\n<p>There are three options for how to apply the image:<\/p>\r\n\r\n<ul>\r\n\t<li><code>repeat<\/code>: repeats the image along the borders<\/li>\r\n\t<li><code>stretch<\/code>: stretches the image to create the borders<\/li>\r\n\t<li><code>round<\/code>: repeats, and then stretches if it doesn&rsquo;t fit perfectly.<\/li>\r\n<\/ul>\r\n\r\n<p>It&rsquo;s most common to set one value for all borders, but you can set them individually as well if you like.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tborder-image: url(aFile.jpg) 10% repeat;\r\n}\r\n<\/pre>\r\n\r\n<h2>List of Border Styles<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>solid<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A regular, solid border<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>dotted<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A dotted border<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>dashed<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A dashed border<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>double<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A double border. The border width is divided into two smaller solid borders with some space between them.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>groove<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A 3D grooved border. Essentially a double border where the outer and inner border have different colour values.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ridge<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A 3D ridged border. Inverse groove.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>inset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A 3D inset border. The left and top border have darker values than right and bottom.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>outset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A 3D outset border. Inverse inset.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The 3D borders use two different colour values, a light and dark version, which they automatically create from the single <code>border-color<\/code> you set. Most of these effects can be recreated with more control using border and outline, or border images though.<\/p>\r\n","slur":"css3-borders","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Create round corners?Change the <code>border-radius<\/code> property@\r\n1?Add a second border?Use the <code>outline<\/code> property@\r\n1?Adjust the border at the top side of an element?Use the <code>border-top<\/code> property@\r\n1?Adjust the border at the right side of an element?Use the <code>border-right<\/code> property@\r\n1?Adjust the border at the bottom side of an element?Use the <code>border-bottom<\/code> property@\r\n1?Adjust the border at the left side of an element?Use the <code>border-left<\/code> property@\r\n1?Adjust the border colour for all sides at the same time?Use the <code>border-color<\/code> property@\r\n1?Adjust the border width, style and colour for all sides at the same time?Use the <code>border<\/code> property"},
{"id":"201","title":"[CSS3] Display","post":"<p>Until now, we&rsquo;ve viewed everything as a strong and independent box with lots of space around it. But that&rsquo;s not how most elements behave. Websites often have a few big containers (such as header, footer, sidebar, content), and the rest of the elements is displayed in a different way.<\/p> \r\n\r\n<p>In the HTML5 tutorial, we made a distinction between <strong>block<\/strong> and <strong>inline<\/strong> elements when we talked about <code>&lt;div&gt;<\/code> and <code>&lt;span&gt;<\/code>, and this is the part where CSS continues on the subject. Arguably, it&rsquo;s the most important property there is, because CSS is all about displaying stuff. Not surprisingly, the property to use is <code>display<\/code>.<\/p>\r\n\r\n<p>A <code>block<\/code>-level element has a fixed size, regardless of the content. It doesn&rsquo;t allow other elements next to it, and pushes those below itself. A block-level element is useful, because it is clean and consistent in behaviour, but it&rsquo;s hard to work with them once you get to the details of a design.<\/p>\r\n\r\n<p>That&rsquo;s when <code>inline<\/code> elements come into play. Inline elements <em>can&rsquo;t<\/em> have their width and height set &ndash; those are determined by their content and surroundings. Their placement is also determined by what&rsquo;s around it, as they will try to be <em>in line<\/em> with the text or other elements.<\/p>\r\n\r\n<p>While those two cover most cases, there will be times when you want a block element next to other elements instead of in its own space, and there&rsquo;s a compromise for that: <code>inline-block<\/code>.<\/p>\r\n\r\n<img src=\"media\/CSS3DisplayProperty.png\" \/>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tdisplay:block;\r\n}\r\n\r\nspan {\r\n\tdisplay:inline;\r\n}\r\n\r\n.specialElements {\r\n\tdisplay:inline-block;\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: Setting the property to <code>none<\/code> means the element has no effect on the layout. It doesn&rsquo;t remove it from the page.<\/p>\r\n\r\n<h2>Tables<\/h2>\r\n\r\n<p>In the HTML5 tutorial, I kept telling you to keep mark up and layout separate. To make this easier, CSS has a way of simulating a tabular layout, without actually using <code>&lt;table&gt;<\/code> tags. This tabular layout is created by setting the display property of a group of elements to certain values.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;table&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-row<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;tr&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-cell<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;td&gt; element.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-caption<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;caption&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-column<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;col&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-column-group<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;colgroup&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-header-group<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;thead&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-footer-group<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;tfoot&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table-row-group<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simulates the behaviour of the &lt;tbody&gt; element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The last five are actually not that useful, as those exist in HTML5 mostly for structure and not design or layout. But the first ones can make it very easy to create a responsive design, though they can be tricky.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tdisplay:table;\r\n}\r\n\r\ndiv > div {\r\n\tdisplay:table-row;\r\n}\r\n\r\ndiv > div > div {\r\n\tdisplay:table-cell;\r\n}\r\n<\/pre>\r\n\r\n<h2>Extras<\/h2>\r\n\r\n<p>You can also use the value <code>list-item<\/code> to make an element look like a list item, which means it has a bullet in front and is slightly indented.<\/p>\r\n\r\n<p>The value <code>run-in<\/code> is equal to block or inline, depending on what fits best in the context. It&rsquo;s decided by the browser, which means it isn&rsquo;t very consistent, and I recommend not using it.<\/p>\r\n\r\n<h2>Flexbox<\/h2>\r\n\r\n<p>The last two values it can obtain are <code>flex<\/code> and <code>inline-flex<\/code>. Those signal the start of a flexbox environment, which is a very useful but much larger topic than is necessary to discuss now. It will be elaborated on in the <em>Flexbox<\/em> chapter, much later in this course!<\/p>\r\n\r\n<h2>Overflow<\/h2>\r\n\r\n<p>The last thing to worry about now, is what to do if the content is bigger than its parent. When the content <em>overflows<\/em> the container&rsquo;s dimensions, you can use the <code>overflow<\/code> property to control it. The default value is <code>visible<\/code>, which means nothing is done about it.<\/p>\r\n\r\n<p>To hide everything outside of the box, use <code>hidden<\/code>. To make the element scrollable, use <code>scroll<\/code>.<\/p>\r\n\r\n<p>If you want to specify different instructions for the width (x-direction) and height (y-direction), use <code>overflow-x<\/code> and <code>overflow-y<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\twidth:300px;\r\n\toverflow:auto;\r\n}\r\n<\/pre>\r\n","slur":"css3-display","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"0?Block Level Element?An element that pushes other elements below it, and its dimensions can be fixed@\r\n0?Inline Element?An element that is as big as its content, and tries to stay on the same line as elements around it@\r\n0?Inline-Block Element?An element that tries to stay on the same line as elements around it, but allows you to set the dimensions@\r\n1?Make content that's outside the element's border invisible?Use <code>overflow:hidden;<\/code>@\r\n1?Create a scrollbar for scrolling vertically?Use <code>overflow-y:scroll;<\/code>@\r\n1?Make an element display as if it were a table?Use <code>display:table;<\/code>@\r\n1?Make an element display as if it were a table cell?Use <code>display:table-cell;<\/code>"},
{"id":"202","title":"[CSS3] Positioning","post":"<p>We&rsquo;ve already seen how to, to some extent, position elements using their display and margins. But what if we want a header fixed to the top? Or move an element on hover? That&rsquo;s when the <code>position<\/code> attribute comes in handy. There&rsquo;s four values it can take on, and they are all very important. Once you have set the type of positioning you want, you can use the <code>left<\/code>, <code>top<\/code>, <code>right<\/code> and <code>bottom<\/code> properties to specify the offset at each side.<\/p> \r\n\r\n<h2>Static<\/h2>\r\n\r\n<p>The default positioning. Nothing special is done, and the element is not affected by the positional properties (left, top, right and bottom). If you want something to be positioned the regular way &ndash; which is often the case &ndash; you don&rsquo;t have to set this; you can just omit the position property.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tposition:static;\r\n}\r\n<\/pre>\r\n\r\n<h2>Relative<\/h2>\r\n\r\n<p>The element is positioned relative to its original, normal position. This means that it leaves a gap of white space at the place it originally was, one that is not filled by other elements. This might seem unwanted, but it would quickly become a mess if every element would try to slip into other element&rsquo;s spots.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np span {\r\n\tposition:relative;\r\n}\r\n<\/pre>\r\n\r\n<h2>Absolute<\/h2>\r\n\r\n<p>An absolutely positioned element solves the gap problem. Its dimensions are completely removed from the page, and the element can be placed anywhere. The positional properties determine the offset from the <em>nearest positioned ancestor<\/em>. This simply means that it looks at the parent elements, and checks if they have their position set to anything else than static. If that is not the case, the element is positioned with respect to the document body, and moves along with page scrolling<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nspan.absolutePos {\r\n\tposition:absolute;\r\n}\r\n<\/pre>\r\n\r\n<p>It&rsquo;s often used for pinning an element to the bottom or top of its parent container, in which case you shouldn&rsquo;t forget to also give that parent element a positional value.<\/p>\r\n\r\n<h2>Fixed<\/h2>\r\n\r\n<p>A fixed element is always positioned relatively to the viewport ( = browser window), which means that it always keeps the same position, even when the user scrolls. Just as an absolutely positioned element, it doesn&rsquo;t leave a gap.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#fixedHeader {\r\n\tposition:fixed;\r\n}\r\n<\/pre>\r\n\r\n<h2>Overlapping Elements<\/h2>\r\n\r\n<p>With fancy new positions comes responsibility. Elements can start to overlap and get in the way, and you need to decide which one is displayed on top. This is done with the <code>z-index<\/code> property, which takes any number as a value. CSS automatically assigns these numbers to the elements, increasing it towards the end of the style sheet. But you can override it any time you want.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#frontPopup {\r\n\tz-index:10000;\r\n}\r\n<\/pre>","slur":"css3-positioning","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Keep an element at the same position in the browser window all the time?Use <code>position:fixed;<\/code>@\r\n1?Transport an element to another position, with respect to its parent?Use <code>position:absolute;<\/code>@\r\n1?Move an element to another position, with respect to where it was initially located?Use <code>position:relative;<\/code>@\r\n1?Make an element appear on top of everything else?Set an extremely high <code>z-index<\/code>@\r\n1?Adjust an element's offset from the left?Use the <code>left<\/code> property@\r\n1?Adjust an element's offset from the top?Use the <code>top<\/code> property@\r\n1?Adjust an element's offset from the right??Use the <code>right<\/code> property@\r\n1?Adjust an element's offset from the bottom?Use the <code>bottom<\/code> property"},
{"id":"203","title":"[CSS3] Alignment","post":"<p>We all know about text alignment, but in CSS there are ways to transfer this concept to whole elements. Sometimes you don&rsquo;t want to pin an element&rsquo;s position as precisely as in the previous chapter, and that&rsquo;s when you use alignment.<\/p> \r\n\r\n<h2>Float and Clear<\/h2>\r\n\r\n<p>The <code>float<\/code> property was originally intended to wrap text around images, but it has a lot of uses. It tells CSS that an element should be taken out of the normal flow, and pinned against the <code>left<\/code> or <code>right<\/code> edge.<\/p>\r\n\r\n<p><em>What&rsquo;s the difference with absolute positioning?<\/em> The element is still taken into account, and elements around it will work with it nicely, instead of overlapping or &lsquo;colliding&rsquo;.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nimg {\r\n\tfloat:left;\r\n}\r\n\/* Aligns images to the left and makes text naturally flow around it *\/\r\n<\/pre>\r\n\r\n<p>There are, however, moments when you don&rsquo;t want elements to push themselves against a floating element. You can use the <code>clear<\/code> property to specify on which side of an element you don&rsquo;t allow floating elements. The values it can take are <code>left<\/code>, <code>right<\/code> and <code>both<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tclear:both;\r\n}\r\n\/* Paragraphs are not allowed to have any elements floating beside it *\/\r\n<\/pre>\r\n\r\n<h2>Vertical-align<\/h2>\r\n\r\n<p>Vertical align is very useful, but not the hero you want it to be. Your first thought would be that you can align any element to the top, bottom or centre &ndash; but that&rsquo;s not true. The reason for this is that webpages were designed to extend towards the bottom, and vertically aligning something would therefore often mean that it is placed miles away from where it originally was, which creates problems for the text around it. Therefore, the property <code>vertical-align<\/code> only works in contained environments: tables and inline-block elements.<\/p>\r\n\r\n<p>Tables, by default, align the cell contents to the middle of the cell. Most of the time, though, you want it to align contents to the top, and then you can use this property. It also works on elements that have their display property set to <code>table-cell<\/code>.<\/p>\r\n\r\n<p>Inline-block elements, by default, are aligned to the baseline. This means that it finds that imaginary line that typed text always sits on, and aligns that with the baseline of the text around it. But, sometimes you don&rsquo;t want that, and then you can change it with this property as well.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np span {\r\n\tvertical-align:top;\r\n\tdisplay:inline-block;\r\n}\r\n\/* All span elements within paragraphs are pinned to the top *\/\r\n<\/pre>\r\n\r\n<p>The possible values are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>top<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The top of the element is aligned with the top of the tallest element in the line<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>text-top<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The top of the element is aligned with the top of the parent element&rsquo;s font<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>middle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The element is centred vertically within the parent element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>bottom<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The bottom of the element is aligned with the lowest element in the line<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>text-bottom<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The bottom of the element is aligned with the bottom of the parent element&rsquo;s font<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>baseline<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Aligns the baseline of the element with the baseline of the parent.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>sub<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Aligns the element as if it were subscript<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>sup<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Aligns the element as if it were&nbsp;superscript<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>length<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Raises or lowers an element by the specified length (any number is allowed)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Raisers or lowers an element a percentage of the line-height* property (any number is allowed)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>*You&rsquo;ll learn about the line-height property in the next chapter.<\/p>\r\n","slur":"css3-alignment","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Align a whole element to the left?Use <code>float:left;<\/code>@\r\n1?Align a whole element to the right?Use <code>float:right;<\/code>@\r\n1?Make sure nothing floats to either side of an element?Use <code>clear:both;<\/code>@\r\n1?Align contents of a table cell to the top of the cell?Use <code>vertical-align:top;<\/code>"},
{"id":"204","title":"[CSS3] Text","post":"<p>Now that you know how to create your overall layout with those nifty boxes, the second biggest thing is the <strong>typography<\/strong>. If you don&rsquo;t define any properties for your text, it will still display fine, but probably not look very well.<\/p> \r\n\r\n<p>The default settings are a <em>black<\/em> colour, <em>Times New Roman<\/em> font, and no special other settings (like, for example, white space between letters). Now, I don&rsquo;t know about you, but that looks awful in almost any web design. Thankfully, CSS has a lot of typographic properties you can and should use to your advantage.<\/p>\r\n\r\n<p>(I have a <strong><em>typography course<\/em><\/strong> for anybody interested in the details!)<\/p>\r\n\r\n<h2>Color<\/h2>\r\n\r\n<p>To set the text colour, we use the <code>color<\/code> property. It can take any valid CSS colour code as its value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tcolor:rgb(100,150,250);\r\n}\r\n<\/pre>\r\n\r\n<h2>Text Alignment<\/h2>\r\n\r\n<p>The <code>text-align<\/code> property handles this, and can take the four values <code>left<\/code>, <code>center<\/code>, <code>right<\/code> and <code>justified<\/code>.<\/p>\r\n\r\n<p><em>What is justified?<\/em> Justified means that the browser stretches a line of text, by adding extra spacing between words, to fit the width exactly. The left and right margins are straight, which is often perceived as cleaner, but be careful that not too much uneven spacing is added between words.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nh1 {\r\n\ttext-align:center;\r\n\twidth:100%;\r\n}\r\n<\/pre>\r\n\r\n<h2>Spacing<\/h2>\r\n\r\n<p>Use <code>letter-spacing<\/code> to increase white space between letters, and <code>word-spacing<\/code> to increase white space between words. They both take any number (even negative ones) as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tletter-spacing:2px;\r\n\tword-spacing:10px;\r\n}\r\n<\/pre>\r\n\r\n<h2>Line Height<\/h2>\r\n\r\n<p>The <code>line-height<\/code> property specifies white space between <em>lines of text<\/em>. The default value of 100% is often too low for web design. Again, can use any number!<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tline-height:145%;\r\n}\r\n<\/pre>\r\n\r\n<h2>Transformation<\/h2>\r\n\r\n<p>The <code>text-transform<\/code> property can transform a piece of text to a different case: <code>lowercase<\/code>, <code>uppercase<\/code> or <code>capitalize<\/code>. The first two do what you expect, which is turn all letters to lowercase or uppercase. Capitalize means that it makes the first letter of every word a capital letter.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nh1 {\r\n\ttext-transform:uppercase;\r\n}\r\n<\/pre>\r\n\r\n<h2>Decoration<\/h2>\r\n\r\n<p>The <code>text-decoration<\/code> property is used to <code>underline<\/code> (like with links), <code>overline<\/code> or <code>line-through<\/code> (like the &lt;del&gt; tag) elements. Setting it to <code>none<\/code> removes it.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\na {\r\n\ttext-decoration:none;\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: Underlined elements are often assumed to be links, which is why I suggest leaving the text-decoration for the links. If you desperately want a line above or below something, try a <em>border<\/em>.<\/p>\r\n\r\n<h2>Indentation<\/h2>\r\n\r\n<p>There are two ways to create a distinction between paragraphs: some vertical white space between them, or indenting the first line. Never both. The <code>text-indent<\/code> basically represents a margin only for the first line of text in an element, and can take any number as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\ttext-indent:36.0pt;\r\n}\r\n<\/pre>\r\n\r\n<h2>Wrapping<\/h2>\r\n\r\n<p>The default behaviour is to start a new line when the text content becomes wider than the element, and the browser breaks off the current line at a white space or hyphen.<\/p>\r\n\r\n<p>Sometimes though, you&rsquo;ll have words that are just too long, and if you only started newlines at whitespace characters the text would look very odd. The <code>word-wrap<\/code> property can prevent this. The default value is <code>normal<\/code>, but you can set it to <code>break-word<\/code> if you want to allow browsers to cut long words in half.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np {\r\n\tword-wrap:break-word;\r\n}\r\n<\/pre>\r\n\r\n<p>You can even take it one step further, and let the browser break all words at any point they need. For this, the <code>word-break<\/code> property was invented. The default value is <code>keep-all<\/code>, but setting it to <code>break-all<\/code> tells browsers they can split words at any point. I don&#39;t recommend using it.<\/p>\r\n\r\n<p>And lastly, if you have set the overflow property to hidden on a certain element, it&rsquo;s useful to tell the user that some part has been cut off. You can do this with the <code>text-overflow<\/code> property. The default value is <code>clip<\/code> (just hide the overflow), but <code>ellipsis<\/code> adds an ellipsis ( &hellip; ) at the end.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np span {\r\n\ttext-overflow:ellipsis;\r\n}\r\n<\/pre>\r\n\r\n<h2>White Space<\/h2>\r\n\r\n<p>One of the main concepts of HTML is that it removes all white space and line breaks typed in the code, and replaces them with a single space between characters. The only exception is the <strong>&lt;pre&gt;<\/strong> element, but that has a semantic value (and some extra default styles), so you don&rsquo;t want to use that for everything. Therefore, to simulate some of its good attributes, the <code>white-space<\/code> property has been created. It controls how white space inside an element is used.<\/p>\r\n\r\n<img src=\"media\/CSS3WhiteSpace.png\" \/>\r\n\r\n<p>The default setting is <code>normal<\/code>, which means it collapses sequences of whitespace into a single one and wraps text automatically when necessary (as discussed in the previous section on wrapping). The other values are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>nowrap<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sequences of white space will collapse. Text will never wrap automatically &ndash; it will continue on the same line until it encounters a &lt;br\/&gt; tag<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pre<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>All whitespace is preserved by the browser. Text will only wrap on line breaks<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pre-line<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sequences of white space will collapse, but line breaks are preserved and text will also wrap when necessary.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pre-wrap<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>All whitespace is preserved, but text will wrap on line breaks and when necessary<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n","slur":"css3-text","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Move the first line of an element to the right?Use the <code>text-indent<\/code> property@\r\n1?Underline, overline or strike-through all the text within an element?Use the <code>text-decoration<\/code> property@\r\n1?Make all the text within an element uppercase?Use the <code>text-transform:uppercase;<\/code>@\r\n1?Adjust the distance between two lines of text?Use the <code>line-height<\/code> property@\r\n1?Change the distance between letters?Use the <code>letter-spacing<\/code> property@\r\n1?Align all the text within an element?Use the <code>text-align<\/code> property@\r\n1?Change the text colour of an element?Use the <code>color<\/code> attribute"},
{"id":"205","title":"[CSS3] Fonts","post":"<p>Now it is time to get rid of that default font, and add some variation.<\/p> \r\n\r\n<h2>Font Families<\/h2>\r\n\r\n<p>To set the font for a certain element, use the <code>font-family<\/code> property.<\/p>\r\n\r\n<p><em>Why the &ldquo;family&rdquo;?<\/em> Because most fonts have light, bold, italic, and other variations that all belong to the same family. This way, you can set a font family for an element, and then use other properties to access the different styles within that family.<\/p>\r\n\r\n<p>The value is the name of the font. You can use pre-installed fonts that come with every system (like Arial or Helvetica), or you can add your own fonts. That is discussed at the end of this chapter.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tfont-family: 'Open Sans';\r\n}\r\n<\/pre>\r\n\r\n<p>If you want, you can specify multiple values, separated by commas. If a certain font isn&rsquo;t available or failed to load properly, the browser will check with the next one, until it finds a font it can use. It&rsquo;s a sort of backup plan.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tfont-family: Arial, Helvetica, Times New Roman;\r\n}\r\n<\/pre>\r\n\r\n<h2>Font Size<\/h2>\r\n\r\n<p>The <code>font-size<\/code> property can be used for that. It can take any <em>positive<\/em> number as value.<\/p>\r\n\r\n<p>The default font size is 16px, and it&rsquo;s recommended to keep font sizes on the web larger than in print. The actual size partially depends on the font &ndash; some fonts are naturally larger or smaller.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tfont-size: 20px;\r\n}\r\n<\/pre>\r\n\r\n<h2>Style and Weight<\/h2>\r\n\r\n<p>The <code>font-style<\/code> property is used to create <em>italics<\/em>. It has three values: <code>normal<\/code>, <code>italic<\/code> and <code>oblique<\/code>. The last two both display a slanted version of the font, but italic tries to use the italic variation of a font family, while oblique simply puts every letter at an angle. It&rsquo;s therefore recommended to use the italic value whenever possible.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np span {\r\n\tfont-style:italic;\r\n}\r\n<\/pre>\r\n\r\n<p>The other style a font can have, light or bold, is set with the <code>font-weight<\/code> property. The most common values are <code>normal<\/code> and <code>bold<\/code>, and can be used with any font<\/p>\r\n\r\n<p>However, it also accepts the numbers <em>100, 200, 300, 400, 500, 600, 700, 800<\/em> and <em>900<\/em>. Here, 100 is a very thin variation and 900 an extremely thick one. These values only have effect if the specified font-family has their own font file for these. For example, every computer has the font-family Calibri, which contains a file called Calibri Light.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np .highlight {\r\n\tfont-weight: bold;\r\n}\r\n<\/pre>\r\n\r\n<p>Similarly, the <code>font-stretch<\/code> property defines how much the letters are stretched, but can only be used if the font-family has support for it. The possible values are: <em>ultra-condensed, extra-condensed, semi-condensed, condensed, normal, expanded, semi-expanded, extra-expanded <\/em>and <em>ultra-expanded<\/em>.<\/p>\r\n\r\n<h2>Variation<\/h2>\r\n\r\n<p>The <code>font-variant<\/code> property is a very specific one. It only accepts two values: <code>normal<\/code> and <code>small-caps<\/code>. Small-caps are basically uppercase letters, but made smaller so that they are the same size as the lowercase ones.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\na {\r\n\tfont-variant:small-caps;\r\n}\r\n<\/pre>\r\n\r\n<h2>Adding Custom Fonts<\/h2>\r\n\r\n<p>To add our own custom fonts, we use a special type of selector: <code>@font-face<\/code>. Within, we need to specify at least two things:<\/p>\r\n\r\n<ul>\r\n\t<li>The <code>font-family<\/code> property with the name we want to give the font as value.<\/li>\r\n\t<li>The <code>src<\/code> property with the URL to the font file as value.<\/li>\r\n<\/ul>\r\n\r\n<p>If you want to add variations, like condensed or italic, you need to specify those as well.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n@font-face {\r\n\tfont-family: AwesomeName;\r\n\tsrc: url(FontFile.otf);\r\n}\r\n<\/pre>\r\n\r\n<p>All browsers support the TTF, OTF and WOFF formats, and loading of fonts is usually quite quick. Just to be sure, however, make sure your font files are not too large.<\/p>\r\n\r\n<p>NOTE: The @font-face selector only applies to one font. If you want to add multiple custom fonts, you need to close the selector and start a new selector for the next one.<\/p>\r\n","slur":"css3-fonts","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Change the letter size?Use the <code>font-size<\/code> property@\r\n1?Make text italic?Use the <code>font-style<\/code> property@\r\n1?Make text bold or thin?Use the <code>font-weight<\/code> property@\r\n1?Set a font for an element?Use the <code>font-family<\/code> property@\r\n1?Add your own custom fonts?Use the <code>&commat;font-face<\/code> selector, and supply name and font file"},
{"id":"206","title":"[CSS3] Backgrounds & Images","post":"<p>The one major thing we haven&rsquo;t discussed yet, is the background. Every element can have a background, and it often adds a lot to your design if you play with it.<\/p> \r\n\r\n<h2>Background Colour<\/h2>\r\n\r\n<p>You can set the complete background to a single colour using the <code>background-color<\/code> property, which takes any valid CSS colour code as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tbackground-color:rgb(200,100,50);\r\n}\r\n<\/pre>\r\n\r\n<p>One flat colour, however, isn&rsquo;t always interesting. Sometimes you want some more variation, and that&rsquo;s when <strong>images<\/strong> and <strong>gradients<\/strong> come in. I&rsquo;ll now discuss images &ndash; gradients are less important and saved for a later chapter.<\/p>\r\n\r\n<h2>Background Images<\/h2>\r\n\r\n<p>By default, setting a background image will pin the image to the top left corner. It will include it in its full size, and repeat along the width and height if necessary. But, that&rsquo;s not always what you want &ndash; it&rsquo;s almost never what you want, actually &ndash; which means there&rsquo;s a lot of properties for background images to get them looking great.<\/p>\r\n\r\n<p>The <code>background-image<\/code> property sets the image, and takes a URL as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.coolIcon {\r\n\tbackground-image:url(coolImage.jpg);\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Repeat<\/h2>\r\n\r\n<p>To control the repeating you can use the <code>background-repeat<\/code> property, which has the values:<\/p>\r\n\r\n<ul>\r\n\t<li><code>repeat<\/code> (repeat the image in both x and y direction)<\/li>\r\n\t<li><code>repeat-x<\/code> (repeat the image in the x direction = horizontally)<\/li>\r\n\t<li><code>repeat-y<\/code> (repeat the image in the y direction = vertically)<\/li>\r\n\t<li><code>no-repeat<\/code> (if you don&rsquo;t want it to repeat)<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tbackground-image:url(seamlessTexture.jpg);\r\n\tbackground-repeat:repeat;\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Position<\/h2>\r\n\r\n<p>To reposition it, use the <code>background-position<\/code> property. You can supply two numbers, which are the offset in the x and y direction, respectively. Some predefined values, though, are available and are often just wat you need:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>left top, left center, left bottom, right top, right center, right bottom, center top, center center <\/em>and <em>center bottom<\/em>.<\/p>\r\n\r\n<p>If you specify only one keyword, the other one will automatically be <em>center<\/em>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.coolIcon {\r\n\tbackground-position: center;\r\n\t\/* background-position: center center; would be the same *\/\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Attachment<\/h2>\r\n\r\n<p>The <code>background-attachment<\/code> property specifies what part of an element the background is attached to, which in turn decides what happens when the user scrolls. The default value is <code>scroll<\/code>, which means the background scrolls along with the element it belongs to; it is fixed to its position within the element. Other possible values are:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>fixed<\/code>: the background is fixed to the viewport, and scrolls when the viewport scrolls, regardless of the element&rsquo;s position or scroll.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>local<\/code>: the background scrolls along with the element&rsquo;s contents, like it would do if it was an image inside the element.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tbackground-attachment: local;\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Size<\/h2>\r\n\r\n<p>Use the <code>background-size<\/code> property. You can specify exact dimensions using two numbers (width and height), but there&rsquo;s also two predefined values that can be useful:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>contain<\/code>: scales it to fit to the smallest dimension. This means that the background image will never overflow the element and fit perfectly at one side, but there might be a gap because it&rsquo;s too small.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><code>cover<\/code>: scales it to fit to the largest dimension. This means that the background image will nicely fill the whole element, but it will overflow at the smaller side.<\/p>\r\n\r\n<p>To some extent, overflow and fitting problems can be fixed by making your image the correct aspect ratio.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.coolIcon {\r\n\tbackground-size:contain;\r\n}\r\nbody {\r\n\tbackground-size:50% 50%;\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Clip<\/h2>\r\n\r\n<p>The <code>background-clip<\/code> property tells us how far to extend the background. More specifically, it determines whether the background also covers the border or padding area of a box. It has, therefore, 3 possible values:<\/p>\r\n\r\n<ul>\r\n\t<li><code>border-box<\/code>: the default value. The background extends to the borders, and will therefore be visible underneath semi-transparent borders.<\/li>\r\n\t<li><code>padding-box<\/code>: the background doesn&rsquo;t cover the borders, but does extend through padding space.<\/li>\r\n\t<li><code>content-box<\/code>: the background only covers the actual content &ndash; padding is left as white space.<\/li>\r\n<\/ul>\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tbackground-clip:content-box;\r\n}\r\n<\/pre>\r\n\r\n<h2>Background Origin<\/h2>\r\n\r\n<p>The <code>background-origin<\/code> property works the same way as <code>background-clip<\/code>, but with a small difference. A background clip determines what part of the background is shown, while the background origin determines where that background image is positioned. Essentially, it determines from where the <code>background-position<\/code> property starts to offset the image. It takes the same 3 values as <code>background-clip<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tbackground-origin: border-box;\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: <code>background-origin<\/code> and <code>background-clip<\/code> also work for regular background <em>colours<\/em>!<\/p>\r\n\r\n<h2>Opacity<\/h2>\r\n\r\n<p>We&rsquo;ve already seen how to make semi-transparent colours, but we can also set how transparent a <em>complete element<\/em> is &ndash; including borders, background, and all content. For this we use the <code>opacity<\/code> property, which takes a number between 0 and 1; 0 means it&rsquo;s fully transparent (invisible), 1 means it&rsquo;s fully opaque (the default setting, you don&rsquo;t see what&rsquo;s underneath it).<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nimg {\r\n\topacity:0.5;\r\n}\r\n<\/pre>\r\n\r\n<h2>Multiple Background Images<\/h2>\r\n\r\n<p>You can specify as many background images as you like, using a comma to separate them.<\/p>\r\n\r\n<p>All the other properties can also accept as many values as you like, separated by comma.<\/p>\r\n\r\n<p>As you&rsquo;d expect, these are linked by order &ndash; the first value corresponds to the first URL specified, second to the second, etcetera.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.superCoolIcon {\r\n\tbackground-image: url(image1.jpg), url(image2.jpg), url(image3.jpg);\r\n\tbackground-position: left top, center, right bottom;\r\n}\r\n<\/pre>\r\n","slur":"css3-background-images","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Change the background colour?Use the <code>background-color<\/code> property@\r\n1?Set a background image?Use the <code>background-image<\/code> property@\r\n1?Make sure the background doesn't repeat?Set the value <code> no-repeat<\/code> on the <code>background-repeat<\/code> property@\r\n1?Put the background image in the middle?Set the value <code>center center<\/code> on the <code>background-position<\/code> property@\r\n1?Make the background image fill the whole element?Use the value <code>cover<\/code> on the <code>background-size<\/code> property@\r\n1?Make an element completely transparent?Set the <code>opacity<\/code> property to <code>0<\/code>@\r\n1?Insert multiple background images?Seperate the background images with a comma@\r\n1?Pin a background image to the bottom right corner?Use the value <code>right bottom<\/code> on the <code>background-position<\/code> property"},
{"id":"207","title":"[CSS3] Lists, Tables & Links","post":"<p>Up until now I&rsquo;ve discussed with you all the fundamental properties of CSS, and to close off this portion of the course I&rsquo;ll discuss a few properties aimed specifically at a certain group of elements. This doesn&rsquo;t mean that everything past this chapter isn&rsquo;t important anymore &ndash; this simply means that the advanced stuff is coming.<\/p> \r\n\r\n<h2>Input<\/h2>\r\n\r\n<p>The <code>resize<\/code> property can be used to specify if an element can be resized. Though this property is available for every element, its most common use is to allow the user to resize input elements that are too small or large.<\/p>\r\n\r\n<p>The values it can take are <code>horizontal<\/code> (you can adjust the width), <code>vertical<\/code> (you can adjust the height) or <code>both<\/code>. The default value is <code>none<\/code>, which means it can&rsquo;t be resized.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ninput[type=\"text\"] {\r\n\tresize:both;\r\n}\r\n<\/pre>\r\n\r\n<h2>Lists<\/h2>\r\n\r\n<p>By default, for HTML lists, browsers use bullets for unordered lists and numbers for ordered ones. We can change this!<\/p>\r\n\r\n<p>The <code>list-style-type<\/code> property takes care of this. It can have these values:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>disc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The default value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>none<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Nothing in front of it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>circle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The marker is a circle<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>square<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The marker is a square<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>decimal<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The marker is a number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>decimal-leading-zero<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The marker is a number with leading zeros (01, 02, &hellip; )<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lower-alpha<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lowercase letters: a, b, c, d, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lower-latin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as lower-alpha.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lower-greek<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lowercase Greek letters: alpha, beta, gamma<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lower-roman<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lowercase Roman numbers: i, ii, iii, iv, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>upper-alpha<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Uppercase letters: A, B, C, D, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>upper-latin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as upper-alpha<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>upper-roman<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Uppercase Roman numbers: I, II, III, IV, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>But, if you want something really special, you can use <code>list-style-image<\/code> with a URL to an image.<\/p>\r\n\r\n<p>And, last but not least, using the <code>list-style-position<\/code> property, we can decide if we want this marker <code>inside<\/code> or <code>outside<\/code> the &lt;li&gt; tag.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nul {\r\n\tlist-style-type: upper-roman;\r\n\tlist-style-position: outside;\r\n}\r\n<\/pre>\r\n\r\n<h2>Tables<\/h2>\r\n\r\n<p>The <code>border-collapse<\/code> property determines whether two borders of adjacent cells should be merged. The default value is <code>separate<\/code>, in which case borders are kept detached, which results in the standard so-called double border. The other value is <code>collapse<\/code>, in which case they are merged.<\/p>\r\n\r\n<p>The <code>border-spacing<\/code> property determines the distance (&ldquo;margin&rdquo;) between two adjacent cells, and can take any number as value. If you give it two values, the first one sets <em>horizontal<\/em> spacing, and the second one <em>vertical<\/em> spacing.<\/p>\r\n\r\n<p>The <code>empty-cells<\/code> property determines whether or not empty cells should be shown. The default value is <code>show<\/code>. The other value is <code>hide<\/code>, in which case no background or borders are shown for empty cells.<\/p>\r\n\r\n<p>NOTE: If you set border-collapse to <em>collapse<\/em>, cells are merged and empty cells removed, which means the <em>border-spacing<\/em> and <em>empty-cells<\/em> properties have no influence anymore.<\/p>\r\n\r\n<p>The <code>caption-side<\/code> property determines where to display a table&rsquo;s caption (because the &lt;caption&gt; element always needs to follow the &lt;table&gt; element directly, you can&rsquo;t easily put it somewhere else another way). The default is <code>top<\/code>, the other value is <code>bottom<\/code> &ndash; which means the caption is put below the table.<\/p>\r\n\r\n<p>And finally, the <code>table-layout<\/code> property determines the algorithm used for displaying the table. The default value is <code>auto<\/code>, in which case column width is determined after the whole table has loaded, and adapts to the contents. The other value is <code>fixed<\/code>, which means the table follows width restrictions that you set, and can process the table faster.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ntable {\r\n\tborder-collapse:separate;\r\n\tborder-spacing:20px;\r\n\tempty-cells:hide;\r\n}\r\n<\/pre>\r\n\r\n<h2>Links<\/h2>\r\n\r\n<p>Have you ever noticed your cursor changing when hovering over a link? Well, for a lot of people, that is the cue that something is clickable or interactive. Therefore, it&rsquo;s possible in CSS to change the cursor for elements that are not links, but supposed to be clickable. It can be used for any element, but to signal a (sort of) link is by far the most common use. We use the <code>cursor<\/code> property for this, and it has the most amount of (textual) values of any property. Don&rsquo;t go wild with it though &ndash; only use it when it provides a better user experience.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n.clickableThing {\r\n\tcursor:pointer;\r\n}\r\n<\/pre>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>auto<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Default &ndash; the browser determines the cursor.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>default<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The default cursor you get when hovering over\/selecting text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pointer<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The pointing hand that appears on links<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>URL<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A comma-separated list of URLs to image files to use as a cursor (very fancy, but can be confusing)<\/p>\r\n\r\n\t\t\t<p>NOTE: You need to specify a standard cursor at the end, in case the browser can&rsquo;t find the image, otherwise this won&rsquo;t work<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>alias<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates an alias of something is to be created<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>all-scroll<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that something can be scrolled in any direction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cell<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a cell may be selected (much like with Excel)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>context-menu<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a context-menu is available<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>col-resize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a column can be resized horizontally<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>row-resize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a row can be resized vertically<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>copy<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates something is to be copied<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>crosshair<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Renders as a crosshair<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>grab<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that something can be grabbed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>help<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that help is available<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>move<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates something is to be moved<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>no-drop<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a dragged item cannot be dropped here<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>not-allowed<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that a requested action can or will not be executed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>progress<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that the program is busy or something is in progress<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>text<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that text may be selected (same as default)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vertical-text<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that text may be selected vertically<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>wait<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that the program is busy<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>zoom-in<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that something can be zoomed in<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>zoom-out<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indicates that something can be zoomed out<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>none<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes the cursor invisible. I don&rsquo;t see any use for this.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Not all values are supported by all browsers. If that is the case, nothing weird occurs &ndash; the cursor is simply not changed.<\/p>\r\n","slur":"css3-list-links-tables-input","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Make an input element resizable horizontally and vertically?Set the value <code>both<\/code> on the <code>resize<\/code> property@\r\n1?Make the bullets of a list squares?Set the value <code>square<\/code> on the <code>list-style-type<\/code> property@\r\n1?Make the bullets of a list lowercase letters?Set the value <code>lower-latin<\/code> on the <code>list-style-type<\/code> property@\r\n1?Set spacing between table cells?Use the <code>border-spacing<\/code> property@\r\n1?Remove borders from a table?Use the value <code>collapse<\/code> on the <code>border-collapse<\/code> property@\r\n1?Make the mouse indicate an element is a link?Use the value <code>pointer<\/code> on the <code>cursor<\/code> property"},
{"id":"208","title":"[CSS3] Pseudo-Classes","post":"<p>Pseudo-classes are a very powerful feature of CSS. Basically, they are an extra component you can add to a selector, that selects a group of elements dynamically. This means that it creates a class based on which state an element is in, which can be used, for example, to style elements differently when the user hovers over them.<\/p> \r\n\r\n<p>The syntax for pseudo-classes is <code><attr>:<\/attr>pseudo-class<\/code> &ndash; note the colon &ndash; and can be used in a selector just like any other component.<\/p>\r\n\r\n<h2>Hover\/Mouse Over<\/h2>\r\n\r\n<p>To apply a different set of styles when the user hovers over the element, you can use the <code>:hover<\/code> pseudo-class. Most commonly used with links, but can be applied to <em>anything<\/em>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\na:hover {\r\n\tcolor:red;\r\n}\r\n<\/pre>\r\n\r\n<h2>Links<\/h2>\r\n\r\n<p>Because links take time to load, it is useful to style them differently when they are being clicked. That&rsquo;s when you use <code>:active<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\na:active {\r\n\tborder-bottom: 2px solid purple;\r\n}\r\n<\/pre>\r\n\r\n<p>Similarly, because the text inside anchor tags can change, it&rsquo;s useful if you can show the user if he has already visited a certain link. The <code>:link<\/code> pseudo-class selects all unvisited links, while <code>:visited<\/code> selects all the visited ones.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\na:link {\r\n\tcolor:blue;\r\n}\r\na:visited {\r\n\ttext-transform:uppercase;\r\n}\r\n<\/pre>\r\n\r\n<h2>Input<\/h2>\r\n\r\n<p>The input element is, of all elements, by far the most subject to change, and therefore has its own set of pseudo-classes.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Pseudo Class<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:checked<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every checked input element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:disabled<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every disabled input element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:enabled<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every enabled input element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:focus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects the input element that has focus<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:in-range<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with a value within a specified range<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:invalid<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with an invalid value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:optional<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with <strong>no<\/strong> &ldquo;required&rdquo; attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:out-of-range<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects input elements with a value outside a specified range<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:read-only<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with a &ldquo;readonly&rdquo; attribute specified<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:read-write<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with <strong>no<\/strong> &ldquo;readonly&rdquo; attribute specified<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:required<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with a &ldquo;required&rdquo; attribute specified<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:valid<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all input elements with a valid value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>All Pseudo-Classes<\/h2>\r\n\r\n<p>The remaining pseudo-classes are all about selecting elements based on their type, position relative to their parent, and contents. Especially useful, I think, is the first one.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Pseudo Class<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:not(<em>selector<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Negates the selector within.<\/p>\r\n\r\n\t\t\t<p>For example, you could select all paragraph tags that <em>don&rsquo;t<\/em> have the a certain class.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:empty<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every empty element, i.e., element with no children<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:first-child<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the first child of its parent<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:first-of-type<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the first child of its parent of its own type.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:last-child<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the last child of its parent<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:last-of-type<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the last child of its parent of its own type.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:only-child<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the only child of its parent<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:only-of-type<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the only child of its parent of its own type.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:nth-child(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the nth child of its parent<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:nth-of-type(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the nth child of its parent of its own type.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:nth-last-child(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the nth child of its parent, counting from the end to the start.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:nth-last-of-type(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects every element that is the nth child of its parent of its own type, counting from the end to the start.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:root<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects the document&rsquo;s root element.<\/p>\r\n\r\n\t\t\t<p>For HTML documents, this will always be <code>&lt;html&gt;<\/code>, but CSS can also be used for other markup languages!<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>:target<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>If a link points to an element on another page, using <code>#someanchor<\/code>, this selects that part of the page that was linked to.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The <code>nth-child<\/code> selectors are very powerful, as you can input any formula you like. For example, <em>2n<\/em> selects all even-numbered children. But, that is a bit too advanced to cover in this basic CSS course ;)<\/p>\r\n","slur":"css3-pseudo-classes","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Select the element the user is mousing over?Use the <code>:hover<\/code> pseudo-class@\r\n1?Select a link that has already been visited?Use the <code>:visited<\/code> pseudo-class@\r\n1?Select checkboxes that are checked?Use the <code>:checked<\/code> pseudo-class@\r\n1?Select all input elements with valid input?Use the <code>:valid<\/code> pseudo-class@\r\n1?Select elements that may only be read, not edited?Use the <code>:read-only<\/code> pseudo-class@\r\n1?Select elements that don't have the class <code>panda<\/code>?Use the <code>:not(.panda)<\/code> pseudo-class@\r\n1?Select every element that is the first child of another element?Use the <code>:first-child<\/code> pseudo-class@\r\n1?Select all elements that are not among the first five children of another element?Use the <code>:nth-child(n+5)<\/code> pseudo-class@\r\n1?Select all elements that are the fifth child of another element?Use the <code>:nth-child(5)<\/code> pseudo-class@\r\n1?Select all elements that are the last child of another element?Use the <code>:last-child<\/code> pseudo-class@\r\n1?Select all elements with no children?Use the <code>:empty<\/code> pseudo-class"},
{"id":"209","title":"[CSS3] Pseudo-Elements","post":"<p>Much like pseudo-classes, pseudo-elements are special types of selector components. However, they are more powerful, as they define whole new elements. When you set these on an element, it takes a part of that element and allows you to give that its own whole set of styles.<\/p> \r\n\r\n<p><em>Why not just create extra elements in the HTML?<\/em> Because sometimes that is not possible or very hard\/time-consuming to do, and adding those elements might ruin your semantic mark up.<\/p>\r\n\r\n<p>The syntax for these is <code><attr>::<\/attr>pseudo-element<\/code> &ndash; note the double colon &ndash; and there&rsquo;s only five of them.<\/p>\r\n\r\n<h2>Before &amp; After<\/h2>\r\n\r\n<p>The <code>::before<\/code> and <code>::after<\/code> selectors insert dummy elements before and after the element, respectively. These elements are not added in the mark up or page structure, and exist only within those selectors, but are certainly visible and can be styled any way you like.<\/p>\r\n\r\n<p>One extra property exists for these pseudo-elements, which is <code>content<\/code>. As expected, it specifies what content is placed within this dummy element. You can&rsquo;t, however, just put any HTML as its value &ndash; CSS has nothing do with mark up. Nevertheless, it does support these values:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>&ldquo;text&rdquo;<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Any text, but special characters have to be replaced by their Unicode values.<\/p>\r\n\r\n\t\t\t<p>For example, <code>&amp;nbsp;<\/code> becomes <code>\\00A0<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>url(<em>link<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A link to an image.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>attr(<em>value<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The value of a certain attribute set on the element.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>open-quote<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An opening quote<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>close-quote<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A closing quote<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>As you can see, before and after elements were originally intended just for the sake of creating nice layouts for quotes, but they are much more powerful than that and are in widespread use these days.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np::before {\r\n\tcontent:\"A\"\r\n\r\n}\r\np::after {\r\n\tcontent:\"Z\"\r\n}\r\n\/*Places an A before and Z after every paragraph\r\n<\/pre>\r\n\r\n<h2>First Letter and Line<\/h2>\r\n\r\n<p>The <code>::first-letter<\/code> pseudo-element selects the first letter of an element.<\/p>\r\n\r\n<p>The <code>::first-line<\/code> pseudo-element selects the first line of an element.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np::first-line {\r\n\tfont-weight:bold;\r\n}\r\np::first-letter {\r\n\tfont-size:200%;\r\n\tfloat:left;\r\n}\r\n\/* Make first line bold and first letter big *\/\r\n<\/pre>\r\n\r\n<h2>Selection<\/h2>\r\n\r\n<p>Applies to what is currently being selected by the user. Its main use, therefore, is creating a different selection colour than the standard blue. But, it is quite limited, and only accepts the <code>color<\/code>, <code>background<\/code>, <code>cursor<\/code> and <code>outline<\/code> properties.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n::selection {\r\n\tcolor:red;\r\n}\r\n\/* All selected text will be red *\/\r\n<\/pre>\r\n","slur":"css3-pseudo-elements","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Inject an element before a certain element with CSS?Use the <code>::before<\/code> pseudo-element@\r\n1?Inject an element after a certain element with CSS?Use the <code>::after<\/code> pseudo-element@\r\n1?Set the contents of a before\/after element to the value of its src attribute?Use the value <code>attr(src)<\/code> on the <code>content<\/code> property@\r\n1?Style text the user has selected?Use the <code>::selection<\/code> pseudo-element@\r\n1?Select the first line of an element?Use the <code>::first-line<\/code> pseudo-element@\r\n1?Select the first letter of an element?Use the <code>::first-letter<\/code> pseudo-element@\r\n1?Set the contents of a before\/after element to a certain string of text?Use the value <code>&ldquo;TEXT&rdquo;<\/code> on the <code>content<\/code> property@"},
{"id":"210","title":"[CSS3] Shadows","post":"<p>Shadows can be used to make something stand out, create contrast, or simulate depth. You can set a shadow for text with <code>text-shadow<\/code>, and a whole element\/box with <code>box-shadow<\/code>.<\/p> \r\n\r\n<p><img src=\"media\/CSS3Shadows.png\" \/><\/p>\r\n\r\n<p>A shadow is, basically, a copy of the element that is positioned behind it and blurred (&ldquo;faded out&rdquo;) a little. That&rsquo;s why there&rsquo;s a lot of arguments you <em>can<\/em> supply, of which only the first three are mandatory.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Argument<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x-offset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The horizontal position of the shadow. Can be any number.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>y-offset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The vertical position of the shadow. Can be any number.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>blur<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The blur of the shadow.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>colour<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The colour of the shadow. Default is black<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>spread<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The size of the shadow. Can be any value, which it adds to the default width and height.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>inset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>If you add the word <strong>inset<\/strong> before any of the arguments, the shadow is added at the inside.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: The last two only work for <code>box-shadow<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\np .highlight {\r\n\ttext-shadow: 0 0 5px red;\r\n}\r\ndiv.highlight {\r\n\tbox-shadow: 0 0 5px blue 0;\r\n}\r\n<\/pre>\r\n\r\n<h2>Multiple Shadows<\/h2>\r\n\r\n<p>You can add multiple shadows to the same element using a comma separated list.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nh1.fancy {\r\n\ttext-shadow: 0 0 5px red, -5px -5px 2px blue, 5px 5px 2px violet;\r\n}\r\n<\/pre>\r\n","slur":"css3-shadows","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Set multiple shadows on an element?Seperate shadow declarations with commas@\r\n1?Determine the position of a text shadow?Change the first two values of a shadow declaration in the <code>text-shadow<\/code> property@\r\n1?Blur a box shadow?Change the third value of a shadow declaration in the <code>box-shadow<\/code> property@\r\n1?Set the colour of a text shadow?Change the fourth value of a shadow declaration in the <code>text-shadow<\/code> property@\r\n1?Add a shadow inside an element?Add the word <code>inset<\/code> to the shadow declaration in the <code>box-shadow<\/code> property"},
{"id":"211","title":"[CSS3] Gradients","post":"<p>The last kind of image you can use in the background of your element, is a <strong>gradient<\/strong>. A gradient is a collection of background colours placed in a certain pattern. Usually, it is used to create a nice transition between multiple colours, but you can do quite a lot of things with it. Two types exist: <strong>linear<\/strong> and <strong>radial<\/strong> gradients. Gradients are created with the <code>background-image<\/code> property, which means this chapter is all about the different values for that property.<\/p> \r\n\r\n<p>NOTE: Because of that, if a browser doesn&rsquo;t support a certain gradient, it will fall back on the <code>background-color<\/code> property, so make sure you specify that as well.<\/p>\r\n\r\n<h2>Linear Gradients<\/h2>\r\n\r\n<p>Linear gradients start at one edge of the element, and move to the opposite side. This sounds as if they can only be horizontal or vertical, but they can be angled any way you like.<\/p>\r\n\r\n<img src=\"media\/CSS3LinearGradients.png\" \/>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">linear-gradient(<em>direction, colour stops<\/em>)<\/code><\/p>\r\n\r\n<h2>Direction<\/h2>\r\n\r\n<p>The direction specifies the angle of the gradient. You can:<\/p>\r\n\r\n<ul>\r\n\t<li>Set it in degrees, by using a number with the unit <code>deg<\/code>.<\/li>\r\n\t<li>Point it towards a specific side of the element, using the word <code>to<\/code> and one of the following directions: <em>top left, top center, top right, center left, center right, bottom left, bottom center<\/em> and <em>bottom right<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>These direction words have appeared before with background properties, but the difference this time is that you can&rsquo;t point a gradient towards the centre of an element, because the gradient wouldn&rsquo;t know what to do beyond that point (at the other half of the element).<\/p>\r\n\r\n<h2>Colour Stops<\/h2>\r\n\r\n<p>A colour stop is a certain point within the gradient where the colour is changed. You can specify as many as you like, in a comma-separated list, but you must specify at least one. In that case, the gradient is just a solid colour.<\/p>\r\n\r\n<p>A colour stop requires two arguments: <code>colour<\/code> and <code>position<\/code>. The colour can be any valid CSS colour code, the position is a percentage. A gradient is always created from 0% to 100%, where 100% is the spot you pointed the gradient towards, and 0% the opposite end (<em>starting point<\/em>). If no position is set, all colour stops are distributed equally.<\/p>\r\n\r\n<p>NOTE: If you set two colour stops with the same position, the colours don&rsquo;t gradually fade into each other, but immediately change into each other. This can be what you want, sometimes.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tbackground-image: linear-gradient(90deg, red 0%, blue 50%, yellow 100%);\r\n}\r\ndiv {\r\n\tbackground-image: linear-gradient(to left center, red 0%, blue 50%, yellow 50%, red 100%);\r\n}\r\n<\/pre>\r\n\r\n<h2>Radial Gradients<\/h2>\r\n\r\n<p>Radial gradients start at one point within the element, and move outwards in all directions, like a circle. Because they don&rsquo;t have one direction, the first parameter instead specifies where the gradient starts and how far it extends.<\/p>\r\n\r\n<img src=\"media\/CSS3RadialGradients.png\" \/>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">radial-gradient(<em>settings, colour stops<\/em>)<\/code><\/p>\r\n\r\n<h2>Radial Settings<\/h2>\r\n\r\n<p>By default, if you don&rsquo;t set this argument, the gradient starts at the <em>center center<\/em> of the element, and extends all the way to the edges. This means that it becomes an ellipse if the element is not a perfect square.<\/p>\r\n\r\n<p>This <em>shape<\/em> is the first thing we can change. By default, the first argument is <code>ellipse<\/code>, but you can force it into circular shape with <code>circle<\/code>.<\/p>\r\n\r\n<p>To control the <em>size<\/em>, we can use a second argument, which has these values:<\/p>\r\n\r\n<ul>\r\n\t<li><code>closest-corner<\/code>: scales it until it reaches the closest corner<\/li>\r\n\t<li><code>closest-side<\/code>: scales it until it reaches the closest edge<\/li>\r\n\t<li><code>farthest-corner<\/code>: scales it until it reaches the farthest corner<\/li>\r\n\t<li><code>farthest-side<\/code>: scales it until it reaches the farthest side<\/li>\r\n<\/ul>\r\n\r\n<p>For example, if we want the gradient to be completely within the element, we&rsquo;d use the value <em>closest-side<\/em>.<\/p>\r\n\r\n<p>And lastly, to control the <em>starting point<\/em>, we use a third argument which takes the same values as the <strong>direction<\/strong> with the linear gradient (so, <code>at &lt;position&gt;<\/code>).<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tbackground-image: radial-gradient(circle closest-corner at left center, red 0%, blue 50%, yellow 100%);\r\n}\r\n<\/pre>\r\n\r\n<h2>Repeating Gradients<\/h2>\r\n\r\n<p>Both Linear and Radial gradients can be set to repeat, often to create a striped background. We simply use<\/p>\r\n\r\n<p><code class=\"longsyntax\">repeating-linear-gradient()\r\nrepeating-radial-gradient()<\/code><\/p>\r\n\r\n<p>The size of one instance of the gradient is determined by the final colour stop, which means that you can&rsquo;t use percentages but must use absolute units (such as pixels) for the colour stops&rsquo; positions. If you&rsquo;d just use percentages, you wouldn&rsquo;t get a repeating gradient, because the first instance would fill up the whole element.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nbody {\r\n\tbackground-image: repeating-linear-gradient(\r\n\t\t  45deg,\r\n\t\t  transparent,\r\n\t\t  transparent 10px,\r\n\t\t  rgba(50,50,50,0.1) 10px,\r\n\t\t  rgba(50,50,50,0.1) 20px\r\n\t\t);\r\n}\r\n<\/pre>\r\n","slur":"css3-gradients","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Set a linear gradient?Use the value <code>linear-gradient(...)<\/code> on the <code>background-image<\/code> property@\r\n1?Set a radial gradient?Use the value <code>radial-gradient(...)<\/code> on the <code>background-image<\/code> property@\r\n1?Set a repeating linear gradient?Use the value <code>repeating-linear-gradient(...)<\/code> on the <code>background-image<\/code> property@\r\n1?Set a repeating radial gradient?Use the value <code>repeating-radial-gradient(...)<\/code> on the <code>background-image<\/code> property@\r\n0?Colour Stop?A position within the gradient where the colour changes@\r\n0?Gradient?A smooth transition between multiple colour stops@\r\n0?Radial Gradient?A gradient in the form of an ellipse that starts at its centre point@\r\n0?Linear Gradient?A gradient in the form of a line from one edge of an element to its opposite edge"},
{"id":"212","title":"[CSS3] Transforms","post":"<p>CSS supports a whole array of 2D and 3D transformations. This means that you can easily move, rotate, skew or scale an element in 2D or 3D space. It&rsquo;s all done with the <code>transform<\/code> property, which means that you can supply a lot of different values to it. But, before we start, there&rsquo;s one other important property to learn about.<\/p> \r\n\r\n<p>NOTE: Transform only changes the appearance of an element. Elements surrounding it will not see the difference, and will not adapt to a transformed element. For example, if you rotate an image, the text around it will still flow around it as if it were a regular rectangle.<\/p>\r\n\r\n<h2>Transform Origin<\/h2>\r\n\r\n<p>The <code>transform-origin<\/code> property determines the origin for all transforms you&rsquo;re going to apply to the element. The 2D version takes two numbers, <strong>x-position<\/strong> and <strong>y-position<\/strong>, as arguments. The default is <code>50% 50%<\/code>, which is the centre of the element, and is often what you want. But you can set it to, for example, <code>0 0<\/code> if you want to rotate something along the top left corner.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform-origin:50% 50%;\r\n}\r\n<\/pre>\r\n\r\n<p>A third value <em>can<\/em> be added for the <strong>z-position<\/strong> of the origin.<\/p>\r\n\r\n<h2>2D Transforms<\/h2>\r\n\r\n<p>When we speak of transforms, we always speak of the magic trio: translate, rotate and scale. You can change an element&rsquo;s position, rotation and size without changing the element itself. There is, however, a special addition with 2D transforms: skew (or shear). This does change an element&rsquo;s structure, as it only changes one half of the element, but is still seen as part of the transform family, because of its general usefulness.<\/p>\r\n\r\n<img src=\"media\/CSS3Transforms2D.png\" \/>\r\n\r\n<p>To apply multiple transforms, you need to separate them by a single <strong>white-space<\/strong>. You can apply as many as you like! Do keep in mind that the order in which you apply them matters.<\/p>\r\n\r\n<h5>Translate<\/h5>\r\n\r\n<p>Use <code><attr>translate(<\/attr><em>x,y<\/em><attr>)<\/attr><\/code> to move an element in both directions at once, or <code>translateX(<em>value<\/em>)<\/code> and <code>translateY(<em>value<\/em>)<\/code> to change them separately. The values can be any number.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform:translate(50px,-50px);\r\n}\r\n<\/pre>\r\n\r\n<h5>Rotate<\/h5>\r\n\r\n<p>Use <code><attr>rotate(<\/attr><em>angle<\/em><attr>)<\/attr><\/code>, where the angle can be any number with the unit <code>deg<\/code> (degrees).<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform: rotate(45deg);\r\n}\r\n<\/pre>\r\n\r\n<h5>Scale<\/h5>\r\n\r\n<p>Use <code><attr>scale(<\/attr><em>x-factor, y-factor<\/em><attr>)<\/attr><\/code>, where the factor is a number <em>without unit<\/em>, and 1 is the default scale.<\/p>\r\n\r\n<p>You can use <code>scaleX(<em>factor<\/em>)<\/code> and <code>scaleY(<em>factor<\/em>)<\/code> to apply the transform to separate dimensions.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform: scale(1.2,1.6);\r\n}\r\n<\/pre>\r\n\r\n<h5>Skew<\/h5>\r\n\r\n<p>Use <code><attr>skew(<\/attr><em>x-angle, y-angle<\/em><attr>)<\/attr><\/code>.<\/p>\r\n\r\n<p>There&rsquo;s also <code>skewX(<em>angle<\/em>)<\/code> and <code>skewY(<em>angle<\/em>)<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform: skew(45deg,-45deg);\r\n}\r\n<\/pre>\r\n\r\n<h2>3D Transforms<\/h2>\r\n\r\n<p>The most notable change is the fact that, in 3D space, there&rsquo;s a lot more interesting rotations possible. Instead of only a horizontal (x) and vertical (y) axis, we can also use the <strong>z-axis<\/strong>, which is the imaginary line coming straight out of the screen.<\/p>\r\n\r\n<img src=\"media\/CSS3Transforms3D.png\" \/>\r\n\r\n<p>For the other properties &ndash; except skew &ndash; there are equivalents for the z-axis:<\/p>\r\n\r\n<ul>\r\n\t<li>The <code>translateZ(<em>value<\/em>)<\/code> and <code>scaleZ(<em>value<\/em>)<\/code> values to move or scale in the Z-direction<\/li>\r\n\t<li>The shorthand <code>translate3d(<em>x, y, z<\/em>)<\/code> and <code>scale3d(<em>x, y, z<\/em>)<\/code> to set all the values at once.<\/li>\r\n<\/ul>\r\n\r\n<p>But, I don&rsquo;t see much use for transfering these concepts to 3D, so let&rsquo;s continue with the rotation part!<\/p>\r\n\r\n<h2>3D Rotations<\/h2>\r\n\r\n<p>Now that we&rsquo;ve got a 3D space going on, we can define rotations along all three axes.<\/p>\r\n\r\n<p>This is done with: <code><attr>rotateX(<\/attr><em>angle<\/em><attr>)<\/attr><\/code>, <code><attr>rotateY(<\/attr><em>angle<\/em><attr>)<\/attr><\/code> and <code><attr>rotateZ(<\/attr><em>angle<\/em><attr>)<\/attr><\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\ttransform: rotateX(45deg) rotateY(10deg) rotateZ(-45deg);\r\n}\r\n<\/pre>\r\n\r\n<p>There&rsquo;s also the shorthand <code>rotate3d(<em>x, y, z, angle<\/em>)<\/code>. Here, you set one angle (the fourth parameter), and the <em>x, y, z<\/em> values specify to what extent the axis is rotated by that angle.<\/p>\r\n\r\n<p>For example, <code>rotate3d(1,0,0,45)<\/code> rotates the x-axis by 45 degrees. I know, it seems more complicated than it should be.<\/p>\r\n\r\n<h2>3D World Settings<\/h2>\r\n\r\n<p>A webpage is 2D by default, which means 3D is a whole different beast, and requires you to make some decisions about what to do.<\/p>\r\n\r\n<p>The <code>transform-style<\/code> property determines what happens to the children of a transformed element. The default value is <code>flat<\/code>, which means that children are affected and taken into account, but you can set it to <code>preserve-3d<\/code> to let the children stay where they are.<\/p>\r\n\r\n<p>The <code>perspective<\/code> property determines how far away or close by <em>children<\/em> of the element are placed. This can be any number. The default is 0, which means there is no difference in depth and the element appears flat.<\/p>\r\n\r\n<p>The <code>perspective-origin<\/code> property sets the so-called <em>vanishing point<\/em> for this perspective. It takes two arguments, which represent the position on the <strong>x-axis<\/strong> and <strong>y-axis<\/strong>, respectively. These can be numbers, but you can also set them with those words you&rsquo;ve become familiar with by now: <em>left, center, right<\/em> for the x-axis, <em>top, center, bottom<\/em> for the y-axis.<\/p>\r\n\r\n<p>And finally, the <code>backface-visibility<\/code> property determines whether the back face of a 3D element, which you see if it&rsquo;s rotated, is visible. The default value is <code>visible<\/code>, but you can hide it with <code>hidden<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tbackface-visibility: hidden;\r\n\ttransform-style: flat;\r\n\tperspective: 50px;\r\n\tperspective-origin:50% 0;\r\n}\r\n<\/pre>\r\n","slur":"css3-transforms","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Move an element in 2D space?Use the value <code>translate(x,y)<\/code> on the <code>transform<\/code> property@\r\n1?Rotate an element in 2D space?Use the value <code>rotate(angle)<\/code> on the <code>transform<\/code> property@\r\n1?Resize an element in 2D space?Use the value <code>scale(x,y)<\/code> on the <code>transform<\/code> property@\r\n1?Skew an element in 2D space?Use the value <code>skew(x,y)<\/code> on the <code>transform<\/code> property@\r\n1?Move an element in 3D space?Use the value <code>translate3d(x,y,z)<\/code> on the <code>transform<\/code> property@\r\n1?Rotate an element in 3D space?Use the value <code>rotate3d(x,y,z,angle)<\/code> on the <code>transform<\/code> property@\r\n1?Resize an element in 3D space?Use the value <code>scale3d(x,y,z)<\/code> on the <code>transform<\/code> property@\r\n1?Rotate an element along its X axis?Use the value <code>rotateX(angle)<\/code> on the <code>transform<\/code> property@\r\n1?Change the centre of an element in 3D space?Use the <code>transform-origin<\/code> property@\r\n1?Hide the backface of an element in 3D space?Use the value <code>hidden<\/code> on the <code>backface-visibility<\/code> property@\r\n1?Make children ignore the 3D settings of its parent?Use the valie <code>preserve-3d<\/code> on the <code>transform-style<\/code> property"},
{"id":"213","title":"[CSS3] Transitions & Animations","post":"<p>Up until now, CSS has been quite harsh on our elements. It only allows exact values for its properties, and if you hover over something it immediately jumps to another set of rules. We sometimes want there to be a nice, fluid transition between states, and CSS has that covered as well!<\/p> \r\n\r\n<h2>Transitions<\/h2>\r\n\r\n<p>Using the <code>transition<\/code> property, we can specify a time-period over which to change certain properties. These properties are in the familiar comma-separated list.<\/p>\r\n\r\n<p>Such a transition can take four arguments, of which the first two are compulsory:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>property<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The property to create a transition for.<\/p>\r\n\r\n\t\t\t<p>Anything with numbers or colours can be animated.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>duration<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How long the transition takes to complete.<\/p>\r\n\r\n\t\t\t<p>Can be any positive number, with the unit <strong>s<\/strong> (seconds)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>timing-function<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How this time is distributed, takes an <strong>easing function<\/strong> as value.<\/p>\r\n\r\n\t\t\t<p>For example, you can set it to transition quickly the first half and then slow down the second half.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>delay<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How long it takes for the transition to start. Can be any positive number, with the unit <strong>s<\/strong>.<\/p>\r\n\r\n\t\t\t<p>Default is <strong>0s <\/strong>(transition starts immediately, which is often what you want).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"css\">\r\na {\r\n\ttransition: color 1s linear 0;\r\n}\r\n<\/pre>\r\n\r\n<p>You can also set any of these values for transition as a whole, instead of specifying them for every property individually. For this, you can use the properties:<\/p>\r\n<ul><li><code>transition-property<\/code><\/li><li><code>transition-duration<\/code><\/li><li><code>transition-timing-function<\/code><\/li><li><code>transition-delay<\/code><\/li><\/ul>\r\n\r\n<pre data-lang=\"css\">\r\na {\r\n\ttransition-property: color, transform;\r\n\ttransition-duration: 1s, 2s;\r\n\ttransition-timing-function: linear, ease-in;\r\n\ttransition-delay: 0s, 1s;\r\n}\r\n<\/pre>\r\n\r\n<h2>Easing Functions<\/h2>\r\n\r\n<p>An easing function is basically a graph, going from y=0% to y=100%. The way the graph goes (e.g., linear, parabolic), shows how fast or slow the transition is going at a certain moment in time.<\/p>\r\n\r\n<img src=\"media\/CSS3EasingFunctions.png\" \/>\r\n\r\n<p>These values are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ease<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Semi-fast start, fast middle, slow finish. Default value.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>linear<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same, constant speed from start to finish<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ease-in<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slow start, then constant speed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ease-out<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Constant speed, slow finish<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ease-in-out<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slow start, fast middle, slow finish.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cubic-bezier(<em>a,b,c,d<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Your own custom easing function, with numbers between 0 and 1 as input.<\/p>\r\n\r\n\t\t\t<p>Quite tricky to explain, but think of it as (a\/b) and (c\/d) being the slope of the easing graph at start and end point, respectively.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Animations<\/h2>\r\n\r\n<p>Animations take this concept one step further. You can define exactly what you want to happen, how, and when. Adding an animation to your element works in two steps: defining the animation, and calling the animation from the element.<\/p>\r\n\r\n<h2>Defining Animations<\/h2>\r\n\r\n<p>To define a single animation, we use the <code><attr>@keyframes<\/attr> &lt;namehere&gt;<\/code> selector. You can use any name you like, as long as it doesn&rsquo;t contain any special characters. Within the selector, you need to specify which styles you want applied at what time within the animation. This is, in theory, the same as with gradients &ndash; you define certain time stops where you set new styles, and the animation automatically makes the values fade into each other nicely.<\/p>\r\n\r\n<p>The syntax is <code><attr>&lt;percentage&gt; {<\/attr> <em>styles<\/em> <attr>}<\/attr><\/code>, where 0% is the start of the animation, and 100% the end.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n@keyframes coolAnimation {\r\n\t0% { color:blue; }\r\n\t50% { color:red; }\r\n\t100% { color:blue; }\r\n}\r\n<\/pre>\r\n\r\n<p>It&rsquo;s as simple as that! Now this general animation can be called from any element, which is what we&rsquo;ll look at next.<\/p>\r\n\r\n<h2>Running the Animations<\/h2>\r\n\r\n<p>This works roughly the same way as with transitions. You can set the properties:<\/p>\r\n\r\n<ul><li><code>animation-name<\/code><\/li><li><code>animation-duration<\/code><\/li><li><code>animation-timing-function<\/code><\/li><li><code>animation-delay<\/code><\/li><\/ul>\r\n\r\n<p>But, on top of that, some extra properties exist:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description &amp; Values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>animation-direction<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines how the animation is played.<\/p>\r\n\r\n\t\t\t<p><code>normal<\/code> is the default value (0% =&gt; 100%)<\/p>\r\n\r\n\t\t\t<p><code>reverse<\/code> plays the animation in reverse (100% =&gt; 0%)<\/p>\r\n\r\n\t\t\t<p><code>alternate<\/code> switches between normal and reverse<\/p>\r\n\r\n\t\t\t<p><code>alternate-reverse<\/code> switches between reverse and normal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>animation-fill-mode<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines styles to apply to an element with an animation when it isn&rsquo;t being played.<\/p>\r\n\r\n\t\t\t<p><code>none<\/code> is the default value<\/p>\r\n\r\n\t\t\t<p><code>forwards<\/code> means that after the animation ends, the element keeps the last property values provided<\/p>\r\n\r\n\t\t\t<p><code>backwards<\/code> means that it already takes on the property values of the first time stop of the next iteration (in case the animation is paused or delayed).<\/p>\r\n\r\n\t\t\t<p><code>both<\/code> means that both <em>forwards<\/em> and <em>backwards<\/em> apply.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>animation-iteration-count<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How often to play the animation<\/p>\r\n\r\n\t\t\t<p>Takes any positive number, without unit.<\/p>\r\n\r\n\t\t\t<p>Setting it to <code>infinite<\/code> keeps the animation playing forever and ever.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>animation-play-state<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Whether the animation is running or not.<\/p>\r\n\r\n\t\t\t<p><code>running<\/code> is the default value, which means that as soon as the element is loaded the animation starts<\/p>\r\n\r\n\t\t\t<p><code>paused<\/code> means it is paused, and you can decide for yourself when you start it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"css\">\r\na:hover {\r\n\tanimation-name:coolAnimation;\r\n\tanimation-duration:0.5s;\r\n\tanimation-timing-function:ease-out;\r\n\tanimation-direction:alternate;\r\n\tanimation-iteration-count:infinite;\r\n\tanimation-play-state:running;\r\n}\r\n<\/pre>\r\n\r\n<p>If that&rsquo;s a bit much for you, you can always set all of these at the same time in the <code>animation<\/code> shorthand property.<\/p>\r\n","slur":"css3-transitions-animations","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Automatically provide a smooth animation for changing values on certain properties?Use the <code>transition<\/code> property@\r\n1?Change the time it takes to perform a transition?Use the <code>transition-duration<\/code> property@\r\n1?Set the property to change using a transition?Use the <code>transition-property<\/code> property@\r\n1?Delay a transition?Use the <code>transition-delay<\/code> property@\r\n1?Make an animation ease in and out?Use the value <code>ease-in-out<\/code> on the <code>animation-timing-function<\/code> property@\r\n1?Let an animation have constant speed?Use the value <code>linear<\/code> on the <code>animation-timing-function<\/code> property@\r\n1?Define an animation?Use the <code>&commat;keyframes animationName<\/code> selector@\r\n1?Call an animation on an element?Use the <code>animation-name<\/code> property@\r\n1?Define a change halfway through an animation?Use the <code>50%<\/code> selector within a <code>&commat;keyframes<\/code> selector@\r\n1?Make an animation loop forever?Set the value <code>infinite<\/code> on the <code>animation-iteration-count<\/code> property"},
{"id":"214","title":"[CSS3] Responsive Design","post":"<p>I&rsquo;ve mentioned the word several times already, but now that you&rsquo;ve got all this basic (and advanced) CSS knowledge, we can finally take a peek into the world of responsive design. It&rsquo;s a large world, with lots of different ways to do lots of different things, but I will explain to you the fundamental concepts (and mostly properties) that play a role.<\/p> \r\n\r\n<p>Responsive design is design that adapts to different viewport sizes. It changes the layout depending on the room it has to display it. Websites that simply scale all elements to fit to different screen sizes, I like to call semi-responsive. It&rsquo;s a good idea, but a certain moment elements are just going to be too small to read. That&rsquo;s why there&rsquo;s an extra component to responsive design, which takes care of showing or hiding elements, and their placement on the page.<\/p>\r\n\r\n<p><img src=\"media\/CSS3ResponsiveDesign.png\" \/><\/p>\r\n\r\n<p>There&rsquo;s three different parts you&rsquo;ll need to look at: HTML viewport settings, creating a fundamentally flexible CSS design, and writing different style sheets for specific sizes and devices.<\/p>\r\n\r\n<h2>HTML Viewport<\/h2>\r\n\r\n<p>HTML5 introduced a new attribute for the <code>&lt;meta&gt;<\/code> tag, which is <code><attr>name<\/attr>=&rdquo;viewport&rdquo;<\/code>. Within the <code>content<\/code> attribute, you can set how you want devices to interpret your page when it comes to the scaling of elements.<\/p>\r\n\r\n<p>If this tag isn&rsquo;t used, browsers will downscale websites to fit all content on tiny screens. This is okay, because the user can zoom in and view everything, but isn&rsquo;t really preferred.<\/p>\r\n\r\n<p>To prevent this behaviour, set the value of the content attribute to <code>width=device-width;initial-scale:1.0;<\/code><\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;meta name=&#x22;viewport&#x22; content=&#x22;width:device-width;initial-scale:1.0;&#x22;&#x3E;\r\n<\/pre>\r\n\r\n<h2>Flexible CSS<\/h2>\r\n\r\n<p>For this, the <strong>flexbox<\/strong> environment and <strong>multicolumn<\/strong> layout were invented, which is what next chapters are all about.<\/p>\r\n\r\n<h2>Multiple style sheets<\/h2>\r\n\r\n<p>Using so-called <strong>media queries<\/strong> you can specify when to use a certain style sheet. For example, if the viewport width is smaller than 500 pixels, you could completely change the layout to accommodate for that lack of space or different aspect ratio. After the flexible CSS chapters, the last chapter of the course is about this. Then, you can finally say you know everything that is CSS!<\/p>\r\n","slur":"css3-responsive-design","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":""},
{"id":"215","title":"[CSS3] Flexbox","post":"<p>Brace yourself, because this is going to be a long one, and all of it&rsquo;s important.<\/p> \r\n\r\n<p>A flexbox is a flexible box. You can tell an element to become a flexbox, and all children within it will become so-called flex items. From that moment on, everything inside the container will automatically adapt to changes, and there&rsquo;s a lot of properties you can use to specify <em>how<\/em> it adapts.<\/p>\r\n\r\n<h2>Creating a Flexbox<\/h2>\r\n\r\n<p>You convert an element into a flexbox by using <code><attr>display<\/attr>:flexbox<\/code> or <code><attr>display<\/attr>:inline-flexbox<\/code>, depending on whether you want it to be block level or inline. All its <em>direct children<\/em> (elements that have this flexbox element as their parent) automatically become flex items.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#mainContainer {\r\n\tdisplay:flex;\r\n}\r\n#mainContainer > div {\r\n\t\/* This is automatically a flex-item *\/\r\n}\r\n#mainContainer div div {\r\n\t\/* This is not *\/\r\n}\r\n<\/pre>\r\n\r\n<h2>Settings for the Container Element<\/h2>\r\n\r\n<p>Let&rsquo;s start by discussing the properties you can use on the container element, the one that you converted to a flexbox. These properties determine how all flex items are distributed throughout the container.<\/p>\r\n\r\n<h5>Direction<\/h5>\r\n\r\n<p>The <code>flex-direction<\/code> property establishes the main axis &ndash; the direction in which all elements will be laid out.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxDirection.png\" \/>\r\n\r\n<p>Its values are <code>row<\/code> (left to right), <code>row-reverse<\/code> (right to left), <code>column<\/code> (top to bottom), and <code>column-reverse<\/code> (bottom to top).<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tflex-direction:row;\r\n}\r\n<\/pre>\r\n\r\n<h5>Wrap<\/h5>\r\n\r\n<p>By default, flexbox will try to fit all flex items into one row\/column. The <code>flex-wrap<\/code> property can change that.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxWrap.png\" \/>\r\n\r\n<p>The default value is <code>nowrap<\/code>. To make it wrap &ndash; that is, start a new row if it doesn&rsquo;t have any space anymore to place the next flex item &ndash; use the <code>wrap<\/code> value. Use <code>wrap-reverse<\/code> if you want flex items ordered right to left.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tflex-wrap:wrap;\r\n}\r\n<\/pre>\r\n\r\n<h5>Justifying Content<\/h5>\r\n\r\n<p>Just as text can be aligned, flex items can also be aligned in all sorts of ways. The <code>justify-content<\/code> property handles this.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxJustify.png\" \/>\r\n\r\n<p>The possible values are:<\/p>\r\n\r\n<ul>\r\n\t<li><code>flex-start<\/code>: items are floated towards the start line<\/li>\r\n\t<li><code>flex-end<\/code>: items are floated towards the end line<\/li>\r\n\t<li><code>center<\/code>: items are centred<\/li>\r\n\t<li><code>space-between<\/code>: the first item is floated towards the start line, the last item towards the end line, and the space in between is distributed evenly among the flex items<\/li>\r\n\t<li><code>space-around<\/code>: all flex items have an equal amount of space around it<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tjustify-content: space-between;\r\n}\r\n<\/pre>\r\n\r\n<h5>Aligning Content<\/h5>\r\n\r\n<p>I know, <code>align-content<\/code> seems as if this is the exact same thing as the previous property. But, this actually determines the alignment of the cross axis; the one perpendicular to the direction axis.<\/p>\r\n\r\n<p>For example: if you set the direction to row, justify-content determines the horizontal alignment, but align-content determines the vertical alignment.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxAlignContent.png\" \/>\r\n\r\n<p>It takes the same values, plus an additional one: <code>stretch<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\talign-content: stretch;\r\n}\r\n<\/pre>\r\n\r\n<h5>Aligning Items<\/h5>\r\n\r\n<p><em>What? Again?<\/em> No, this one is more specific. The <code>align-items<\/code> property doesn&rsquo;t determine how a complete row or column is aligned, but how items are laid out individually, relative to each other.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxAlignItems.png\" \/>\r\n\r\n<p>The values it takes are<\/p>\r\n\r\n<ul>\r\n\t<li><code>flex-start<\/code>: the top of every item is pushed against the top of the cross-axis<\/li>\r\n\t<li><code>flex-end<\/code>: the bottom of every item is pushed against the bottom of the cross-axis<\/li>\r\n\t<li><code>center<\/code>: all items are aligned at their own centre point<\/li>\r\n\t<li><code>baseline<\/code>: items are aligned in such a way that their baselines (imaginary line that all text sits on) align<\/li>\r\n\t<li><code>stretch<\/code>: stretch them all to fill the container. The default value.<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\talign-items: flex-end;\r\n}\r\n<\/pre>\r\n\r\n<h2>Settings for the Flex Items<\/h2>\r\n\r\n<p>All these properties for all items as a whole are great, but we often want some elements to have a unique size or position. You should, therefore, think of these properties as overriding the main behaviour. First you set the main properties on your whole flexbox, and then you start tweaking them for some individual flex items &ndash; not the other way around.<\/p>\r\n\r\n<h5>Basic Size<\/h5>\r\n\r\n<p>The <code>flex-basis<\/code> property determines the basic size of a flex item. The default value is <code>auto<\/code>, which means it scales to fit the flex container, or looks at the width\/height properties if you&rsquo;ve set those. If you set it to 0, it only scales to fit the content. If you supply it any other number, it will make it that long on the main axis (so it influences width if the flexbox is set to row, and height if set to column).<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxBasis.png\" \/>\r\n\r\n<pre data-lang=\"css\">\r\n#specialDiv {\r\n\tflex-basis: 200px;\r\n}\r\n<\/pre>\r\n\r\n<h5>Growing and Shrinking<\/h5>\r\n\r\n<p>When the remaining space is distributed, that space can be positive or negative. Positive space means we have some space left over and could scale some items to fill it, while negative space means we&rsquo;re taking up too much space and need to reduce the size of some items.<\/p>\r\n\r\n<p>For the first case, we have <code>flex-grow<\/code>, and for the second there&rsquo;s <code>flex-shrink<\/code>.<\/p>\r\n\r\n<img src=\"media\/CSS3FlexboxGrowShrink.png\" \/>\r\n\r\n<p>They both accept a factor &ndash; a number with no unit. The default is 1, which means an item simply stays at the same scale.<\/p>\r\n\r\n<p>NOTE: Because it&rsquo;s a factor, it doesn&rsquo;t say exactly how much something can or will scale, but rather how much space it receives or loses relative to the other flex items.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#bigDiv {\r\n\tflex-grow: 2;\r\n}\r\n#smallDiv {\r\n\tflex-shrink: 3;\r\n}\r\n<\/pre>\r\n\r\n<h5>Overriding Alignment<\/h5>\r\n\r\n<p>If you want a single flex item to be aligned differently than is determined in the general <code>align-items<\/code> property, you need to use the <code>align-self<\/code> property, which takes the same values.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#weirdDiv {\r\n\talign-self: flex-start;\r\n}\r\n<\/pre>\r\n\r\n<h5>Order<\/h5>\r\n\r\n<p>And finally, if you want the items to appear in a different order than you specified in the HTML, you can use the <code>order<\/code> property. Its value is an integer &ndash; a ranking number with no unit, so to speak. This can be negative as well, if you want.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n#weirdDiv {\r\n\torder: 5;\r\n}\r\n#firstDiv {\r\n\torder: -10;\r\n}\r\n<\/pre>\r\n\r\n<p><em>Why wouldn&rsquo;t I just put elements in the correct order in the source?<\/em> Well, for example, the homepage of this website uses a flexbox with the order property randomly determined to get a different front page every time you visit! There could also be semantic reasons you&rsquo;d want the HTML elements to be in a certain order, but the layout in another.<\/p>\r\n","slur":"css3-flexbox","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Start a Flexbox?Set the value <code>flex<\/code> on the <code>display<\/code> property@\r\n1?Change the direction of flex items?Set the <code>flex-direction<code> property@\r\n1?Make flex items (that are too wide) automatically start on a new line?Use the <code>flex-wrap<\/code> property@\r\n1?Align flex items on the same line?Use the <code>justify-content<code> property@\r\n1?Align the whole group of flex items?Use the <code>align-content<\/code> property@\r\n1?Align flex items relative to each other?Use the <code>align-items<\/code> property@\r\n1?Set the standard size of a flex item?Use the <code>flex-basis<\/code> property@\r\n1?Allow a flex item to get bigger, if space is available?Use the <code>flex-grow<\/code> property@\r\n1?Force a flex item to get smaller, if space is restricted?Use the <code>flex-shrink<\/code> property@\r\n1?Change the order in which flex items are layout?Set the <code>order<\/code> property@\r\n1?Override default alignment on a particular element?Set the <code>align-self<\/code> property"},
{"id":"216","title":"[CSS3] Multicolumn","post":"<p>Another type of flexible environment, which can be used specifically for text, is the <strong>multi-column<\/strong> layout. It&rsquo;s a layout that is somehow very popular in print, but &ndash; until recently &ndash; not at all on the web. A good reason for this could be because it was hard to implement it, and that bottleneck seems to disappear with these new multi-column properties. Don&rsquo;t worry, it&rsquo;s not as difficult and large as flexbox.<\/p> \r\n\r\n<img src=\"media\/CSS3MultiColumn.png\" \/>\r\n\r\n<h2>Declaring columns<\/h2>\r\n\r\n<p>You can make any block level element a column layout. This is done with the <code>columns<\/code> property, which takes two values: <code>column-count<\/code> and <code>column-width<\/code>. You can set these properties individually if you like, but it&rsquo;s always recommended to set them both using the shorthand.<\/p>\r\n\r\n<h5>Column Count<\/h5>\r\n\r\n<p>Sets the amount of columns. No matter how wide the element is, that amount of columns is used, and all columns are scaled to make it fit. Takes an <strong>integer<\/strong> (without unit) as a value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumn-count:5;\r\n}\r\n<\/pre>\r\n\r\n<h5>Column Width<\/h5>\r\n\r\n<p>The other way to do it, is by setting a fixed column width and letting that decide how many columns should be used. It takes any <strong>number<\/strong> as a value, and all columns will always be that width.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumn-width:500px;\r\n}\r\n<\/pre>\r\n\r\n<h2>The Shorthand Property<\/h2>\r\n\r\n<p>Now why is it recommended to set them both? Because then things become responsive! If&nbsp;both are set, column-width only determines the <em>minimum<\/em> width, and column-count the <em>maximum<\/em> amount of columns.<\/p>\r\n\r\n<p>If you then resize your browser window, it will remove or add columns based on how much space there is &ndash; and that is what you want.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumns:500px 5;\r\n}\r\n<\/pre>\r\n\r\n<h2>Column Gap<\/h2>\r\n\r\n<p>The <code>column-gap<\/code> property determines the amount of white space between two columns. The default values is 1em, and it takes any non-negative number as value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumn-gap:20px;\r\n}\r\n<\/pre>\r\n\r\n<h2>Column Rule<\/h2>\r\n\r\n<p>The <code>column-rule<\/code> property allows you to add a <em>border<\/em> in that column gap. It, therefore, also uses the same syntax as borders, and can also be set individually with <code>column-rule-width<\/code>, <code>column-rule-style<\/code> and <code>column-rule-color<\/code>.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumn-rule:1px solid #CCC;\r\n}\r\n<\/pre>\r\n\r\n<h2>Column Span<\/h2>\r\n\r\n<p>And finally, the <code>column-span<\/code> property allows you to break elements out of the column flow. The default value is <code>1<\/code>, which means that any element within the column environment spans one column only. The only other value it can have is <code>all<\/code>, which means that the element is moved downwards to be able to span across all columns, and then the column layout continues again. Mostly useful for headings or pictures within a column environment.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\ndiv {\r\n\tcolumns: 200px 3;\r\n}\r\ndiv h1 {\r\n\tcolumn-span:all;\r\n}\r\n<\/pre>\r\n","slur":"css3-multicolumn-layout","cat":"Website","subcat":"CSS3","video":"","diff":"2","quiz":"1?Declare maximum amount of columns and minimum width of column at the same time?Use the shorthand <code>columns<\/code> property@\r\n1?Set the width of each column?Use the <code>column-width<\/code> property@\r\n1?Set the amount of columns?Use the <code>column-count<\/code> property@\r\n1?Set a margin between columns?Use the <code>column-gap<\/code> property@\r\n1?Add a border between columns?Use the <code>column-rule<\/code> property"},
{"id":"217","title":"[CSS3] Counters & Filters","post":"<p>Counters and filters are completely unrelated, but they are too small to give their own chapter. They aren&rsquo;t used often at all, but sometimes they are <em>exactly<\/em> what you need, and they can simplify your life quite a bit.<\/p> \r\n\r\n<h2>Counters<\/h2>\r\n\r\n<p>Counters are variables maintained by CSS. You can ask CSS to count how often it finds an element, and display that information somewhere. It&rsquo;s often used to create fancy numbered lists, or to dynamically number pages or slides on a website. It can only be used with the <code>::before<\/code> and <code>::after<\/code> pseudo-elements.<\/p>\r\n\r\n<p>The <code>counter-reset<\/code> property <em>sets<\/em> as well as <em>resets<\/em> a counter. It takes any name you want to give it as value. As always, no special characters are allowed in that name. From the first moment you use this property, CSS can use that name as variable, and it&rsquo;s only reset once you call it again.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nul {\r\n\tcounter-reset:coolCounter;\r\n}\r\n<\/pre>\r\n\r\n<p>The <code>counter-increment<\/code> property adds to the counter. If you only supply the counter name, it increments it with 1. If you add a value after it, it adds that value.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nli {\r\n\tcounter-increment:coolCounter;\r\n}\r\n.evenList li {\r\n\tcounter-increment:coolCounter 2;\r\n}\r\n<\/pre>\r\n\r\n<p>Now, to display the value of the counter at the moment this element is evaluated, use <code><attr>counter(<\/attr>&lt;counter name&gt;<attr>)<\/attr><\/code>. Remember, therefore, that the order of all these CSS declarations is important. Also remember that you need to supply this value to the <code>content<\/code> property, because we're working with before and after pseudo-elements.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nli::before {\r\n\tcontent:counter(coolCounter);\r\n}\r\n<\/pre>\r\n\r\n<p>For <strong>subsections<\/strong>, use <code><attr>counters(<\/attr>&lt;counter name&gt;, &lt;separator&gt;<attr>)<\/attr><\/code> to get all instance of your counter, added together using the separator. This can be useful, for example, if you have a list within a list.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nli::before {\r\n\tcontent: counter(coolCounter, \".\");\r\n}\r\n<\/pre>\r\n\r\n<h2>Filters<\/h2>\r\n\r\n<p>Filters can be used on an image, and it is exactly what it sounds like. You can use the <code>filter<\/code> property on an image to add a nice filter to it, and you can give it these values:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>blur(<em>px<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Blurs the image the amount of pixels specified.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>brightness(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adjusts the brightness.<\/p>\r\n\r\n\t\t\t<p>0% will make the image completely black<\/p>\r\n\r\n\t\t\t<p>100% is default and shows the original image<\/p>\r\n\r\n\t\t\t<p>Greater than 100% will make the image brighter ( = whiter).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>contrast(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adjusts the contrast.<\/p>\r\n\r\n\t\t\t<p>0% will make the image completely black<\/p>\r\n\r\n\t\t\t<p>100% is default and shows the original image<\/p>\r\n\r\n\t\t\t<p>Greater than 100% will reduce contrast<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>drop-shadow(<em>x y<br\/> blur spread colour<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Applies a drop shadow, exactly like the CSS property <code>box-shadow<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>grayscale(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Converts the image to grayscale. Negative values are not allowed.<\/p>\r\n\r\n\t\t\t<p>0% is default and represents the original image<\/p>\r\n\r\n\t\t\t<p>100% will make the image completely grey.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>hue-rotate(<em>deg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Applies a hue rotation to the image. This simply means that all colours are shifted a certain amount of degrees around the famous colour circle.<\/p>\r\n\r\n\t\t\t<p>0deg is default and shows the original image, 360deg is the maximum value.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>invert(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inverts the image. Negative values are not allowed.<\/p>\r\n\r\n\t\t\t<p>0% is default and shows the original image<\/p>\r\n\r\n\t\t\t<p>100% will make the image completely inverted.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>opacity(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets the opacity for the image, just like the CSS <code>opacity<\/code> property.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>saturate(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Saturates the image (makes colours more pure and less grey). Negative values are not allowed.<\/p>\r\n\r\n\t\t\t<p>0% makes the image completely unsaturated (&ldquo;dull&rdquo;)<\/p>\r\n\r\n\t\t\t<p>100% is default and shows the original image<\/p>\r\n\r\n\t\t\t<p>Greater than 100% shows a supersaturated image (&ldquo;bright&rdquo;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>sepia(<em>%<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Converts the image to sepia. Negative values are not allowed.<\/p>\r\n\r\n\t\t\t<p>0% is default and shows the original image<\/p>\r\n\r\n\t\t\t<p>100% will make the image completely sepia.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>none<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Default value. Sets no filter.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>You can use <strong>multiple filters<\/strong>! As long as you separate them with a white-space.<\/p>\r\n\r\n<pre data-lang=\"css\">\r\nimg {\r\n\tfilter: sepia(50%) hue-rotate(10deg);\r\n}\r\n<\/pre>\r\n","slur":"css3-counters-filters","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Create your own counter?Use the <code>counter-reset<\/code> property@\r\n1?Increase the value of a counter?Use the <code>counter-increment<\/code> property@\r\n1?Increase the value of a counter by 4?Use the value <code>counterName 4<\/code> on the <code>counter-increment<\/code> property@\r\n1?Access a the value of a counter?Use the value <code>counter(counterName)<\/code> on the <code>content<\/code> property@\r\n1?Add multiple filters to an element?Seperate filter declarations by a single white space@\r\n1?Blur an element by 4 pixels?Use the value <code>blur(4px)<\/code> on the <code>filter<\/code> property@\r\n1?Make an element completely grey?Use the value <code>greyscale(100%)<\/code> on the <code>filter<\/code> property"},
{"id":"218","title":"[CSS3] Media Queries","post":"<p>Even if you&rsquo;ve done everything you can to make your CSS flexible and scalable, it&rsquo;s possible some things don&rsquo;t work out. If that is the case, you have one last option to resort to: media queries. You check the type of media and the size of the viewport, and apply a different or extra style sheet for it. Of course, writing such a statement for <em>every<\/em> possible device is tedious, which means most people group them using max-width and min-width features.<\/p> \r\n\r\n<p>A media query always has the following syntax:<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n@media mediatype and (media feature) {\r\n    \/* Your CSS Code *\/\r\n}\r\n<\/pre>\r\n\r\n<p>As you can see, we query the media with <code>@media<\/code>, use a few special selectors, and then write CSS selectors and declarations like we&rsquo;re used to.<\/p>\r\n\r\n<p>You could, if you want, write these CSS rules in a separate file and link to it using the HTML <code>&lt;link&gt;<\/code> tag in the head of your page:<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;link rel=&#x22;stylesheet&#x22; media=&#x22;mediatype and|not|only (media feature)&#x22; href=&#x22;myspecialstylesheet.css&#x22;&#x3E;\r\n<\/pre>\r\n\r\n<p>I must admit I&rsquo;ve never used that, but if your style sheets get really large, it might be a wise thing to do.<\/p>\r\n\r\n<h2>Media Types<\/h2>\r\n\r\n<p>There&rsquo;s 4 different media types you can apply:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Media Type<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>all<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects all media types<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>print<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects printers<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>speech<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects screen reader that read the page out loud.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>screen<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Selects everything else &ndash; that is, everything that has a screen. Computers, tablets, smartphones, etcetera.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>As you might have guessed, the <strong>all<\/strong> and <strong>screen <\/strong>keywords are used most often.<\/p>\r\n\r\n<h2>Media Features<\/h2>\r\n\r\n<p>There are <em>a lot<\/em> of values for this one, but I&rsquo;ll focus on the most important ones.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Media Feature<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The ratio between the width and height of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for aspect ratio of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for aspect ratio of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>device-aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The ratio between the width and height of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-device-aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for aspect ratio of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-device-aspect-ratio<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for aspect ratio of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Height of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for the height of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for the height of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>device-height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Height of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-device-height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for the height of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-device-height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for the height of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Width of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for the width of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for the width of the <em>viewport<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>device-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Width of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>max-device-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Upper bound for the width of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min-device-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lower bound for the width of the <em>device<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>orientation<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The orientation of the viewport or device.<\/p>\r\n\r\n\t\t\t<p>The only possible values are <strong>landscape<\/strong> (horizontal) and <strong>portrait <\/strong>(vertical).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Just to give you an idea, this is a media query I use for this website:<\/p>\r\n\r\n<pre data-lang=\"css\">\r\n@media screen and (max-width:1580px) {\r\n\t\/* CSS Code here *\/\r\n}\r\n<\/pre>\r\n","slur":"css3-media-queries","cat":"Website","subcat":"CSS3","video":"","diff":"3","quiz":"1?Specify styles for a screen of at least 1280 pixels?Use the <code>&commat;media all and (min-width:1280px)<\/code> selector@\r\n1?Specify styles for a screen of at most 1280 pixels?Use the <code>&commat;media all and (max-width:1280px)<\/code> selector@\r\n1?Specify styles for a mobile screen that is held horizontally?Use the <code>&commat;media screen and (orientation:landscape)<\/code> selector"},
{"id":"219","title":"[CSS3] Conclusion: what now?","post":"<p>Pfew, that was a long journey into the world of CSS, but you&rsquo;ve seen, touched and tasted it all. Still, it was very quick and bare bones, and the only way to get comfortable with how everything works is by experimenting and building projects.<\/p> \r\n\r\n<p>Using HTML5 and CSS3 knowledge, you can build a very beautiful and well-structured website. You can try to build your own homepage now, or a blog, or anything you like. But, you&rsquo;ll soon run into some problems, which is that you can&rsquo;t really make your websites dynamic. Yes, you can add an animation when somebody hovers over a button &ndash; but how do you make the button do something when the user clicks on it?<\/p>\r\n\r\n<p>That&rsquo;s what JavaScript is for. It&rsquo;s a scripting language &ndash; the name does give it away a little &ndash; that adds interaction and dynamic to your website. You can do virtually anything with it, and I recommend you learn that now. Just as CSS, it has its own syntax and whole set of rules and basic concepts, but was made to work and integrate perfectly with CSS and HTML, which makes things easier.<\/p>\r\n\r\n<p>However, if you want to learn how to save websites on a server, and upload and load data from it (like blog posts, your own files, portfolio images), you&rsquo;re better off learning PHP now.<\/p>\r\n\r\n<p>Either way, I think in the end you want to master both, and it&rsquo;s up to you where you want to start. The web is a wonderful place, but if you really want to know what&rsquo;s behind it, and create your own wonderful projects from scratch, there&rsquo;s some work to be done ;) Have fun!<\/p>\r\n\r\n<p>NOTE (last one, I promise): CSS3 is constantly evolving. I recommend checking MDN once in a while to see what&rsquo;s new, what&rsquo;s in, and what&rsquo;s out. Sometimes features become deprecated and are removed from browsers, other times an amazing new idea is adopted by all browsers within mere months.<\/p>\r\n","slur":"css3-conclusion-what-now","cat":"Website","subcat":"CSS3","video":"","diff":"4","quiz":""},
{"id":"220","title":"Complete JavaScript Course","post":"<p>Unlike HTML and CSS, JavaScript is actually a programming language capable of performing all sorts of functions. You can use it to perform math operations, dynamically create a web page, receive data from servers in real-time, create browser games, and much more. But, unlike languages like C and Java that most software is created with, it is made specifically for browsers and doesn&rsquo;t need to be <em>compiled<\/em>. It&rsquo;s therefore often called a <strong>scripting language<\/strong>, which simply means that you can just type a script inside an HTML page with a regular text editor, and it will execute without hesitation. If, of course, your script has no errors.<\/p> \r\n\r\n<p>It therefore doesn&rsquo;t require a change of tools, with respect to writing HTML and CSS code, but rather a change of mind-set. Programming languages are <em>very<\/em> different from markup or stylesheet languages. They offer more freedom and possibilities, but have the side effect of creating more errors and increasing the difficulty. Nevertheless, JavaScript is simple enough to be understood in mere days, and a lot of experimentation with it will make you a master in no time.<\/p>\r\n\r\n<p>This course will first show you how to include JavaScript within a page, the global workings of programming statements, and how to debug and see what&rsquo;s going on using your browser. Those are the most important things to understand completely. With that out of the way, I&rsquo;ll continue by introducing new concepts every chapter until we&rsquo;ve seen it all. Most of this course is about the core of JS, the inner workings and principles, which means you&rsquo;ll only get to see how to use it to influence the actual webpage about mid-way through the course. Be patient, and you will be rewarded.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Including with HTML<\/li>\r\n\t<li>Basic Syntax<\/li>\r\n\t<li>Debugging<\/li>\r\n\t<li>Data Types<\/li>\r\n\t<li>Variables<\/li>\r\n\t<li>Numbers<\/li>\r\n\t<li>Math<\/li>\r\n\t<li>Strings<\/li>\r\n\t<li>String Manipulation<\/li>\r\n\t<li>Functions<\/li>\r\n\t<li>Arrays I<\/li>\r\n\t<li>Arrays II<\/li>\r\n\t<li>Objects<\/li>\r\n\t<li>Scope<\/li>\r\n\t<li>Classes<\/li>\r\n\t<li>Booleans &amp; Comparisons<\/li>\r\n\t<li>Conditions<\/li>\r\n\t<li>Control Flow &amp; Error Handling<\/li>\r\n\t<li>Loops I<\/li>\r\n\t<li>Loops II<\/li>\r\n\t<li>JSON<\/li>\r\n\t<li>DOM<\/li>\r\n\t<li>BOM I<\/li>\r\n\t<li>BOM II<\/li>\r\n\t<li>Events<\/li>\r\n\t<li>Regular Expressions<\/li>\r\n\t<li>Dates<\/li>\r\n\t<li>Best Practices<\/li>\r\n\t<li>Conclusion: What now?<\/li>\r\n<\/ol>\r\n\r\n","slur":"complete-javascript-course","cat":"Website","subcat":"JavaScript","video":"","diff":"1","quiz":""},
{"id":"221","title":"[JavaScript] Including with HTML","post":"<p>JavaScript can be written within the HTML page itself (internal), or in a separate file that you link to (external). Either way, the existence of JS is signalled with the <code>&lt;script&gt;<\/code> element. I recommend always writing your JS in an external file, for two reasons: it is saved (<em>cached)<\/em> by the user&rsquo;s browser, and the same code can easily be re-used across multiple files.<\/p> \r\n\r\n<h2>Internal<\/h2>\r\n\r\n<p>Simply write all your code as the content of the <code>&lt;script&gt;<\/code> element.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;script&#x3E;\r\n&#x9;\/* JavaScript Code Here *\/\r\n&#x3C;\/script&#x3E;\r\n<\/pre>\r\n\r\n<h2>External<\/h2>\r\n\r\n<p>First, write all your code in a separate text file, and save it with the extension <code>.js<\/code>. To link to it, leave the <code>&lt;script&gt;<\/code> element empty, and include the attribute <code><attr>src<\/attr>=&rdquo;linktofile.js&rdquo;<\/code><\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;script src=&#x22;\/path\/to\/file.js&#x22;&#x3E;&#x3C;\/script&#x3E;\r\n<\/pre>\r\n\r\n<h2>Placement<\/h2>\r\n\r\n<p>Theoretically, you can place this tag anywhere within your document. But, the cleanest method is placing it somewhere in the <code>&lt;head&gt;<\/code> tag. Not only does it keep your body clean and organized, it also ensures the script is loaded before the rest of the webpage, which minimizes the chance of running into problems.<\/p>\r\n\r\n<p>Of course, because scripts are essentially just HTML tags inside the web page, you can include as many as you like.<\/p>\r\n\r\n<h2>Execution<\/h2>\r\n\r\n<p>If you place your code within the body, it is automatically executed when the page is loading that script tag. If you use an external file, you&rsquo;ll need to call whatever part you want executed from the HTML document, either automatically or when the user performs a certain action. We&rsquo;ll soon see how to do this. Remember this, if you&rsquo;re ever wondering why nothing&rsquo;s happening!<\/p>\r\n","slur":"javascript-including-HTML","cat":"Website","subcat":"JavaScript","video":"","diff":"1","quiz":""},
{"id":"222","title":"[JavaScript] Basic Syntax","post":"<p>A programming language works by executing statements in a certain order. Therefore, generally speaking, everything you write is either a statement, or determines which statements to execute and when.<\/p> \r\n\r\n<p>JavaScript always reads statements in the same code block from top to bottom. To signal the end of one statement, you must always append a semicolon (<strong> ; <\/strong>). The parts that are not statements do not need to end with a semicolon, but have their own way of opening and closing itself &ndash; usually braces ( <strong>{ }<\/strong> ).<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsomestatement;\r\nanotherstatement;\r\n\r\nnotSomeStatement {\r\n\t\/* Code block here... *\/\r\n}\r\n<\/pre>\r\n\r\n<p>Statements can either <strong>declare<\/strong> a variable, or <strong>assign<\/strong> a value to a variable (or both at the same time). Once we look at variables, you&rsquo;ll see that you can assign fixed values as well as other variables. That&rsquo;s great and all, but that doesn&rsquo;t add any practical value, because you&rsquo;re just calculating and saving things &ndash; not even displaying anything on the screen.<\/p>\r\n\r\n<p>Therefore, statements in JavaScript can also <strong>change<\/strong> elements of a webpage or <strong>call<\/strong> functions. This way you can, for example, change the background colour, or request information from a server when the user clicks a button.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Example: changing the text colour of the element with id someId to white\r\ndocument.getElementById(\"someId\").style.color = 'white';\r\n<\/pre>\r\n\r\n<p>The other parts determine, mostly by using logical operators to compare values, when to use certain parts of the code. For example, you could create a button that changes the background colour, but only if today is a Sunday. And lastly, there&rsquo;s loops that determine how often a certain block of statements is executed.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Example: if today is monday, execute the console.log statement 10 times.\r\nvar today = new Date().getDay();\r\n\r\nif(today === 1) {\r\n\tfor(var i=0;i<10;i++) {\r\n\t\tconsole.log('Yay! Today is monday!');\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>These concepts may all seem a bit vague and general now, but I just wanted to give a global overview of what&rsquo;s at the core of this scripting language. The rest of the course will explain all of these things in great detail.<\/p>\r\n","slur":"javascript-basic-syntax","cat":"Website","subcat":"JavaScript","video":"","diff":"1","quiz":""},
{"id":"223","title":"[JavaScript] Debugging","post":"<p>A large part of programming, often seen as the most annoying part, is a process called <strong>debugging<\/strong>. It&rsquo;s impossible to do everything right the first time, which means your scripts will regularly not work as expected or not work at all. To be able to see what is happening behind the scenes, every browser has a <strong>console<\/strong>. Because the browser is what executes your JavaScript, it also automatically contains a package called developer tools, which the console is part of. To open it up, you can usually find it in the menu under <strong>Tools<\/strong>, or press <strong>F12<\/strong>.<\/p> \r\n\r\n<h2>Logging<\/h2>\r\n\r\n<p>To communicate with this console, and log some text to it, we use the <code>console.log(<em>message<\/em>)<\/code> command. This message can be anything you want from your script, and you can use it to check the values of variables or whether something failed or succeeded by placing them throughout your code. Once you got what you were looking for though, I recommend removing the call to keep the code clean.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(\"Hello World!\");\r\n<\/pre>\r\n\r\n<p>NOTE: You can type any JavaScript statements directly into the console. This is very useful for quick testing.<\/p>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>In order to tell yourself what you mean by certain bits of code, or how they work, you can leave comments for yourself in the file. These are ignored by the browser and have no influence at all on the script. Single-line comments are created by typing <code>\/\/ comment<\/code>, multiline comments are created with <code>\/* comment *\/<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/I am a comment\r\n\r\n\/*\r\nI am a comment\r\nI span multiple lines\r\n*\/\r\n<\/pre>\r\n\r\n<p>It&rsquo;s also commonly used for finding out where the problem is, or what code works best. You can quickly comment out parts of the code, and then rerun the script to see if that has solved or changed anything.<\/p>\r\n\r\n<h2>Error Handling<\/h2>\r\n\r\n<p>Computers can&rsquo;t sense what you meant to do when you wrote something. It will therefore only throw errors when there&rsquo;s something wrong with your syntax, for example a typo or an impossible statement, and not when something doesn&rsquo;t work the way you want.<\/p>\r\n\r\n<p>Errors appear in the console, and usually specify what went wrong and where it happened, making it easy to solve most of them. They are quite generic, however, and there are specific code blocks you can use for &lsquo;catching&rsquo; errors, which you&rsquo;ll learn about later in the course. If no errors are thrown, but the script doesn&rsquo;t do what you want it to, there&rsquo;s something wrong with your own logic.<\/p>\r\n\r\n<p>JavaScript will stop executing the script if it finds an error it can&rsquo;t overcome &ndash; which happens more often than not &ndash; and just continue and skip this particular statement otherwise. The advantage is that you can&rsquo;t write sloppy code, the disadvantage is that your whole program falls apart with the slightest misstep. I therefore recommend testing what you&rsquo;re writing very regularly!<\/p>\r\n","slur":"javascript-debugging","cat":"Website","subcat":"JavaScript","video":"","diff":"1","quiz":""},
{"id":"224","title":"[JavaScript] Data Types","post":"<p>At its core, a script manipulates data. It could for example calculate the sum of numbers a user provides, or generate a welcome message with a username when somebody logs in to his or her account. In order to do this, multiple basic data types are available, which are (in no particular order):<\/p> \r\n\r\n<ul>\r\n\t<li>Number<\/li>\r\n\t<li>String<\/li>\r\n\t<li>Boolean<\/li>\r\n\t<li>null<\/li>\r\n\t<li>undefined<\/li>\r\n\t<li>Object<\/li>\r\n<\/ul>\r\n\r\n<p>All of these, except for the Object, are called <em>primitives<\/em>. Some more data types exist, but those are simply variations on these.<\/p>\r\n\r\n<p>In this section I&rsquo;ll only discuss how to input <strong>literals<\/strong>, which are just the literal fixed values and not results of a computation or links to another value. Those are discussed in great detail in their own respective chapters.<\/p>\r\n\r\n<h2>Number<\/h2>\r\n\r\n<p>As expected, the Number data type holds any number. There are three ways to input them:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Integers<\/strong>: for round numbers\r\n\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Written just like you normally would, for example: <code>4<\/code>, <code>10<\/code>, <code>-40<\/code><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Floating Point<\/strong>: for decimal numbers\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Also like usual, but the comma must be a dot, for example: <code>4.3<\/code>, <code>10.256<\/code><\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong>Scientific Notation<\/strong>: for extremely large or small numbers\r\n\t<ul style=\"list-style-type:circle\">\r\n\t\t<li>Written in e-notation, for example: <code>123e5<\/code> = 123 * 10<sup>5<\/sup> = 12 300 000<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"javascript\">\r\n100 = 100.000 = 1e2\r\n0.005 = 5e-3\r\n<\/pre>\r\n\r\n<h2>String<\/h2>\r\n\r\n<p>Strings represent text. They are created by enclosing the text within <strong>single<\/strong> or <strong>double quotes<\/strong>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\"I am a string\";\r\n'So am I';\r\n\/\/Do not use different quotes for start and end!\r\n\"I give an error';\r\n<\/pre>\r\n\r\n<h2>Boolean<\/h2>\r\n\r\n<p>A Boolean can only be either <strong>true<\/strong> or <strong>false<\/strong>. Their notation is exactly as you would expect; just the word itself.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ntrue\r\nfalse\r\n<\/pre>\r\n\r\n<h2>null &amp; undefined<\/h2>\r\n\r\n<p>Both values seem to do exactly the same &ndash; represent an empty value &ndash; but they are actually quite different.<\/p>\r\n\r\n<p>The <code>null<\/code> word is a value that means &ldquo;no specific value&rdquo;. For example, you can&rsquo;t remove a variable, so if you want to remove its value you can set the variable to be null.<\/p>\r\n\r\n<p>The <code>undefined<\/code> word is not a value, which means it goes even further than null and just represents <em>nothing<\/em>. For example, accessing something non-existent, returns undefined.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nundefined\r\nnull\r\n<\/pre>\r\n\r\n<h2>Object<\/h2>\r\n\r\n<p>An Object is an unordered collection of <em>properties<\/em>. This basically means that you can define a certain Object, then create a new instance of it, and it will automatically have all of these values and methods. It makes everything easier and faster. They are <em>very<\/em> important, and therefore discussed in their own chapters. The properties of an Object are accessed using the <strong>dot notation<\/strong>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsomeObject.someProperty;\r\nsomeObject.someMethod();\r\n<\/pre>\r\n\r\n<h2>Methods &amp; Arguments<\/h2>\r\n\r\n<p>Everything in JavaScript, except for the primitives, is an Object. Most of these have their own functions you can call on them. For example, the Math object has the function <code>Math.random()<\/code> to get a random number. Throughout the course I will call these functions <strong>methods<\/strong>, also to distinguish them from global functions you will learn to create yourself. Because even het JavaScript root &ndash; the container of all things &ndash; is an Object, constructs that don&rsquo;t need anything prefixed, like <code>parseInt()<\/code>, are also called methods. So, whenever I introduce a new standard method, think of it as being a piece of code you can always call on a certain Object (that JavaScript automatically creates and maintains for you).<\/p>\r\n\r\n<p>Sometimes, the object has certain values between the parentheses, for example <code>Math.sin(x)<\/code>. These values are called <strong>arguments<\/strong> or <strong>parameters<\/strong>. Think of them like the value <em>x<\/em> you learned to put into a mathematical function at high school.<\/p>\r\n\r\n<p>Because of this, JavaScript is called an <strong>Object-Oriented Programming Language<\/strong> (OOP), and you&rsquo;ll learn to see and use everything as an object with a certain purpose.<\/p>\r\n","slur":"javascript-data-types","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"225","title":"[JavaScript] Variables","post":"<p>Variables are the heart and soul of any programming language. As the name implies, they are able to vary data, and therefore the first step in making your program dynamic.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">Variables are containers for storing data values.<\/p>\r\n\r\n<p><em>What does that mean?<\/em> It means you can invent your own variable names, and assign a value to them. From that moment on, you can access this variable by its name from anywhere inside the program, and retrieve its value.<\/p>\r\n\r\n<p>NOTE: Unlike some programming languages, a variable&rsquo;s data type is not fixed. For instance, if I create a variable as a Number, I can change it to a String or Boolean later without problems.<\/p>\r\n\r\n<h2>Naming Variables<\/h2>\r\n\r\n<p>Names must start with a letter, underscore ( <strong>_<\/strong> ) or dollar ( <strong>$ <\/strong>) sign. After that, you&rsquo;re allowed to use any letters, numbers or special characters. You&rsquo;re not allowed to use white space.<\/p>\r\n\r\n<p>It&rsquo;s common practice to make your variables descriptive, so you know exactly what they mean, but not too long. It&rsquo;s also preferred to write them in <strong>camelCase<\/strong>, which means you only use lowercase letters, but the first letter of each new word within the variable is uppercase. This improves readability, while remaining quick to type.<\/p>\r\n\r\n<p>NOTE: A lot of people write their global variables in UPPERCASE, which I think is a good thing to do, but you can employ your own favourite notation.<\/p>\r\n\r\n<h2>Creating Variables<\/h2>\r\n\r\n<p>Variables are created with the <code>var<\/code> keyword, followed by the name you want to give it.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVariable;\r\n<\/pre>\r\n\r\n<p>You can stop right there if you want, but you can also assign its value at the same time by using <code>&nbsp;= <em>value<\/em><\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVariable = \"Fantastico!\";\r\n<\/pre>\r\n\r\n<p>Now, any time you want, you can access its value just by using its name.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVariable = true;\r\nconsole.log(someVariable); \/\/Prints true to the console\r\n<\/pre>\r\n\r\n<p>And if you want to change it, you simply assign a new value!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVariable = \"Fantastico!\";\r\nsomeVariable = 10;\r\n<\/pre>\r\n\r\n<h2>Chaining variables<\/h2>\r\n\r\n<p>Often, it&rsquo;s cleaner to declare all your (global) variables at once at the top of your document. To quickly declare variables, you can place the names after each other, separated by a comma.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVar, anotherOne, andLastOne;\r\n<\/pre>\r\n\r\n<p>It&rsquo;s also possible to assign the same value to multiple variables at once, by chaining them together with equal-signs between them:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someVariable, anotherOne, andLastOne;\r\nsomeVariable = anotherOne = andLastOne = null;\r\n<\/pre>\r\n\r\n<h2>Constants<\/h2>\r\n\r\n<p>If you want to store a certain value, but not allow it to change, you can create a constant. If you try to change it, or declare a variable with the same name, the program will throw a big error. Therefore, the only way to create them is by using the <code>const<\/code> keyword, and immediately assigning the value.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconst PI = 3.14;\r\n<\/pre>\r\n","slur":"javascript-variables","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"226","title":"[JavaScript] Numbers","post":"<p>Numbers are of no use if we can&rsquo;t perform calculations with them, and that&rsquo;s what this chapter will talk about! We&rsquo;ll also look at how to convert other data types to numbers.<\/p> \r\n\r\n<h2>Arithmetic<\/h2>\r\n\r\n<p>The four basic arithmetic operators you expect to see are here, and even more.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Addition<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subtraction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Multiplication<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\/<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Division<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>++<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Increment (add 1)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>--<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Decrement (subtract 1)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Modulus*<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(5 + 5); \/\/Prints 10\r\nconsole.log(10 \/ 2); \/\/Prints 5\r\n<\/pre>\r\n\r\n<p>Just as you normally would, you can put parentheses ( <strong>( ) <\/strong>) around equations to group them.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log((5 + 5) \/ 2); \/\/Prints 5\r\nconsole.log(5 + 5 \/ 2); \/\/Prints 7.5\r\n<\/pre>\r\n\r\n<p>More complicated math is handled by the Math object, which is the topic of next chapter.<\/p>\r\n\r\n<p>Sometimes, performing operations with floating point numbers doesn&rsquo;t behave as you expect, and the result differs a tiny amount from the actual value. These differences are so small you often won&rsquo;t even notice them, but if they are becoming a problem, it helps to first multiply them to get a whole number, and then divide again to get your answer.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(0.1+0.2); \/\/Prints 0.30000000000000004, instead of 0.3\r\nconsole.log((0.1*10+0.2*10)\/10); \/\/Prints 0.3, as expected\r\n<\/pre>\r\n\r\n<h2>Assignment<\/h2>\r\n\r\n<p>In the real world, people often write something like 4 + 5 = 9. In programming, you can&rsquo;t do this. Everything needs to be statements that assign a value to a variable, where the variable needs to be on the left, and the value on the right. Therefore, the only way to change a value, is by assigning its old value again, plus some computations.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 5;\r\nx = x + 2; \/\/ x is now 7\r\nvar y = x*2; \/\/ y is now 14\r\n<\/pre>\r\n\r\n<p>Of course, this seems tedious, and a shorter and clearer way of writing these types of mathematical assignments is available.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shorthand<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Full<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x += y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x + y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x -= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x - y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x *= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x * y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\/=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x \/= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x \/ y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x %= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x % y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 5;\r\nx += 2; \/\/ x is now 7\r\nx *= 2; \/\/ x is now 14\r\n<\/pre>\r\n\r\n<p>I think this is a very important concept to understand completely, as you&rsquo;ll need it very often, and it works the exact same way in all programming languages. You just need to remind yourself that you can&rsquo;t have loose data &ndash; everything needs to be saved into a variable.<\/p>\r\n\r\n<p>NOTE: Knowing this, we can see that the <code>++<\/code> and <code>--<\/code> operators are just shortcuts for <code>+= 1<\/code> and <code>-= 1<\/code>.<\/p>\r\n\r\n<h2>Conversion<\/h2>\r\n\r\n<p>To convert something to a number, use the <code>parseInt(<em>value<\/em>)<\/code> and <code>parseFloat(<em>value<\/em>)<\/code> methods.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"100\";\r\nconsole.log(parseInt(x)); \/\/Prints x as a number, without quotes\r\n<\/pre>\r\n\r\n<p>It will look for a number in the first characters of the value, but if it can&rsquo;t find it, it will return the value <code>NaN<\/code>. It means &ldquo;<em>Not a Number<\/em>&rdquo;, which is a value you can&rsquo;t really do anything with, besides check whether something is a number. This is also done with the <code>isNaN(<em>value<\/em>)<\/code> method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 2 \/ \"JAMES BOND\";\r\nisNaN(x); \/\/Should return true.\r\n<\/pre>\r\n\r\n<p>You&rsquo;ll typically run into NaN errors when you (accidentally) perform mathematical operations on values that are not, or only partly, numbers. Like dividing 2 by a String.<\/p>\r\n\r\n<h2>Restrictions<\/h2>\r\n\r\n<p>Of course computers can&rsquo;t support infinitely large numbers, which means there are some restrictions and oddities to be aware of. In JS, all numbers are 64-bit floating point numbers, which simply means that any number, regardless of length or type, is stored the same way, which causes some errors down the road.<\/p>\r\n\r\n<p>It can handle integers up to <strong>15 digits<\/strong> accurately. If longer, it will be off by a small margin.<\/p>\r\n\r\n<p>It can handle a maximum amount of <strong>17 decimals<\/strong>, but floating point numbers can also be off by a <em>tiny<\/em> margin, as you just saw.<\/p>\r\n\r\n<p>You can find the upper and lower bound by accessing some properties on the global <code>Number<\/code> Object:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>MAX_VALUE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Largest number possible in JS<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>MIN_VALUE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Smallest number possible in JS<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>POSITIVE_INFINITY<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Represents numbers higher than JS can handle<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>NEGATIVE_INFINITY<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Represents numbers lower than JS can handle<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Number.MAX_VALUE); \/\/Prints 1.7976931348623157e+308\r\n<\/pre>\r\n\r\n<p>NOTE: When JS encounters numbers higher than its maximum, it will set the value to <strong>Infinity<\/strong>.<\/p>\r\n\r\n<h2>*Modulus<\/h2>\r\n\r\n<p>The <strong>modulus<\/strong> of x and y simply means the number that remains when you subtract all multiples of y from x.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">4%2 equals 0 =&gt; 4 &ndash; 2 &ndash; 2 = 0<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">10%4 equals 2 =&gt; 10 &ndash; 4 &ndash; 4 = 2<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">14%5 equals 4 =&gt; 14 &ndash; 5 &ndash; 5 = 4<\/p>\r\n","slur":"javascript-numbers","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"227","title":"[JavaScript] Math","post":"<p>To finish the part on Numbers, let&rsquo;s have a look at the Math object. It has a great deal of useful methods, like the sine and cosine functions, as well as important mathematical constants.<\/p> \r\n\r\n<h2>How to Use It<\/h2>\r\n\r\n<p>Calling it is as simple as writing <code class=\"longsyntax\">Math.someMethod(<em>arguments<\/em>)<\/code><\/p>\r\n\r\n<p>The Math object is created and maintained by JavaScript itself, which means you don&rsquo;t have to declare it, and it can be accessed from anywhere. Calling such a method doesn&rsquo;t change the actual number(s) you put into it; it simply generates a number using them, and gives it to you to do whatever you want with it.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 0;\r\nvar y = Math.cos(x); \/\/ y is 1, but x is still zero\r\n<\/pre>\r\n\r\n<h2>Manipulating Numbers<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.abs(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Absolute value of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.round(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds x to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.floor(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds x <strong>down<\/strong> to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.ceil(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds x <strong>up<\/strong> to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Math.floor(1.5)); \/\/Prints 1\r\nconsole.log(Math.ceil(1.5)); \/\/Prints 2\r\nconsole.log(Math.round(1.5)); \/\/Prints 2\r\n<\/pre>\r\n\r\n<h2>Finding Values<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.max(<em>x<sub>1<\/sub>,x<sub>2<\/sub>,&hellip;,x<sub>n<\/sub><\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Maximum; returns number with highest value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.min(<em>x<sub>1<\/sub>,x<sub>2<\/sub>,&hellip;,x<sub>n<\/sub><\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Minimum; returns number with lowest value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.random()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Random number between 0 and 1<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.pow(<em>x,y<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>x to the power of y<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.exp(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the value of E<sup>x<\/sup><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.log(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the value of ln(x)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Math.min(1,-5,3,10,50)); \/\/Prints -5\r\n<\/pre>\r\n\r\n<p>NOTE: <code>Math.random()<\/code> generates a random number between 0 (inclusive) and 1 (exclusive). If you, for example, want a random value between 0 and 100, simply multiply this value by one hundred.<\/p>\r\n\r\n<h2>Trigonometry<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.sin(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sine of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.cos(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Cosine of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.tan(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Tangent of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.asin(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Arcsine of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.acos(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Arccosine of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.atan(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Arctangent of x, as numeric value between &ndash;PI\/2 and PI\/2 radians<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.atan2(<em>x,y<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Arctangent of the quotient of its arguments<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.sqrt(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Square root of x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = Math.sin(0) + Math.cos(0) + Math.sqrt(4); \/\/ x is 3\r\n<\/pre>\r\n\r\n<p>NOTE: JavaScript works with <strong>radians<\/strong>, not degrees!<\/p>\r\n\r\n<h2>Constants<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.E<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Euler&rsquo;s number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.PI<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>PI (&pi;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.SQRT2<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Square root of 2<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.SQRT1_2<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Square root of 1\/2<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.LN2<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Natural logarithm of 2<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.LN10<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Natural logarithm of 10<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.LOG2E<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Base 2 logarithm of Euler&rsquo;s number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Math.LOG10E<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Base 10 logarithm of Euler&rsquo;s number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Math.PI); \/\/Prints 3.141592653589793\r\n<\/pre>\r\n","slur":"javascript-math","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"228","title":"[JavaScript] Strings","post":"<p>Strings support any character you want to give it, as it is capable of displaying all kinds of text. But, some of the characters are reserved, like the quotes around the string itself. You can&rsquo;t use them like you normally would, because they would signal the end of the string.<\/p> \r\n\r\n<pre data-lang=\"javascript\">\r\nvar someString = \"So I said to John,\"Hey, what are you doing?!\", but he just looked away.\"; \/\/ERROR\r\n<\/pre>\r\n\r\n<h2>Escaping<\/h2>\r\n\r\n<p>To use a special character within a string, you need to <strong>escape<\/strong> it, which simply means adding a backslash ( <strong><\/strong> ) in front of it. These are all the special characters:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Escape Character<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\&rsquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Single quote<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Double Quote<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\\\<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Backslash<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\n<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>New Line<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\r<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Carriage Return<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\t<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Tab<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>\b<code>\\b<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Backspace<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\f<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Form Feed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(\"Line\\nNew Line\");\r\n\/* Prints:\r\nLine\r\nNew Line\r\n*\/\r\n<\/pre>\r\n\r\n<p>NOTE: The last three are not that useful on the web, and you&rsquo;ll probably never need them. Good to know they exist though.<\/p>\r\n\r\n<h2>Converting Numbers to Strings<\/h2>\r\n\r\n<p>We&rsquo;ve already seen how to convert strings to numbers. The other way around has more methods, as you can decide which notation to use.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>toString()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Converts full number to a String.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>toExponential(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Writes number using scientific notation, using <em>arg<\/em> numbers behind the decimal point.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>toFixed(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Writes number using <em>arg<\/em> decimals<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>toPrecision(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Writes number with length of <em>arg<\/em> numbers<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 100;\r\nconsole.log(x.toString()); \/\/Prints \"100\"\r\nconsole.log(x.toExponential(0)); \/\/Prints \"1e+2\"\r\nconsole.log(x.toFixed(4)); \/\/Prints \"100.0000\"\r\nconsole.log(x.toPrecision(2)); \/\/Prints \"1.0e+2\"\r\n<\/pre>\r\n\r\n<p>The <code>toString()<\/code> method actually works for all data types, but is most useful for numbers. Also, next chapter will showcase some methods for stringification that are slightly faster for numbers.<\/p>\r\n\r\n<h2>String Length<\/h2>\r\n\r\n<p>All strings have one property, which is <code>length<\/code>. It returns the amount of characters within the String &ndash; which means including white space.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\";\r\nconsole.log(x.length); \/\/Prints 12\r\n<\/pre>\r\n","slur":"javascript-strings","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"229","title":"[JavaScript] String Manipulation","post":"<p>Strings are just as important and fundamental as Numbers, and therefore require the same set of operators. But, because there&rsquo;s nothing such as dividing or multiplying a string, JavaScript offers a wide range of methods to apply to strings. Adding strings together, however, does exist as a natural operation, which can create a lot of confusion (as you&rsquo;ll see).<\/p> \r\n\r\n<p>One important thing to notice is that all string methods don&rsquo;t actually change the arguments you supply, just like the Math methods. They simply use the arguments to return the value you want.<\/p>\r\n\r\n<h2>String Addition<\/h2>\r\n\r\n<p>To add together strings, you can use the <code>+<\/code> operator.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello \" + \"World!\"; \/\/x is \"Hello World!\"\r\n<\/pre>\r\n\r\n<p>But, this operator is also available for numbers, so what happens if not all values are the same? In that case, all values in the operation are converted to strings and added together.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello Guest \" + 15 + \"!\"; \/\/x is \"Hello Guest 15!\"\r\n<\/pre>\r\n\r\n<p>The alternative is the <code>concat(<em>string<sub>1<\/sub>, &hellip;, string<sub>n<\/sub><\/em>)<\/code> method. It adds the strings you give it to the end of the string you perform it on.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello \";\r\nvar y = x.concat(\"Awesome \",\"World!\"); \/\/y is \"Hello Awesome World!\"\r\n<\/pre>\r\n\r\n<h2>String Subtraction<\/h2>\r\n\r\n<p>To remove parts of a string, or select only certain parts, we have 4 methods. One very important thing to notice, is that when it comes to counting characters, we start at index 0. So the first character of a string is said to be at position 0, and the last one at position (length &ndash; 1). It might seem odd at first, but you&rsquo;ll get used to it soon.<\/p>\r\n\r\n<p>The method <code>slice(<em>start, end<\/em>)<\/code> returns the characters of a string between <em>start<\/em> and <em>end<\/em> (both inclusive). If you supply a negative argument, it will count from the end of the string towards the start.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".slice(1,5); \/\/x is \"ello\"\r\nx = \"Hello World!\".slice(-6,-1); \/\/x is \"World\"\r\n<\/pre>\r\n\r\n<p>The method <code>substring(<em>start, end<\/em>)<\/code> is similar to slice, but doesn&rsquo;t accept negative values. Also, if you don&rsquo;t supply the second parameter, it will slice until it reaches the end of the string.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".substring(1); \/\/x is \"ello World!\"\r\n<\/pre>\r\n\r\n<p>The method <code>substr(<em>start, length<\/em>)<\/code> returns the characters between start and (start + length), both inclusive. It&rsquo;s useful if you know the exact length of the string you want to cut out.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".substr(0,5); \/\/x is \"Hello\"\r\n<\/pre>\r\n\r\n<p>The method <code>trim()<\/code> removes all whitespace (&ldquo;<em>empty string<\/em>&rdquo;) from both ends of a string.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"     LOVE     \".trim(); \/\/x is \"LOVE\"\r\n<\/pre>\r\n\r\n<h2>String Multiplication<\/h2>\r\n\r\n<p>Multiplying a string means increasing or decreasing the size of all letters. More specifically, this means converting the whole string to uppercase or lowercase.<\/p>\r\n\r\n<p>For this, we have the <code>toLowerCase()<\/code> and <code>toUpperCase()<\/code> methods.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".toLowerCase(); \/\/x is \"hello world!\"\r\nx = \"Hello World!\".toUpperCase(); \/\/x is \"HELLO WORLD!\"\r\n<\/pre>\r\n\r\n<h2>String Division<\/h2>\r\n\r\n<p>Dividing strings means chopping it up into a lot of smaller strings, that, combined together, form the original string again. This is done with the <code>split(<em>separator<\/em>)<\/code> method, which returns an <strong>Array<\/strong>. We&rsquo;ll look at what those are later, but for now just know that it&rsquo;s a list of values. In this case, it&rsquo;s a list of strings. The <em>separator<\/em> is the string we want to use to determine where one piece stops and another starts.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"I want an ice cream!\".split(\" \"); \/\/x is split into the strings ['I',\"want\",\"an\",\"ice\",\"cream\"]\r\n<\/pre>\r\n\r\n<h2>Finding Strings within Strings<\/h2>\r\n\r\n<p>Checking whether a certain string contains another one needs to be done very often.<\/p>\r\n\r\n<p>If you know the specific string you&rsquo;re looking for, you can find the position of the first letter of the string you're looking for. Use <code>indexOf(<em>string, start<\/em>)<\/code> to find the first occurrence, and <code>lastIndexOf(<em>string, start<\/em>)<\/code> to find the last occurrence. The <em>start<\/em> argument specifies from which index to start searching, but can be omitted if you just want to start from the beginning. If the string can&rsquo;t be found, it returns <code>-1<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"I want an ice cream!\".indexOf(\"want\"); \/\/x is 2\r\n<\/pre>\r\n\r\n<p>If you want to know the character at a certain position in the string, use <code>charAt(<em>index<\/em>)<\/code>. Remember that JS starts counting from zero.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".charAt(2); \/\/x is 'l'\r\n<\/pre>\r\n\r\n<p>If you don&rsquo;t know the literal string you&rsquo;re looking for, you have to use <strong>regular expressions<\/strong>. Those are, however, far too complex to explain now and will be explained in their own chapter.<\/p>\r\n\r\n<p>The method <code>search(<em>RegExp, start<\/em>)<\/code> does the same as indexOf, but works with a regular expression. Below is a very simple example:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".search(\"Hello\"); \/\/x is 0\r\nvar x = \"Hello World!\".search(\/Hello\/); \/\/x is 0\r\n<\/pre>\r\n\r\n<p>The method <code>match(<em>RegExp<\/em>)<\/code> doesn&rsquo;t return the position of a match, but a list of the actual matches. (An Array, remember?)<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello hey hey!\".match(\/\\s\/i); \/\/this expression matches against all whitespace characters, which means x is [\" \"] \r\n<\/pre>\r\n\r\n<h2>Replacing Strings<\/h2>\r\n\r\n<p>And finally, you can swap parts of a string with other strings. Use the method <code>replace(<em>RegExp <\/em>| <em>String, replacement<\/em>)<\/code>, where the first parameter can be a plain old string, as well as a regular expression. It replaces the first occurrence of the first parameter with the replacement string provided in the second. With a Regular Expression, however, you can make it replace every occurrence (and more).<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Hello World!\".replace(\"l\",\"z\"); \/\/x is \"Hezlo World!\"\r\nx = \"Hello World!\".replace(\/l\/g,\"z\"); \/\/x is \"Hezzo Worzd!\"\r\n<\/pre>\r\n","slur":"javascript-string-manipulation","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"230","title":"[JavaScript] Functions","post":"<p>Now that you know a few of the great data types, and what you can do with them, it&rsquo;s time to introduce functions. You&rsquo;ve been using them whenever I introduced a new method, and now I will explain what is behind all of these. As you&rsquo;ll move further within the world of JavaScript, functions become increasingly important.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt;\">Functions are blocks of code with a name<\/p>\r\n\r\n<p>This means that you can execute a group of statements simply by calling its name. The most important use of this is that you only have to write a piece of code once, and are able to re-use it everywhere across your project.<\/p>\r\n\r\n<h2>Declaring Functions<\/h2>\r\n\r\n<p>To declare a function, use the <code>function<\/code> keyword. Then, you must supply the name you want to give to your function -&nbsp;which&nbsp;follows the same rules as variable naming -&nbsp;and (optionally) the names of the arguments.<\/p>\r\n\r\n<p><code class=\"longsyntax\"><em>function<\/em> someName(<em>param1, param2, param3<\/em>) {\r\n\t<em>statements<\/em>\r\n}<\/code><\/p>\r\n\r\n<p>If your function doesn&rsquo;t need arguments, you can just leave that part empty. Opening and closing the function properly with braces ( <strong>{ }<\/strong> ) is very necessary though!<\/p>\r\n\r\n<h2>Calling Functions<\/h2>\r\n\r\n<p>A function is only executed if it is called. We&rsquo;ve seen that a variable can be accessed by just typing its name, and functions are no different. But, to tell JavaScript we&rsquo;re looking for a function, and be able to supply arguments, we need to add parentheses.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsomeName(value1, value2, value3);\r\n\r\n\/\/Calls to...\r\nfunction someName(param1, param2, param3) {\r\n\t\/* Code block here ... *\/\r\n}\r\n<\/pre>\r\n\r\n<h2>Execution Order<\/h2>\r\n\r\n<p>When a function is called, it first executes all statements within, before it continues executing all the statements that appear after it in the script that called it.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction setX(what) {\r\n\tx = what;\r\n}\r\n\r\nvar x = 5;\r\nsetX(10);\r\nconsole.log(x); \/\/Prints 10\r\n<\/pre>\r\n\r\n<p>But this should be no surprise to you, because we&rsquo;ve been using all these methods all along, which are also executed right on the spot.<\/p>\r\n\r\n<h2>Parameters &amp; Arguments<\/h2>\r\n\r\n<p>There&rsquo;s a subtle difference between the two.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Arguments <\/strong>are the actual values passed into a function, like <code>2000<\/code> or <code>&ldquo;John&rdquo;<\/code>.<\/li>\r\n\t<li><strong>Parameters<\/strong> are the names you give to these arguments, like <code>someNumber<\/code> and <code>username<\/code>. These behave as variables that only exist within that function<\/li>\r\n<\/ul>\r\n\r\n<p>The order in which you supply arguments matches the order of the parameters in the function definition, but you don&rsquo;t necessarily have to provide them all. You can supply less arguments, and everything executes fine, but the parameters you didn&rsquo;t set will be <code>undefined<\/code> &ndash; which can cause errors.<\/p>\r\n\r\n<h2>The return Keyword<\/h2>\r\n\r\n<p>You&rsquo;re probably wondering now: what about all those methods we&rsquo;ve seen that return values? Well, they are just functions that execute some code, and then at the end return the result. This is done with the <code>return<\/code> keyword.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction doSomething() {\r\n\treturn 10;\r\n}\r\n\r\nconsole.log(doSomething()); \/\/Prints 10\r\n<\/pre>\r\n\r\n<p>When JavaScript encounters a return statement, it returns the value and stops executing the function. If you don&rsquo;t want to leave the function early, you should of course always put the return statement at the end of the function. Saving the returned value is as simple as:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction doSomething() {\r\n\treturn 10;\r\n}\r\n\r\nvar x = doSomething(); \/\/x is 10\r\n<\/pre>\r\n\r\n<h2>Recursive Functions<\/h2>\r\n\r\n<p>One of the most powerful features of functions, is the fact that you can use them recursively. You can call a function within a function, and do that as many times as you want. This way, for example, you can very easily create a function that computes the factorial of a number.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/* Accepts a parameter n. \r\nIf n is greater than 1, multiply n times the factorial of (n-1)\r\nElse, if n is 1, we've reached the bottom (as factorials don't go lower than 1), and simply return 1\r\n*\/\r\nfunction fac(n) {\r\n\tif(n > 1) {\r\n\t\treturn n*fac(n-1);\r\n\t} else {\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nvar x = fac(7); \/\/x is 7 * 6 * 5 * 4 * 3 * 2 * 1 = 5040\r\n<\/pre>\r\n\r\n<p>Using a recursive function will often allow you to do otherwise very complex or impossible computations with only a single function. Don't worry about understanding them completely now though, because there's still a lot you haven't learned (yet).<\/p>\r\n\r\n<h2>Alternative Syntax<\/h2>\r\n\r\n<p>The way we&rsquo;ve discussed functions now, they are global. They can be accessed from anywhere within the script, which is of course nice, but requires more of the computer and can cause security problems. One way of solving this, is by saving a function inside a variable. All we have to do is switch around the order of the <code>function<\/code> keyword and the <strong>name<\/strong>:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = function(a,b) {\r\n\treturn a*b;\r\n}\r\n\r\nconsole.log(x(2,2)); \/\/Prints 4\r\n<\/pre>\r\n\r\n<p>Such a function is called an <strong>anonymous<\/strong> function, as it doesn&rsquo;t have a name, but can only be invoked using variables that contain it. When we look at objects, we&rsquo;ll see that methods work roughly the same way &ndash; they are anonymous, assigned to property names of the object, and don&rsquo;t exist outside of it.<\/p>\r\n","slur":"javascript-functions","cat":"Website","subcat":"JavaScript","video":"","diff":"2","quiz":""},
{"id":"231","title":"[JavaScript] Arrays I","post":"<p>Even though arrays have their own notation, possibilities and methods, they are not a data type in itself.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">Arrays are ordered lists of values<\/p>\r\n\r\n<p>Instead of assigning one value to a variable, we can assign a list of values to a single variable. It&rsquo;s also allowed to put values of different data types in the same list, but I discourage that. Arrays are typically used to group a collection of values that belong together, like scores from a test or all the different products in a shop&rsquo;s assortment. Using all sorts of data types alongside each other creates a mess and makes your code highly error prone.<\/p>\r\n\r\n<p>Just like strings, arrays start at index 0, and count upwards. Unlike some other languages, the length of the array is not fixed, which means you can add and remove items from the list any time you want.<\/p>\r\n\r\n<h2>Defining Arrays<\/h2>\r\n\r\n<p>For arrays, brackets ( <strong>[ ] <\/strong>) are your main special characters. Defining an array literal is done this way:<\/p>\r\n\r\n<p><code class=\"longsyntax\">var someArray = [value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>]<\/code><\/p>\r\n\r\n<p>You can supply it as many values as you want (arrays can get very large), and if you leave it empty it just creates an empty array. That&rsquo;s somewhat similar to an empty string ( <strong>&ldquo;&rdquo;<\/strong> ) or 0.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,1,2,3,5,8]; \/\/x holds six numbers\r\n<\/pre>\r\n\r\n<h2>Accessing Elements<\/h2>\r\n\r\n<p>Every value of an array is called an <strong>element<\/strong>, or sometimes (list) <strong>item<\/strong>. We can only get or set a single value of the list in one statement, which is done with<\/p>\r\n\r\n<p><code class=\"longsyntax\">arrayName[<em>position<\/em>]<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\nconsole.log(x[3]); \/\/Prints 4\r\n<\/pre>\r\n\r\n<p>NOTE: If you access an element that&rsquo;s not in the array, which means it has no assigned value, it will return <code>undefined<\/code>. This can easily cause your program to break, so always use the right indices.<\/p>\r\n\r\n<h2>False Elements<\/h2>\r\n\r\n<p>Because in JavaScript arrays have a dynamic size, it&rsquo;s possible to assign values to an element of the array that didn&rsquo;t exist yet. This creates problems, because arrays are ordered lists, and we now have a lot of items with a value of <code>undefined<\/code> within the array. I call these <em>false elements<\/em>, and I recommend you stay away from them. Always build your array from the bottom to the top, without skipping any positions.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,1,1,1];\r\nx[5] = 100;\r\nconsole.log(x[4]); \/\/Prints undefined\r\n<\/pre>\r\n\r\n<h2>Array Length<\/h2>\r\n\r\n<p>Just as with strings, the <code>length<\/code> property returns the length of the array. But, it takes shortcuts, and simply takes the last position that has a value, plus 1.<\/p>\r\n\r\n<p>If you don&rsquo;t have false elements, that&rsquo;s okay. Your first element will have index 0, and your last element index (length &ndash; 1), so the array indeed holds <em>length<\/em> amount of values.<\/p>\r\n\r\n<p>If you <em>do<\/em> have false elements, this goes wrong. The actual amount of elements is lower than the length this gives you. Another reason to prevent this from happening!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,1,1,1];\r\nconsole.log(x.length); \/\/Prints 4\r\n\r\nvar y = [];\r\ny[0] = 0;\r\ny[3] = 5; \r\nconsole.log(y.length); \/\/Prints 4, but there's only two elements!\r\n<\/pre>\r\n\r\n<h2>Modifying Arrays<\/h2>\r\n\r\n<p>To prevent creating false elements, or accessing undefined values, we need to use standard methods that add or remove items in a clean way. It&rsquo;s very important to understand that, unlike strings, these methods <strong>modify<\/strong> the array they are applied to.<\/p>\r\n\r\n<h5>Adding Elements<\/h5>\r\n\r\n<p>The <code>push(<em>element<sub>1<\/sub>, &hellip;, element<sub>n<\/sub><\/em>)<\/code> method adds elements to the <em>end<\/em> of the array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2];\r\nx.push(3); \/\/x is now [1,2,3]\r\n<\/pre>\r\n\r\n<p>The <code>unshift(<em>element<sub>1<\/sub>, &hellip;, element<sub>n<\/sub><\/em>)<\/code> method adds elements to the <em>start<\/em> of the array. This means it doesn&rsquo;t replace elements; it simply pushes all existing elements a few positions further.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2];\r\nx.unshift(3); \/\/x is now [3,1,2]\r\n<\/pre>\r\n\r\n<p>Both methods increase the length, and return the new length.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2];\r\nconsole.log(x.push(6)); \/\/Prints 3\r\n<\/pre>\r\n\r\n<h5>Removing Last and First Element<\/h5>\r\n\r\n<p>The <code>pop()<\/code> method removes the <em>last<\/em> element of an array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3];\r\nx.pop(); \/\/x is now [1,2]\r\n<\/pre>\r\n\r\n<p>The <code>shift()<\/code> method removes the <em>first<\/em> element of an array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3];\r\nx.shift(); \/\/x is now [2,3]\r\n<\/pre>\r\n\r\n<h5>Removing Multiple Elements<\/h5>\r\n\r\n<p>The <code>splice(<em>start, length, element<sub>1<\/sub>, &hellip;, element<sub>n<\/sub><\/em>)<\/code> method removes elements from an array. It starts from position <em>index<\/em>, and removes <em>length<\/em> amount of values after that. If you supply a negative index, it starts counting from the end of the array. After the length argument, you <em>can<\/em> supply elements to be added to the end of the array, but that is not required.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\nx.splice(0,2); \/\/x is now [1,2]\r\n<\/pre>\r\n\r\n<p>The <code>slice(<em>start, end<\/em>)<\/code> method works the other way around, and selects only certain elements from an array. It starts from position<em> start<\/em>, and selects everything up to, but not including, <em>end<\/em>. This is the only method that <strong>doesn&rsquo;t<\/strong> alter the original array!<\/p>\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\nvar y = x.slice(0,3); \/\/x is still the same, but y is [1,2,3]\r\n<\/pre>\r\n","slur":"javascript-arrays-I","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"232","title":"[JavaScript] Arrays II","post":"<p>Because arrays are such an important part of every programming language, I split up all information into two chapters. This one will continue explaining the last few array methods, and tell you some things to watch out for.<\/p> \r\n\r\n<h2>Changing the Order<\/h2>\r\n\r\n<p>Sorting arrays is sometimes an invaluable tool, for example if you need to get the ten highest values in a high score list. We use the <code>sort(<em>function<\/em>)<\/code> method for that, where the <em>function<\/em> is optional.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = ['a','b',true,1,2];\r\nx.sort(); \/\/x is now [1,2,'a','b',true]\r\n<\/pre>\r\n\r\n<p>If you don&rsquo;t supply a function, it will sort the array lexicographically. First it will sort the numbers, then the strings (based on the order of the alphabet), then the boolean values.<\/p>\r\n\r\n<p>Using a function enables all kinds&nbsp;of sorting methods. This sort function compares pairs of two values next to each other, and returns<\/p>\r\n\r\n<ul>\r\n\t<li>A <strong>negative<\/strong> number if the first value should be before the second<\/li>\r\n\t<li>A <strong>positive<\/strong> number if the second value should be before the first<\/li>\r\n        <li>A <strong>zero<\/strong> if both values are considered equal and need not be switched.<\/li>\r\n<\/ul>\r\n\r\n<p>It will continue to do so until none of the pairs need to be switched - that means everything is in the right order.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [[1,2],[5,4],[8,2]];\r\nx.sort(function(a,b) { return a[1]-b[1]; }); \/\/x is now [[1,2],[8,2],[5,4]]\r\n<\/pre>\r\n\r\n<p>If you simply want the array reversed, use the <code>reverse()<\/code> method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [\"Hello\",\"World\"];\r\nx.reverse(); \/\/x is now [\"World\", \"Hello\"]\r\n<\/pre>\r\n\r\n<h2>Searching Values<\/h2>\r\n\r\n<p>Just as with strings, we can use <code>indexOf(<em>value, start<\/em>)<\/code> to find the position of the first occurrence, and <code>lastIndexOf(<em>value, start<\/em>)<\/code> to find the position of the last occurrence. If there is no match, they return a value of <code>-1<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4];\r\nvar y = x.indexOf(4); \/\/y is 3\r\n<\/pre>\r\n\r\n<h2>Joining Arrays<\/h2>\r\n\r\n<p>Also like strings, the <code>concat(<em>array<sub>1<\/sub>, &hellip;, array<sub>n<\/sub><\/em>)<\/code> method adds the arrays you supply, to the end of the array this is applied to.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5,6];\r\nvar y = x.concat([5,4,3,2,1]); \/\/y is [1,2,3,4,5,6,5,4,3,2,1]\r\n<\/pre>\r\n\r\n<h2>Converting to Strings<\/h2>\r\n\r\n<p>In the chapter on strings, we&rsquo;ve seen how to chop up a string into an array containing smaller strings. The opposite is also possible &ndash; converting an array (of strings) to one single string.<\/p>\r\n\r\n<p>The <code>join(<em>separator<\/em>)<\/code> method joins all elements of an array, with the <em>separator <\/em>connecting them. If omitted, all elements have a comma between them.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3];\r\nvar y = x.join(\"\/\"); \/\/y is \"1\/2\/3\"\r\n<\/pre>\r\n\r\n<h2>Copying Arrays<\/h2>\r\n\r\n<p>Copying an array is done quite often when we want to work with an array, but not modify the original one. JavaScript, however, doesn&rsquo;t automatically copy an array when we assign it to a variable. Instead, it simply saves a reference to the array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3];\r\nvar y = x;\r\ny[0] = \"EDITED\";\r\nconsole.log(x); \/\/Prints [\"EDITED\",2,3]\r\n<\/pre>\r\n\r\n<p>This little difference is often the cause of errors; when you modify an array without intending to. The proper way to actually copy an array, or part of an array, is by means of the <em>slice<\/em> method. This is the only method that doesn&rsquo;t modify the original array, but returns a new one, and now you know why it does that.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3];\r\nvar y = x.slice(0);\r\ny[0] = \"EDITED\";\r\nconsole.log(x); \/\/Prints [1,2,3]\r\nconsole.log(y); \/\/Prints [\"EDITED\",2,3]\r\n<\/pre>","slur":"javascript-arrays-II","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"233","title":"[JavaScript] Objects","post":"<p>Finally, we&rsquo;ve arrived at the big guns. The last of the great data types, which represents everything that JavaScript is.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">Objects are unordered lists of values and functions<\/p>\r\n\r\n<p>At first look, this seems like an upgrade to arrays. <em>Why is this its own data type and an array isn&rsquo;t?<\/em> Because it&rsquo;s actually the other way around &ndash; an array is just a simplified version of an object.<\/p>\r\n\r\n<p>Arrays only represent lists of numbers with corresponding values. Objects can also link strings with values, and can contain those functions we&rsquo;ve been calling methods.<\/p>\r\n\r\n<p>This means that objects in JavaScript are exactly like objects in the real world; they have a certain set of properties and functions. Objects of the same kind have the same properties, but with different values, and the same methods, but executed at different times.<\/p>\r\n\r\n<p>For example, a computer, as an object, has properties like <em>brand<\/em>, <em>screen size<\/em>, <em>operating system<\/em>, <em>memory<\/em>. Two computers can have different values for screen size, but a computer will always have a screen. A computer also has functions like <em>starting up<\/em> and <em>shutting down<\/em>, but computers don&rsquo;t all have to shut down at the same time, and the way they shut down depends on its <em>operating system<\/em> property.<\/p>\r\n\r\n<p>Knowing this, we can define objects we can copy easily and use in numerous ways.<\/p>\r\n\r\n<h2>Declaring Objects<\/h2>\r\n\r\n<p>The literal syntax for declaring an object is<\/p>\r\n\r\n<p><code class=\"longsyntax\">{ property: value, property: value, &hellip; }<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar user = {\r\n\tusername:\"Johnny\",\r\n\tpassword:\"DucksAreAwesome\",\r\n\tcredits:250,\r\n\tupdateCredits: function() {\r\n\t\treturn \"You can't.\";\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>The properties follow the same naming rules as variables. Values can be anything.<\/p>\r\n\r\n<h2>Accessing Properties &amp; Methods<\/h2>\r\n\r\n<p>There are two ways to access properties or methods:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Dot notation<\/strong>: <code>object.property<\/code><\/li>\r\n\t<li><strong>Array notation<\/strong>: <code>object[&ldquo;property&rdquo;]<\/code><\/li>\r\n<\/ul>\r\n\r\n<p>They both do exactly the same, but the second is more secure. With the first one, you might run into problems when your property is a reserved word (like, for example, <em>length<\/em>).<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = user[\"username\"]; \/\/x is \"Johnny\"\r\nx = user.username; \/\/x stays the asme\r\n\r\nvar y = user.updateCredits(); \/\/y is \"You can't.\"\r\ny = user[\"updateCredits\"](); \/\/y stays the same\r\n<\/pre>\r\n\r\n<h2>Copying Objects<\/h2>\r\n\r\n<p>Just like Arrays, when you assign an object to a new variable, it simply creates a reference. Arrays had the solution of using <em>slice<\/em>, but objects don&rsquo;t have such a method. Instead, if you want to copy an object, you&rsquo;ll have to create a new object and transfer all properties. This is quite complex, and you&rsquo;ll learn about it later.<\/p>\r\n","slur":"javascript-objects","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"234","title":"[JavaScript] Scope","post":"<p>I brought you the wonderful news that you could access variables from anywhere. Well, I lied.<\/p> \r\n\r\n<p>JavaScript uses something called <strong>function scope<\/strong>, which means that variables declared inside <em>functions<\/em> have <strong>local<\/strong> scope. Variables declared anywhere else have <strong>global<\/strong> scope. In both cases, however, you still need to declare a variable before you&rsquo;re able to access it.<\/p>\r\n\r\n<p>Global scope variables can be accessed from anywhere. Local scope variables disappear as soon as the function is done executing, and can&rsquo;t be accessed from anywhere outside of it.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Scope is the set of variables, objects and functions you have access to in a certain code block<\/p>\r\n\r\n<p>It&rsquo;s recommended to keep your variables local as much as possible. This prevents name collisions, and is faster to execute. <em>Why?<\/em> Because, when JavaScript encounters a variable name, it starts looking at the function that contains this piece of code. If it can't find the variable declaration there, it looks at the function or code block that contains it, one level up the hierarchy. It keeps moving levels upwards, until it reaches the point where the variable is declared. The more local your variables, the shorter you keep this lookup distance, and the faster it will execute.<\/p>\r\n\r\n<p>NOTE: If it doesn&rsquo;t find the variable declaration, it will just assume the variable to be global. This means that you can declare global variables everywhere by not using the <code>var<\/code> keyword, but I don&rsquo;t recommend doing this very often. This also means that you can access variables that haven&rsquo;t been declared yet, which is called <strong>variable hoisting<\/strong>, and should be ignored as well.<\/p>\r\n\r\n<h2>The let Keyword<\/h2>\r\n\r\n<p>Sometimes, function scope isn&rsquo;t what you want, but <strong>block scope<\/strong> is: variables declared inside a code block, have local scope with respect to that. In practice, this means that a variable declared between two braces (<strong> { } <\/strong>), doesn&rsquo;t exist anywhere outside of these. To make a variable block scope, we don&rsquo;t use the <em>var<\/em> keyword, but the <code>let<\/code> keyword.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nif(true) {\r\n\tlet x = 5;\r\n}\r\nconsole.log(x); \/\/Prints undefined\r\n<\/pre>\r\n\r\n<h2>The this Keyword<\/h2>\r\n\r\n<p>The keyword <code>this<\/code> refers to the current scope. More specifically, it returns the Object that owns the scope you&rsquo;re in. If you&rsquo;re in global scope, it returns the Global Object, which is the browser window. If you&rsquo;re in a function, it returns whatever object called the function. The value of <strong>this<\/strong> is automatically kept track of by JavaScript, which is often what you want, but you can override it when calling functions.<\/p>\r\n\r\n<p>The methods<\/p>\r\n\r\n<p><code class=\"longsyntax\">call(<em>thisObject, argument<sub>1<\/sub>, &hellip;, argument<sub>n<\/sub><\/em>)<br\/>apply(<em>thisObject, arguments<\/em>)<\/code><\/p>\r\n\r\n<p>both call the function they are attached to, and use <em>thisObject<\/em> as the value for <code>this<\/code> within the function. The only difference is that the second one allows you to pass in the arguments as one array, while the first one requires all arguments be listed explicitly.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction someFunc() {\r\n\treturn this.a;\r\n}\r\n\r\nconsole.log( someFunc.apply({a:10}) ); \/\/Prints 10\r\nconsole.log( someFunc() ); \/\/Prints undefined, because the root this object doesn't have a property a to access\r\n<\/pre>\r\n\r\n<p>Within block scope, you can simply save the object you want to perform the function of <code>this<\/code> in another variable, and use that.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar that = this;\r\n\/\/ Somehow, the value of this is changed within this block\r\nsomeBlock {\r\n\t\/\/But luckily, we can just access the root this here with the that variable\r\n\tthat.doSomething();\r\n}\r\n<\/pre>\r\n\r\n<h2>Closures<\/h2>\r\n\r\n<p>Because of this scoping mechanic, JavaScript has a feature called <strong>closures<\/strong>, which is a fancy name for something very simple. Say you have a function B nested inside another function A. Then B has access to everything inside of A, but A does <em>not<\/em> have access to whatever&rsquo;s inside of B. If you let A <strong>return<\/strong> the function B, the latter will contain a reference to its environment at the moment function A was called. This allows you to work with variables that are untouchable from the outside, which is good for security and performance reasons.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/*\r\nSubtract returns another function\r\nThe subtract function is only run once, initalizing the counter variable.\r\nBut, the function it returns, has a memory of its environment on creation, \r\nwhich enables it to subtract 2 from the running counter, instead of resetting it and subtracting from 100 every time.\r\n*\/\r\n\r\nvar subtract = (function () {\r\n    var counter = 100;\r\n    return function () {\r\n    \treturn counter -= 2;\r\n    }\r\n})();\r\n\r\nsubtract();\r\nsubtract();\r\nconsole.log(subtract()); \/\/Prints 94\r\n<\/pre>\r\n","slur":"javascript-scope","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"235","title":"[JavaScript] Classes","post":"<p>Now that we&rsquo;ve learned about objects and scope, we can finally piece them together to create the building blocks of most JavaScript programs: Classes. A class is a function that creates an object with predetermined properties, but dynamically generated values. Then you can call the function, supply the right arguments, and you have a new, fully capable object.<\/p> \r\n\r\n<h2>Defining Classes<\/h2>\r\n\r\n<p>Classes are essentially just functions, which means it&rsquo;s common practice to start them with a capital letter to distinguish them from non-class functions. Such a function is usually called a <strong>constructor function<\/strong>.<\/p>\r\n\r\n<p>Within the function, we can use the <code>this<\/code> keyword to refer to the object it will create, and define all its properties.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction Animal(name,type,age) {\r\n\tthis.name = name;\r\n\tthis.type = type;\r\n\tthis.age = age;\r\n}\r\n<\/pre>\r\n\r\n<h2>Creating Objects from Classes<\/h2>\r\n\r\n<p>For this we call the function, but with the <code>new<\/code> keyword in front. This tells JavaScript that we want a new object created from the constructor function, and not just execute the function.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar newAnimal = new Animal(\"Debby\",\"Cow\",4);\r\n<\/pre>\r\n\r\n<h2>Prototype<\/h2>\r\n\r\n<p>It&rsquo;s great that we can create objects with methods included at the same time, but what if we want to add a method to all instances of this object later on? That&rsquo;s when prototypes kick in! Every type of object has a <code>prototype<\/code>, from which it inherits all properties and methods. We can access it using the dot notation we&rsquo;re used to, and use it to add a new method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar newAnim = new Animal(\"Laura\");\r\n\r\nAnimal.prototype.changeName = function(a) {\r\n\tthis.name = a\r\n}\r\n\r\nbla.changeName(\"Juan\");\r\nconsole.log(bla.name); \/\/Prints \"Juan\"\r\n<\/pre>\r\n\r\n<p>The great thing about this, is that we can also add our own methods to JavaScript&rsquo;s standard objects, like <code>Math<\/code> or <code>String<\/code>. For example, we could write a function that returns the amount of times a certain letter occurs within a string, add that to the prototype, and we&rsquo;re able to perform this method on every string!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/This function accepts a one-character string, and counts how often it occurs in a string\r\nString.prototype.countThem = function(a) {\r\n\tvar s = this;\r\n\tvar count = 0;\r\n\tfor(var i=0;i&lt;s.length;i++) {\r\n\t\tif(s.charAt(i) == a) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t}\r\n\treturn count;\r\n}\r\nvar x = \"Hello World!\".countThem(\"l\"); \/\/x is 3\r\n<\/pre>\r\n","slur":"javascript-classes","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"236","title":"[JavaScript] Booleans & Comparisons","post":"<p>We&rsquo;ve discussed all data types in depth, except for Boolean values. That&rsquo;s okay, because they are going to be the main topic of conversation from now on! Up until now we only wrote scripts that just blast through all the statements after each other until they&rsquo;re finished. That&rsquo;s not how most scripts work.<\/p> \r\n\r\n<p>Programs check whether something is true or false, and decide, based on that information, what parts to execute (and when). For example, when a user logs into his account on a website, the script performs a check to see if his username and password match. If the outcome is true, he is logged in. If its false, a message is returned that something went wrong. There are no other states, because a computer can&rsquo;t <em>semi<\/em>-execute statements, which means Booleans are the perfect (and only) way to do this.<\/p>\r\n\r\n<h2>The Boolean Object<\/h2>\r\n\r\n<p>Just as everything else, the <code>Boolean<\/code> data type is an object. We can use it as a function, which takes any value as input, and returns whether it is true or false. Using it, you can determine which values are automatically true or false.<\/p>\r\n\r\n<h5>Standard false Values<\/h5>\r\n\r\n<p>These values always spit back <em>false<\/em>: <code>0<\/code>, <code>-0<\/code>, <code>&ldquo;&rdquo;<\/code>, <code>undefined<\/code>, <code>null<\/code>, <code>false<\/code>, <code>NaN<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Boolean(NaN)); \/\/Prints false\r\n<\/pre>\r\n\r\n<h5>Standard true Values<\/h5>\r\n\r\n<p>Everything else!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Boolean(-40)); \/\/Prints true\r\nconsole.log(Boolean(\"false\")); \/\/Prints true as well\r\n<\/pre>\r\n\r\n<h2>Comparisons<\/h2>\r\n\r\n<p>Comparisons are used to check whether not values, but statements are true; is x equal to y? Is x greater than y? Is this string exactly the same as another string? We can only compare two values at once, and to do so we place one of these operators between them:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>equal value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>===<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>equal value and equal type<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>not equal value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>not equal value and not equal type<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;&nbsp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>greater than<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;&nbsp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>less than<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>greater than or equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>less than or equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log( Boolean(5 <= 5) ); \/\/Prints true\r\nconsole.log( Boolean(7 > 10) ); \/\/Prints false\r\n<\/pre>\r\n\r\n<p>The difference between <code>==<\/code> and <code>===<\/code>, and <code>!=<\/code> and <code>!==<\/code>, is that the first one attempts to coerce the value. If one of the operands is a number, JS tries to convert the other to a number to see if the values match. If one of the operands is a Boolean, JS tries to convert the other to a Boolean. Sometimes this works just fine, sometimes this goes terribly wrong and doesn&rsquo;t work at all like you want to. They are therefore often seen as the lazy alternative to <code>===<\/code> or <code>!==<\/code>, and should be avoided as much as possible.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Boolean(5 === \"5\")); \/\/Prints false\r\nconsole.log(BOolean(5 == \"5\")); \/\/Prints true\r\n<\/pre>\r\n\r\n<p>For the operators with <em>greater than<\/em> and <em>less than<\/em>, only numbers and strings make sense, as they have a defined order. Therefore, for Boolean values, false is converted to 0, and true to 1. If one of the operands is a number, the other one is converted to a number as well.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(Boolean(false == 0)); \/\/Prints true\r\nconsole.log(Boolean(false === 0)); \/\/Prints false\r\n<\/pre>\r\n\r\n<p>NOTE: You <strong>can&rsquo;t<\/strong> compare arrays or objects. There&rsquo;s just no way to do it. Comparison operators check value and type, and what value does a list of values have? Therefore, if you want to determine equality between arrays or objects, you&rsquo;ll need to check every item\/property (with a loop, which you&rsquo;ll learn about later).<\/p>\r\n\r\n<h2>Logical Operators<\/h2>\r\n\r\n<p>To be able to compare multiple values, we can combine such comparison statements using logical operators.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&amp;&amp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>and<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both comparisons are true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>||<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>or<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if at least one of them is true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>not<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the comparison is not true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log( Boolean(5 === 5 && 4 === 4) ); \/\/Prints true\r\nconsole.log( Boolean(5 === 2 || 1 === 1) ); \/\/Prints true\r\n<\/pre>\r\n\r\n<p>Using this, we can chain together comparisons, and optionally group them within parentheses. A word of warning though: your code can become messy very quickly this way, which is why I suggest splitting up the statement once in a while. You&rsquo;ll learn ways to do that quickly.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log( Boolean((5 === 5 || 4 === 2) && 1 == 1) ); \/\/Prints true\r\nconsole.log( Boolean(5 === 4 || (4 === 2 && 1 == 1)) ); \/\/Prints false\r\n<\/pre>\r\n\r\n<h2>Short-Circuit Evaluation<\/h2>\r\n\r\n<p>With the <code>&amp;&amp;<\/code> operator, if the first statement is already false, it won&rsquo;t bother checking the other one, because the condition will return false anyway.<\/p>\r\n\r\n<p>With the <code>||<\/code> operator, if the first statement is already true, it won&rsquo;t check the other one, because the condition will return true anyway.<\/p>\r\n\r\n<p>This is called <strong>short-circuit evaluation<\/strong>, and choosing the order of your statements carefully can speed up performance <em>a lot<\/em>.<\/p>\r\n","slur":"javascript-booleans-comparisons","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"237","title":"[JavaScript] Conditions","post":"<p>Last chapter discussed how to compare things, this one will show you how to use that to determine which blocks of code to execute.&nbsp;For this, we use <strong>conditions<\/strong>: if a certain condition is met, perform this task.<\/p> \r\n\r\n<p>In more familiar terms: if this comparison is true, perform this task. Not surprisingly, the <code>if<\/code> keyword plays a big role here.<\/p>\r\n\r\n<h2>The if Statement<\/h2>\r\n\r\n<p>The if keyword needs to be followed by a <strong>comparison<\/strong> between parentheses, which is the condition it checks against. Then, we open a code block with the familiar braces, and the if-statement is complete.<\/p>\r\n\r\n<p><code class=\"longsyntax\">if(<em>condition<\/em>) { <em>statements<\/em> }<\/code><\/p>\r\n\r\n<p>Now, if at the time of executing this code the condition returns true, the block of code inside is executed. Otherwise it is completely ignored.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nif(5 > 3) {\r\n\tconsole.log(\"Yay! Five is still greater than 3!\");\r\n}\r\n<\/pre>\r\n\r\n<h2>The else if Statement<\/h2>\r\n\r\n<p>Often, you want to try a new condition if your first one is false. For example, if a user has over 1000 points in his account, display a Gold User badge, but if he has between 500 and 1000, display a Silver User badge. In that case, you can follow up the if statement with an <code>else if<\/code> statement. If the first condition isn&rsquo;t true, it checks if this one is true. It&rsquo;s a way of chaining multiple if statements, which also means that you can put as many <em>else if<\/em> statements after each other as you want.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nif(5 > 5) {\r\n\tconsole.log(\"Five seems to be greater than five\");\r\n} else if(5 == 5) {\r\n\tconsole.log(\"Five seems to be equal to five\"); \/\/Only this one is executed\r\n}\r\n<\/pre>\r\n\r\n<h2>The else Statement<\/h2>\r\n\r\n<p>Any (else) if statement can be closed off with the <code>else<\/code> statement. It doesn&rsquo;t require a new condition, because it simply checks whether all previous conditions where false. You could view it as a default option &ndash; if all else fails, use this. For example, if the temperature outside is above zero, display a red background, and display a blue background otherwise.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nif(5 > 6) {\r\n\tconsole.log(\"Five seems to be greater than six\");\r\n} else if(5 == 6) {\r\n\tconsole.log(\"Five seems to be equal to six\");\r\n} else {\r\n\tconsole.log(\"Five seems to be less than six\");  \/\/Only this one is executed\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: You can have only one else statement, and it should always be the last one in the chain.<\/p>\r\n\r\n<h2>The Ternary Operator<\/h2>\r\n\r\n<p>Sometimes, you don&rsquo;t know for certain which value you want to assign to a variable, but it depends on a certain condition. For this, a very useful shorthand was invented, which is called the <strong>ternary operator<\/strong> or sometimes even referred to as <code>?:<\/code>. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">variable = (<em>condition<\/em>) ? value<sub>1<\/sub> : value<sub>2<\/sub><\/code><\/p>\r\n\r\n<p>If <em>condition<\/em> is true, it assigns value<sub>1<\/sub> to the variable, if it&rsquo;s false, it assigns value<sub>2<\/sub>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = (5 > 4) ? 1 : 0; \/\/x is 1\r\n<\/pre>\r\n\r\n<h2>The switch Statement<\/h2>\r\n\r\n<p>These if statements are great, but quite tedious to write out when we&rsquo;re checking against the same expression every time. In the example I gave with the Gold and Silver badge for the user, we&rsquo;d be checking against the same variable - his points total - every time. If we had like 20 different badges, I don&rsquo;t think you&rsquo;d like writing out that massive if statement.<\/p>\r\n\r\n<p>For this, we have the <code>switch<\/code> statement. It evaluates the expression you give it once, at the start, and then checks it against every <code>case<\/code> you provide. When it finds a match, it executes the code block within the case.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 2;\r\n\r\nswitch(x) {\r\n\tcase 0:\r\n\t\tdoSomething();\r\n\tcase 1:\r\n\t\tdoSomethingElse();\r\n\tcase 2:\r\n\t\tdoAnotherThing(); \/\/This one is executed\r\n}\r\n<\/pre>\r\n\r\n<p>This way, however, it keeps executing everything below it after it&rsquo;s already found one match. To exit out of the statement, use the <code>break<\/code> keyword.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 1;\r\n\r\nswitch(x) {\r\n\tcase 0:\r\n\t\tdoSomething();\r\n\t\tbreak;\r\n\tcase 1:\r\n\t\tdoSomethingElse(); \/\/This one is executed\r\n\t\tbreak;\r\n\tcase 2:\r\n\t\tdoAnotherThing(); \/\/This one isn't\r\n\t\tbreak;\r\n}\r\n<\/pre>\r\n\r\n<p>Just as with if statements, we would like to have a default code block to execute when everything else fails. For this, use the <code>default<\/code> keyword. It&rsquo;s best placed at the end, but can be placed anywhere.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 3;\r\n\r\nswitch(x) {\r\n\tcase 0:\r\n\t\tdoSomething();\r\n\t\tbreak;\r\n\tcase 1:\r\n\t\tdoSomethingElse();\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tconsole.log(\"Yay, defaults!\"); \/\/This one is executed\r\n\t\tbreak;\r\n}\r\n<\/pre>\r\n\r\n<p>One bonus feature you receive with the switch statement, is the possibility to <strong>fall through<\/strong> cases. You can assign the same code block to multiple cases, and multiple code blocks to a single case. As long as you don&rsquo;t <em>break<\/em> out, it just keeps falling through the code until it reaches the end.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 1;\r\n\r\nswitch(x) {\r\n\tcase 0:\r\n\t\tdoSomething();\r\n\t\tbreak;\r\n\tcase 1:\r\n\t\tdoSomethingElse(); \/\/This one is executed\r\n\tcase 2:\r\n\t\tconsole.log(\"Yay, defaults!\"); \/\/This one as well\r\n\t\tbreak;\r\n}\r\n<\/pre>\r\n","slur":"javascript-conditions","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"238","title":"[JavaScript] Control Flow & Error Handling","post":"<p>With <em>if<\/em> and <em>switch<\/em> statements we can largely control the flow of the program, but not entirely. If anything goes wrong, JavaScript just completely stops executing and raises an exception or throws an error. In most cases, these errors will be vague and general, and not really tell you what&rsquo;s going on, because JavaScript doesn&rsquo;t understand the ideas behind your script.<\/p> \r\n\r\n<p>Therefore, it&rsquo;s good to be able to generate your own custom error messages, and be able to continue the program when something goes wrong.<\/p>\r\n\r\n<h2>The try &hellip; catch Statement<\/h2>\r\n\r\n<p>If there&rsquo;s code you&rsquo;re not certain about, or that has a chance of producing fatal errors, you can first <code>try<\/code> it, and then <code>catch<\/code> any possible errors. If an errors occurs, you&rsquo;ll be able to display it, and the program just continues execution.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ntry {\r\n\t\/\/statements...\r\n} catch(err) {\r\n\t\/\/error handling...\r\n}\r\n<\/pre>\r\n\r\n<p>You can choose the name of the variable that contains the error yourself, but sticking with <code>e<\/code> or <code>err<\/code> is usually wise.<\/p>\r\n\r\n<h2>The throw Keyword<\/h2>\r\n\r\n<p>This way you&rsquo;re still using the standard JavaScript error messages, but you can use the <code>throw<\/code> keyword to throw your own error messages. You can throw an error message as a number, string, Boolean or object. But it&rsquo;s recommended you choose something descriptive that really gives you insight into what went wrong. Custom errors, in this case, need to be thrown within the <code>try<\/code> part of the try-catch statement, but they are also allowed anywhere outside of such an environment.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ntry {\r\n\tvar x = 5;\r\n\tif(x === undefined) {\r\n\t\tthrow \"Assigning x failed miserably!\";\r\n\t}\r\n} catch(err) {\r\n\tconsole.log(err); \r\n\t\/\/If, somehow, assigning x failed in the try part, this will print the message \"Assigning x failed miserably!\"\r\n}\r\n<\/pre>\r\n\r\n<h2>The finally Statement<\/h2>\r\n\r\n<p>Using such a construction already prevents JavaScript from completely stopping execution when the slightest error occurs, but you can use the <code>finally<\/code> statement to neatly close it off. Whatever happens, the code within finally is executed. This code is mostly used to clean up the mess made by this error. For example, if the error is that we&rsquo;re trying to assign a value that doesn&rsquo;t exist to a variable, we need to somehow make sure we assign a valid (default) value before actually continuing with the code.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ntry {\r\n\r\n} catch(err) {\r\n\r\n} finally {\r\n\t\/\/This code runs anyhow\r\n}\r\n<\/pre>\r\n\r\n<h2>A Final Note<\/h2>\r\n\r\n<p>This is great and all, but it&rsquo;s of course better to solve every bug in your program and write clean code, than just list all the errors and let them happen. These kinds of error handling practices should only be used on critical parts of the code that you really can&rsquo;t have breaking down, or parts you know have a chance of failing, but can&rsquo;t (at the moment) do something about.<\/p>\r\n","slur":"javascript-control-flow-error-handling","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"239","title":"[JavaScript] Loops I","post":"<p>Lots of ways to make your life easier have already been raised, but the last one hasn&rsquo;t been: <strong>loops<\/strong>. With functions we can call the same set of statements with a single line &ndash; but if we wanted to perform that function many times, we would still have to type lots of duplicate lines. That&rsquo;s when loops come in, which, as the name suggest, loop through the same piece of code a certain amount of times. And just as with functions, we can change the parameters every time. Typically, loops are used to loop through all elements of an array, or all properties of an object.<\/p> \r\n\r\n<p>There are multiple kinds of loops, of which some are general ones (applicable to anything), and some are specific (methods applicable to only certain data types). I want to start off with the general ones, as you&rsquo;ll use them most often, and they introduce the concept of loops very well.<\/p>\r\n\r\n<h2>The for Loop<\/h2>\r\n\r\n<p>A <code>for<\/code> loop executes a code block a predetermined amount of times. It needs three statements as arguments, split by a semicolon.<\/p>\r\n\r\n<p><code class=\"longsyntax\">for(<em>statement1<\/em>; <em>statement2<\/em>; <em>statement3<\/em>) {\r\n\t<em>code<\/em>\r\n}<\/code><\/p>\r\n\r\n<p>Statement 1 is the <strong>initializer<\/strong>. It declares a variable (the <strong>iterator<\/strong>) and sets it to an initial value.<\/p>\r\n\r\n<p>Statement 2 is the <strong>condition<\/strong>, where one of the operands is the initializer. As long as the condition is true, the loop keeps running.<\/p>\r\n\r\n<p>Statement 3 is the <strong>updater<\/strong>. Whatever statements are inside are performed every time a loop ends. Usually, this simply increments the iterator.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfor(var i=0;i<10;i++) {\r\n\tconsole.log(\"Current iteration is \" + i); \/\/Prints 10 statements, each with the current value of i\r\n}\r\n<\/pre>\r\n\r\n<p>If you want, you can declare more variables to be used within the for loop in the <em>initializer<\/em>. Nevertheless, it&rsquo;s best to keep the other two statements as simple as possible.<\/p>\r\n\r\n<h2>The break &amp; continue keywords<\/h2>\r\n\r\n<p>There will be times when you want to exit out of a for loop early, or skip some of the iterations. For example, if a <em>for loop<\/em> loops through an array to find a certain value, once it has found that value it doesn&rsquo;t need to continue searching and can exit the loop.<\/p>\r\n\r\n<p>The <code>break<\/code> keyword exits the current loop.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfor(var i=0;i<10;i++) {\r\n\t\/\/If the iterator is a multiple of three, stop looping\r\n\tif(i%3 === 0) {\r\n\t\tbreak;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>The <code>continue<\/code> keyword continues to the next iteration of the loop.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfor(var i=0;i<10;i++) {\r\n\t\/*If the iterator is an even number, skip this iteration and go to the next value:\r\n\tnothing will be logged *\/\r\n\tif(i%2 === 0) {\r\n\t\tcontinue;\r\n\t}\r\n\tconsole.log(\"Current value is \" + i);\r\n}\r\n<\/pre>\r\n\r\n<h2>The while Loop<\/h2>\r\n\r\n<p>A <code>while<\/code> loop is simpler, but requires you to be more careful. It requires a condition, any condition, and runs as long as this condition is true. It&rsquo;s up to you to ensure the condition is correct, and is at some point going to be false, otherwise you get an <em>infinite loop<\/em> &ndash; which causes everything to crash.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 0;\r\n\r\n\/\/This loop runs 10 times\r\nwhile(x < 10) {\r\n\tx++;\r\n}\r\n<\/pre>\r\n\r\n<h2>The do &hellip; while Loop<\/h2>\r\n\r\n<p>One downside of the while loop, is that you don&rsquo;t know how often it will run, and therefore don&rsquo;t know if it will run <em>at all<\/em>. Usually you want a piece of code to execute at least once, which is when you use the <code>do &hellip; while<\/code> loop. It runs whatever is inside the do block once, and only after that starts checking the condition and looping if necessary.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 0;\r\n\r\n\/\/This loop runs one time\r\ndo {\r\n\tx++;\r\n} while(x < -5);\r\n<\/pre>\r\n\r\n<h2>The for &hellip; in Loop<\/h2>\r\n\r\n<p>This is great and all, but we can&rsquo;t use a standard <em>for loop<\/em> to loop through all properties of an object, as the properties are not numerically indexed. That&rsquo;s when we use the <code>for &hellip; in<\/code> loop. It uses the for keyword you just learnt about, but needs only one statement, which makes the syntax:<\/p>\r\n\r\n<p><code class=\"longsyntax\">for(<em>propertyName<\/em> in <em>Object<\/em>) { <em>statements<\/em> } <\/code><\/p>\r\n\r\n<p>Then, within the loop, you can access the value of each property.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {a:0, b:1, c:2};\r\n\r\nfor(var prop in obj) {\r\n\tconsole.log(prop);\r\n}\r\n\r\n\/* This prints\r\n\ta\r\n\tb\r\n\tc\r\n*\/\r\n<\/pre>\r\n\r\n<h2>Nested Loops &amp; Labels<\/h2>\r\n\r\n<p>Loops can be nested. Nothing special here, just make sure you assign a different variable name to the different iterators. What is special, is that we can use the <em>break<\/em> or <em>continue<\/em> keywords on parent loops. For example, say we had three loops nested inside each other, this allows us to break out of them all at the same time with one statement.<\/p>\r\n\r\n<p>We can&rsquo;t save a loop inside a variable, as it isn&rsquo;t a data type, but we can <strong>label<\/strong> it. This is done by typing any name, followed by a colon.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsomeLabel: for(var i=0;i<10;i++) {\r\n\tconsole.log(i);\r\n}\r\n<\/pre>\r\n\r\n<p>Now we can add a label name after the <em>break<\/em> or <em>continue<\/em> keyword to specify which loop we are referring to.<\/p>\r\n\r\n\r\n<pre data-lang=\"javascript\">\r\nsomeLabel: for(var i=0;i<10;i++) {\r\n\t\t\t\tfor(var j=10;j>5;j--) {\r\n\t\t\t\t\t\/\/If i and j are the same, break out of both loops at once\r\n\t\t\t\t\tif(i == j) {\r\n\t\t\t\t\t\tbreak someLabel;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t   }\r\n<\/pre>\r\n","slur":"javascript-loops-I","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"240","title":"[JavaScript] Loops II","post":"<p>Now that you (hopefully) understand the concept of loops, we can revisit arrays and objects, and discuss the methods I&rsquo;ve left out earlier. These methods loop over arrays or objects, and perform certain basic and useful functions. They could, therefore, be replicated with your regular <em>for loop<\/em>, but that would be more complex and more work.<\/p> \r\n\r\n<h2>Objects<\/h2>\r\n\r\n<p>The <code>hasOwnProperty(<em>propertyName<\/em>)<\/code> method returns true if an object has the property <em>propertyName<\/em>, and false otherwise. The <code>keys()<\/code> method returns an array with all properties that an object has.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {a:0, b:1, c:2}\r\nobj.hasOwnProperty(\"a\"); \/\/true\r\nvar x = Object.keys(obj); \/\/x is [\"a\",\"b\",\"\"c] \r\n<\/pre>\r\n\r\n<p>I think it&rsquo;s a good exercise to see if you can simulate these methods using your knowledge of <em>for &hellip; in loops<\/em>!<\/p>\r\n\r\n<h2>Arrays<\/h2>\r\n\r\n<h5>Reduction<\/h5>\r\n\r\n<p>The <code>reduce(<em>function, initial<\/em>)<\/code> method is able to reduce an array to a single value, which it does by looping through all values and performing a function. This function determines how all elements are combined together. It is automatically given four arguments:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>previousValue<\/strong>: the value from all previous elements combined<\/li>\r\n\t<li><strong>currentValue<\/strong>: the value of the current element being processed<\/li>\r\n\t<li><strong>currentIndex<\/strong>: the index of the current element being processed<\/li>\r\n\t<li><strong>array<\/strong>: the array the method was called upon<\/li>\r\n<\/ul>\r\n\r\n<p>This reduced value starts from the value provided in the second <em>initial<\/em> parameter, which means that <em>previousValue = initial<\/em> when processing the first element of the array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nvar y = x.reduce(function(previousValue,currentValue,currentIndex,array) { return previousValue+currentValue; }, 0); \/\/y is 15, simply all elements added together\r\n<\/pre>\r\n\r\n<p>The <code>reduceRight(<em>function, initial<\/em>)<\/code> method does the same, but starts at the end and works towards the start.<\/p>\r\n\r\n<h5>Creating<\/h5>\r\n\r\n<p>The <code>map(<em>function, thisObject<\/em>)<\/code> method creates a new array, which contains the results of calling the provided <em>function<\/em> on every element of the original array.<\/p>\r\n\r\n<p>The function you provide is automatically given three arguments:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>currentValue<\/strong>: the value of the current element<\/li>\r\n\t<li><strong>index<\/strong>: the index of the current element<\/li>\r\n\t<li><strong>array<\/strong>: the array the method was called upon<\/li>\r\n<\/ul>\r\n\r\n<p>The second parameter is used to set what <code>this<\/code> refers to inside the <em>function<\/em>, but is optional.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nvar y = x.map(function(currentValue,currentIndex,array) { return currentValue\/(currentIndex+1); }); \/\/y is [1,1,1,1,1]\r\n<\/pre>\r\n\r\n<p>The <code>filter(<em>function, thisObject<\/em>)<\/code> method creates a new array which includes all values that pass the test in <em>function<\/em>. In other words, it preserves only the values which make the <em>function<\/em> return true. It receives the same arguments as the <em>map<\/em> method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nfunction someFunc(currentValue,currentIndex,array) { \r\n\tif(currentValue%2 === 0) { \r\n\t\treturn true; \r\n\t} else { \r\n\t\treturn false; \r\n\t}\r\n}\r\n\r\nvar y = x.filter(someFunc); \/\/y is [2,4]\r\n<\/pre>\r\n\r\n<h5>Testing<\/h5>\r\n\r\n<p>The <code>every(<em>function, thisObject<\/em>)<\/code> method tests whether every element within the array makes the <em>function<\/em> return true. If at least one time the <em>function<\/em> returns false, it returns false.<\/p>\r\n\r\n<p>The <code>some(<em>function, thisObject<\/em>)<\/code> method checks whether at least one element of the array passes the test. Only if all of them fail, it returns false.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nfunction someFunc(currentValue,currentIndex,array) { \r\n\tif(currentValue%2 === 0) { \r\n\t\treturn true; \r\n\t} else { \r\n\t\treturn false; \r\n\t}\r\n}\r\n\r\nvar y = x.every(someFunc); \/\/y is false\r\n\r\nvar z = x.some(someFunc); \/\/z is true\r\n<\/pre>\r\n\r\n<p>Both <em>function<\/em>s receive the same arguments as the <em>map<\/em> method.<\/p>\r\n\r\n<h5>Searching<\/h5>\r\n\r\n<p>The <code>find(<em>function, thisObject<\/em>)<\/code> method returns the <em>value<\/em> of the element in the array that passes the test. In other words, if a value makes the <em>function<\/em> return true, that value is returned by this method.<\/p>\r\n\r\n<p>The <code>findIndex(<em>function, thisObject<\/em>)<\/code> method does the same, but returns the <em>index<\/em> of the matching element.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nfunction someFunc(currentValue,currentIndex,array) { \r\n\tif(currentValue%2 === 0) { \r\n\t\treturn true; \r\n\t} else { \r\n\t\treturn false; \r\n\t}\r\n}\r\n\r\nvar y = x.find(someFunc); \/\/y is 2\r\n\r\nvar z = x.findIndex(someFunc); \/\/z is 1\r\n<\/pre>\r\n\r\n<h5>Filling Up<\/h5>\r\n\r\n<p>The <code>fill(<em>value, start, end<\/em>)<\/code> method fills all elements with an index between <em>start<\/em> and <em>end<\/em> with the provided <em>value<\/em>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = [1,2,3,4,5];\r\n\r\nvar y = x.fill(10,1,3); \/\/y is [1,10,10,4,5]\r\n<\/pre>\r\n\r\n<h5>The forEach Method<\/h5>\r\n\r\n<p>The <code>forEach(<em>function, thisObject<\/em>)<\/code> method executes <em>function<\/em> for every element in the array. This function receives the same arguments as the <em>map<\/em> method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction logElements(currentValue, currentIndex, array) {\r\n  console.log(\"Current value is \" + currentValue);\r\n}\r\n\r\n[1,2].forEach(logElements);\r\n\r\n\/* Prints\r\nCurrent value is 1\r\nCurrent value is 2\r\n*\/\r\n<\/pre>\r\n","slur":"javascript-loops-II","cat":"Website","subcat":"JavaScript","video":"","diff":"4","quiz":""},
{"id":"241","title":"[JavaScript] JSON","post":"<p>Before we can finally begin working on changing actual webpages, I have one last small thing to explain. JSON is an acronym for JavaScript Object Notation, which is a fancy term for working exclusively with objects.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">JSON is a way to save and load JavaScript objects.<\/p>\r\n\r\n<p>The idea is, that you create one master object, which holds every bit of data you want saved. Usually this means even more objects with even more properties.<\/p>\r\n\r\n<p>Then, use <code>JSON.stringify(<em>masterObject<\/em>)<\/code> to transform it into a string, which you can just save in a text file or copy-paste anywhere you like. To transform it back into objects later on, use <code>JSON.parse(<em>string<\/em>)<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar userData = { name : \"Bert\", score : 1200, }\r\nvar x = JSON.stringify(userData); \/\/x is '{ \"name\":\"Bert\", \"score\":1200}'\r\nvar y = JSON.parse(x); \/\/y is the same as userData again\r\n<\/pre>\r\n\r\n<p>That&rsquo;s all! Do keep in mind though, that this is a very simple example, and you'll probably be using much bigger objects in real-life cases.<\/p>\r\n\r\n<p>Also notice that stringifying a JSON object does two things: it places double quotes around all strings (single quotes are not allowed), and it removes trailing commas. If you&rsquo;re ever thinking of integrating JSON with some other language, know that a string that doesn't comply with these two rules will throw an error, as it isn&rsquo;t valid JSON notation.<\/p>\r\n","slur":"javascript-JSON","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"242","title":"[JavaScript] DOM","post":"<p>DOM stands for Document Object Model, which is the system that relates JavaScript to HTML. Within this system, every HTML element is regarded as an object, and has certain properties and methods we can call. We like to call them <strong>nodes<\/strong>, as they&rsquo;re not entirely the same as objects, but we&rsquo;ll get to that later. For now, just know that everything you&rsquo;ve learnt thus far is applicable and ready to be used in the DOM!<\/p> \r\n\r\n<p>The object that contains all these nodes is the <code>document<\/code>, and every call to the DOM starts with accessing a property or method on this object.<\/p>\r\n\r\n<h2>Accessing Elements<\/h2>\r\n\r\n<p>Elements can be accessed via their <strong>id<\/strong>, <strong>class<\/strong>, <strong>tag<\/strong> or a custom <strong>CSS selector<\/strong>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>document.<\/em>getElementById(<em>id<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the element with id = <em>id<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>document.<\/em>getElementsByClassName(<em>class<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns all elements with class = <em>class<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>document.<\/em>getElementsByTagName(<em>tag<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns all <em>tag<\/em> elements<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>document.<\/em>querySelector(<em>selector<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the first element found that fits the CSS selector<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = document.getElementById('main'); \/\/x holds the element with id \"main\"\r\n<\/pre>\r\n\r\n<p>All of these can just be saved into a variable, so you don&rsquo;t have to write these long methods every time.<\/p>\r\n\r\n<h2>Changing Elements<\/h2>\r\n\r\n<p>There&rsquo;s three things that can be changed on an HTML element: the content, the attributes, and the CSS styles.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem.<\/em>innerHTML = <em>content<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes the content of the element to <em>content<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem.<\/em>attribute = <em>value<\/em><\/code><\/p>\r\n\r\n\t\t\t<p><code><em>elem.<\/em>setAttribute(attribute, <em>value<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets attribute to <em>value<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem<\/em>.style.property = <em>value<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets property to <em>value<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.getElementById('main').style.backgroundColor = 'red'; \/\/changes the background colour of the element with id \"main\" to red\r\n<\/pre>\r\n\r\n<h2>Adding and Removing Elements<\/h2>\r\n\r\n<p>Instead of just changing existing elements, we can also add our own and remove some!<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>document.<\/em>createElement(<em>element<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates an HTML element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem.<\/em>removeChild(<em>element<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Removes <em>element<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem.<\/em>appendChild(<em>element<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds <em>element<\/em> as the last child to <em>elem<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem.<\/em>insertBefore(<em>element, child<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds <em>element<\/em> to <em>elem<\/em>, right before <em>child<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>elem<\/em>.replaceChild(<em>element, oldElement<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Replaces <em>oldElement<\/em> with <em>element<\/em> inside of <em>elem<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = document.createElement('p');\r\ndocument.getElementById('main').appendChild(x); \/\/adds a paragraph tag, as a child, to the element with id \"main\"\r\n<\/pre>\r\n\r\n<h2>Navigating Nodes<\/h2>\r\n\r\n<p>All these nodes are connected to each other, which enables you to pick a starting point and travel to wherever you want using node relationships. But, one important difference between HTML elements and nodes, is that the text within an element is also a node &ndash; more specifically, it&rsquo;s a <strong>text node<\/strong>. Attributes of elements are also nodes &ndash; <strong>attribute nodes<\/strong>.<\/p>\r\n\r\n<p>The value of these text or attribute nodes can be accessed by calling the <code>innerHTML<\/code> or <code>nodeValue<\/code> property on the element node.<\/p>\r\n\r\n<p>Other properties to navigate nodes are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>parentNode<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The parent node<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>childNodes[<em>number<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The child with index <em>number<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>firstChild<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The first child ( = index 0)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lastChild<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The last child<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>nextSibling<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The first node right after it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>previousSibling<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The first node right before it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>nodeName<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For element nodes, this is the tag name.<\/p>\r\n\r\n\t\t\t<p>For attribute nodes, this is the attribute name<\/p>\r\n\r\n\t\t\t<p>For text nodes, this is <em>#text<\/em><\/p>\r\n\r\n\t\t\t<p>For the root document node, this is <em>#document<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = document.getElementById('main').parentNode; \/\/selects the parent element of the element with id \"main\"\r\n<\/pre>\r\n\r\n<h2>Node Lists<\/h2>\r\n\r\n<p>DOM methods that could potentially select a group of elements, like <code>getElementsByClassName()<\/code> and <code>getElementsByTagName()<\/code>, return a <strong>node list<\/strong>. This is essentially an array, but very restricted. Node lists have a <code>length<\/code> property, and every index can be accessed like you&rsquo;re used to &ndash; but it stops there.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = document.getElementsByClassName(\"coolButton\");\r\nfor(var i=0;i&lt;x.length;i++) {\r\n\t\/\/Changes the text colour of all elements with class \"coolButton\" to white\r\n\tx[i].style.color = 'white';\r\n}\r\n<\/pre>\r\n\r\n<h2>Changing CSS<\/h2>\r\n\r\n<p>The DOM only touches HTML, so changing CSS means setting an inline style on an element. In addition, CSS properties often contain hyphens ( - ) which JavaScript can&rsquo;t handle. Therefore, property names need to have the hyphen removed, and the first letter of each word capitalized. For example: <code>border-width<\/code> becomes <code>borderWidth<\/code>, <code>list-style-type<\/code> becomes <code>listStyleType<\/code>. Values are provided just like you&rsquo;re used to, but don&rsquo;t forget to type them as strings.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = document.getElementById('main').marginLeft = '100px';\r\n<\/pre>\r\n\r\n<h2>Dynamic Writing<\/h2>\r\n\r\n<p>If you want, you can write text within a document as it is being loaded. To do so, use <code>document.write(<em>message<\/em>)<\/code> or <code>document.writeln(<em>message<\/em>)<\/code> within the body part of the document. If you place them in the head, they are executed <em>after<\/em> the page has finished loading, which means they overwrite everything that&rsquo;s inside. The only difference between the two is that the second one automatically inserts a new line after it.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.writeln(\"This is a cool line of text\");\r\n<\/pre>\r\n","slur":"javascript-DOM","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"243","title":"[JavaScript] BOM I","post":"<p>BOM stands for Browser Object Model. It&rsquo;s not an officially recognized model, but everybody just kind of agrees on it and has implemented it, which means it&rsquo;s safe to use it. In het DOM we saw that the HTML markup was transformed into a network of nodes, with the <em>document<\/em> being the root node. The BOM goes one step further, and represents a parent node for the document, which is the thing that contains every document: the browser <code>window<\/code>. The window has access to a large set of useful features that the document couldn&rsquo;t possibly know of, and you&rsquo;ll probably need to do something with the BOM in every project of yours.<\/p> \r\n\r\n<h2>Window Size<\/h2>\r\n\r\n<p>To access the size of the browser <em>window<\/em>, use <code>window.innerWidth<\/code> and <code>window.innerHeight<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.getElementById('bigScreen').style.width = window.innerWidth;\r\ndocument.getElementById('bigScreen').style.height = window.innerHeight;\r\n<\/pre>\r\n\r\n<p>NOTE: All methods and properties of the window object you&rsquo;ll encounter below, can also be accessed without the word <code>window<\/code> prefixed. It&rsquo;s shorter.<\/p>\r\n\r\n<h2>Screen Size<\/h2>\r\n\r\n<p>To access the user&rsquo;s <em>screen<\/em>, use <code>window.screen<\/code>. These properties are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of the screen<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The height of the screen<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>availWidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of the screen <em>minus <\/em>space taken up by interfaces (like windows task bar)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>availHeight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The height of the screen <em>minus<\/em> space taken up by interfaces<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>colorDepth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the number of bits used to display one colour (24 or 32 bits is usual these days).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pixelDepth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the number of bits used for one pixel. For modern computers, colorDepth and pixelDepth are the same.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(\"Screen dimensions are \" + window.screen.width + 'x' + window.screen.height);\r\n<\/pre>\r\n\r\n<h2>Window Methods<\/h2>\r\n\r\n<p>There are two methods available you can call on the window object:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>open(<em>URL<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Opens a new window which links to <em>URL<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>close(<em>window<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Closes a window. Can only close windows you opened.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nwindow.open(\"http:\/\/google.com\");\r\n<\/pre>\r\n\r\n<h2>Window Location<\/h2>\r\n\r\n<p>The <code>location<\/code> property is used to refer to the current URL the window or tab is pointing to. We can use it to get or redirect the current page. These properties are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>href<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the complete URL of the current page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>hostname<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the domain name<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pathname<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the path and filename of the current page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>protocol<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the web protocol used (http:\/\/ or https:\/\/)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>assign<code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Loads a new document<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(window.location.href); \/\/Prints the current URL\r\n<\/pre>\r\n\r\n<h2>Window History<\/h2>\r\n\r\n<p>Of course we can&rsquo;t go sniffing around other people&rsquo;s history, which means the <code>history<\/code> property can only <em>move<\/em> back and forward between history of the current window.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>forward()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Does the same as clicking the Forward button in the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>backward()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Does the same as clicking the Back button in the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>go(<em>index<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Moves <em>index<\/em> amount of steps. A negative number will move backward, a positive number forward.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pushState(<em>stateObject, title, url<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inserts the <em>url<\/em> into the user's history. The first argument is a regular object which can be used to add data to this state. The <em>title<\/em> is mostly ignored by browsers.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>replaceState(<em>stateObject, title, url<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Works the same as the previous method, but replaces the current URL you're on, instead of adding a new one at the end of your history stack.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nwindow.history.go(-2); \/\/Go two pages backward in history (if possible)\r\n<\/pre>\r\n\r\n<h2>Popup Boxes<\/h2>\r\n\r\n<p>You might think of popup boxes as being the most annoying things on the internet, which is partly true, but they are great for two purposes: debugging\/testing your code, and preventing users from doing stupid things. For example, if somebody has been typing an article for an hour, it would be a shame if they accidentally hit the back button and everything was gone &ndash; popup boxes can interrupt that and ask the user if they really want to leave. There are three flavours available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Type\/Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>alert(<em>someText<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An alert box with <em>someText<\/em> pops up, and disappears when the user clicks OK.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>confirm(<em>someText<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A confirm box with <em>someText<\/em>, but if the user presses OK it returns <em>true<\/em>, and if he presses Cancel it returns <em>false<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>prompt(<em>someText, initialValue<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A prompt box with <em>someText<\/em>, and a text input field.<\/p>\r\n\r\n\t\t\t<p>If the user presses OK it returns the value the user typed, if he presses Cancel it returns <em>null<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar a = prompt(\"What's your name?\", \"Juan\");\r\nif(a !== null) {\r\n\tconsole.log(\"Welcome \" + a + \"!\");\r\n}\r\n<\/pre>\r\n","slur":"javascript-BOM-I","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"244","title":"[JavaScript] BOM II","post":"<p>This second chapter on the BOM contains maybe two of the most valuable aspects: timing and cookies.<\/p> \r\n\r\n<h2>Timing<\/h2>\r\n\r\n<p>The browser window has a sense of timing, which means you can time functions to execute after a certain period or at regular intervals.<\/p>\r\n\r\n<p>The <code>setTimeout(<em>function, time)<\/em><\/code> method executes <em>function<\/em> after waiting for <em>time<\/em> <strong>milliseconds<\/strong>. It executes it only once, and you can even prevent it from happening by calling <code>clearTimeout(<em>timeout<\/em>)<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsetTimeout(callback, 1000);\r\n\r\nfunction callback() {\r\n\tconsole.log(\"1 second passed!\");\r\n}\r\n<\/pre>\r\n\r\n<p>The <code>setInterval(<em>function, time<\/em>)<\/code> method executes <em>function<\/em> every <em>time<\/em> milliseconds &ndash; which means it continues calling the function at regular intervals until infinity. To stop it, there&rsquo;s the <code>clearInterval(<em>interval<\/em>)<\/code> method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction callback() {\r\n\tcounter++;\r\n}\r\n\r\nvar counter = 0;\r\n\/\/Increments the counter every second\r\nsetInterval(callback, 1000);\r\n<\/pre>\r\n\r\n<h2>Cookies<\/h2>\r\n\r\n<p>Cookies are a property of the <code>document<\/code> object, even though they are saved by the browser. And the confusion doesn&rsquo;t stop there: JavaScript has a very odd way of dealing with cookies, which I will try to explain.<\/p>\r\n\r\n<p>All cookies are stored as a string within the <code>document.cookie<\/code> property. This means that if you want to access the value of a certain cookie, you have to split this string into an array and loop through it. This also means that if you want to create a new cookie, you need to add it to the string.<\/p>\r\n\r\n<h5>Adding Cookies<\/h5>\r\n\r\n<p>This addition, however, doesn&rsquo;t work with the <code>+<\/code> like you&rsquo;re used to, but without it. The syntax for adding a new cookie is<\/p>\r\n\r\n<p><code class=\"longsyntax\">document.cookie = &rdquo;<em>name = value;<\/em>&rdquo;<\/code><\/p>\r\n\r\n<p>one cookie at a time. If you provide more than one, it <em>does<\/em> overwrite all the previous cookies.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.cookie = \"username=Juan;\";\r\ndocument.cookie = \"lastVisit=Sunday;\";\r\n\/\/Now two cookies are stored\r\n<\/pre>\r\n\r\n<h5>Accessing Cookies<\/h5>\r\n\r\n<p>This simple for loop can be used to loop through all the cookies. Not only can you access the values of certain cookies, you can also change or remove them. To save your changes you simply have to join the array into a string again, and assign that to the cookie property.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar keyValuePairs = document.cookie.split(';');\r\nfor(var i = 0; i < keyValuePairs.length; i++) {\r\n    console.log(keyValuePairs[i]);\r\n}\r\n\/* Prints\r\n\tusername=Juan\r\n\tlastVisit=Sunday\r\n*\/\r\n<\/pre>\r\n\r\n<h5>Expiration Date<\/h5>\r\n\r\n<p>Optionally, when creating a new cookie, you can assign an expiration date (in UTC time) with the syntax<\/p>\r\n\r\n<p><code class=\"longsyntax\">expires = <em>Date;<\/em><\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.cookie = \"username=Juan;expires=Thu, 17 Dec 2015 12:00:00 UTC\"\r\n<\/pre>\r\n\r\n<p>NOTE: You&rsquo;ll learn about Date notation in the <em>Dates<\/em> chapter.<\/p>\r\n\r\n<h2>Navigator<\/h2>\r\n\r\n<p>The <code>window.navigator<\/code> property refers to the kind of browser that is accessing the page. Every browser&rsquo;s implementation is slightly different though, which means using it doesn&rsquo;t always give the right results, so be careful. It has these properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>appCodeName<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Code name of the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>appName<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Actual name of the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>appVersion<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Version information of the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cookieEnabled<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Determines whether cookies are enabled in the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>language<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Language of the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>online<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Determines whether the browser is online<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>platform<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Which platform the browser is compiled for<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>product<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Engine name of the browser<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>userAgent<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User-agent header sent by the browser to the server<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>It also has one method, <code>javaEnabled()<\/code>, which returns true if Java is enabled within the browser.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(window.navigator.appName); \/\/Prints the name of the browser, in my case \"Netscape\"\r\n<\/pre>\r\n","slur":"javascript-BOM-II","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"245","title":"[JavaScript] Events","post":"<p>The very last concept that needs to be explained now, is the one that is most important in creating a dynamic web page. <em>Why didn&rsquo;t you talk about it sooner then?!<\/em> Because it combines a lot of ingredients I had to introduce first. This makes it sound very complex, but it&rsquo;s really simple actually.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">Events are specific things that happen within the web page<\/p>\r\n\r\n<p>For example, hovering over an element is an event, as well as typing something in an input text field or clicking a button.<\/p>\r\n\r\n<h2>Event Listeners<\/h2>\r\n\r\n<p>In order to know when an event happens, we need an element to <em>listen<\/em> for it. By adding a so-called <strong>event listener<\/strong> to elements, they are notified when an event happens, and can act accordingly &ndash; which is executing a certain function.<\/p>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">addEventListener(<em>event, function, capturing<\/em>)<\/code><\/p>\r\n\r\n<p>When <em>event<\/em> occurs, <em>function<\/em> is called. The third parameter will be explained shortly. These <em>events<\/em> are fixed names, like <code>&ldquo;click&rdquo;<\/code> or <code>&ldquo;hover&rdquo;<\/code>, you can look up in a reference table. To remove this specific event listener, use:<\/p>\r\n\r\n<p><code class=\"longsyntax\">removeEventListener(<em>event, function<\/em>)<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction performOnClick() {\r\n\tconsole.log(\"Clicked it!\");\r\n}\r\n\r\n\r\nvar x = document.getElementById('main');\r\nx.addEventListener(\"click\",performOnClick);\r\nx.addEventListener(\"click\",anotherFunction);\r\nx.removeEventListener(\"click\",anotherFunction);\r\n\/\/Now every time x is clicked, \"Clicked it!\" will be logged\r\n<\/pre>\r\n\r\n<p>You can add as many event listeners as you want to the same element.<\/p>\r\n\r\n<h2>Event Functions<\/h2>\r\n\r\n<p>There&rsquo;s nothing really special about the functions that are called when an event happens, except for the fact that they automatically receive one argument: the <strong>event<\/strong> itself. The <code>this<\/code> keyword within the function refers to the element the event happened on. Using these two together, you know everything you need. For example, if you listen to the event that a user presses a key, it has a property <code>keyCode<\/code> that tells you exactly which key has been pressed.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction performOnClick(e) {\r\n\tconsole.log(\"Pressed \" + e.keyCode);\r\n}\r\n\r\nvar x = document.getElementById('main');\r\nx.addEventListener(\"keydown\",performOnClick);\r\n\/*Every time the user presses a key while x is selected, \r\nit will print \"Pressed \" + &lt;the key that was pressed&gt;*\/\r\n<\/pre>\r\n\r\n<h2>Event Propagation<\/h2>\r\n\r\n<p>There are two ways JavaScript can deal with events happening on <strong>nested elements<\/strong>. Say we have a <code>&lt;span&gt;<\/code> inside a <code>&lt;p&gt;<\/code> tag, and both listen for click events. If the user clicks on the <code>span<\/code> tag, which of the two click events should be executed first? There&rsquo;s two answers:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Bubbling<\/strong>: Events bubble up the hierarchy; the <em>span<\/em> is handled first, and then its parents.<\/li>\r\n\t<li><strong>Capturing<\/strong>: Events capture things down the hierarchy; the <em>paragraph<\/em> is handled first, then its children.<\/li>\r\n<\/ul>\r\n\r\n<p>If you set the third parameter of an event listener to <em>false<\/em>, it will use bubbling, if you set it to <em>true<\/em>, it will use capturing.<\/p>\r\n\r\n<h2>Alternative Syntax<\/h2>\r\n\r\n<p>If you don&rsquo;t like a lot of typing, there are shorter ways.<\/p>\r\n\r\n<p>First of all, we can listen for events with <strong>event attributes<\/strong> integrated within the HTML. By simply adding <code>on<\/code> in front of an event name, with no space between, we can add it as an attribute to any element, which will listen for that particular event and execute the code you supply.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;div onclick=&#x22;someFunc&#x22;&#x3E;Click this div to fire someFunc!&#x3C;\/div&#x3E;\r\n<\/pre>\r\n\r\n<p>To add or remove event listeners this way, we can use JavaScript&rsquo;s ability to access element&rsquo;s properties:<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\ndocument.getElementById('main').onclick = function() { console.log(\"Clicked it!\"); };\r\n<\/pre>\r\n\r\n<p>NOTE: The function you supply here has to be without parentheses! We don&rsquo;t care about the outcome of the function, but want a reference to the function, so we know what to execute when the event occurs.<\/p>\r\n\r\n<h2>Common Events<\/h2>\r\n\r\n<p>There are <em>a lot<\/em> of events, and listing them all would do nobody any good, which is why I&rsquo;ll just show you the most common events.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Event<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>click<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User clicks on an element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mouseover<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User moves the mouse over an element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mouseout<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User moves the mouse away from an element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mousedown<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User is pressing a mouse button<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mouseup<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User just released a mouse button<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>keydown<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User pushes a keyboard key<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>change<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An element has been changed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>input<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>User inputs something in form\/ input field<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>load<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An element has finished loading<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>scroll<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The user scrolls an element<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>focus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An (input) element receives focus<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The <code>load<\/code> event is often used on the body tag to check when the page has finished loading. That&rsquo;s often necessary, because you can&rsquo;t perform operations on elements that haven&rsquo;t been loaded yet, so you want your script to start running only after everything is done loading.<\/p>\r\n","slur":"javascript-events","cat":"Website","subcat":"JavaScript","video":"","diff":"4","quiz":""},
{"id":"246","title":"[JavaScript] Regular Expressions","post":"<p>They have already been mentioned a few times in the chapters on Strings, but nowhere else. That&rsquo;s because they are specifically made for strings, and, even though their name seems scary, not that big of a deal.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">Regular Expressions are search patterns to find strings within strings<\/p>\r\n\r\n<p>When you know the exact string you&rsquo;re looking for, you can just use a simple string method. But, if you only know the general pattern of the string, you need to use a regular expression. For example, we could be searching a string for every number. The numbers are not the same, so we can&rsquo;t look for them specifically, but they all follow the same pattern; they are numbers!<\/p>\r\n\r\n<h2>Syntax<\/h2>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\/pattern\/modifiers<\/code><\/p>\r\n\r\n<p>Notice that this is not a string, and should not be put between quotes! The forward slash signals JavaScript that a regular expression is to come.<\/p>\r\n\r\n<h2>Testing<\/h2>\r\n\r\n<p>The <code>test<\/code> method tests whether a certain regular expression gives a match (returns <em>true<\/em> or <em>false<\/em>), the <code>exec<\/code> method returns any match(es) or <em>null<\/em> if there was no match.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/hello\/i.test(\"Hello world!\"); \/\/Returns true - it searches for hello, and the i tells it to be case-insensitive\r\n\/hello\/.exec('Hello hello world!'); \/\/Returns [\"hello\"], because it's the only match\r\n<\/pre>\r\n\r\n<h2>Modifiers<\/h2>\r\n\r\n<p>The modifiers change how it will look for the pattern.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Modifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>i<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Perform case-insensitive matching<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>g<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Perform a global match &ndash; find all matches instead of stopping at the first one<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>m<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Perform multiline matching<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\n\"Hello world!\".replace(\/l\/g, \"z\"); \/\/Returns \"Hezzo worzd!\", because the g tells it tu replace every instance, not just the first one\r\n<\/pre>\r\n\r\n<h2>Pattern<\/h2>\r\n\r\n<p>Besides letters, there are three things you can put in a pattern: <strong>ranges<\/strong>, <strong>metacharacters<\/strong> and <strong>quantifiers<\/strong>.<\/p>\r\n\r\n<h5>Range<\/h5>\r\n\r\n<p>These search for everything within a certain specified range:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Pattern<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>abcxyz<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any of the characters between the brackets<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[^<em>abcxyz<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any of the characters <em>not<\/en> between the brackets<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<em>0-9<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any of the digits between the brackets<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[^<em>0-9<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any of the digits <em>not<\/em> between the brackets<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>(<\/em>x<sub>1<\/sub> | &hellip; | x<sub>n<\/sub><\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any of the alternatives provided, separated with <code>|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/[0-5]\/.test(\"I have 4 chickens\"); \/\/Returns true\r\n<\/pre>\r\n\r\n<h5>Metacharacters<\/h5>\r\n\r\n<p>These search for one character of a certain kind:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Pattern<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>.<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find any single character (except newline or line terminator)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\w<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a word character (letters, digits and underscore)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\W<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a non-word character<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\d<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a digit<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\D<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a non-digit<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\s<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a whitespace character<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\S<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a non-whitespace character<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\b<\/code>\b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a match at the beginning or end of a word<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\B<\/code>\b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Find a match <em>not<\/em> at the beginning or end of a word<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\\s\/.test(\"I have 4 chickens\"); \/\/Returns true\r\n\/\\s\\s\/.test(\"I have 4 chickens\"); \/\/Returns false\r\n<\/pre>\r\n\r\n<h5>Quantifiers<\/h5>\r\n\r\n<p>Quantifiers search strings based on how many times a certain character occurs:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Pattern<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains at least one <em>x<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x*<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains zero or more occurrences of <em>x<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x?<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains zero or one occurrence of <em>x<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x{n}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains a sequence of <em>n x's<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x{n-m}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains a sequence of <em>n<\/em> to <em>m x's<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x{n,}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that contains a sequence of at least <em>n x's<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x$<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string with <em>x<\/em> at the end<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>^x<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string with <em>x<\/em> at the start<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>?=x<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that is followed by <em>x<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>?!x<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any string that is not followed by <em>x<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/z+\/.test(\"I have 4 chickens\"); \/\/Returns false\r\n<\/pre>\r\n\r\n<h2>RegExp Methods<\/h2>\r\n\r\n<p>Within the <em>String Manipulation<\/em> chapter we've seen a few methods for searching and replacing strings that use Regular Expressions. Now that we know how these work, I can showcase their true power.<\/p>\r\n\r\n<p>When using the <code>replace()<\/code> method, we can not only search for different\/multiple strings at the same time using regular expressions, we can also replace these matches with different strings. For this, we use a slightly different syntax:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>somestring<\/em>.replace(<em>RegExp<\/em>, \r\n\t\tfunction(<em>$1<\/em>, &hellip;, <em>$n<\/em>) { return <em>replacementString<\/em> });<\/code>\r\n\r\n<p>As you can see, we can call a function on every match that can do lots of calculations, and then return a custom string. The only problem here is: where do those parameters with dollar signs come from? Well, within a regular expression we can group certain parts using parentheses, and each of these sends their value as an argument to the function we provide. So, for example if we're looking for all strings ending in a number, and want to remove the number, we'd group everything besides the number, and simply return that argument as the replacement string. The variables don't <em>necessarily<\/em> need to start with dollar signs, but it's the notation used for regular expressions in all other languages as well, so I suggest you stick with it.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"I 11love 22you 33very 44VERY 55much\";\r\nx = x.replace(\/(\\d+)\/g,\"\"); \/\/x is \"I love you very VERY much\"\r\n\r\nx = x.replace(\/(\\w+)\/g, function($1) { \r\n\t\t\t\t\t\t\tif($1==\"VERY\") { \r\n\t\t\t\t\t\t\t\treturn \"\"; \r\n\t\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\t\treturn $1; \r\n\t\t\t\t\t\t\t} \r\n} ); \/\/x is I love you very  much\r\n<\/pre>\r\n","slur":"javascript-regular-expressions","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"247","title":"[JavaScript] Dates","post":"<p>Just like everything in JavaScript, Dates are objects with certain properties and methods we can use. The Date object can retrieve the current date, convert between different date notations, and do arithmetic with dates. The Date constructor, by default, works within the time zone your computer is in.<\/p> \r\n\r\n<h2>Date Notation<\/h2>\r\n\r\n<p>Dates can be written as a string, or as a number.<\/p>\r\n\r\n<p>As a string, it mostly follows the notation you&rsquo;re used to, and looks like this:<\/p>\r\n\r\n<p><code class=\"longsyntax\">Mon Dec 14 2015 14:30:16 GMT+0100<\/code><\/p>\r\n\r\n<p>As a number, it counts the amount of milliseconds passed since January 1, 1970, 00:00:00. This is called the <strong>zero time<\/strong>, and some other programming languages use it as well.<\/p>\r\n\r\n<h2>Creating a Date<\/h2>\r\n\r\n<p>The <code>Date()<\/code> constructor can take four different parameter sets:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Constructor<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>new Date()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets it to the current date<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>new Date(<em>milliseconds<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets it to zero time + <em>milliseconds<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>new Date(<em>dateString<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets it to the date provided with the string<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>new Date(<em>year, month, day, hours, <br\/>minutes, seconds, milliseconds<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets the date using all the parameters<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = new Date(5000); \r\n\/*x is 5000 millisecond after zero time, in my case\r\nThu Jan 01 1970 01:00:05 GMT+0100 (W. Europe Standard Time) *\/\r\n<\/pre>\r\n\r\n<p>NOTE: Months count from 0 to 11 &ndash; January is 0, December is 11.<\/p>\r\n\r\n<p>NOTE 2: Once such a date object is created, it is fixed &ndash; it doesn&rsquo;t change with time if you keep the website open.<\/p>\r\n\r\n<h2>Getter Methods<\/h2>\r\n\r\n<p>If you want to access not the whole date, but only a part, use these methods on the Date object.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getDate()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the day as a number (1 &ndash; 31)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getDay()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the weekday as a number (0 &ndash; 6)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getFullYear()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the year in 4 digits (yyyy)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getHours()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the hour (0 &ndash; 23)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getMilliseconds()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the milliseconds within a second (0 &ndash; 999)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getMinutes()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the minutes (0 &ndash; 59)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getMonth()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the month (0 &ndash; 11)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getSeconds()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the seconds (0 &ndash; 59)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>getTime()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Get the milliseconds since zero time<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = new Date();\r\nconsole.log(x.getDay()); \/\/Prints the current day, as a number\r\n<\/pre>\r\n\r\n<p>NOTE: If you add <strong>UTC<\/strong> after <em>get<\/em>, the function returns your answer in Universal Time Zone form, otherwise known as Greenwich Mean Time.<\/p>\r\n\r\n<h2>Setter Methods<\/h2>\r\n\r\n<p>The other way around works just as well &ndash; setting a specific part of a Date.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setDate(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the day as a number (1 &ndash; 31)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setFullYear(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the year in 4 digits (yyyy)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setHours(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the hour (0 &ndash; 23)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setMilliseconds(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the milliseconds within a second (0 &ndash; 999)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setMinutes(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the minutes (0 &ndash; 59)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setMonth(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the month (0 &ndash; 11)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setSeconds(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the seconds (0 &ndash; 59)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>setTime(<em>arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set the milliseconds since zero time<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = new Date();\r\nvar y = x.setDay(0); \/\/y is the current month, year and time, but with the day set to Sunday\r\n<\/pre>\r\n\r\n<h2>Converting<\/h2>\r\n\r\n<p>JavaScript automatically converts your Date to a string if you want to display it. If you, however, want to display it in UTC form you can use the <code>toUTCString()<\/code> method. If you only want the year, month and day, use the <code>toDateString()<\/code> method. If you want to convert a <em>string<\/em> date to its equivalent in milliseconds, use <code>Date.parse()<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = new Date();\r\nconsole.log(Date.parse(x)); \/\/Prints, at the moment, 1450436325000\r\n<\/pre>\r\n\r\n<h2>A Note on String Notation<\/h2>\r\n\r\n<p>Basically, any notation you like works for date strings. You can use numbers for months and days, but also names. You can separate year, day and month with a space, <code>\/<\/code> or <code>-<\/code>. You can put them in any order you like. Really, everything works!<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = new Date(\"25 Mar 2015\");\r\nvar y = new Date(\"25-March-2015\"); \/\/y is exactly the same as x \r\n<\/pre>\r\n\r\n<p>NOTE: Names of months can be written in full (January) or abbreviated by taking the first three characters (Jan). Names of days are always abbreviated (Wednesday =&gt; Wed)<\/p>\r\n","slur":"javascript-dates","cat":"Website","subcat":"JavaScript","video":"","diff":"3","quiz":""},
{"id":"248","title":"[JavaScript] Best Practices","post":"<p>Throughout the course I&rsquo;ve already given hints, tips and advice &ndash; such as how to name your variables or keeping your variables as local as possible &ndash; but there&rsquo;s still a lot of ways you can improve code readability and performance.<\/p> \r\n\r\n<h2>Breaking Long Lines<\/h2>\r\n\r\n<p>For readability, it&rsquo;s often preferred to move parts of a statement to the next line if it becomes too long. Because JavaScript depends on semicolons to see when a line ends, you can just break the line at any spot you&rsquo;d normally place a white space.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x =\r\n\t5 + 5;\r\n<\/pre>\r\n\r\n<p>If you have a very long string, however, you must use concatenation and break the line around the <code>+<\/code> symbol.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"I am a very long string that doesn't want to be put onto another line and therefore \" +\r\n\t\"I split myself with a plus operator!\"\r\n<\/pre>\r\n\r\n<p>NOTE: Keyword statements, such as <em>return<\/em> or <em>break<\/em>, may <strong>never<\/strong> be split. But, those are the shortest statements on earth, so I don&rsquo;t see why you would ever want to do that.<\/p>\r\n\r\n<h2>Fast Variables<\/h2>\r\n\r\n<p>It&rsquo;s recommended, for performance as well as code simplicity, to <strong>assign<\/strong> a value at the same time you <strong>declare<\/strong> a variable. Otherwise, JavaScript would have to execute statements instead of one (declaring and assigning), and there&rsquo;s a possibility that you accidentally use the variable before it has a value.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 10; \/\/Is better than\r\nvar x;\r\n\r\nx = 10;\r\n<\/pre>\r\n\r\n<p>Also, try to avoid creating variables if you intend to use them only once. Instead of creating a new variable, you can often just input the value immediately wherever it is needed.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/WRONG\r\nvar y = 5 + 5;\r\nvar x = \"Your score is \" + y;\r\n\r\n\/\/RIGHT\r\nvar x = \"Your score is \" + (5 + 5);\r\n<\/pre>\r\n\r\n<h2>Fast Loops<\/h2>\r\n\r\n<p>What usually has the biggest impact on performance, are loops, because they execute a set of statements <em>many times<\/em>. It&rsquo;s best to optimize loops as much as possible. This is true for the code block inside, but also for the loop statement itself. For example, the for loop has a condition it checks against every loop, and it&rsquo;s best to simplify it as much as possible.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/WRONG\r\nfor(i=0;i&lt;someArray.length;i++) {\r\n\tconsole.log(someArray[i]);\r\n}\r\n\r\n\/\/RIGHT\r\nfor(var i=0,len = someArray.length;i&lt;len;i++) {\r\n\tconsole.log(someArray[i]);\r\n}\r\n<\/pre>\r\n\r\n<h2>On Literals<\/h2>\r\n\r\n<p>Because everything&rsquo;s an object, you can create numbers and strings as objects as well. That&rsquo;s great, but never do it.<\/p>\r\n\r\n<p>The literal values you&rsquo;ve learned to use are clearer and faster.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = \"Juan\"; \/\/Is better than\r\nvar x = new String(\"Juan\");\r\n<\/pre>\r\n\r\n<h2>Reduce DOM Calls<\/h2>\r\n\r\n<p>Every time JavaScript touches something from the DOM, the page refreshes itself to lay out the new elements or new style rules. It&rsquo;s therefore recommended to make as little calls as possible. For example, instead of inserting content line by line, combine it into one string and assign it with a single statement.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/WRONG\r\ndocument.getElementById('main').innerHTML = '&lt;div&gt;';\r\ndocument.getElementById('main').innerHTML += '&lt;p&gt;';\r\ndocument.getElementById('main').innerHTML += 'Some Text';\r\ndocument.getElementById('main').innerHTML += '&lt;\/p&gt;';\r\ndocument.getElementById('main').innerHTML += '&lt;\/div&gt;';\r\n\r\n\/\/RIGHT\r\ndocument.getElementById('main').innerHTML = '<div><p>Some Text<\/p><\/div>';\r\n<\/pre>\r\n\r\n<h2>Set Defaults<\/h2>\r\n\r\n<p>Even though you did your best to ensure all values you use in your script exist, there&rsquo;s always something that can go wrong. If your code depends heavily on certain values, check, before using them, if they are set. If not, set them to a default value that will make everything work.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction veryImportantFunc(a) {\r\n\tif(a === undefined || a >= someArray.length) {\r\n\t\ta = 0;\r\n\t}\r\n\treturn someArray[a];\r\n}\r\n\r\nvar x = veryImportantFunc(); \/\/Doesn't crash, but returns the first element of the array\r\n<\/pre>\r\n\r\n<p>NOTE: This is true for everything, but especially true for functions. It&rsquo;s not mandatory to supply <em>all<\/em> arguments, which can lead to some of the parameters being <code>undefined<\/code>.<\/p>\r\n\r\n<h2>Enforcing Best Practices<\/h2>\r\n\r\n<p>Normally, JavaScript executes everything in normal mode. By typing <code>&ldquo;use strict&rdquo;;<\/code> at the top of the document, you can enter strict mode, which means JavaScript doesn&rsquo;t allow all of your trickery and hacks &ndash; instead, it will throw errors and stop executing when you do something even slightly bothersome. You can write good code without it, but turning it on will help you improve your coding style and best practices.<\/p>\r\n","slur":"javascript-best-practices","cat":"Website","subcat":"JavaScript","video":"","diff":"4","quiz":""},
{"id":"249","title":"[JavaScript] Conclusion: What now?","post":"<p>Now it is time for you to build great web apps! But, of course, it isn&rsquo;t that simple &ndash; you&rsquo;ll need lots of practice, and some other languages. I haven&rsquo;t even discussed <em>everything<\/em> that JavaScript can do. I decided that some things were a bit too advanced, and the course was already very full, so I created an <strong>Advanced JavaScript Course<\/strong> to deal with everything I left out.<\/p> \r\n\r\n<p>If you want to do anything with servers, which I think you do, I recommend you now continue with the <strong>PHP Tutorial<\/strong>. If you don&rsquo;t want to, that&rsquo;s okay, then I&rsquo;ll just wish you good luck on your developing journeys!<\/p>\r\n","slur":"javascript-conclusion","cat":"Website","subcat":"JavaScript","video":"","diff":"4","quiz":""},
{"id":"250","title":"Advanced JavaScript","post":"<p>The majority of the JavaScript language is quite simple, and can easily be understood with a few examples. All of these are discussed in the basic JavaScript course. There are, however, more advanced concepts that need some thought and clever insights to understand &ndash; and those are exactly the ones I&rsquo;ll discuss in this (small) advanced course. Don&rsquo;t worry too much though, as I will also discuss simple, small leftover parts of the language that I wasn&rsquo;t able to place in the basic course.<\/p> \r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>HTML5 APIs<\/li>\r\n\t<li>Advanced Operators<\/li>\r\n\t<li>Keywords &amp; Arrow Functions<\/li>\r\n\t<li>Objects &amp; Symbols<\/li>\r\n\t<li>Keyed Collections<\/li>\r\n\t<li>Iterators &amp; Generators<\/li>\r\n\t<li>Promises<\/li>\r\n\t<li>AJAX<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"advanced-javascript","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"3","quiz":""},
{"id":"251","title":"[JavaScript] HTML5 APIs","post":"<p>As part of the new HTML5 standard, 6 very useful APIs were added to JavaScript. These are somewhat specific, as they were invented for a few exact purposes, and therefore perfect if one of those purposes is your goal. With careful implementation though, you can build great things out of them!<\/p> \r\n\r\n<h2>Geolocation<\/h2>\r\n\r\n<p>The <code>geolocation<\/code> property of the browser window <code>navigator<\/code> is used to retrieve the user&rsquo;s location. Since this is privacy related, the user has to approve. To get this location, we use the<\/p>\r\n\r\n<p><code class=\"longsyntax\">getCurrentPosition(<em>success, failure<\/em>)<\/code><\/p>\r\n\r\n<p>method. It takes the names of two functions, of which the first one is called when geolocation was successful, and the second when it wasn&rsquo;t. The success function automatically receives one argument, which is the <em>position<\/em>, and the failure function receives the error.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction suc(pos) {\r\n\tconsole.log(\"Your position is \" + pos);\r\n}\r\nfunction fail() {\r\n\tconsole.log(\"Everything Failed!\");\r\n}\r\nnavigator.geolocation.getCurrentPosition(suc,fail);\r\n<\/pre>\r\n\r\n<p>Such a <em>position<\/em> is an object with the following properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Property<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.latitude<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Latitude as a decimal number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.longitude<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Longitude as a decimal number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.accuracy<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Accuracy of the position (depends on accuracy of GPS within device)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.altitude<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Altitude in meters above the mean sea level<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.altitudeAccuracy<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Accuracy of the altitude<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.heading<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Orientation as degrees clockwise from North<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>coords.speed<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Speed in meters per second<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>timestamp<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The date ( = time) of the response<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction suc(pos) {\r\n\tconsole.log(\"Your altitude is \" + pos.coords.altitude);\r\n}\r\nfunction fail() {\r\n\tconsole.log(\"Everything Failed!\");\r\n}\r\nnavigator.geolocation.getCurrentPosition(suc,fail);\r\n<\/pre>\r\n\r\n<p>Other methods available are <code>watchPosition(<em>success, failure<\/em>)<\/code> to keep updating the user&rsquo;s position as it moves, and <code>clearWatch()<\/code> to stop watching.<\/p>\r\n\r\n<h2>Drag &amp; Drop<\/h2>\r\n\r\n<p>The ability to drag and drop elements can be simulated, but with this API it&rsquo;s built right into JavaScript. First, you need to set the <code><attr>draggable<\/attr>=true<\/code> attribute on the element you want to drag, and add a <code>dragstart<\/code> event. Then, you need to tell your dropping element to react to <code>drop<\/code> and <code>dragover<\/code> events.<\/p>\r\n\r\n<p>All these events share a property, which is <code>dataTransfer<\/code>, and you can use <code>setData(<em>name, data<\/em>)<\/code> to set which data to transfer, and <code>getData(<em>name<\/em>)<\/code> to retrieve it as you drop something.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction allowDrop(ev) {\r\n    ev.preventDefault();\r\n}\r\n\r\nfunction drag(ev) {\r\n    ev.dataTransfer.setData(\"text\", ev.target.id);\r\n}\r\n\r\nfunction drop(ev) {\r\n    ev.preventDefault();\r\n    var data = ev.dataTransfer.getData(\"text\");\r\n    ev.target.appendChild(document.getElementById(data));\r\n}\r\n<\/pre>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;div id=&#x22;dropZone&#x22; ondrop=&#x22;drop(event)&#x22; ondragover=&#x22;allowDrop(event)&#x22;&#x3E;&#x3C;\/div&#x3E;\r\n\r\n&#x3C;img id=&#x22;dragThing&#x22; src=&#x22;someImage.png&#x22; draggable=&#x22;true&#x22;\r\nondragstart=&#x22;drag(event)&#x22;&#x3E;\r\n<\/pre>\r\n\r\n<p>NOTE: Because by default, elements can&rsquo;t just be dragged and dropped around, we need to use <code>preventDefault()<\/code> to prevent this default behaviour when we <em>do<\/em> want drag-n-drop abilities.<\/p>\r\n\r\n<h2>Local Storage<\/h2>\r\n\r\n<p>Cookies provide a way to store very small bits of data. Local storage expands on this, and makes it much easier to save large amounts of data within the browser. This data is not tied to a certain URL, but rather to a certain name you give it.<\/p>\r\n\r\n<p>To add an entry to the local storage, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">localStorage.setItem(<em>name, value<\/em>)<\/code><\/p>\r\n\r\n<p>To retrieve one, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">localStorage.getItem(<em>name<\/em>)<\/code><\/p>\r\n\r\n<p>These have no expiration date &ndash; which means it remains saved until you decide to remove it. If you only want to save data for one session, use <code>sessionStorage<\/code> instead. A session begins when a browser tab is opened, and ends when it is closed.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nlocalStorage.setItem(\"Username\",\"Juan\");\r\n\/\/Some time later...\r\nvar x = localStorage.getItem(\"Username\"); \/\/x is Juan\r\n<\/pre>\r\n\r\n<h2>App Cache<\/h2>\r\n\r\n<p>App Cache allows us to <em>cache<\/em> a web app, which means saving an offline version, which means it can be accessed and used without internet connection. Not only does this allow users to work with it when there&rsquo;s no internet around, it also increases speed and reduces server load.<\/p>\r\n\r\n<p>The parts you want the browser to cache are saved in a <strong>cache manifest<\/strong> file. Such a file can simply be created in your text editor, and required the extension <code>.appcache<\/code>.<\/p>\r\n\r\n<p>Then, within the HTML tag, you need to set the <code>manifest<\/code> attribute to point to your file.<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;html manifest=&#x22;someFile.appcache&#x22;&#x3E;\r\n<\/pre>\r\n\r\n<p>Manifest files contain three sections, which need to be named explicitly to tell the browser it&rsquo;s in that section now.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>CACHE MANIFEST<\/strong>: Underneath it, specify the files you want to be cached after they are downloaded the first time<\/li>\r\n\t<li><strong>NETWORK<\/strong>: Underneath it, specify the files you never want to be cached.<\/li>\r\n\t<li><strong>FALLBACK<\/strong>: Underneath it, specify which file to serve instead of others if an internet connection cannot be established.<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"php\">\r\n# Manifest of 18 December 2015\r\nCACHE MANIFEST\r\n\/someFile.js\r\n\r\nNETWORK\r\n\/neverCacheThis.html\r\n\r\nNETWORK:\r\n\/someFolder\/ \/defaultPage.html\r\n<\/pre>\r\n\r\n<p>Once cached, the browser will load the offline version. To tell it to update, change the manifest file by adding a random new comment. Comments are made with the syntax <code># <em>comment<\/em><\/code><\/p>\r\n\r\n<p>NOTE: To select all files, use the familiar asterisk ( <code>*<\/code> )<\/p>\r\n\r\n<p>NOTE 2: There are size limits, but they depend on the browser, which means you shouldn&rsquo;t go wild with app caches.<\/p>\r\n\r\n<h2>Web Workers<\/h2>\r\n\r\n<p>Web workers are scripts running in the background, without influencing the rest of the page. This means that it doesn&rsquo;t halt execution of the main script, nor affect performance. Great!<\/p>\r\n\r\n<p>To create a new web worker, use the constructor:<\/p>\r\n\r\n<p><code class=\"longsyntax\">new Worker(<em>&ldquo;pathtofile.js&rdquo;<\/em>)<\/code><\/p>\r\n\r\n<p>As soon as it&rsquo;s created, it executes the code within the file you referenced. Such an external file and the script it was created in communicate by means of <em>messages<\/em>.<\/p>\r\n\r\n<p>Within the external file, you can use <code>postMessage(<em>message<\/em>)<\/code> to post a message. This message can be acted on by adding an event listener for the <code>message<\/code> event, which, as usual, takes the <em>event<\/em> as argument. Using the <code>data<\/code> property we can access the message that was sent by the web worker.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Inside external web worker file\r\nfunction timedCount() {\r\n    i++;\r\n    postMessage(i);\r\n}\r\n\r\nvar i = 0;\r\nsetInterval(timedCount,1000);\r\n<\/pre>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Main script\r\nvar w = new Worker(\"externalFile.js\");\r\nw.onmessage = function(event){\r\n    console.log(event.data); \/\/Prints the current count to the console, every second\r\n};\r\n<\/pre>\r\n\r\n<p>To terminate a web worker, simply call the <code>terminate()<\/code> method.<\/p>\r\n\r\n<p>NOTE: Because Web Workers are essentially external scripts running, they can&rsquo;t access the <code>window<\/code>, <code>document<\/code> or <code>parent<\/code> object.<\/p>\r\n\r\n<h2>Server-Sent Events<\/h2>\r\n\r\n<p>Server-Sent Events, or SSEs, are messages sent from a server. It&rsquo;s one way traffic, as the web page automatically receives updates from the server, but doesn&rsquo;t send anything back.<\/p>\r\n\r\n<p>To create a new SSE, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">new EventSource(<em>&ldquo;pathtofile.php&rdquo;<\/em>)<\/code><\/p>\r\n\r\n<p>You can use any server language you want, but this example will use the most common one, PHP. Just as with web workers, the communication works via <em>messages<\/em>, and JavaScript uses the <code>message<\/code> event to listen for them.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someSource = new EventSource(\"externalFile.php\");\r\nsomeSource.onmessage = function(event) {\r\n   console.log(event.data);\r\n};\r\n<\/pre>\r\n\r\n<p>Sending the messages, however, works a bit different. Within the PHP file, we need to specify what type of content is coming, and then echo our message with <code>data:<\/code> in front. Finally, the <code>flush()<\/code> command sends whatever&rsquo;s on the page at that moment back to the script.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n&lt;?php\r\nheader('Content-Type: text\/event-stream');\r\nheader('Cache-Control: no-cache');\r\n\r\necho \"data: This is a cool message!\";\r\nflush();\r\n?&gt;\r\n<\/pre>\r\n\r\n<p>NOTE: Additionally, the <code>open<\/code> event fires when a server connection has been opened, and the <code>error<\/code> event occurs when opening such connection failed.<\/p>\r\n","slur":"advanced-javascript-HTML5-APIs","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"4","quiz":""},
{"id":"252","title":"[JavaScript] Advanced Operators","post":"<p>We&rsquo;ve already seen the basic operators <code>+ - \/ * %<\/code>, which is often all that you need, but there are certain bitwise operators that can simplify your life. We&rsquo;ll also look at operators that work on only one value, not two.<\/p> \r\n\r\n<h2>Bitwise Operators<\/h2>\r\n\r\n<p>To be able to use a bitwise operator, JavaScript converts your operands to 32-bit <strong>integer<\/strong> numbers, consisting of only <strong>zeros<\/strong> and <strong>ones<\/strong>. Each bit in the first operand is paired with the corresponding bit in the second one, and the operator is applied. This means that the result is again a 32-bit number.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><span class=\"donthyphenate\" style=\"white-space:pre;\">Symbol  <\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Bitwise AND<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>&amp;<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns one if corresponding bits are both ones<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Bitwise OR<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>|<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns zero if corresponding bits are both zeros<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Bitwise XOR<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>^<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns a zero if corresponding bits are the same, returns a one if they are different.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Bitwise NOT<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>~<\/code> a<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inverts the bits of its operand (zeros become ones, and vice versa)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Left Shift<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>&lt;&lt;<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shifts <em>a<\/em> to the left with <em>b <\/em>bits, shifting in zeros from the right<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Right Shift<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>&gt;&gt;<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shifts <em>a<\/em> tot the right with <em>b <\/em>bits, discarding bits shifted off<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Zero-fill Right Shift<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a <code>&gt;&gt;&gt;<\/code> b<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shifts <em>a<\/em> to the right with <em>b <\/em>bits, discarding bits shifted off, and shifting in zeros from the left<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = 10; \t\/\/x is 00000000000000000000000000001010\r\nvar y = x << 2; \/\/y is 00000000000000000000000000101000, or 40\r\nvar z = ~y;\t\t\/\/z is 11111111111111111111111111010111, or -41\r\n<\/pre>\r\n\r\n<p>NOTE: In JavaScript binary representation, if the left-most bit is set to one, it&rsquo;s a negative number.<\/p>\r\n\r\n<p>If you can&rsquo;t immediately see any use for these, I suggest you look a bit into binary numbers. If you know how they work, you can often find ways to simplify your life by using these binary operators. For example, <code>~~a<\/code> is the same as <code>Math.floor(a)<\/code>, but faster and less typing.<\/p>\r\n\r\n<h2>Relational Operators<\/h2>\r\n\r\n<p>The <code>in<\/code> operator checks whether a certain <em>property<\/em> or <em>index<\/em> exists within an object or array. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">if(<em>propNameOrNumber <\/em>in<em> objectName<\/em>) { <em>statements<\/em> }<\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {name:\"Juan\",color:\"Red\"};\r\nif(\"age\" in obj) {\r\n\t\/\/This will not execute\r\n}\r\n<\/pre>\r\n\r\n<p>The <code>instanceof<\/code> operator checks whether a specific object is of a certain object type. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">if(<em>objectName <\/em>instanceof<em> objectType<\/em>) { <em>statements<\/em> } <\/code><\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nif([1,2,3] instanceof Array) {\r\n\tconsole.log(\"Yes it is!\"); \/\/This one will execute\r\n} else {\r\n\tconsole.log(\"Fail!\");\r\n}\r\n<\/pre>\r\n\r\n<h2>Spread Operator<\/h2>\r\n\r\n<p>The <strong>spread operator<\/strong> allows an expression with multiple values to be expanded wherever multiple arguments (function calls) or multiple elements (array literals) are expected. The syntax is <code>&hellip;<em>expression<\/em><\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar arrUno = [2,3,4];\r\nvar arrDuo = [1,...arrUno,5]; \/\/arrDuo is [1,2,3,4,5]\r\n<\/pre>\r\n","slur":"advanced-javascript-operators","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"5","quiz":""},
{"id":"253","title":"[JavaScript] Keywords & Arrow Functions","post":"<p>The basic course already talked about nearly every keyword there is, but there are still four of them left. I also want to introduce a nifty little feature that actually has to do with typing as little keywords as possible.<\/p> \r\n\r\n<h2>Keywords<\/h2>\r\n\r\n<p>The <code>debugger<\/code> keyword stops the execution of JavaScript &ndash; so no code beyond that point will run &ndash; and opens the browser&rsquo;s debugger (if available).<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(\"Executed A\");\r\ndebugger;\r\nconsole.log(\"Executed B\"); \/\/Won't run.\r\n<\/pre>\r\n\r\n<p>The <code>typeof<\/code> keyword is used to find the type of a certain value.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nconsole.log(typeof \"Juan\"); \/\/Prints string (types are lowercase, and without quotes)\r\n<\/pre>\r\n\r\n<p>The <code>super<\/code> keyword is used to call functions on an object&rsquo;s <em>parent<\/em>. It is typically used with classes to call the parent constructor, or a specific method.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nsuper(arguments); \/\/Calls the parent constructor\r\nsuper.functionOnParent(arguments);\r\n<\/pre>\r\n\r\n<p>The <code>delete<\/code> keyword deletes an object&rsquo;s property, an entire object, or an element from an array.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {a:0, b:1, c:2};\r\ndelete obj.a;\r\nconsole.log(obj.a); \/\/Prints undefined\r\n<\/pre>\r\n\r\n<p>NOTE: It can&rsquo;t delete values from a variable declared with <code>var<\/code>, or pre-defined properties such as <code>Math.PI<\/code><\/p>\r\n\r\n<h2>Arrow Functions<\/h2>\r\n\r\n<p>Very often, you write functions that you simply want to return a certain value, given a few parameters. You could do this with the regular function syntax, but writing that <em>function<\/em> keyword over and over can become a bit of a bore, and that&rsquo;s why a shorter expression has been invented: the <strong>arrow function<\/strong>.<\/p>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">(<em>param<sub>1<\/sub>, &hellip; param<sub>n<\/sub><\/em>) =&gt; { <em>returnStatements<\/em> }<\/code><\/p>\r\n\r\n<p>If you have only a single parameter, you can ditch the parentheses. If you have no parameters, you can just leave that space empty. Likewise, if you have only a single statement, you don&rsquo;t have to use the braces.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/These are all the same\r\nvar x = (a) => { 5*a };\r\nvar x = a => {5*a};\r\nvar x = a => 5*a;\r\n\r\nconsole.log(x(15)); \/\/Prints 5*15 = 75\r\n<\/pre>\r\n\r\n<p>If you want the arrow function to return an object, you have a problem, because objects are also created using braces. To solve this, parenthesize the statement(s).<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar x = (a,b,c) => ({ firstProp:a, secondProp:b, thirdProp:c });\r\n<\/pre>\r\n","slur":"advanced-javascript-keywords-arrow-functions","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"4","quiz":""},
{"id":"254","title":"[JavaScript] Objects & Symbols","post":"<p>We&rsquo;ve already discussed objects in great detail, but not so long ago two new concepts were introduced which I would like to talk about.<\/p> \r\n\r\n<h2>Immutable Objects<\/h2>\r\n\r\n<p>Sometimes, you want to prevent the user (or yourself) from editing an object once it has been created. You can, to some extent, do this with <strong>immutable objects<\/strong>, which has two implementations:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Frozen Objects: <\/strong>You can&rsquo;t add\/remove properties, nor change any existing properties, unless they are objects.<\/li>\r\n\t<li><strong>Sealed Objects:<\/strong> You can&rsquo;t add\/remove properties, but you <em>can<\/em> edit existing properties<\/li>\r\n<\/ul>\r\n\r\n<p>To freeze an object, use <code>Object.freeze(<em>obj<\/em>)<\/code>. You can check if an object is frozen with <code>Object.isFrozen(<em>obj<\/em>)<\/code>.<\/p>\r\n\r\n<p>To seal an object, use <code>Object.seal(<em>obj<\/em>)<\/code>. You can check if an object is sealed with <code>Object.isSealed(<em>obj<\/em>)<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {a:0, b:1 };\r\nObject.freeze(obj);\r\nobj.c = 2;\r\nconsole.log(obj); \/\/Prints {a:0, b:1}\r\n<\/pre>\r\n\r\n<h2>Symbols<\/h2>\r\n\r\n<p>A special type of immutable data, is a <strong>symbol<\/strong>, which is actually its own data type and part of the <em>primitives<\/em>. Once you create a symbol, it is unique, even if you create a new one with the same description. Symbols in itself have no function and can&rsquo;t be altered after creation, but you can use them as a property for an object. Now, because symbols are unique, the <em>only way<\/em> to access that particular property is if you have a reference to the original symbol. You <strong>can&rsquo;t<\/strong> find the property by means of <code>hasOwnProperty()<\/code> or looping through the object. This, of course, is mainly useful for security reasons.<\/p>\r\n\r\n<p>To create a symbol, use <code>Symbol(&quot;<em>description<\/em>&quot;)<\/code>. The description is optional.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = {};\r\nvar sym = Symbol(\"desc\");\r\nvar sym2 = Symbol(\"desc\");\r\nobj[sym] = \"Yes!\";\r\nconsole.log(obj[sym2]); \/\/Prints undefined\r\nconsole.log(obj[sym]); \/\/Prints \"Yes!\"\r\n<\/pre>\r\n<p>NOTE: Do <em>not<\/em> type the keyword <code>new<\/code> in front of a symbol declaration. Symbols are not Objects.<\/p>\r\n","slur":"javascript-objects-symbols","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"4","quiz":""},
{"id":"255","title":"[JavaScript] Keyed Collections","post":"<p>Until now, Objects have been somewhat regarded as the biggest collections within JavaScript. With the latest version, however, the new keyed collections <strong>Maps <\/strong>and <strong>Sets<\/strong> have been introduced, along with their siblings <strong>WeakMaps<\/strong> and <strong>WeakSets<\/strong><\/p> \r\n\r\n<h2>Maps<\/h2>\r\n\r\n<p>Maps are used to <em>map<\/em> values to values. A map can, unlike objects, link any key to any value. They are created using the <code>new Map()<\/code> constructor.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someMap = new Map();\r\n<\/pre>\r\n\r\n<p>To set and get values, use the <code>set(<em>key, value<\/em>)<\/code> and <code>get(<em>key<\/em>)<\/code> methods. To completely delete a key, use the <code>delete(<em>key<\/em>)<\/code> method. To delete all keys at once, use <code>clear()<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someMap = new Map();\r\nsomeMap.set(true,15);\r\nconsole.log(someMap.get(true)); \/\/Prints 15\r\nsomeMap.clear();\r\nconsole.log(someMap); \/\/Prints Map {}, an empty map\r\n<\/pre>\r\n\r\n<p>If you want to check whether a map has a certain key, use the <code>has(<em>key<\/em>)<\/code> method. To retrieve the size of the map, use the <code>size<\/code> property.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someMap = new Map();\r\nsomeMap.set(\"Juan\",\"Cool Guy\");\r\nvar x = someMap.has(\"Juan\"); \/\/x is true\r\nx = someMap.size; \/\/x is 1\r\n<\/pre>\r\n\r\n<h2>WeakMaps<\/h2>\r\n\r\n<p>WeakMaps are the same as maps, but with two big differences. Firstly, it can only use Objects as the keys. Secondly, if there is no other reference left in the program to such Object, it is removed from memory, and thus also from the WeakMap.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar map = new WeakMap();\r\n<\/pre>\r\n\r\n<h2>Sets<\/h2>\r\n\r\n<p>Sets, created with <code>new Set()<\/code>, are collections of values, much like arrays. What makes them different, is that they have two important properties from sets as defined in mathematics:<\/p>\r\n\r\n<ul>\r\n\t<li>Every value may only occur <strong>once<\/strong><\/li>\r\n\t<li>All values are in no particular order<\/li>\r\n<\/ul>\r\n\r\n<p>Because of this uniqueness, you can delete elements by <em>value<\/em> using the <code>delete(<em>value<\/em>)<\/code> method. You can add values to the set with the <code>add(<em>value<\/em>)<\/code> method. But, because the order isn&rsquo;t defined, you can&rsquo;t access one particular element &ndash; you have to loop through them all, in insertion order, to access them. Nevertheless, just like <em>Maps<\/em>, it also has the <code>has(<em>value<\/em>)<\/code> and <code>clear()<\/code> methods, and the <code>size<\/code> property.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someSet = new Set();\r\nsomeSet.add(1);\r\nsomeSet.add(1);\r\nconsole.log(someSet); \/\/Prints Set {1}\r\n\r\n\/\/Or create a set from an array\r\nvar someSet = new Set([1,4,5,6,4,5,1]); \/\/someSet is Set {1,4,5,6}\r\n<\/pre>\r\n\r\n<h2>WeakSets<\/h2>\r\n\r\n<p>WeakSets are the same as sets, but with the same two big differences as between <em>Map<\/em> and <em>WeakMap<\/em>. If no other reference to an object within the set is present, the object is removed from the program. There is, therefore, <em>no<\/em> <code>size<\/code> property.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar weakSet = new WeakSet();\r\n<\/pre>\r\n\r\n<h2>Iteration<\/h2>\r\n\r\n<p>You must iterate over <em>Maps<\/em> and <em>Sets<\/em> using a <code>for &hellip; of<\/code> loop. This happens in the order of insertion.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar someSet = new Set([1,4,7,8]);\r\n\r\nfor(var value of someSet) {\r\n\tconsole.log(value);\r\n}\r\n\r\n\/* Prints\r\n\t1\r\n\t4\r\n\t7\r\n\t8\r\n*\/\r\n<\/pre>\r\n\r\n<p>NOTE: The <code>forEach(<em>callback, thisObject<\/em>)<\/code> method, which you know from Arrays, is also available for both <em>Maps<\/em> and <em>Sets<\/em>.<\/p>\r\n\r\n<p>On top of that, there are three methods that return a list of what&rsquo;s inside such a map or set.<\/p>\r\n\r\n<ul>\r\n\t<li>The <code>keys()<\/code> method returns all <em>keys<\/em>. For sets, which only collect values, this is the same as the next method.<\/li>\r\n\t<li>The <code>values()<\/code> method returns all <em>values<\/em>.<\/li>\r\n\t<li>The <code>entries()<\/code> method returns all <em>key\/value<\/em> pairs.<\/li>\r\n<\/ul>\r\n\r\n<p>The lists they return are not Arrays &ndash; actually, they are not of a type you&rsquo;ve ever seen before. They return <strong>iterators<\/strong>, which is what next chapter is all about.<\/p>\r\n","slur":"advanced-javascript-keyed-collections","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"4","quiz":""},
{"id":"256","title":"[JavaScript] Iterators & Generators","post":"<p>When something has a defined iteration behaviour, we call it <strong>iterable<\/strong>. Nearly everything has a defined iterator method, and is therefore a built-in iterable &ndash; the only exception are Objects. For example, when you use a <code>for &hellip; in<\/code> loop to iterate over an array, it iterates over all indices in order starting from zero, and ends after it has reached the last index. This may seem very trivial, but this process is also defined in an iterator function somewhere. And now, you&rsquo;ll learn how to define your own custom functions to iterate over iterables!<\/p> \r\n\r\n<p>The iteration behaviour of an iterable is saved within the <code>Symbol.iterator<\/code> property. We are going to use it to assign our own iteration behaviour.<\/p>\r\n\r\n<h2>Iterators<\/h2>\r\n\r\n<p>An iterator is a type of <em>closure<\/em>, which means it&rsquo;s a function which returns another function. The outer function is run once, at the start of iteration, and is used for initializing variables you need. The inner function needs to be called <code>next<\/code>, and is run every time the iteration is finished with the previous item and wants to go the next one.<\/p>\r\n\r\n<p>This <em>next function<\/em> should return an object with two properties: <code>value<\/code> and <code>done<\/code>. The first property is the value we get from iterating, the second property tells us whether we&rsquo;re done iterating or not. This should return false on all items, except for the last one &ndash; which should return true.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar arr = [5,4,3,2,1,0];\r\n\/* This iterator mimics the default iteration behaviour of arrays\r\nIt starts at index 0, and runs until it reaches the last index, returning the current index every time*\/\r\narr[Symbol.iterator] = function() { \r\n\tvar index=-1;\r\n\tvar that = this;\r\n\r\n\treturn {\r\n\t\tnext: function() { \r\n\t\t\tindex++;\r\n\t\t\treturn { value: index, done: index>=that.length } \r\n\t\t} \r\n\t}\r\n};\r\n\r\nfor(var index of arr) { console.log(arr[index]); }\r\n<\/pre>\r\n\r\n<h2>Generators<\/h2>\r\n\r\n<p>With these iterators we just learnt to create, we need to maintain the internal state ourselves; at any given moment, we need to know at what index we are, and whether we&rsquo;re done yet. If we don&rsquo;t want this, we can use a powerful variation on iterators called <strong>generators<\/strong>.<\/p>\r\n\r\n<p>Normally, when we execute a function, it runs through all statements, and only continues executing the rest of the script once it&rsquo;s finished. With generators, we can <em>pause<\/em> a function. We can tell a function to stop at a given moment, and later tell it to continue until it stops again.<\/p>\r\n\r\n<p>To create a generator function, use the <code>function*<\/code> keyword. It&rsquo;s nothing different from the functions you&rsquo;re used to, but the asterisk is there to tell JavaScript it&rsquo;s a generator function. To pause such a function, use the <code>yield<\/code> keyword inside of it. To tell a generator to continue, we use the <code>next()<\/code> method.<\/p>\r\n\r\n<p><em>Awesome, but what does it have to do with iterators?<\/em> Well, the <em>yield<\/em> statement can be followed by an expression. When you tell a generator to continue, it starts by resolving that expression and <em>returning<\/em> the value that comes out of it. Therefore, if we call <code>next()<\/code> on a generator function, it actually returns an object with two familiar properties: value and done.<\/p>\r\n\r\n<p>The <em>value<\/em> property is set to whatever was after the yield keyword. The <em>done<\/em> property is false, until the generator function reaches its end &ndash; then it&rsquo;s set to true.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction* generatorMaker() {\r\n\tyield 1;\r\n\tyield 2;\r\n\tyield 3;\r\n}\r\n\r\nvar generator = generatorMaker();\r\n\r\nconsole.log(gen.next().value); \/\/Prints 1\r\nconsole.log(gen.next().value); \/\/Prints 2\r\nconsole.log(gen.next().done); \/\/Prints true\r\n<\/pre>\r\n\r\n<p>To keep a generator function running forever, a <code>while(true)<\/code> loop is usually employed.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction* genMaker(){\r\n  var index = 0;\r\n  while(true) {\r\n  \tindex += 5;\r\n    yield index;\r\n  }\r\n}\r\n\r\nvar gen = genMaker();\r\n\r\nconsole.log(gen.next().value); \/\/Prints 5\r\n<\/pre>\r\n\r\n<p>NOTE: <strong>Never<\/strong> use this outside of a generator function!<\/p>\r\n\r\n<p>Until now I&rsquo;ve talked about generators a being a one-way street; they send you values when you call the <em>next<\/em> function. But, in reality, you can send a value to the generator! This is done using the <code>next(<em>argument<\/em>)<\/code> method. This argument is treated as the result of the last <code>yield<\/code> expression that paused the generator, which means you can save yield expressions within the generator, and do something with the values you receive.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\n\/\/Generator to easily create a fibonacci sequence\r\nfunction* fibonacci(){\r\n  var fn1 = 1;\r\n  var fn2 = 1;\r\n  while (true){  \r\n    var current = fn2;\r\n    fn2 = fn1;\r\n    fn1 = fn1 + current;\r\n    var reset = yield current;\r\n    if (reset){\r\n        fn1 = 1;\r\n        fn2 = 1;\r\n    }\r\n  }\r\n}\r\n\r\nvar sequence = fibonacci();\r\nconsole.log(sequence.next().value);     \/\/Prints 1\r\nconsole.log(sequence.next().value);     \/\/Prints 1\r\nconsole.log(sequence.next().value);     \/\/Prints 2\r\nconsole.log(sequence.next().value);     \/\/Prints 3\r\nconsole.log(sequence.next(true).value); \/\/Prints 1\r\nconsole.log(sequence.next().value);     \/\/Prints 1\r\nconsole.log(sequence.next().value);     \/\/Prints 2\r\nconsole.log(sequence.next().value);     \/\/Prints 3\r\n<\/pre>\r\n","slur":"advanced-javascript-iterators-generators","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"5","quiz":""},
{"id":"257","title":"[JavaScript] Promises","post":"<p>One of the big issues within programming, is asynchronous code. Code is meant to be executed synchronously, one statement after each other, in a logical order. So, what do we do if we have to wait for something to finish? What if we have to wait for the server to respond before we can load a page?<\/p> \r\n\r\n<p>In the old days, we&rsquo;d use a long and complex chain of callbacks, which is often referred to as <em>callback hell<\/em>. We&rsquo;d put functions inside functions inside functions, which all had to wait for some event to occur before they could execute another part. With <strong>promises<\/strong>, we can climb out of this hell!<\/p>\r\n\r\n<p>A promise has four states:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Pending:<\/strong> The promise hasn&rsquo;t been fulfilled or rejected yet<\/li>\r\n\t<li><strong>Fulfilled: <\/strong>The action relating to the promise succeeded.<\/li>\r\n\t<li><strong>Rejected:<\/strong> The action relating to the promise failed.<\/li>\r\n\t<li><strong>Settled:<\/strong> The promise has been fulfilled or rejected<\/li>\r\n<\/ul>\r\n\r\n<p>One very important thing to understand, is that once a promise is settled, it will never change. A promise can only be fulfilled once or rejected once, and that&rsquo;s where it ends.<\/p>\r\n\r\n<p>Essentially, a promise is a reference or link to a certain action. Once that action has finished, it goes looking for the promise again itself, and communicates whether it succeeded or failed. The promise will act on that accordingly. The name, therefore, comes from the fact that the action you&rsquo;re executing promises you that it will tell you if it receives a value sooner or later.<\/p>\r\n\r\n<p>The syntax for creating one is<\/p>\r\n\r\n<p><code class=\"longsyntax\">new Promise(function(resolve, reject) { <em>statements<\/em> } )<\/code><\/p>\r\n\r\n<p>Within the function body you can perform whatever action you want to do. If everything worked out fine, you can call <code>resolve(<em>message<\/em>)<\/code>. If not, call <code>reject(<em>message<\/em>)<\/code>.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar promise = new Promise(\r\n\tfunction(resolve, reject) {\r\n\t\t\/\/Do some things, possibly asynchronous\r\n\r\n\t\tif(x === undefined) {\r\n\t\t\t\/\/Things went wrong\r\n\t\t\treject(\"x was undefined!\");\r\n\t\t} else {\r\n\t\t\tresolve(\"The value is \" + x);\t\t\t\r\n\t\t}\r\n\r\n});\r\n<\/pre>\r\n\r\n<p>NOTE: If you&rsquo;re only looking at what to do when a promise is fulfilled, you can simply use <code>return<\/code> for your <em>message<\/em>.<\/p>\r\n\r\n<h2>Reacting to Promises<\/h2>\r\n\r\n<p>Such a promise is great, but it is meaningless now, as we&rsquo;ve only used a constructor. If we want to use it, we need to call the<\/p>\r\n\r\n<p><code class=\"longsyntax\">then(<em>succesFunction, failureFunction<\/em>)<\/code><\/p>\r\n\r\n<p>method on it. If the promise is resolved, it executes the first function, if it failed, the second one. The <em>messages<\/em> you wrote when you constructed your promise are supplied as the only parameter for these functions.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\npromise.then(function(result) {\r\n\tconsole.log(result); \/\/Will print \"The value is \" + x \r\n}, function(error) {\r\n\tconsole.log(error); \/\/Will print \"x was undefined!\"\r\n});\r\n<\/pre>\r\n\r\n<h2>Chaining Promises<\/h2>\r\n\r\n<p>Instead of simply resolving to a value, we can also resolve a promise to <em>another promise<\/em>. With the <code>then()<\/code> method now available to us, we can simply <strong>chain<\/strong> these promises, which shows their real power.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction someFunction(resolve, reject) {\r\n\tresolve(10);\r\n}\r\n\r\nvar promise = new Promise(function(resolve, reject) {\r\n  resolve(new Promise(someFunction));\r\n});\r\n\r\npromise.then(function(val) {\r\n  return val;\r\n}).then(function(val) {\r\n  console.log(val); \/\/ 10\r\n});\r\n<\/pre>\r\n\r\n<p>NOTE: You can also chain values, but that would completely destroy the whole purpose of promises, as there is no time delay.<\/p>\r\n\r\n<p>If this syntax still seems convoluted to you, it&rsquo;s possible to use <code>then()<\/code> only for successes, and <code>catch()<\/code> for failures.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\npromise.then(function(result) {\r\n\tconsole.log(result);\r\n}).catch(function(error) {\r\n\tconsole.log(error);\r\n});\r\n<\/pre>\r\n","slur":"advanced-javascript-promises","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"5","quiz":""},
{"id":"258","title":"[JavaScript] AJAX","post":"<p>AJAX stands for Asynchronous Javascript and XML. The last part of this name is quite misleading &ndash; you don&rsquo;t need to know anything about XML to make this work. This first part of the name, however, is right on point. Whereas last chapter talked about asynchronous JavaScript mostly within the script itself, AJAX is a way of sending and receiving data <em>without reloading the page<\/em>.<\/p> \r\n\r\n<p>Essentially, AJAX works via an object that can connect with the server to get a certain file, and has certain events you can listen for once it has established this connection (or failed to establish one).<\/p>\r\n\r\n<p>To create an AJAX object, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">new XMLHttpRequest()<\/code><\/p>\r\n\r\n<h2>Opening a Connection<\/h2>\r\n\r\n<p>To open a connection, use the <code>open(<em>method, URL, async<\/em>)<\/code> method.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>method<\/strong>: Specifies the type of request; GET or POST. More on that later.<\/li>\r\n\t<li><strong>URL<\/strong>: The URL we want to establish a link with<\/li>\r\n\t<li><strong>async<\/strong>: Whether we want this connection to be asynchronous or not. Of course we do, so just always set this to <em>true<\/em> (or omit it).<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar con = new XMLHttpRequest();\r\ncon.open(\"GET\",\"someFile.php\",true);\r\n<\/pre>\r\n\r\n<h2>Sending Requests<\/h2>\r\n\r\n<p>Once a connection has been opened, you still need to send a request if you want to get a response. How you should send this request, depends on the method you use.<\/p>\r\n\r\n<p>The <strong>GET<\/strong> method is faster than POST, and can be used in most cases. To send a request, simply use <code>send()<\/code>. If you want to send arguments along with the request, add those to your URL.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar con = new XMLHttpRequest();\r\n\/\/No parameters\r\ncon.open(\"GET\",\"someFile.php\",true);\r\n\/\/With parameters\r\ncon.open(\"GET\",\"someFile.php?a=2&b=4\",true);\r\n\r\n\/\/This stays the same in both cases\r\ncon.send();\r\n<\/pre>\r\n\r\n<p>The <strong>POST<\/strong> method is better if you&rsquo;re sending large amounts of characters, or user input &ndash; POST has no size limitations and is more secure. To send a request, use <code>send(<em>string<\/em>)<\/code>. In this case, the <em>string<\/em> contains the arguments you want to send along. If you want to send special data, however, like an HTML form, you need to specify what type of data is coming with the request (before you send it), which is done with a header<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar con = new XMLHttpRequest();\r\ncon.open(\"POST\", \"someFile.php\", true);\r\ncon.setRequestHeader(\"Content-type\", \"application\/x-www-form-urlencoded\");\r\n\r\ncon.send(\"a=2&b=4\");\r\n<\/pre>\r\n\r\n<h2>Receiving Feedback<\/h2>\r\n\r\n<p>As the AJAX object is trying to get your data, it goes through several stages, which we call <strong>readyStates<\/strong>. These stages are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Readystate<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>0<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Request not initialized<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>1<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Server connection established<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>2<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Request received<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>3<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Processing request<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>4<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Request finished and response is ready<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>To check when such a <em>readyState<\/em> changes, use the <code>readystatechange<\/code> event.<\/p>\r\n\r\n<p>Once the request has reached stage 4, it either succeeded or failed. This is saved in the <code>status<\/code> property, which returns <code>200<\/code> if everything is fine, and <code>404<\/code> if the URL could not be found.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar con = new XMLHttpRequest();\r\n con.onreadystatechange = function() {\r\n    if (con.readyState == 4 && con.status == 200) {\r\n     \/\/Do stuff, cause connection was successful!\r\n    }\r\n  };\r\n  \r\ncon.open(\"GET\", \"someFile.php\", true);\r\ncon.send();\r\n<\/pre>\r\n\r\n<h2>Receiving Data<\/h2>\r\n\r\n<p>And now, the big moment, we can do something with the received data! The <code>responseText<\/code> property holds everything that was on the page we requested. Even if the request didn&rsquo;t turn out fine, we can hope for a sensible (error) message.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar con = new XMLHttpRequest();\r\n con.onreadystatechange = function() {\r\n    if (con.readyState == 4 && con.status == 200) {\r\n     \tconsole.log(con.responseText); \/\/Prints whatever was sent back by the server\r\n    }\r\n  };\r\n<\/pre>\r\n\r\n<p>NOTE: Optionally, we can send back XML data and receive (and parse) it with the <code>responseXML<\/code> property &ndash; hence the <em>XML<\/em> in AJAX.<\/p>\r\n\r\n<h2>Now with Promises<\/h2>\r\n\r\n<p>To demonstrate the power of promises again, I just want to show you how the whole AJAX handler code could also be written using a promise.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nfunction getURL(url) {\r\n  return new Promise(function(resolve, reject) {\r\n    var req = new XMLHttpRequest();\r\n    req.open('GET', url);\r\n\r\n    req.onload = function() {\r\n      if (req.status == 200) {\r\n        resolve(req.response);\r\n      } else {\r\n        reject(Error(req.statusText));\r\n      }\r\n    };\r\n\r\n    \/\/ Handle network errors\r\n    req.onerror = function() {\r\n      reject(Error(\"Network Error\"));\r\n    };\r\n\r\n    \/\/ Make the request\r\n    req.send();\r\n  });\r\n}\r\n\r\n\/\/Accessing someFile.php asynchronously...\r\ngetURL('someFile.php').then(function(response) {\r\n  console.log(\"Success!\", response);\r\n}, function(error) {\r\n  console.error(\"Failed!\", error);\r\n});\r\n<\/pre>\r\n","slur":"advanced-javascript-AJAX","cat":"Website","subcat":"Advanced Javascript","video":"","diff":"5","quiz":""},
{"id":"259","title":"The Guide to LaTeX","post":"<p>The most famous text processor of this day and age, <em>Microsoft Word<\/em>, is what we call a WYSIWYG editor &ndash; What You See Is What You Get. As you type, you immediately see the results and how the page will be printed. But, as I think we all have experienced, once you try to insert a slightly fancier layout, such as images or mathematical formulas, things go horribly wrong. One moment everything looks fine, the other everything has completely changed position.<\/p> \r\n\r\n<p>To solve these problems, and to make it easier to write scientific and professional pieces, <strong>LaTeX<\/strong> has been invented.<\/p>\r\n\r\n<p>Usually, when writers want to publish a book, they send the manuscript to the publishing company with a standard (monospaced) font and no layout, along with some instructions. The book designer at the publishing company decides on how the text will be formatted, according to these instructions, but doesn&rsquo;t change the text itself.<\/p>\r\n\r\n<p>LaTeX takes over the role of the book designer. As you write something, you can place (markup) commands around certain pieces that determine how it will be marked up when the piece is compiled. Only after you&rsquo;ve compiled it, are you able to see how it looks.<\/p>\r\n\r\n<p><img src=\"media\/LATEXvsWYSIWYG.png\" \/><\/p>\r\n\r\n<p>LaTeX is therefore called a markup language &ndash; a language that specifies how an article must be formatted by placing specified commands around the parts that need it. This may seem more difficult at first, but once you get the hang of it and remember some commands, you can easily visualize how it will look as you are typing the commands. LaTeX aims for consistency, keeping the typographic quality high, which means you might not be able to create very fancy documents, but they will always look above average.<\/p>\r\n\r\n<p>Because the language uses regular text as a basis, it&rsquo;s really simple to learn, and you only need a few commands (and some text, of course) to create a basic structure. All you have to do is tell the computer what&rsquo;s what in your text. The downside of such tiny size and simplicity, is that there aren&rsquo;t many proper guides to LaTeX, that also teach you everything there is.<\/p>\r\n\r\n<p>This guide aims to solve that deficit! It starts very easy, but encompasses every command available (at least, as far as I know). It&rsquo;s recommended to follow it in the order provided, but after a while you can pick your own chapters if you&rsquo;re looking for something specific.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Installation<\/li>\r\n\t<li>Basic Syntax I<\/li>\r\n\t<li>Basic Syntax II<\/li>\r\n\t<li>Spaces &amp; Reserved Characters<\/li>\r\n\t<li>Basic Structure<\/li>\r\n\t<li>Document Classes<\/li>\r\n\t<li>Sectioning<\/li>\r\n\t<li>Counters<\/li>\r\n\t<li>Semantics &amp; Custom Macros<\/li>\r\n\t<li>Text Formatting<\/li>\r\n\t<li>Languages &amp; Special Characters<\/li>\r\n\t<li>Footnotes, References &amp; Citations<\/li>\r\n\t<li>Alignment &amp; Simple Environments<\/li>\r\n\t<li>Fonts<\/li>\r\n\t<li>Lists<\/li>\r\n\t<li>Spacing<\/li>\r\n\t<li>Lengths<\/li>\r\n\t<li>Tables I<\/li>\r\n\t<li>Tables II<\/li>\r\n\t<li>Floats &amp; Protection<\/li>\r\n\t<li>Multiple Columns<\/li>\r\n\t<li>Hyperlinks &amp; URLs<\/li>\r\n\t<li>Figures &amp; Images<\/li>\r\n\t<li>Special Pages I<\/li>\r\n\t<li>Special Pages II<\/li>\r\n\t<li>Page Layouts &amp; Margins<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n","slur":"the-guide-to-LaTeX","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"260","title":"[LaTeX] Installation","post":"<p>LaTeX in itself is actually not a standalone language &ndash; it&rsquo;s built on top of <strong>TeX<\/strong>, one of the first systems created to mark up documents.<\/p> \r\n\r\n<p>TeX is a programming language that contains a bunch of very general and complex functions, which is why LaTeX was invented to simplify it. Not surprisingly, it&rsquo;s often said to stand for <strong>Layman&rsquo;s TeX<\/strong>; TeX for the non-geniuses. LaTeX provides a larger set of specific functions that are easy to use and understand, which translate to something in TeX. But, you don&rsquo;t need to know all of that to be able to use it, you only need to understand that you need to install TeX on your computer to be able to do anything.<\/p>\r\n\r\n<p>NOTE: If you want, of course, you can look into TeX, or other languages built on top of it. But LaTeX is by far the most popular one, and in my opinion easiest to use, so I recommend starting with it.<\/p>\r\n\r\n<h2>Installing TeX<\/h2>\r\n\r\n<p>Installing TeX is a very difficult and tricky business, which is why so-called TeX distributions have been created, which can install everything for you with a single click.<\/p>\r\n\r\n<ul>\r\n\t<li>For Mac OS X, I recommend <strong>Mac TeX<\/strong><\/li>\r\n\t<li>For Linux, I recommend <strong>TeX Live<\/strong><\/li>\r\n\t<li>For Windows, I recommend <strong>MikTeX<\/strong><\/li>\r\n<\/ul>\r\n\r\n<h2>Choosing an Editor<\/h2>\r\n\r\n<p>TeX files are nothing more than simple text files. This is useful, because, unlike Word documents, you can open them with a text editor to edit them and see what&rsquo;s inside.<\/p>\r\n\r\n<p>To compile them into actual PDF files, however, you need a specialized editor. Such editors usually also provide syntax highlighting, quick buttons to set up certain environments such as tables or images, and a symbol library from which you can pick any special characters.<\/p>\r\n\r\n<p>The most popular (free) ones are <strong>TeXmaker<\/strong> and <strong>TeXstudio<\/strong>, which are supported on all platforms.<\/p>\r\n\r\n<p>I, personally, use <strong>WinEdt<\/strong>, but it is paid software, so you might not want to start with it.<\/p>\r\n\r\n<h2>That&rsquo;s all!<\/h2>\r\n\r\n<p>If both installations have succeeded, you should now be able to write and compile LaTeX files. Simply create a new file within the editor, or create a new text file and give it the extension <strong>.tex<\/strong>.<\/p>\r\n\r\n<p>How to compile documents depends on the editor you chose, but there&rsquo;s usually a big button you can search for.<\/p>\r\n\r\n<p>As you compile a file, you&rsquo;ll notice that lots of other files are also created. These are not <em>essential<\/em> to your document &ndash; just the TeX file is enough for everything to work correctly &ndash; but can add something extra once you get into the more advanced parts of LaTeX. But, nothing to worry about now.<\/p>\r\n","slur":"latex-installation","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"261","title":"[LaTeX] Basic Syntax I","post":"<p>Because LaTeX&rsquo;s a markup language, the majority of your file will simply be regular text. Therefore, something is needed to tell the computer when a piece of text is actually a command. For this, we <em>always<\/em> use the backslash: <code>\\<\/code>.<\/p> \r\n\r\n<p style=\"margin-left:36.0pt\">For example, <code>\\emph<\/code> is used for emphasizing a piece of text, and <code>\\newline<\/code> is used to start text on a new line.<\/p>\r\n\r\n<p>NOTE: Commands are often called <strong>command sequences<\/strong> or <strong>macros<\/strong>. This is because of the fact that one command encompasses a sequence of steps to be taken. For example, a command to create a table, has to perform lots of sequential calculations and operations to do so.<\/p>\r\n\r\n<h2>Arguments<\/h2>\r\n\r\n<p>Commands require arguments, which can be <strong>required<\/strong> or <strong>optional<\/strong>. These can be mixed &ndash; a command can have some required and some optional arguments, or only optional ones, or only required ones. And in some rare cases, no arguments at all.<\/p>\r\n\r\n<h2>Required Arguments<\/h2>\r\n\r\n<p>For example, when emphasizing a piece of text, we need to supply <em>which <\/em>piece of text we want emphasized. It&rsquo;s required &ndash; if we leave it out, it emphasizes nothing. Some commands go even further, and throw errors when you don&rsquo;t supply the required arguments.<\/p>\r\n\r\n<p>Required arguments are placed between braces:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\command{<em>argument<sub>1<\/sub><\/em>}{<em>argument<sub>2<\/sub><\/em>}{<em>&hellip;<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis text is \\textit{written in italics}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax1.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Optional Arguments<\/h2>\r\n\r\n<p>For example, if we want to insert a new line, we <em>could<\/em> supply how much white space we want between this new line and the previous one. But, if we leave it out, everything&rsquo;s fine, and it just takes the standard line height.<\/p>\r\n\r\n<p>Optional arguments are placed between brackets, and separated by commas if there are multiple:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\command[<em>argument<sub>1<\/sub>, argument<sub>2<\/sub>, &hellip;<\/em>]<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is a\\\\regular line break.\r\n\r\nThis is a\\\\[20mm] longer line break\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax2.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Combined Arguments<\/h2>\r\n\r\n<p>When a command has both optional and required arguments, you always need to provide the optional ones first.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{thebibliography}{2}\r\n\t \\bibitem[SomeText]{book1} Book 1, written by Someone, in 1900\r\n     \\bibitem{book2} Book 2, written by Someone Else, in 1950\r\n\\end{thebibliography}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax3.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: The only moments it&rsquo;s possible that you need to switch around the order of arguments, is when working with special commands provided by packages. In these cases, this deviation from standard syntax will be mentioned.<\/p>\r\n\r\n<h2>Nesting Commands<\/h2>\r\n\r\n<p>As you&rsquo;d expect, you can nest commands as much as you like, although it&rsquo;s of course preferred to keep the mark up as simple and readable as possible.<\/p>\r\n","slur":"latex-basic-syntax-I","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"262","title":"[LaTeX] Basic Syntax II","post":"<p>Continuing on last chapter, I&rsquo;ll discuss some of the basic syntax that will become important, especially later on.<\/p> \r\n\r\n<h2>Environments<\/h2>\r\n\r\n<p>Often, we want a certain typesetting or command sequence to apply to a big block of text and nested commands, and that&rsquo;s when we use an <strong>environment<\/strong>. Environments need to be opened and closed, using:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\begin{<em>environmentName<\/em>}\r\n\t<em>text and commands&hellip;<\/em>\r\n\\end{<em>environmentName<\/em>}<\/code><\/p>\r\n\r\n<p>For example, lists are environments, as well as tables and figures.<\/p>\r\n\r\n<h2>Switch Variation<\/h2>\r\n\r\n<p>Most commands with a single required argument have an alternative syntax, that is sometimes much easier to use, which is called the <strong>switch<\/strong>. Such a syntax doesn&rsquo;t need its required arguments stated right after it, but rather applies the command to the whole block or environment that it&rsquo;s in.<\/p>\r\n\r\n<p><code class=\"longsyntax\">{ \\switchCommand <em>text<\/em> }<\/code><\/p>\r\n\r\n<p>is the same as<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\command{<em>text<\/em>}<\/code><\/p>\r\n\r\n<p>I&rsquo;ll try to provide the switch alternative as well, whenever I introduce a new command throughout this course.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nSome \\emph{emphasized text}. {Some \\em emphasized text}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax4.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Star Variation<\/h2>\r\n\r\n<p>Most commands also have a <strong>star<\/strong> variation, which simply means appending an asterisk to the command name.<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\command*[<em>optionalArgument<\/em>]{<em>requiredArgument<\/em>}<\/code><\/p>\r\n\r\n<p>This usually changes the command&rsquo;s behaviour to something that is more desired in only some of the use cases.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\section{I am a section}\r\n\\section*{Me too!}\r\n\\section{And three make a crowd.}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax5.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>The only thing that doesn&rsquo;t use the regular command syntax, are comments. But that&rsquo;s only logical &ndash; comments are not interpreted and not used in the final document, so the computer doesn&rsquo;t need to see them. Comments are only there for you to tell yourself what certain parts of the code do.<\/p>\r\n\r\n<p>Single line comments are created with <code>% comment<\/code>.<\/p>\r\n\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is %an inline comment\r\ncool!\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax6.png\" \/><\/div>\r\n<\/div>\r\n<p>NOTE: If you hadn&rsquo;t noticed already: LaTeX is case-sensitive, and nearly all commands are lowercase. So if an error occurs, an uppercase letter might have accidentally slipped in.<\/p>\r\n","slur":"latex-basic-syntax-II","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"263","title":"[LaTeX] Spaces & Reserved Characters","post":"<p>Like most markup languages, LaTeX collapses whitespace. This simply means that when it encounters multiple white spaces, it reduces it to a single one. This also means that it ignores a single return. An empty line between text, instead, starts a new paragraph.<\/p> \r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThese words are                 not that far apart.\r\nNeither are these\r\n\r\nBut this is a new paragraph.\r\n<\/pre>\r\n<div><img src=\"media\/LatexEatingWhiteSpace.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: If you&rsquo;re wondering why LaTeX does that, it&rsquo;s because it regards multiple whitespaces and newlines as different from the single white space and return key, and requires different commands to produce them.<\/p>\r\n\r\n<h2>Reserved Characters<\/h2>\r\n\r\n<p>There are some preserved characters that make LaTeX do special things when you type them in the regular way. These are:<\/p>\r\n\r\n<p><code class=\"longsyntax\">#  $  %  ^  &  _  {\t}  ~  \\<\/code><\/p>\r\n\r\n<p>That&rsquo;s fine, but if you want to use them as a character in-text, you need to <em>escape <\/em>them. This can be done, in most cases, by adding a backslash in front:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\#  \\$  \\%  \\^  \\&  \\_  \\{  \\}  \\~<\/code><\/p>\r\n\r\n<p>But, if you need an actual backslash, you can&rsquo;t escape it with another backslash. For that, use the <code>\\textbackslash<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThese are two dollar signs: \\$\\$            \\par\r\nThis is a math environment: $H_{2}O$\r\n<\/pre>\r\n<div><img src=\"media\/LatexReservedCharacters.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Built-In Strings<\/h2>\r\n\r\n<p>There are four commands that transform into a built-in string.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\today<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>December 20, 2015<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Current date<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\TeX<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>T<span style=\"font-variant:small-caps;position: relative;top: 4px;\">e<\/span>X<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>What you&rsquo;re learning (kind of)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\LaTeX<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>L<span style=\"font-variant:small-caps;position: relative;top: -4px;\">a<\/span>T<span style=\"font-variant:small-caps;position: relative;top: 4px;\">e<\/span>X<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>What you&rsquo;re actually learning<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\LaTeXe<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>L<span style=\"font-variant:small-caps;position: relative;top: -4px;\">a<\/span>T<span style=\"font-variant:small-caps;position: relative;top: 4px;\">e<\/span>X 2<span style=\"position: relative;top: 4px;\">&epsilon;<\/span><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The current version<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Whitespace after Commands<\/h2>\r\n\r\n<p>Commands eat up <em>all<\/em> the white space right after it. To prevent this, add an empty required argument after it with empty braces. Alternatively, you can use the empty <code>\\<em>&lt;space<\/em>&gt<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nIsn't \\LaTeX cool? Isn't \\LaTeX{} cool? Yes \\ \\ \\ it is!\r\n<\/pre>\r\n<div><img src=\"media\/LatexWhiteSpaceAfterCommands.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Of course, commands that, by default, have a required argument, already display this behaviour.<\/p>\r\n","slur":"latex-spaces-reserved-characters","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"264","title":"[LaTeX] Basic Structure","post":"<p>Every document has a few required commands, put in a basic structure, you need to start from.<\/p> \r\n\r\n<p><code class=\"longsyntax\">\\documentclass[<em>options<\/em>]{<em>documentType<\/em>} \r\n<em>packages<\/em>\r\n\r\n\\begin{document}\r\n\t<em>everything<\/em>\r\n\\end{document}<\/code><\/p>\r\n\r\n<p>The first part &ndash; everything that is before the document environment &ndash; is called the <em>preamble<\/em>. It is used to tell LaTeX to load everything we&rsquo;re going to use in the document, and to determine the type of document. Only what&rsquo;s inside the document environment is actually shown in the document.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\documentclass{article}\r\n\\usepackage[english]{babel}\r\n\r\n%In the preamble...\r\n\r\n\\begin{document}\r\nInside the document...\r\n\\end{document} \r\n\r\nAfter the document\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicStructure.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: After the <code>\\end{document}<\/code> command you can place anything you like (comments, bits of text you have your doubts about), because it&rsquo;s not going to show up in the document anyway.<\/p>\r\n\r\n<h2>Packages<\/h2>\r\n\r\n<p>LaTeX wants to compile as quickly as possible, while keeping the file size low as well. Therefore, you need to manually include packages if you want more than very basic commands. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\usepackage[<em>optionalArgument<\/em>]{<em>packageName<\/em>}<\/code><\/p>\r\n\r\n<p>You can include as many as you like, or none at all. Most of these packages are already installed on your computer if you&rsquo;ve installed a TeX distribution, but you can create or download your own custom packages if you&rsquo;re into that sort of thing.<\/p>\r\n\r\n<h2>Document Class<\/h2>\r\n\r\n<p>The document class decides the type of document you&rsquo;re creating, which mostly influences which commands you&rsquo;re able to use and how the finished product will look. Next chapter will tell you everything about it.<\/p>\r\n\r\n<h2>Importing Files<\/h2>\r\n\r\n<p>If your project gets large, it might be useful to split it into multiple TeX files, which you can combine into one main TeX file. Fortunately, this is easy to do.<\/p>\r\n\r\n<p>In the preamble, you can specify which files are going to be imported somewhere with <code>\\includeonly{<em>filename, filename, &hellip;<\/em>}<\/code>.<\/p>\r\n\r\n<p>Then, within the document itself, use <code>\\include{<em>filename<\/em>}<\/code> to actually copy it there. Note that LaTeX starts an included document on a new page. If you don&rsquo;t want that, you can use <code>\\input{<em>filename<\/em>}<\/code> to just literally copy the contents from the other file at that exact spot.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\documentclass{article}\r\n\\includeonly{latex.tex}\r\n\r\n\\begin{document}\r\n\\input{latex.tex}\r\n\\end{document} \r\n\r\n%The contents of latex.tex are...\r\nThis is everything that's inside latex.tex \r\n<\/pre>\r\n<div><img src=\"media\/LatexImportCombineFiles.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: You don&rsquo;t necessarily have to tell LaTeX which files you&rsquo;re planning on including in the preamble, but it&rsquo;s best to do so, as it increases performance &ndash; LaTeX doesn&rsquo;t need to search everywhere when you include a file, but knows what&rsquo;s coming.<\/p>\r\n","slur":"latex-basic-structure","cat":"Writing","subcat":"LaTeX","video":"","diff":"1","quiz":""},
{"id":"265","title":"[LaTeX] Document Classes","post":"<p>Document classes aren&rsquo;t hard to understand &ndash; you just need to know what&rsquo;s out there, and what options you have. For this, I have two nice tables.<\/p> \r\n\r\n<h2>Class Names<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>article<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For articles, such as presentations, short reports, scientific journals.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>proc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For proceedings based on the article class<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>minimal<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Only sets a page size and a base font &ndash; as small as it gets. Mainly used for debugging purposes<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>report<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For long reports containing several chapters, small books, PhD theses, etcetera.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>book<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For actual books<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>slides<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For slides. Uses big sans-serif letters.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>beamer<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For writing presentations<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>memoir<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Based on the book class, but you can create any kind of document with it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>letter<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>For letters<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"tex\">\r\n\\documentclass{article}\r\n<\/pre>\r\n\r\n<h2>Class Options<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Options<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>10pt<\/code>, <code>11pt<\/code>, <code>12pt<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets the size of the main font in the document. If not specified, 10pt is assumed.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>a4paper<\/code>, <code>letterpaper<\/code>, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Defines the paper size. Used to be <code>letterpaper<\/code>, but now <code>a4paper<\/code> is default almost everywhere.<\/p>\r\n\r\n\t\t\t<p>Other options are <code>a5paper<\/code>, <code>b5paper<\/code>, <code>executivepaper<\/code> and <code>legalpaper<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>fleqn<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Typesets formulas left-aligned instead of centred<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>leqno<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Places numbering of formulas on the left hand side, instead of the right<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>titlepage<\/code>, <code>notitlepage<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies whether a new page should be started after the document title or not. The <em>article<\/em> class doesn&rsquo;t do this by default, while the <em>report<\/em> and <em>book<\/em> class do.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>twocolumn<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Typesets the document in two columns instead of one<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>twoside<\/code>, <code>oneside<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies whether double or single sided output should be compiled. The <em>article<\/em> and <em>report<\/em> classes are single sided, while the <em>book<\/em> class is double sided by default.<\/p>\r\n\r\n\t\t\t<p>Keep in mind: you still need to tell the printer you&rsquo;re using to make a two-sided printout.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>landscape<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes the layout to landscape (horizontal) mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>openright<\/code>, <code>openany<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes chapters begin either only on right hand pages, or on the next page available. The <em>book<\/em> class starts on the right by default, while the <em>report<\/em> class doesn&rsquo;t. The <em>article<\/em> class doesn&rsquo;t know chapters and can&rsquo;t use this.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>draft<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes LaTeX indicate hyphenation and justification problems by adding a small square in the right-hand margin of the problem line. Also suppresses inclusion of images and shows only a frame.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"tex\">\r\n\\documentclass[10pt, twoside, leqno]{article}\r\n<\/pre>\r\n\r\n<h2>Page Styles<\/h2>\r\n\r\n<p>Every document class supports three predefined header\/footer combinations, which we call <strong>page styles<\/strong>. To set one for the entire document, use <code>\\pagestyle{<em>style<\/em>}<\/code>.<\/p>\r\n\r\n<p>The styles to choose from are<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Option<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>plain<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints the page numbers on the bottom of the page, centred within the footer. This is default.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>headings<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints current chapter heading and page number in the header on each page. The footer remains empty.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>empty<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Footer and header are empty.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>To change the style for one specific page, use <code>\\thispagestyle{<em>style<\/em>}<\/code> while on that page.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\documentclass{article}\r\n\r\n\\pagestyle{headings}\r\n\r\n\\begin{document}\r\n\\section{First Section}\r\nLorem ipsum...\r\n\\end{document} \r\n<\/pre>\r\n<div><img src=\"media\/LatexPageStyles.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-document-classes","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"266","title":"[LaTeX] Sectioning","post":"<p>The first step in creating a well-structured document is sectioning &ndash; dividing the text into smaller and smaller sections, subsections and paragraphs. LaTeX has very good support for this, as long as you don&rsquo;t want a hierarchy more than 3 levels deep. But, that would result in a mess anyway, so you don&rsquo;t want that.<\/p> \r\n\r\n<p>These sectioning commands are available, in order of importance:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Hierarchy Level<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Remarks<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\part{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-1<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\chapter{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>0<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Only available in books and reports<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\section{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\subsection{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>2<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\subsubsection{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>3<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\paragraph{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>4<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\subparagraph{<em>name<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>5<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: <em>Letters<\/em> don&rsquo;t have any sectioning commands, and using them in such a document will result in an error.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\documentclass{book}\r\n\r\n\\begin{document}\r\n\\chapter{Chapter}\r\nLorem ipsum\r\n\r\n\\section{Section}\r\nLorem ipsum\r\n\r\n\\subsection{Subsection}\r\nLorem ipsum\r\n\r\n\\subsubsection{Subsubsection}\r\nLorem ipsum\r\n\r\n\\paragraph{Paragraph}\r\nLorem ipsum\r\n\r\n\\subparagraph{Subparagraph}\r\nLorem ipsum\r\n\r\n\\end{document}\r\n<\/pre> \r\n<div><img src=\"media\/LatexSectioningCommands.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Advantages of Sectioning<\/h2>\r\n\r\n<p>The most important reason to use this is, of course, that is keeps your documents structured and well-organized. But, they also simplify your life quite a bit, for these reasons:<\/p>\r\n\r\n<ul>\r\n\t<li>They automatically gradually decrease font size, which means that, for instance, <code>\\part<\/code> will be typeset with large letters, and <code>\\subsubsection<\/code> typeset with small letters.<\/li>\r\n\t<li>They automatically number your sections. For example, the first <code>\\subsection<\/code> after the second <code>\\section<\/code> command will automatically have the number <code>2.1<\/code> prefixed.<\/li>\r\n\t<li>They make it easy to create an automatically updated table of contents.<\/li>\r\n<\/ul>\r\n\r\n<h2>Turn off Numbering<\/h2>\r\n\r\n<p>If you don&rsquo;t want a section to be numbered, use its star variation.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\section{I am a section}\r\n\\section*{Me too!}\r\n\\section{And three make a crowd.}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBasicSyntax5.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<p>If your document has been structured well, all you have to do to create a table of contents is call the command <code>\\tableofcontents<\/code>.<\/p>\r\n\r\n<p>This only takes into account numbered sections, however, which means you need to add others you want to include manually. This is done by adding<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\addcontentsline{toc}{<em>sectionType<\/em>}{<em>name<\/em>}<\/code><\/p>\r\n\r\n<p>right after you declare the section.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\tableofcontents\r\n\r\n\\section{First One}\r\nLorem ipsum...\r\n\\section{Second One}\r\nLorem ipsum...\r\n\\addcontentsline{toc}{section}{Third One}\r\n\\section*{Third One}\r\nLorem ipsum...\r\n<\/pre>\r\n<div><img src=\"media\/LatexTableOfContents.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Title Page<\/h2>\r\n\r\n<p>Right after you start the document, you have the opportunity to create a good-looking title page with some special commands: <code>\\title{<em>title<\/em>}<\/code>, <code>\\author{<em>authors<\/em>}<\/code>, <code>\\date{<em>date<\/em>}<\/code><\/p>\r\n\r\n<p>NOTE: Authors need to be separated by the <code>\\and<\/code> command &ndash; most other commands and symbols won&rsquo;t work on a title page. You can also use the <code>\\thanks{<em>text<\/em>}<\/code> command to thank anyone.<\/p>\r\n\r\n<p>You don&rsquo;t need to define all of them, and if you leave out the date, LaTeX will just use today&rsquo;s date. But, even if you&rsquo;ve defined them, you need to tell the processor when you&rsquo;re done with your title page and it can be created. This is done with the <code>\\maketitle<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\title{This Is A Title!}\r\n\\author{Made by Me \\and Myself \\and I}\r\n\\date{\\today}\r\n\r\n\\maketitle\r\n<\/pre>\r\n<div><img src=\"media\/LatexTitlePage.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Abstract<\/h2>\r\n\r\n<p>Most (scientific) papers start by providing an abstract or summary of what&rsquo;s inside, and LaTeX has the <code>abstract<\/code> environment for that. It automatically adds the text <strong>Abstract<\/strong> above it, but you&rsquo;ll learn later on how to customize that.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{abstract}\r\nThis documents is about something very interesting that you can't really understand without reading it, but this will give you the summary anyway.\r\n\\end{abstract}\r\n<\/pre>\r\n<div><img src=\"media\/LatexAbstract.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-sectioning","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"267","title":"[LaTeX] Counters","post":"<p>As you&rsquo;ve seen in last chapter, LaTeX automatically keeps separate counters for every type of section. But, what&rsquo;s really good about this, is that it also does the same for nearly everything &ndash; tables, figures, table of contents, and so on. Because this concept of counters keeps popping up all over LaTeX, I wanted to do a chapter on it here that explains how you can customize them, and add your own counters.<\/p> \r\n\r\n<h2>Setting &amp; Getting Counters<\/h2>\r\n\r\n<p>To <em>set<\/em> an existing counter, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\setcounter{<em>counter<\/em>}{<em>value<\/em>}<\/code><\/p>\r\n\r\n<p>To <em>get<\/em> the current value of a certain counter, as text, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\the&lt;<em>NameOfTheCounter<\/em>&gt;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setcounter{section}{4}\r\nThe value is: \\thesection\r\n<\/pre>\r\n<div><img src=\"media\/LatexSettingGettingCounters.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If you don't want it as text, but as a number to use in calculations, use <code>\\value{<em>counter<\/em>}<\/code>.<\/p>\r\n\r\n<h2>Changing Counters<\/h2>\r\n\r\n<p>To increment an existing counter by a certain amount, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\addtocounter{<em>counter<\/em>}{<em>value<\/em>}<\/code><\/p>\r\n\r\n<p>This value can be negative, if you want to decrement it.<\/p>\r\n\r\n<p>To create a new counter, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newcounter[<em>counter<\/em>]{<em>name<\/em>}<\/code><\/p>\r\n\r\n<p>If you supply the optional argument <em>counter<\/em>, which must be an existing counter, this new counter is reset every time <em>counter<\/em> is changed.<\/p>\r\n\r\n<h2>Changing the Numbering System<\/h2>\r\n\r\n<p>It&rsquo;s possible to display your counters using a different system than the regular Arabic numbers you&rsquo;re used to.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Example<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\alph{<em>counter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints counter using lowercase alphabetic characters<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>a, b, c, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Alph{<em>counter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints counter using uppercase alphabetic characters<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A, B, C, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\arabic{<em>counter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints counter using regular numbers. Default.<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1, 2, 3, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\roman{<em>counter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints counter using lowercase roman numbers<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>i, ii, iii, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Roman{<em>counter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints counter using uppercase roman numbers<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>I, II, III, &hellip;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\newcounter{mysections}\r\n\\addtocounter{mysections}{2}\r\n\r\n\\section*{\\Roman{mysections} A Section Numbered Differently}\r\nLorem Ipsum...\r\n<\/pre>\r\n<div><img src=\"media\/LatexNumberingSystems.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Useful Counters to Remember<\/h2>\r\n\r\n<p>By default, the table of contents only registers sections to a maximum of three levels deep. To set this to something else, change the counter <code>tocdepth<\/code>.<\/p>\r\n\r\n<p>By default, all sections are numbered to a depth of 2 &ndash; so, for example, sections and subsections are numbered, but subsubsections aren&rsquo;t. To change this, use the counter <code>secnumdepth<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setcounter{secnumdepth}{4}\r\n\r\n\\section{La}\r\n\\subsection{Lala}\r\n\\subsubsection{Lalala}\r\n\\paragraph{Lalalala}\r\n<\/pre>\r\n<div><img src=\"media\/LatexCountersDepth.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>All other counters are accessed by simply typing its name, as we've already seen with <em>section<\/em>.<\/p>\r\n\r\n<p>Use <code>\\pagenumbering{<em>numbering system<\/em>}<\/code> if you just want to change the numbering system of the current page.<\/p>\r\n","slur":"latex-counters","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"268","title":"[LaTeX] Semantics & Custom Macros","post":"<p>Before I start introducing command after command, I want to talk about something very fundamentally important: <strong>semantics<\/strong>. Semantics means separating your markup and layout, or in other words: using meaningful commands. Meaningful commands, together with counters, form the vast majority of what makes LaTeX.<\/p> \r\n\r\n<p>For instance, say you want to emphasize certain words or phrases by making it <em>italic<\/em>. Then you could use the <code>\\textit{<em>phrase<\/em>}<\/code> command on everything, and you&rsquo;re done. But that command carries no meaning, and what if, just before printing the document, you decide that you want to place emphasis using <u>underlined<\/u> typesetting? You&rsquo;d have to go in and change every single instance where you used this command. And still, the command would be meaningless, just to get the layout right.<\/p>\r\n\r\n<p>The solution is, to work semantically. Instead, use the <code>\\emph{<em>phrase<\/em>}<\/code> command, and define your own styling rules for it. Firstly, this shows that these words are emphasized, and secondly, you can easily change the styling rules and everything will be fine.<\/p>\r\n\r\n<h2>Custom Macros<\/h2>\r\n\r\n<p>To be able to do this, you need to know how to create your own commands, and how to alter existing ones. At first, I planned on including this chapter as the very last one, but I decided that it&rsquo;s just too useful to <em>not<\/em> know about when first learning LaTeX.<\/p>\r\n\r\n<h2>New Commands<\/h2>\r\n\r\n<p>The syntax for creating a new command is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newcommand{<em>\\name<\/em>}[<em>numArg<\/em>][<em>default<\/em>]{<em>definition<\/em>}<\/code><\/p>\r\n\r\n<p>Here, <em>numArg<\/em> is the number of arguments it accepts, with a maximum of 9. Only the first one of those can be optional, and if it is not present (which is possible, because it&#39;s optional), the <em>default<\/em> value will be used. Within the <em>definition<\/em>, you can use <code>#&lt;<em>number<\/em>&gt;<\/code> to refer to the arguments.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n% Defining our own counter\r\n\\newcounter{myromancounter}\r\n\\setcounter{myromancounter}{1}\r\n\r\n% Defining our own command, \\romansection, which takes 1 argument, and automatically increments our counter\r\n\\newcommand{\\romansection}[1]{\\section*{\\Roman{myromancounter}. #1} \\addtocounter{myromancounter}{1} }\r\n\r\n\\romansection{This is the first section}\r\n\\romansection{This is the second section}\r\n<\/pre>\r\n<div><img src=\"media\/LatexNewCommands.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Of course, new commands must carry a name that&rsquo;s not already in use. If you&nbsp;want to overwrite an existing command instead,&nbsp;use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\renewcommand{<em>\\name<\/em>}[<em>numArg<\/em>][<em>default<\/em>]{<em>definition<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n% We renew the existing section counter to one with Roman numerals\r\n\\renewcommand{\\thesection}{\\Roman{section}}\r\n\r\n\\section{This is the first section}\r\n\\section{This is the second section}\r\n<\/pre>\r\n<div><img src=\"media\/LatexNewCommands.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Note that, when renewing a command, you can't use the existing one in the definition - it creates a loop, which LaTeX doesn't know how to handle.<\/p>\r\n\r\n<p>NOTE: Typically, commands are created or altered in the preamble, before anything is processed\/printed, but you can do it any time you want.<\/p>\r\n\r\n<h2>New Environments<\/h2>\r\n\r\n<p>The syntax for creating a new environment is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newenvironment{<em>name<\/em>}[<em>numArg<\/em>]{<em>before<\/em>}{<em>after<\/em>}<\/code><\/p>\r\n\r\n<p>The <em>before<\/em> defines the commands to be executed right before the environment starts, and <em>after<\/em> the commands to be executed right after the environment has wrapped up.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\newenvironment{noIndent}{\\noindent}{\\\\}\r\n\r\nA paragraph!\r\n\r\n\\begin{noIndent}\r\n    A paragraph!\r\n\\end{noIndent}\r\n\r\nA paragraph!\r\n<\/pre>\r\n<div><img src=\"media\/LatexNewEnvironments.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>It&rsquo;s possible to also declare new commands within such a new environment declaration, which will only be available within that environment. Nothing changes, except for the fact that you need to access arguments with <code>##&lt;<em>number<\/em>&gt;<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\newenvironment{noIndent}{\\noindent \\newcommand{\\boldText}[1]{\\textbf{##1}}}{}\r\n\r\nA paragraph!\r\n\r\n\\begin{noIndent}\r\n    A \\boldText{cool} paragraph!\r\n\\end{noIndent}\r\n<\/pre>\r\n<div><img src=\"media\/LatexCommandsWithinEnvironments.png\" \/><\/div>\r\n<\/div>\r\n\r\n","slur":"latex-semantics-custom-macros","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"269","title":"[LaTeX] Text Formatting","post":"<p>These first few chapters discussed very much the global workings and overall concepts in LaTeX, and now it&rsquo;s finally time to look at the small details &ndash; formatting the actual words, sentences and paragraphs.<\/p> \r\n\r\n<p>LaTeX performs a lot of guessing. It uses a set of typographic rules to guess what you wanted to say with your markup and determine the best layout. For example, by default:<\/p>\r\n\r\n<ul>\r\n\t<li>Text is justified, which means spacing between words is slightly adjusted to make every sentence the exact same width. If LaTeX has to adjust word spacing too much, it will give a warning, but still compile correctly. If a line has too few words, it's an <em>underfull box<\/em>, if it has too many, it's an <em>overfull box<\/em>.<\/li>\r\n\t<li>As another way to accomplish this, words at the end of the sentence are sometimes split into two. LaTeX, most of the time, knows where it can do this, and adds hyphens.<\/li>\r\n\t<li>Orphans and widows are prevented. This means that it tries to <em>never<\/em> end or start a page with a single line, but keep paragraphs together.<\/li>\r\n<\/ul>\r\n\r\n<p>Most of the times, LaTeX is right and everything looks great. But, sometimes you need something different or it doesn&rsquo;t work out, and that&rsquo;s when you can override and change this behaviour.<\/p>\r\n\r\n<h2>New Lines &amp; Pages<\/h2>\r\n\r\n<p>By default, when you leave a blank line in your document, LaTeX starts new paragraph. This means that it indents the next line, without leaving vertical white space between the two paragraphs. If you don&rsquo;t want that much empty lines in your document, you can do the same with the <code>\\par<\/code> command.<\/p>\r\n\r\n<p>There&rsquo;ll also be times where you want to force a new line, without starting a new paragraph. This is done with <code>\\\\<\/code> or <code>\\newline<\/code> commands.<\/p>\r\n\r\n<p>The star variation, <code>\\\\*<\/code>, prohibits a page break after the line break.<\/p>\r\n\r\n<p>To start a new page (&ldquo;hard return&rdquo;), use <code>\\newpage<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is the start of a paragraph. It's a very interesting paragraph full of wonderful details and facts.\\par\r\nHere another one starts\\\\Here we just start a new line within the same paragraph.\r\n<\/pre>\r\n<div><img src=\"media\/LatexNewLines.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Instead of forcing breaks, you can also <em>suggest<\/em> LaTeX use them. The compiler then decides for itself when it&rsquo;s best to follow or ignore your suggestions. For this, use these commands that suggest to (not) add a break:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\linebreak[<em>n<\/em>]\r\n\\nolinebreak[<em>n<\/em>]\r\n\\pagebreak[<em>n<\/em>]\r\n\\nopagebreak[<em>n<\/em>]<\/code><\/p>\r\n\r\n<p>Here, the argument <em>n<\/em> can be a number between 0 and 4, where 4 forces LaTeX to follow your suggestion, and 0 leaves it completely optional.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is the start of a paragraph. It's a very interesting paragraph full of wonderful details and facts. \\linebreak[2]\r\nIt just ignored our linebreak, oh noes! But, \\LaTeX{} has a point, it would have looked awful. Well, then I'll just use the force. \\linebreak[4]\r\nAnother line, yeah!\r\n<\/pre>\r\n<div><img src=\"media\/LatexNewLineSuggestions.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Hyphenation<\/h2>\r\n\r\n<p>By setting a language for your document &ndash; which you&rsquo;ll learn soon &ndash; LaTeX already knows how to hyphenate words. But, words you&rsquo;ve invented yourself, or words with special characters, aren&rsquo;t. For those, you can define how they should be hyphenated yourself.<\/p>\r\n\r\n<p>To do so for every occurrence of the word in the document, use the <code>\\hyphenation{<em>word list<\/em>}<\/code> command. The word list contains your words, separated by spaces, with hyphens between all syllables or points you allow the word to be broken apart.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n% Latex does a best guess\r\nThis is the start of a paragraph. It's an interesting paragraph full of eekhoorntjes.\r\n\r\n\\hyphenation{eek-hoorn-tjes}\r\n% Latex knows how to break it now\r\nThis is the start of a paragraph. It's an interesting paragraph full of eekhoorntjes.\r\n\r\n%FYI: Eekhoorntjes is Dutch for small squirrels. \r\n<\/pre>\r\n<div><img src=\"media\/LatexHyphenation.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If you only need to perform this on a single word, you can use <code>\\-<\/code>, which inserts a discretionary hyphen &ndash; it only displays if needed.<\/p>\r\n\r\n<p>If you desperately want to keep several words together, use <code>\\mbox{<em>text<\/em>}<\/code> or <code>\\fbox{<em>text<\/em>}<\/code>. They do the same, but the latter draws a box around the content.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is the start of a paragraph. It's an interesting paragraph full of \\mbox{eekhoorntjes}.\r\n\r\n\\hyphenation{eek-hoorn-tjes}\r\nThis is the start of a paragraph. It's an interesting paragraph full of \\fbox{eekhoorntjes}.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMboxFbox.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Dashes<\/h2>\r\n\r\n<p>Four types of dashes are known to LateX.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Character<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>inter-word<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hyphen<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>--<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&ndash;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>page range<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>en-dash<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>---<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&mdash;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>punctuation dash<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>em-dash<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>$-$<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&minus;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Minus sign<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nI, super-man, with rank $-1$ --- which seems bad, but is the highest rank --- will tell you my story on pages 5--10.\r\n<\/pre>\r\n<div><img src=\"media\/LatexAllHyphens.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: You can also produce the en-dash and em-dash with <code>\\textendash<\/code> and <code>\\textemdash<\/code>, respectively.<\/p>\r\n\r\n<h2>Word Spacing<\/h2>\r\n\r\n<p>By default, LaTeX inserts more space after a period that ends a sentence, than one that ends an abbreviation (which is, one that follows an uppercase letter). If you want to insert a space that can&rsquo;t be enlarged or shrunk, use <code>~<\/code> (tilde character) instead.<\/p>\r\n\r\n<p>If you want to signal that a period ends a sentence, even if the letter in front of it is uppercase, use <code>\\@<\/code> in front of it.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nTo be, or not to be. That is the question. \\par\r\nTo be, or not to be.~That is the question. \\\\ \\par\r\n\r\nThere's a good \\LaTeX{} tutorial on the WWW. Don't you think? \\par\r\nThere's a good \\LaTeX{} tutorial on the WWW\\@. Don't you think? \\par\r\n<\/pre>\r\n<div><img src=\"media\/LatexWordSpacings.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>To turn off this type of spacing entirely for a certain part of the document, call <code>\\frenchspacing<\/code> there.<\/p>\r\n","slur":"latex-text-formatting","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"270","title":"[LaTeX] Languages & Special Characters","post":"<p>In order to insert support for one or multiple languages, we&rsquo;re going to use our first package! Meet <strong>babel<\/strong>.<\/p> \r\n\r\n<h2>Babel<\/h2>\r\n\r\n<p>To include it with your document, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\usepackage[<em>languageA, languageB, &hellip;<\/em>]{babel}<\/code><\/p>\r\n\r\n<p>In case you specify multiple languages, the last one will become active. If you want to switch to another language somewhere in the document, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\selectlanguage{<em>language<\/em>}<\/code><\/p>\r\n\r\n<pre data-lang=\"tex\">\r\n\\documentclass{article}\r\n% Loads English and Dutch, latter one is active\r\n\\usepackage[english, dutch]{babel}\r\n\r\n% Now English is active\r\n\\selectlanguage{english}\r\n<\/pre>\r\n\r\n<h2>Character Sets<\/h2>\r\n\r\n<p>In order to guarantee the same output on all systems, you could declare a character set. The most extensive and popular one is <strong>utf-8<\/strong>, which is probably all you ever need. The syntax becomes<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\usepackage[utf-8]{inputenc}<\/code><\/p>\r\n\r\n<h2>Accents<\/h2>\r\n\r\n<p>Instead of playing with character sets, you can also use these codes to ensure everything will always look the same:<\/p>\r\n\r\n<p><img src=\"media\/LatexAccents.png\" \/><\/p>\r\n\r\n<p>NOTE: We took the <strong>o<\/strong> as example here &ndash; of course this works for all vowels.<\/p>\r\n\r\n<h2>Special Characters<\/h2>\r\n\r\n<p>A few characters deserve some special attention within LaTeX.<\/p>\r\n\r\n<h5>Quotes<\/h5>\r\n\r\n<p>People are used to typing their quotes straight ( <strong>&#39; &#39;<\/strong> ), or so-called <em>vertical<\/em>, at both ends of a quoted phrase. LaTeX, however, uses back-ticks ( <code>`<\/code> ) for an opening quote, and verticals ( <code>&#39;<\/code> ) for the closing quote. You can simply double them up if you want double quotes.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n'Vertical Quotes' \\ \\ versus \\ \\ `Latex Quotes'\r\n<\/pre>\r\n<div><img src=\"media\/LatexQuotes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Slash<\/h5>\r\n\r\n<p>LaTeX recognizes the ordinary (forward) slash ( <code>\/<\/code> ), but treats words that contain it as one. For example, <strong>read\/write<\/strong> isn&rsquo;t split nor hyphenated. To overcome this problem, use <code>\\slash<\/code> instead.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nBefore you can start this job, you need to learn all about the famous read\/write access to our file system. \\par\r\nBefore you can start this job, you need to learn all about the famous read\\slash write access to our file system.\r\n<\/pre>\r\n<div><img src=\"media\/LatexForwardSlashes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Tilde<\/h5>\r\n\r\n<p>The tilde symbol can be generated with <code>\\~{}<\/code>, but that is a high tilde, and doesn&rsquo;t always look good. A better alternative can be to use <code>$\\sim$<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThat is \\~{}2 dollars. \\par\r\nThat is $\\sim$2 dollars.\r\n<\/pre>\r\n<div><img src=\"media\/LatexTildeSymbol.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Degrees<\/h5>\r\n\r\n<p>To be able to use the degree symbol freely, you need to include the <code>textcomp<\/code> package. Then, accessing it can be done by simply typing <code>\\textdegree{}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{textcomp}\r\n\r\n\\begin{document}\r\nOh noes, it's 30\\textdegree{} Celsius outside!\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexDegreeSymbol.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Euro<\/h5>\r\n\r\n<p>The last version of the font that LaTeX uses was created before the euro had even been invented, which means it doesn&rsquo;t have natural support. To use it, you must include the <code>eurosym<\/code> package.<\/p>\r\n\r\n<p>Then, you can use it as a standalone symbol with <code>\\euro<\/code>, or with value attached as <code>\\EUR{<em>value<\/em>}<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{eurosym}\r\n\r\n\\begin{document}\r\nThat will be \\euro 5. \\par\r\nThat will be \\EUR{5}\r\n\\end{document} \r\n<\/pre>\r\n<div><img src=\"media\/LatexEuroSymbol.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Ellipsis<\/h5>\r\n\r\n<p>An ellipsis is a sequence of three dots. But, just typing three dots results in too little space between them and an ugly ellipsis, which is why you can use the <code>\\ldots<\/code> (low dots) command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nHe waited ... and even longer \\ldots until he found the answer!\r\n<\/pre>\r\n<div><img src=\"media\/LatexEllipsis.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Ligatures<\/h5>\r\n\r\n<p>Ligatures are special characters used for clashing letter combinations. For example, two regular <strong>f<\/strong> characters after each other usually collide and need weird spacing to solve this. LaTeX therefore automatically inserts ligatures that solve these particular combinations elegantly, but if you don&rsquo;t want them, you can place empty braces <code>{}<\/code> between the two letters.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThe fiery thief shot the sheriff! \\par\r\nThe f{}iery thief shot the sherif{}f!\r\n<\/pre>\r\n<div><img src=\"media\/LatexLigatures.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-languages-special-characters","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"271","title":"[LaTeX] Footnotes, References & Citations","post":"<p>If you&rsquo;re writing any sort of scientific article or documented piece, you&rsquo;re going to need footnotes, references, and citations. Luckily, LaTeX was mainly created for these purposes, which means it has very good support for them.<\/p> \r\n\r\n<h2>Footnotes<\/h2>\r\n\r\n<p>Footnotes are small superscript letters within the text, that refer to a small phrase at the bottom of the page (the <em>note in the footer<\/em>). They are used for comments, links or references to the material you used. To create one, use <code>\\footnote{<em>text<\/em>}<\/code>. Footnotes are also counters, which means they are automatically numbered correctly.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nFrom the XYZ website\\footnote{http:\/\/xyz.com} I gathered the following results...\r\n<\/pre>\r\n<div><img src=\"media\/LatexFootnotes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Don&rsquo;t use too many footnotes. If a paragraph is not important enough to be placed in your body text, wonder if it should be in the document at all.<\/p>\r\n\r\n<h2>References<\/h2>\r\n\r\n<p>In reports and articles, references are often made to tables, figures, or other special segments. Again, LaTeX has you covered.<\/p>\r\n\r\n<p>To label a certain segment, simply call <code>\\label{<em>marker<\/em>}<\/code> somewhere in it, preferably near the top. You can make up your own marker names.<\/p>\r\n\r\n<p>Then, if you want to place a reference to it somewhere else in the document, use the <code>\\ref{<em>marker<\/em>}<\/code> command. If you want to display the page number that a certain marker is on, use <code>\\pageref{<em>marker<\/em>}<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\section{Introduction}\r\n\\label{sec:someMarker}\r\nLorem ipsum...\r\n\\section{Problem Statement}\r\nAs seen in section \\ref{sec:someMarker} on page \\pageref{sec:someMarker}, ...\r\n<\/pre>\r\n<div><img src=\"media\/LatexReferences.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: It&rsquo;s customary to start your marker with an abbreviation of what it is you&rsquo;re referring to. For example, <code><attr>sec:<\/attr>something<\/code> refers to a section.<\/p>\r\n\r\n<h2>Bibliography<\/h2>\r\n\r\n<p>If you&rsquo;re using, or citing, information from another source, your document will require a bibliography at the end &ndash; a list of all the sources you&rsquo;ve used.<\/p>\r\n\r\n<p>A bibliography is created using the following <code>thebibliography<\/code> environment:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\begin{thebibliography}{<em>maxNum<\/em>}\r\n\t<em>items<\/em>\r\n\\end{thebibliography}<\/code><\/p>\r\n\r\n<p>The <em>maxNum<\/em> argument defines how large the bibliography will be, which is used by LaTeX to know how much space to reserve for in-document citations.<\/p>\r\n\r\n<p>An item is added with <code>\\b\bibitem[<em>label<\/em>]{<em>marker<\/em>}<\/code>, followed by the actual source. The optional <em>label<\/em> argument can be used if you don&rsquo;t want the standard numbers to be used. Again, the <em>marker<\/em> you are allowed to make up yourself.<\/p>\r\n\r\n<p>Within the document, use <code>\\cite{<em>marker<\/em>}<\/code> to refer to the bibliography item.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis beautiful paragraph I read in the beautiful \\textit{Book 2} (\\cite{marker2}). Isn't it wonderful?\r\n\\begin{thebibliography}{2}\r\n\t\\bibitem{marker1} \\textit{Book 1}, by Alessandro di Casa\r\n    \\bibitem[SpecialText]{marker2} \\textit{Book 2}, by Juan di Casa\r\n\\end{thebibliography}\r\n<\/pre>\r\n<div><img src=\"media\/LatexBibliography.png\" \/><\/div>\r\n<\/div>\r\n\r\n","slur":"latex-footnotes-references-citations","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"272","title":"[LaTeX] Alignment & Simple Environments","post":"<p>This chapter will talk about some very simple environments that are quite important, but don&rsquo;t have that much to them. You just need to know they exist, and how they work.<\/p> \r\n\r\n<h2>Alignment<\/h2>\r\n\r\n<p>If you don&rsquo;t want LaTeX to justify a certain part of the text, you can override the alignment with these commands.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Environment<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Switch Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>flushleft<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\raggedright<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Left aligned text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>flushright<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\raggedleft<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Right aligned text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>center<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>centering<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Centred text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{flushleft}\r\n    This text is aligned to the left, which is seen by the uneven right margin (in contrast with justified text). If this paragraph gets much, much longer than this, it makes an even bigger difference. But, it's usually preferred to have most of your text justified.\\\\\r\n    \\raggedleft\r\n    Woah, now we're aligned to the right.\r\n\\end{flushleft}\r\n<\/pre>\r\n<div><img src=\"media\/LatexAlignment.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Verbatim<\/h2>\r\n\r\n<p>If you&rsquo;re trying to typeset computer code, you don&rsquo;t want LaTeX commands interfering with that. Therefore, the <code>verbatim<\/code> environment displays exactly what you put in there, in a monospaced font. This means that it also leaves all whitespace and returns as they are.<\/p>\r\n\r\n<p>The starred variation does the same, but replaces all spaces with a special character to emphasize them.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{verbatim}\r\n    p {\r\n\t\tcolor:red;\r\n\t}\r\n\\end{verbatim}\r\n\r\n\\begin{verbatim*}\r\n    p {\r\n\t\tcolor:red;\r\n\t}\r\n\\end{verbatim*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexVerbatim.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If you don&rsquo;t want a whole environment, but inline code, you can use the <code>\\verb+<em>text<\/em>+<\/code> command. The <code>+<\/code> here is the delimiter, which signals the start and end of the command. This can be any character, except for letters, * or space. This too has a starred variation that emphasises whitespace.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nAn accented a is made with \\'a. Whoops, sorry, I mean \\verb+\\'a+\r\n<\/pre>\r\n<div><img src=\"media\/LatexInlineVerbatim.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Quotations<\/h2>\r\n\r\n<p>The <code>quote<\/code> environment is used for quotes, examples or important phrases.<\/p>\r\n\r\n<p>The <code>quotation<\/code> environment is especially useful for long quotes, consisting of several paragraphs, because it indents the first line of each paragraph.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{quote}\r\n    To be, or not to be.\r\n\\end{quote}\r\n\\begin{quotation}\r\nTo be, or not to be, that is the question:\r\nWhether 'tis Nobler in the mind to suffer\r\nThe Slings and Arrows of outrageous Fortune,\r\nOr to take Arms against a Sea of troubles,\r\nAnd by opposing end them: to die, to sleep\r\nNo more; and by a sleep, to say we end\r\nThe Heart-ache, and the thousand Natural shocks\r\nThat Flesh is heir to? 'Tis a consummation\r\n\r\nDevoutly to be wished. To die, to sleep,\r\nTo sleep, perchance to Dream; aye, there's the rub,\r\nFor in that sleep of death, what dreams may come,\r\nWhen we have shuffled off this mortal coil,\r\nMust give us pause. There's the respect\r\nThat makes Calamity of so long life:\r\n\\end{quotation}\r\n<\/pre>\r\n<div><img src=\"media\/LatexQuoteQuotations.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>verse<\/code> environment is used for poems, where line breaks and white space are very important. So actually, in this case, with our current Shakespearean spirits, we would have been better of using this environment.<\/p>","slur":"latex-alignment-simple-environments","cat":"Writing","subcat":"LaTeX","video":"","diff":"2","quiz":""},
{"id":"273","title":"[LaTeX] Fonts","post":"<p>LaTeX has its own default font, Computer Modern, which looks great everywhere and in any size. And as usual, it&rsquo;s possible to typeset it in different styles to emphasize phrases or structure content.<\/p> \r\n\r\n<h2>Emphasis<\/h2>\r\n\r\n<p>These commands exist for typesetting different font styles:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Switch Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textnormal{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\normalfont &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The default or normal font.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textit{<em>&hellip;<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\itshape &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Italic<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textsl{<em>&hellip;<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\slshape &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>slanted<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textsc{<em>&hellip;<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\scshape &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Small Caps<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\uppercase{<em>&hellip;<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Transforms all letters to uppercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\lowercase{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Transforms all letters to lowercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textbf{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\b\bfseries &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Bold<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textmd{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\mdseries &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Medium weight<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textlf{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\lfseries &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Light weight<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textsubscript{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subscript<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textsuperscript{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Superscript<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\emph{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\em &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Emphasis, typically italics, but differs based on document style.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is \\textit{italic} and \\textbf{bold} text, and even one with \\textsuperscript{super}script.\r\nFor some reason, we want \\uppercase{uppercase letters} here.\r\n<\/pre>\r\n<div><img src=\"media\/LatexFontsEmphasis.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>As stated earlier, it&rsquo;s recommended to write your own semantical commands that use these, instead of implementing them directly into the document.<\/p>\r\n\r\n<h2>Sizes<\/h2>\r\n\r\n<p>A bunch of <em>switch<\/em> commands exist to change the text size. Ordered from smallest to largest these are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Remark<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\tiny<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>As small as it gets (unreadable for some)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\scriptsize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same size as subscripts and superscripts<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\footnotesize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same size as footnotes<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\small<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\normalsize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular size<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\large<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Large<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\LARGE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\huge<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Use these last two sparingly &ndash; only for big chapter headings or title page.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Huge<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\tiny Tiny text\r\n\r\n\\scriptsize Slightly bigger\r\n\r\n\\footnotesize Even bigger\r\n\r\n\\small Still going bigger\r\n\r\n\\normalsize Back to normal again\r\n\r\n\\large Getting large\r\n\r\n\\Large Getting larger\r\n\r\n\\LARGE Even larger\r\n\r\n\\huge Woah, this is huge\r\n\r\n\\Huge BIG, BOLD AND BEAUTIFUL\r\n<\/pre>\r\n<div><img src=\"media\/LatexFontSizes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Remember that these are switch commands that take effect everywhere within the scope they&rsquo;re in. This means that you can enlarge, for example, a complete table of contents!<\/p>\r\n\r\n<h2>Fonts<\/h2>\r\n\r\n<p>There are, generally speaking, three different types of fonts. It&rsquo;s always recommended to keep the amount of different fonts as low as possible in any project, but sometimes you need a good way to typeset different types of content, and then these can make your life easier.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Switch<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textrm{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\rmfamily &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Roman serif font. Default.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textsf{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\sffamily &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sans-serif font<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\texttt{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>{ \\ttfamily &hellip; }<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Monospace (fixed-width) font<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nSerif looks more sophisticated than \\textsf{sans-serif} in print.\r\nFor computer formatted code, use \\texttt{teletype text}.\r\n<\/pre>\r\n<div><img src=\"media\/LatexFontFamilies.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: All commands discussed so far have one tiny difference between their regular and switch syntax. The latter one does not correct spacing after the style has ended. That&rsquo;s why the first one is recommended.<\/p>\r\n\r\n<p>You&rsquo;ll learn much later how to add your own fonts, as it&rsquo;s not an easy straight-forward process. LaTeX was meant to only be used with a few font families when it was created.<\/p>\r\n\r\n<h2>Underlined<\/h2>\r\n\r\n<p>The rule is: don&rsquo;t underline anything. Ever. But, it <em>is<\/em> a handy tool for the drafting and editing process, as you can easily spot problems. The built-in command is <code>\\textunderline{<em>text<\/em>}<\/code>, but it doesn&rsquo;t always work well &ndash; it ignores line breaks, for example. To solve this, and add multiple types of underlines, add <code>\\usepackage[normalem]{ulem}<\/code>.<\/p>\r\n\r\n<p>The package stands for <em>underline emphasis<\/em>. This means that it changes the <code>\\emph<\/code> command as well, but you don&rsquo;t want that, which is what the optional argument <em>normalem<\/em> is for. These commands are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\uline{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular underline<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\uwave{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Wavy underline<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\sout{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Strikethrough (or strike-out)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\xout{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Forward slash through every individual character<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA \\uline{regular underline} is great, but \\uwave{wavy ones are even cooler}! \\par\r\n\\sout{This part of the text has been edited out.}\r\n<\/pre>\r\n<div><img src=\"media\/LatexUnderlines.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-fonts","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"274","title":"[LaTeX] Lists","post":"<p>Even if all your paragraphs are of the highest typographic quality, some things are better expressed using lists. There are lots of different types of lists, but all of them are created using an environment that follows this boilerplate syntax:<\/p> \r\n\r\n<p><code class=\"longsyntax\">\\begin{<em>listType<\/em>}\r\n\t\\item <em>Text<\/em>\r\n\t\\item <em>Text<\/em>\r\n\\end{<em>listType<\/em>}<\/code><\/p>\r\n\r\n<h2>Unordered Lists<\/h2>\r\n\r\n<p>Unordered lists are, you guessed it, lists where order doesn&rsquo;t matter. They are displayed with <em>bullets<\/em> &ndash; big round dots &ndash; in front of every list item. For this, use the <code>itemize<\/code> environment.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{itemize}\r\n    \\item Uno\r\n    \\item Duo\r\n    \\item Tres\r\n\\end{itemize}\r\n<\/pre>\r\n<div><img src=\"media\/LatexItemize.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Ordered Lists<\/h2>\r\n\r\n<p>Here, order <em>does<\/em> matter, which is why they are displayed with a number in front, which is incremented for every item. For this, use the <code>enumerate<\/code> environment.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{enumerate}\r\n    \\item Uno\r\n    \\item Duo\r\n    \\item Tres\r\n\\end{enumerate}\r\n<\/pre>\r\n<div><img src=\"media\/LatexEnumerate.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Description Lists<\/h2>\r\n\r\n<p>Description lists join a description and its definition or explanation. You can supply your own text to be displayed in front of every list item, by using an optional argument - <code>\\item[<em>text<\/em>]<\/code>. For this, use the <code>description<\/code> environment.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{description}\r\n    \\item[Bird] An animal\r\n    \\item[Animal] An organism\r\n    \\item[Organism] See Bird.\r\n\\end{description}\r\n<\/pre>\r\n<div><img src=\"media\/LatexDescriptionLists.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Nesting Lists<\/h2>\r\n\r\n<p>You can nest these in any way you like, up to a depth of four. If you want more, you can use packages to create your own custom lists, which is what the rest of this chapter is about.<\/p>\r\n\r\n<h2>Custom Lists<\/h2>\r\n\r\n<h5>Without Packages<\/h5>\r\n\r\n<p>You&rsquo;ve already learned about the fact that LaTeX uses counters for nearly everything, and lists are certainly no exception. The counters used for the four levels of depth are<\/p>\r\n\r\n<p><code class=\"longsyntax\">enumi, enumii, enumiii, enumiv<\/code><\/p>\r\n\r\n<p>Their corresponding numbering system is accessed with<\/p>\r\n\r\n<p><code class=\"longsyntax\">labelenumi, labelenumii, labelenumiii, labelenumiv<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{enumerate}\r\n    % Just to show you that this does nothing\r\n    \\setcounter{enumii}{10}\r\n    \\item Uno \r\n        \\begin{enumerate}\r\n            \\setcounter{enumii}{3}\r\n            \\item Quatro?!\r\n        \\end{enumerate}\r\n    \\item Duo\r\n\\end{enumerate}\r\n<\/pre>\r\n<div><img src=\"media\/LatexListCounters.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>With Packages<\/h5>\r\n\r\n<p>With the <code>enumitem<\/code> package you can create your own labels for every item. For this, use the optional parameter <code>[label=<em>yourLabel<\/em>]<\/code> for the environment.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{enumitem}\r\n\r\n\\begin{document}\r\n\\begin{enumerate}[label=\\bfseries Item \\roman*:]\r\n  \\item 5 + 7 = 12\r\n  \\item 9 + 1 = 10\r\n  \\item 2 * 2 = 4\r\n\\end{enumerate}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexEnumitemPackage.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Easylist<\/h2>\r\n\r\n<p>The <code>easylist<\/code> package is very powerful, and provides an easier syntax for lists. To load it, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\usepackage[<em>control character<\/em>]{easylist}<\/code><\/p>\r\n\r\n<p>It&rsquo;s common to use an ampersand as the control character, but you can choose anything you like.<\/p>\r\n\r\n<p>Now, you use the control character to indicate an item and its depth. For example, if you need a depth three item, simply type three control characters right after each other.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage[ampersand]{easylist}\r\n\r\n\\begin{document}\r\n\\begin{easylist}\r\n& Main Item\r\n&& Sub Item\r\n& Main Item\r\n&&& Sub Sub Item\r\n& Main Item\r\n\\end{easylist}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexEasylistBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>easylist<\/code> environment also has an optional argument that allows you to specify what kind of list it is. The options are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Remark<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>itemize<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>enumerate<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Default.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tractatus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Items are numbered like sections &ndash; a dot between every level of depth<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>checklist<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>All items have empty checkboxes next to them<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>booktoc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Approximately the format that is used for the table of contents of the book class<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>articletoc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Approximately the format that is used for the table of contents of the article class<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>On top of that, the<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\ListProperties(Style1=<em>style<\/em>, Style2=<em>style<\/em>, &hellip; )<\/code><\/p>\r\n\r\n<p>command can be used to define different styles for every level of depth.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{easylist}[checklist]\r\n    \\ListProperties(Style3*=\\textit{!} )\r\n    & Main Item\r\n    && Sub Item\r\n    & Main Item\r\n    &&& Sub Sub Item\r\n    & Main Item\r\n\\end{easylist}\r\n<\/pre>\r\n<div><img src=\"media\/LatexEasylistAdvanced.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: The asterisk behind Style3 in this example means that it should replace the original list bullet type. If you don't add it, it will add your style at the start of every list item with this depth, but also keep the original list bullet.<\/p>\r\n\r\n<h2>Inline lists<\/h2>\r\n\r\n<p>Again, the <code>enumitem<\/code> package comes to the rescue! Include it with optional argument <em>inline<\/em> with your document, and you can use starred <code>enumerate*<\/code> environments for inline lists. The optional argument for labels also still applies.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage[inline]{enumitem}\r\n\r\n\\begin{document}\r\n\\begin{enumerate*}\r\n    \\item Cool\r\n    \\item Cool\r\n    \\item Supercool!\r\n\\end{enumerate*}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexInlineLists.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-lists","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"275","title":"[LaTeX] Spacing","post":"<p>These lists are great, but it&rsquo;s possible that you want different amounts of space between items, or more horizontal distance between label and item text. Similarly, paragraphs can sometimes be too close to each other or too far apart for your liking. There&rsquo;s countless more commands that have a default amount of space, or default length, attached to certain properties &ndash; and, as expected, you can change these easily.<\/p> \r\n\r\n<h2>Units<\/h2>\r\n\r\n<p>When specifying some kind of length, you can&rsquo;t just provide a number. You need to add a unit that gives meaning to that number. These units are supported:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Unit<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Unit<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>in<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>inches<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>pica (12pt)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>mm<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>millimetres<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>bp<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>big pt (1.00375 pt)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cm<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>centimetres<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>dd<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>did&ocirc;t (1.07pt)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pt<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>points (1\/72 inch)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>cc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>cicero (12dd)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>em<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>the width of an &ldquo;M&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>sp<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>scaled point (0.000015 point)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ex<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>the height of an &ldquo;x&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: Lengths may be negative, and 0 needs a unit as well.<\/p>\r\n\r\n<p>These units can just be added directly behind the number.<\/p>\r\n\r\n<h2>Spacing<\/h2>\r\n\r\n<p>White space can be added either <em>horizontally<\/em> or <em>vertically<\/em>.<\/p>\r\n\r\n<h5>Horizontal<\/h5>\r\n\r\n<p>The <code>\\hfill<\/code> command fills the rest of the current <em>line<\/em> with white space. Alternatively, the <code>\\dotfill<\/code> command fills it with dots, and <code>\\hrulefill<\/code> with a rule.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nFill this line with whitespace! \\hfill This is what happens.\r\n<\/pre>\r\n<div><img src=\"media\/LatexHorizontalFilling.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>\\hspace*{<em>length<\/em>}<\/code> command adds <em>length<\/em> amount of white space in the current line. By default, LaTeX removes white spaces after a line break. The optional parameter <code>*<\/code> overrides this behaviour, and makes LaTeX keep inserting space over a line break.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is a very interesting paragraph. Now fill this line with whitespace! \\hspace{10mm} And the paragraph continues. \\par\r\n\r\nThis is a very interesting paragraph. Now fill this line with whitespace! \\hspace*{10mm} And the paragraph continues.\r\n<\/pre>\r\n<div><img src=\"media\/LatexHorizontalSpacing.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The commands <code>\\enskip<\/code>, <code>\\quad<\/code> and <code>\\qquad<\/code> are shortcuts for adding half an em, one em, or two ems of horizontal white space, respectively.<\/p>\r\n\r\n<h5>Vertical<\/h5>\r\n\r\n<p>The <code>\\vfill<\/code> command fills the rest of the current <em>page<\/em> with white space. The <code>\\vspace*{<em>length<\/em>}<\/code> adds <em>length<\/em> amount of white space to the current page.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nLorem ipsum... \\par\r\n\\vspace*{15mm}\r\nLorem ipsum...\r\n\\vfill\r\nLorem ipsum...\r\n<\/pre>\r\n<div><img src=\"media\/LatexVerticalSpacing.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>\\addvspace{<em>length<\/em>}<\/code> command also adds <em>length<\/em> amount of white space &ndash; but, if there&rsquo;s already some other command adding vertical white space, it will only add that amount that is necessary to bring the total vspace to <em>length<\/em>. This is useful, for example, if you want to distribute a fixed amount of whitespace over mulitple areas - pick some amounts for all areas, but use this command at the last one to make sure everything adds up to your fixed amount.<\/p>\r\n\r\n<p>Lastly, the <code>\\smallskip<\/code>, <code>\\medskip<\/code> and <code>\\b\bigskip<\/code> commands are shortcuts for adding small, medium and big amounts of vertical white space.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nLorem ipsum... \\par\r\n\\smallskip\r\nLorem ipsum... \\par\r\n\\bigskip\r\nLorem ipsum...\r\n<\/pre>\r\n<div><img src=\"media\/LatexVerticalSkips.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Alternatively, the <code>\\smallbreak<\/code>, <code>\\medbreak<\/code> and <code>\\b\bigbreak<\/code> commands do the same, but automatically terminate the paragraph for you, and mark good places for LaTeX to break the page.<\/p>\r\n\r\n<h2>Indentation<\/h2>\r\n\r\n<p>Indenting a paragraph means adding some horizontal space to the left of the first line only. To indent a paragraph, use <code>\\indent<\/code>. To prevent indentation, use <code>\\noindent<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA standard paragraph \\par\r\n\\noindent A paragraph that doesn't want to be indented\r\n<\/pre>\r\n<div><img src=\"media\/LatexIndentation.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Line Spacing<\/h2>\r\n\r\n<p>Line spacing refers to the white space between two lines underneath each other.<\/p>\r\n\r\n<p>To change this for the whole document, use <code>\\linespread{<em>factor<\/em>}<\/code>. Here, a factor of 1 means regular line spacing, while 1.3 means one-and-a-half line spacing, and 1.6 double spacing. Confusing, I know.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\linespread{1.6}\r\n\r\n\\begin{document}\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis bibendum metus sit amet ligula dictum feugiat. In laoreet consequat accumsan. Fusce id lectus commodo, fermentum lorem at, aliquam nunc. Integer sed volutpat nunc. Quisque sem turpis, blandit ac ultricies in, tempus vitae turpis. Praesent fringilla eu massa non feugiat. Maecenas et lectus at massa rhoncus interdum eget at felis. Curabitur in convallis elit, vel maximus velit. Aliquam bibendum rhoncus leo euismod blandit. Donec cursus, ante at vehicula fringilla, dolor elit tristique lectus, vel ullamcorper eros turpis vitae augue. Morbi augue odio, aliquet quis scelerisque vel, egestas quis dolor. Mauris pellentesque tellus quis eleifend finibus. Sed auctor suscipit placerat. Suspendisse nec ex vestibulum erat laoreet pellentesque ac sed dui.\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexLineSpread.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Custom Line Spacing<\/h2>\r\n\r\n<p>Alternatively, you can use the package <code>setspace<\/code>. It provides the commands<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\doublespacing\r\n\\onehalfspacing\r\n\\singlespacing\r\n\\setstretch{<em>stretchFactor<\/em>}<\/code><\/p>\r\n\r\n<p>These influence everything from the moment they are used, until another command is used.<\/p>\r\n\r\n<p>Furthermore, the following environments are available to change line spacing on (small) parts:<\/p>\r\n\r\n<p><code class=\"longsyntax\">doublespace\r\nonehalfspace\r\nsinglespace\r\nspacing{<em>stretchFactor<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{setspace}\r\n\r\n\\begin{document}\r\n\\singlespacing\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis bibendum metus sit amet ligula dictum feugiat. \\par \\doublespacing \r\nIn laoreet consequat accumsan. Fusce id lectus commodo, fermentum lorem at, aliquam nunc. Integer sed volutpat nunc. Quisque sem turpis, blandit ac ultricies in, tempus vitae turpis. Praesent fringilla eu massa non feugiat.\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexSetSpacePackage.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: You can't change line spacing halfway a paragraph. If you don't start a new paragraph before using this command, the whole paragraph you're currently in will change its line spacing.<\/p>\r\n\r\n<h2>Line Breaks<\/h2>\r\n\r\n<p>We&rsquo;ve already seen the <code>\\\\<\/code> command to force a line break. We can use it with an optional parameter, <code>\\\\[<em>extra space<\/em>]<\/code>, to set a custom line spacing between the current and next line.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA regular line break is\\\\like this. \r\nBut a longer one is\\\\[10mm]like this.\r\n<\/pre>\r\n<div><img src=\"media\/LatexForcedLineBreaks.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Another way to force a line break is with the <code>\\b\break<\/code> command. But, it doesn&rsquo;t fill the rest of the line with white space, which means words will have large spaces between them to keep the text justified.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis is a very short paragraph \\break\r\nOh noes, we didn't go to a new line properly. \\hfill\\break\r\nThat was a proper linebreak!\r\n<\/pre>\r\n<div><img src=\"media\/LatexBreakCommand.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-spacing","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"276","title":"[LaTeX] Lengths","post":"<p>While last chapter discussed the various ways you can add or remove extra space at any moment, this chapter will talk about basic lengths that are applied throughout the whole document.<\/p> \r\n\r\n<h2>Dimensions<\/h2>\r\n\r\n<p>Before we can go on, there&rsquo;s something you need to understand about dimensions in LaTeX. These dimensions are <strong>width<\/strong>, <strong>height<\/strong> and <strong>depth<\/strong>. The width is, as you&rsquo;d expect, how wide something is. The height, however, is the length of the part that is <em>above<\/em> the baseline. The depth is the length of the part <em>below<\/em> the baseline.<\/p>\r\n\r\n<img src=\"media\/LatexDimensions.png\" \/>\r\n\r\n<h2>Getting Lengths<\/h2>\r\n\r\n<p>Often, you want everything to line up correctly, and similar things to be of similar size. This can be done by accessing LaTeX&rsquo;s default lengths. These are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>\b<code>\\baselineskip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The normal vertical distance between two lines in a paragraph<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\b\\baselinestretch<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Multiplies \b\\baselineskip<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\columnsep<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The distance between columns<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\columnwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of a column<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\evensidemargin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The margin for &lsquo;even&rsquo; pages<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\oddsidemargin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The margin for &lsquo;odd&rsquo; pages<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\linewidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of a line (in the local environment)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\paperwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\paperheight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The height of the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\parindent<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The regular paragraph indentation<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\parskip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The extra vertical space between two paragraphs<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\tabcolsep<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The default separation between columns in a tabular environment<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textheight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The height of the text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of the text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\topmargin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The size of the top margin<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\unitlength<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Units of length in the picture environment<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\leftskip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Extra left margin for a single complete paragraph (0pt by default)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\rightskip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Extra right margin for a single complete paragraph (0pt by default)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA regular paragraph here, with regular built-in lengths set and not changed. \\par\r\n\\setlength{\\leftskip}{20pt} \\setlength{\\rightskip}{20pt}\r\nA not-so-regular paragraph here, with space  being skipped on the left and right side, leading to a smaller width.\r\n<\/pre>\r\n<div><img src=\"media\/LatexStandardLengthsExample.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The \b<code>\\baselinestretch<\/code> command is mostly semantical. By default, the multiplication factor is just 1.0, but if you want to change this vertical line spacing, you need to <em>renew<\/em> this command.<\/p>\r\n\r\n<p>You can multiply numbers by these lengths, simply by using it in place of a unit.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA regular paragraph here, with regular built-in lengths set and not changed. \\par\r\n\\setlength{\\parskip}{0.25\\textwidth}\r\nA not-so-regular paragraph here, with lots of skipped vertical space between itself and the previous paragraph.\r\n<\/pre>\r\n<div><img src=\"media\/LatexLengthArithmetic.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If you want to only print the value, use <code>\\the<\/code> in front of it (just as with counters, remember?).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThe width of the text in this document is: \\the\\textwidth\r\n<\/pre>\r\n<div><img src=\"media\/LatexPrintingLengths.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>One very important use case of this length system, is with the <code>\\hspace<\/code> and <code>\\vspace<\/code> commands. Instead of putting in a standard length as argument, they can also use so-called <strong>skip arguments<\/strong>:<\/p>\r\n\r\n<p><code class=\"longsyntax\"><em>default value<\/em> plus <em>stretch value<\/em> minus <em>shrink value<\/em><\/code><\/p>\r\n\r\n<p>It always tries to use the default value. But, if a box is overfull, it will shrink the whitespace (but never more than the value you provided). If a box is underfull, it will stretch the whitespace (but never more than the value you provided). This doesn't work for other commands - they ignore the <code>plus<\/code> and <code>minus<\/code>, and see them as text to put in the document.<\/p>\r\n\r\n<h2>Setting Lengths<\/h2>\r\n\r\n<p>You can override these lengths and set your own if you want. To set a completely new length, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\setlength{<em>command<\/em>}{<em>newLength<\/em>}<\/code><\/p>\r\n\r\n<p>If you want to add or subtract something from the current value, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\addtolength{<em>command<\/em>}{<em>incrementAmount<\/em>}<\/code><\/p>\r\n\r\n<p>Another way of setting a length, is by using those <em>dimensions<\/em> I just introduced. These commands set the length to the width, height or depth of the <em>text<\/em> block you input.<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\settowidth{<em>command<\/em>}{<em>text<\/em>}\r\n\\settoheight{<em>command<\/em>}{<em>text<\/em>}\r\n\\settodepth{<em>command<\/em>}{<em>text<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\settoheight{\\parskip}{\\Huge M}\r\nFirst paragraph \\par\r\nSecond Paragraph\r\n<\/pre>\r\n<div><img src=\"media\/LatexSetToHeight.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Creating Lengths<\/h2>\r\n\r\n<p>It&rsquo;s possible to define your own lengths. This way, you can save values inside a command, and easily use them throughout the document. The greatest advantage is that you can change this value any time you like, and everything will automatically be updated accordingly. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newlength{<em>command<\/em>}<\/code><\/p>\r\n\r\n<p>This will set <em>command<\/em> to a length of 0in, which you means you still need a <code>\\setlength<\/code> right after it, to set it to the value you want.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\newlength{\\myLength}\r\n\\setlength{\\myLength}{5pt}\r\n\r\nOur own length is: \\the\\myLength \\par\r\n\r\n\\addtolength{\\myLength}{0.5\\linewidth}\r\nOur own length is: \\the\\myLength\r\n<\/pre>\r\n<div><img src=\"media\/LatexCreatingLengths.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Rubber Lengths<\/h2>\r\n\r\n<p>All these lengths so far have been exact. But, sometimes, you don&rsquo;t know upfront what length you&rsquo;re looking for, and that&rsquo;s when so-called <em>rubber lengths<\/em> come into play.<\/p>\r\n\r\n<p>A rubber length is created with the <code>\\stretch{<em>factor<\/em>}<\/code> command. If there&rsquo;s no other rubber length in the line, it will just fill up all leftover white space. But, if there are, it will scale in accordance with its <em>factor<\/em>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nSome text \\hspace{\\stretch{3}} More text \\hspace{\\stretch{1}} End of line!\r\n<\/pre>\r\n<div><img src=\"media\/LatexRubberLengths.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Alternatively, the <code>\\fill<\/code> command is the same as <code>\\stretch{1}<\/code>.<\/p>\r\n\r\n<h2>Looking Back on Lists<\/h2>\r\n\r\n<p>This section on spacing and lengths started with the question if there was an easy way to change the amount of space between list items. Now we can answer it. Simply change the <code>\\itemsep<\/code> length.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{itemize}\r\n    \\setlength{\\itemsep}{20pt}\r\n    \\item Uno\r\n    \\item Duo\r\n    \\setlength{\\itemsep}{5pt}\r\n    \\item Tres\r\n\\end{itemize}\r\n<\/pre>\r\n<div><img src=\"media\/LatexListSpacing.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-lengths","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"277","title":"[LaTeX] Tables I","post":"<p>Tables are an invaluable tool for presenting data in a clean way, but always come with a few complications. What happens when the contents extend the table cell? Do we want the table to fill the space to full page width, or just large enough to fit its contents? How do we align cells on decimal points? All these questions will be answered, I promise, although it takes quite a bit of setup.<\/p> \r\n\r\n<h2>The Tabular Environment<\/h2>\r\n\r\n<p>The syntax for creating a tabular environment is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\b\\begin{tabular}[<em>position<\/em>]{<em>columns<\/em>}\r\n\trow 1, column 1 &amp; &hellip; &amp; row 1, column n \\\\\r\n\t&hellip;\r\n\\end{tabular}<\/code><\/p>\r\n\r\n<p>As you can see, cells in a row are separated with an ampersand ( <code>&amp;<\/code> ), and a new row is started with the newline command ( <code>\\\\<\/code> ).<\/p>\r\n\r\n<h2>Columns<\/h2>\r\n\r\n<p>The mandatory <em>columns<\/em> argument decides the types of every column, and consists of a sequence of any of the following specifiers.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>l<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Column of left-aligned items<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>r<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Column of right-aligned items<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>c<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Column of centred items<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>p{<em>width<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Column with fixed width <em>width<\/em>, that wraps lines like a normal paragraph. A forced line break, however, may not occur.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Vertical line the full height and depth of the environment<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>||<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Double vertical line<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*{<em>num<\/em>}{<em>columns<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates <em>num<\/em> copies of <em>columns<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>@{<em>text<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inserts <em>text<\/em> in every row, and kills all white space between columns.<\/p>\r\n\r\n\t\t\t<p>The special <code>\\extracolsep{<em>width<\/em>}<\/code> command causes an extra space of width <em>width<\/em> to appear to the left of all subsequent columns, until another command like this occurs.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{tabular}{l | p{20pt} | r | *{2}{c | }}\r\n    Lorem ipsum & Lorem ipsum & Lorem ipsum & Lorem ipsum & Lorem ipsum \\\\\r\n    Lorem ipsum, dolor & Lorem ipsum, dolor & Lorem ipsum, dolor & Lorem ipsum, dolor & Lorem ipsum, dolor\r\n\\end{tabular}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>l<\/code>, <code>c<\/code> and <code>r<\/code> specifiers do not allow line breaks, and will keep stretching cell width to fit all content. If you don&rsquo;t want that, use the <code>p<\/code> specifier instead.<\/p>\r\n\r\n<p>If you, however, don&rsquo;t want this setting for the entire column, you can create a paragraph inside an individual cell with <code>\\parbox[<em>position<\/em>]{<em>width<\/em>}{<em>text<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{tabular}{l | r @{.} l}\r\n    \\parbox[t]{50pt}{A new pair of shoes} & 9 & 81 \\\\ \\\\\r\n    Crisps & 2 & 04\r\n\\end{tabular}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularAdvanced.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Position<\/h2>\r\n\r\n<p>Tables <strong>can&rsquo;t<\/strong> be split among multiple pages, which is why it&rsquo;s sometimes required to place the table somewhere else. A table can have one of four positions:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>h<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The table is placed <em>here<\/em>, exactly where it is in the code<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>t<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The table is placed at the top of the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>c<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The table is placed in the centre of the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>b<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The table is placed at the bottom of the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>p<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The table is placed on a separate page that contains no text, only tables and other figures that can be repositioned this way. It&rsquo;s called a <em>page of floats<\/em>, and we&rsquo;ll look at it later.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Star Variation<\/h2>\r\n\r\n<p>The starred variation has an extra mandatory argument that specifies the width of the table. It will always adhere to whatever you put in, but it doesn&rsquo;t automatically distribute space evenly, which can make it look really weird. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\begin{tabular*}{<em>width<\/em>}[<em>position<\/em>]{<em>columns<\/em>}\r\n\t<em>cells<\/em>\r\n\\end{tabular*}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nA nice paragraph.\r\n\r\n\\begin{tabular*}{\\textwidth}[h]{l | l | l}\r\n    Cell 1 & Cell 2 & Cell 3 \\\\\r\n    \\hline\r\n    Cell 1 & Cell 2 & Cell 3\r\n\\end{tabular*}\r\n\r\nAnother nice paragraph.\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularStar.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Lines<\/h2>\r\n\r\n<p>We&rsquo;ve already seen how to insert vertical lines, but you can also insert horizontal lines!<\/p>\r\n\r\n<p>The <code>\\hline<\/code> command creates a line the full width of the table, while <code>\\cline{<em>a<\/em>-<em>b<\/em>}<\/code> creates a line between columns <em>a<\/em> and <em>b<\/em> (both inclusive).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{tabular}{l | l | l}\r\n    Cell 1 & Cell 2 & Cell 3 \\\\\r\n    \\hline\r\n    Cell 1 & Cell 2 & Cell 3 \\\\\r\n    \\cline{2-3}\r\n    Cell 1 & Cell 2 & Cell 3\r\n\\end{tabular}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularLines.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Spanning Multiple Columns<\/h2>\r\n\r\n<p>If you want a cell to span multiple columns, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\multicolumn{<em>columns<\/em>}{<em>position<\/em>}{<em>text<\/em>}<\/code><\/p>\r\n\r\n<p>The first argument, <em>columns<\/em>, specifies the number of columns to span.<\/p>\r\n\r\n<p>The second, <em>position<\/em>, specifies the formatting: <code>c<\/code> for centred, <code>l<\/code> for flushleft, <code>r<\/code> for flushright.<\/p>\r\n\r\n<p>The third, <em>text<\/em>, specifies the text within the multicolumn.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{tabular}{l | l | l}\r\n     & \\multicolumn{2}{c}{Gender} \\\\\r\n    \\hline\r\n     & Male & Female \\\\\r\n    \\cline{2-3}\r\n    Survey 1 & 55 & 80\r\n\\end{tabular}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularMultiColumn.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Spanning Multiple Rows<\/h2>\r\n\r\n<p>For a cell spanning multiple rows, you first need to include the <code>multirow<\/code> package. Then, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\multirow{<em>number of rows<\/em>}{<em>width<\/em>}{<em>text<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{multirow}\r\n\r\n\\begin{document}\r\n\\begin{tabular}{l | l c c c}\r\n    & \\multicolumn{2}{c}{\\textbf{Juan}} \\\\\r\n    \\hline\r\n    \\multirow{2}{10mm}{\\textbf{Jose}} & A & B \\\\\r\n    & C & D\\\\\r\n\\end{tabular}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularMultiRow.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Breathing Space<\/h2>\r\n\r\n<p>The <code>\\tabcolsep<\/code> <em>length<\/em> sets the horizontal space between columns. The <code>\\arraystretch<\/code> <em>command<\/em> sets the vertical space between rows. This might be confusing, because the latter is actually just a value, but it must still be handled as a command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\tabcolsep}{20pt}\r\n\\renewcommand{\\arraystretch}{3}\r\n\r\n\\begin{tabular}{l | l | l}\r\n    Cell 1 & Cell 2 & Cell 3 \\\\\r\n    Cell 1 & Cell 2 & Cell 3 \\\\\r\n    Cell 1 & Cell 2 & Cell 3\r\n\\end{tabular}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularSpace.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-tables-I","cat":"Writing","subcat":"LaTeX","video":"","diff":"4","quiz":""},
{"id":"278","title":"[LaTeX] Tables II","post":"<p>Last chapter was great, and introduced some useful concepts, but we&rsquo;re still stuck with a few tiny disadvantages: tables can&rsquo;t span more than one page, and we&rsquo;re stuck within this rigid, not easily resizable grid system.<\/p> \r\n\r\n<p>There are multiple ways to solve this, each with different especially convenient use cases.<\/p>\r\n\r\n<h2>Tabbing<\/h2>\r\n\r\n<p>The <code>tabbing<\/code> environment provides an alternative way to align text in columns. With special, short <strong>tabbing commands<\/strong>, you can set tab stops any way and at any moment you like. Then, you can use these to align text against one tab stop or the other. These tabbing commands are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Tabbing Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Set tab stop<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Advance to next tab stop<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\&lt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Return to previous tab stop<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Indent &ndash; move margin right<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\-<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Unindent &ndash; move margin left<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\&rsquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Pushes everything you&rsquo;ve typed in the current column to the right edge of the previous column<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\`<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Pushes all text that follows it in the same row, to the right margin of the tabbing environment.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\\\<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Starts a new row<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\kill<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Ignores preceding text. Is used to set tab stops without setting text.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{tabbing}\r\n    Column 1 \\= Column 2 \\= Column 3 \\= Column 4 \\\\\r\n    Lorem \\> Lorem \\> Lorem \\> Lorem \\\\\r\n    Lorem Ipsum \\> \\> Lorem Ipsum \\\\\r\n    Column 1 \\= Column 2 \\= Column 3 \\kill \\\\\r\n    Lorem Ipsum \\> \\> Lorem Ipsum\r\n\\end{tabbing}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabbingEnvironment.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Because the <code>\\=<\/code>, <code>\\&rsquo;<\/code> and <code>\\`<\/code> commands are normally used to produce accents, within a tabbing environment this can be done with <code>\\a=<\/code>, <code>\\a&rsquo;<\/code> and <code>\\a`<\/code>, respectively.<\/p>\r\n\r\n<p>Tabbing environments can be split among multiple pages, and you can easily decide on different widths for your table cells.<\/p>\r\n\r\n<h2>The tabularx Environment<\/h2>\r\n\r\n<p>The <code>tabularx<\/code> package provides the <strong>tabularx<\/strong> environment, which has one extra type of column: <code>X<\/code>. This column type will grow wide enough to fit its content, and then fill with white space to give your table the width you want. This greatly simplifies the table creation process, as it allows you to create tables the exact size you want, while the cells grow naturally with it.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{tabularx}\r\n\r\n\\begin{document}\r\n\\begin{tabularx}{\\textwidth}{l | X | r}\r\n    Column 1 & Column 2 & Column 3 \\\\\r\n    Column 1 & Column 2 & Column 3\r\n\\end{tabularx}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularX.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Longtables<\/h2>\r\n\r\n<p>The automatically supported <code>longtable<\/code> environment allows a table to span multiple pages. It, however, doesn&rsquo;t support the stretching <code>X<\/code> columns. To solve this, use the package <code>longtabu<\/code>. The syntax for creating tables this way is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\b\begin{tabu} to <em>dimensions<\/em><\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{longtable}\r\n\\usepackage{tabu}\r\n\r\n\\begin{document}\r\n\\begin{longtabu} to \\textwidth {l | X | r}\r\n    Column 1 & Column 2 & Column 3 \\\\\r\n    Column 1 & Column 2 & Column 3\r\n\\end{longtabu}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTabularX.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>The table Environment<\/h2>\r\n\r\n<p>You might be wondering: <em>why isn&rsquo;t the default environment called table, instead of tabular?<\/em><\/p>\r\n\r\n<p>Well, that&rsquo;s because the <code>tabular<\/code> environment is only the actual table contents, while the <code>table<\/code> environment is a container that allows you to add things to the table that have to do with the document. For example, think of captions, labels, footnotes, setting a different alignment or different position. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\b\\begin{table}[<em>position<\/em>]\r\n\t<em>table body<\/em>\r\n\t\\caption{<em>table title<\/em>}\r\n\\end{table}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{table}[h]\r\n    \\centering\r\n    \\begin{tabular}{l | l | l}\r\n        Cell 1 & Cell 2 & Cell 3 \\\\\r\n        Cell 1 & Cell 2 & Cell 3\r\n    \\end{tabular}\r\n    \\caption{What a nice table this is.}\r\n\\end{table}\r\n<\/pre>\r\n<div><img src=\"media\/LatexTableEnvironment.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Here, the <em>position<\/em> can take the same arguments as the <code>tabular<\/code> environment.<\/p>\r\n\r\n<p>NOTE: There is a star variation, which will put the table in single-column mode if your document is in multi-column mode.<\/p>\r\n","slur":"latex-tables-II","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"279","title":"[LaTeX] Floats & Protection","post":"<p>The subjects from the title are completely unrelated, but they were too short to receive their own chapter, which is why I&rsquo;ll discuss both at once.<\/p> \r\n\r\n<p>With the <code>table<\/code> environment from last chapter, we&rsquo;ve already seen a <strong>floating body<\/strong>. Any type of complex figure, like tables or pictures, is a floating body. What this means is that LaTeX is able to float this environment around the document until it finds a position where it fits. It&rsquo;s called floating, and not repositioning, because it&rsquo;s a fluid operation, and all other text and environments try to nicely float with it. For example, if you declare you want a table to be <em>here<\/em> (with the <code>h<\/code> position specifier), but the table is too large to fit on this page, LaTeX pushes it to the next page. But, instead of pushing the whole document underneath it downwards as well, it simply lets other text take its position, so it doesn&rsquo;t leave a big white space gap.<\/p>\r\n\r\n<p>If LaTeX can&rsquo;t immediately place a figure, it places it into a <em>queue<\/em>. Then, the next time it finds space to place something, it drops the first item from the queue there. This means that floating bodies influence each other &ndash; if one of them is pushed downwards, all of them need to wait a little longer. This is usually not what you want, and if your document looks jammed up, you should check if there&rsquo;s a floating body that is pushing everything away.<\/p>\r\n\r\n<p>Because of this fact that LaTeX keeps track of all tables and figures, you can use a single command to display a list of all of them. The command is <code>\\listoftables<\/code> for tables, and <code>\\listoffigures<\/code> for figures.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{table}[h]\r\n    \\centering\r\n    \\begin{tabular}{l | l | l}\r\n        Cell 1 & Cell 2 & Cell 3 \\\\\r\n        Cell 1 & Cell 2 & Cell 3\r\n    \\end{tabular}\r\n    \\caption{What a nice table this is.}\r\n\\end{table}\r\n\\begin{table}[h]\r\n    \\centering\r\n    \\begin{tabular}{l | l | l}\r\n        Cell 1 & Cell 2 & Cell 3 \\\\\r\n        Cell 1 & Cell 2 & Cell 3\r\n    \\end{tabular}\r\n    \\caption{This one is very interesting as well.}\r\n\\end{table}\r\n\\begin{table}[h]\r\n    \\centering\r\n    \\begin{tabular}{l | l | l}\r\n        Cell 1 & Cell 2 & Cell 3 \\\\\r\n        Cell 1 & Cell 2 & Cell 3\r\n    \\end{tabular}\r\n    \\caption{But this one is by far the most important.}\r\n\\end{table}\r\n\r\n% What this code example is all about:\r\n\\listoftables\r\n<\/pre>\r\n<div><img src=\"media\/LatexListOfTables.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If at any moment you want LaTeX to place everything in its queue, you use <code>\\clearpage<\/code>. Use <code>\\cleardoublepage<\/code> if you want it to first go to a right-hand page.<\/p>\r\n\r\n<p>NOTE: You&rsquo;ll learn all about figures later, if you&rsquo;re wondering what on earth those are. As you probably guessed, they are quite important.<\/p>\r\n\r\n<h2>The float Package<\/h2>\r\n\r\n<p>We&rsquo;ve already seen a few different environments using the same list of specifiers that show a preference for a certain position, such as at the top or bottom of the page. But, because LaTeX can&rsquo;t always float something to the preferred position, there might be cases where floating bodies end up where you don&rsquo;t want them to be. If you want to <em>force<\/em> it to place it at the exact same position it is in the code, we need to do two things: include the <code>float<\/code> package, and use the <code>H<\/code> position specifier.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{float}\r\n\r\n\\begin{document}\r\nA first paragraph.\r\n\\begin{table}[H]\r\n    \\centering\r\n    \\begin{tabular}{l | l | l}\r\n        Cell 1 & Cell 2 & Cell 3 \\\\\r\n        Cell 1 & Cell 2 & Cell 3\r\n    \\end{tabular}\r\n    \\caption{What a nice table this is.}\r\n\\end{table}\r\nA second paragraph.\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexFloatPackage.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Protection<\/h2>\r\n\r\n<p>There are commands, which we call <em>fragile<\/em>, that can be carried over or copied. For example, if you create a table of contents, all text within <code>\\section<\/code> and <code>\\subsection<\/code> commands is automatically copied. If you use a special command within that text, it&rsquo;s possible that this process goes wrong, and LaTeX doesn&rsquo;t know what to do, and compilation fails. To protect such commands in these cases, use <code>\\protect<\/code> in front of them. This only affects the command right after it &ndash; not even its arguments.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\section{I am considerate \\protect\\footnote{and protect my footnotes}}\r\nLorem Ipsum...\r\n<\/pre>\r\n<div><img src=\"media\/LatexProtection.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-floating-bodies-protection","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"280","title":"[LaTeX] Multiple Columns","post":"<p>Columns aren&rsquo;t natively supported by LaTeX, but are very easily included, with the help of a package.<\/p> \r\n\r\n<p>This package is <code>multicol<\/code>. It allows you to create this multicolumn environment:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\begin{multicols}{<em>colNum<\/em>}\r\n\t<em>just regular text here<\/em>\r\n\\end{multicols}<\/code><\/p>\r\n\r\n<p>It does exactly what you expect: it groups whatever&rsquo;s inside into <em>colNum<\/em> amount of columns. These columns are distributed in such a way that all columns contain the same amount of text; the bottom lines are all on the same line. If you don&rsquo;t want this, use the star variation <code>multicols*<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{multicol}\r\n\r\n\\begin{document}\r\n\\begin{multicols}{3}\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non arcu pulvinar, mattis diam sed, tempus velit. Proin et faucibus sapien, eu vehicula lorem. Fusce consequat diam ac urna ullamcorper, sodales pharetra eros accumsan. Maecenas accumsan tellus eu erat molestie, eget sollicitudin sem volutpat. Morbi vel nisi vel magna consectetur pellentesque. Pellentesque in orci id urna luctus ornare. Praesent nisi nulla, congue et molestie vel, molestie in est.\r\n\\end{multicols}\r\n\\hrulefill\r\n\\begin{multicols*}{3}\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non arcu pulvinar, mattis diam sed, tempus velit. Proin et faucibus sapien, eu vehicula lorem. Fusce consequat diam ac urna ullamcorper, sodales pharetra eros accumsan. Maecenas accumsan tellus eu erat molestie, eget sollicitudin sem volutpat. Morbi vel nisi vel magna consectetur pellentesque. Pellentesque in orci id urna luctus ornare. Praesent nisi nulla, congue et molestie vel, molestie in est.\r\n\\end{multicols*}\r\n\\vfill\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMultiColumns.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Breathing Space<\/h2>\r\n\r\n<p>To increase the amount of space between columns, modify the <code>\\columnsep<\/code> length.<\/p>\r\n\r\n<p>To insert vertical rules between the columns, modify the <code>\\columnseprule<\/code> length, which determines the width of these rules. Default is 0pt, which means no visible rule.<\/p>\r\n\r\n<p>The <code>\\columnbreak<\/code> command forces LaTeX to start a new column right after it. This means that all paragraphs in the current column are distributed evenly to fill all space.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\columnsep}{30pt}\r\n\\setlength{\\columnseprule}{1pt}\r\n\\begin{multicols}{3}\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non arcu pulvinar, mattis diam sed, tempus velit. \\columnbreak Proin et faucibus sapien, eu vehicula lorem. Fusce consequat diam ac urna ullamcorper, sodales pharetra eros accumsan. Maecenas accumsan tellus eu erat molestie, eget sollicitudin sem volutpat. Morbi vel nisi vel magna consectetur pellentesque. Pellentesque in orci id urna luctus ornare. Praesent nisi nulla, congue et molestie vel, molestie in est.\r\n\\end{multicols}\r\n<\/pre>\r\n<div><img src=\"media\/LatexSpacingColumns.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-multiple-columns","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"281","title":"[LaTeX] Hyperlinks & URLs","post":"<p>At the time TeX was introduced, hyperlinks and URLs weren&rsquo;t as mainstream as they are now. That&rsquo;s why any support for these has to come from a nifty little package called <code>hyperref<\/code>.<\/p> \r\n\r\n<h2>What it Does<\/h2>\r\n\r\n<p>Hyperref automatically turns all your <code>\\ref<\/code> commands into hyperlinks within the document &ndash; it makes them clickable, and when you do, you are brought to the <code>\\label<\/code> they refer to. It also automatically creates PDF bookmarks for all your sections, and makes the table of contents entries clickable.<\/p>\r\n\r\n<h2>URLs<\/h2>\r\n\r\n<p>Now, turning a string into a clickable URL is easy. Use the <code>\\url{<em>theURL<\/em>}<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{hyperref}\r\n\r\n\\begin{document}\r\nPlain old text url: http:\/\/www.google.com \\par\r\nFancy, dynamic url: \\url{http:\/\/www.google.com}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexHyperrefBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Custom Names<\/h2>\r\n\r\n<p>If you want to create a clickable reference with a different name, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\hyperref[<em>labelName<\/em>]{<em>linkText<\/em>}<\/code><\/p>\r\n\r\n<p>NOTE: You can use a regular reference within the <em>linkText<\/em>, but you must use the star variation, <code>\\ref*<\/code>, for that. Otherwise, infinitely nested links (<em>&hellip;linkception&hellip;<\/em>) would occur.<\/p>\r\n\r\n<p>If you want to create a clickable URL with a different name, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\href{<em>theURL<\/em>}{<em>linkText<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nFancy, dynamic url: \\href{http:\/\/www.google.com}{Go to Google!}\r\n<\/pre>\r\n<div><img src=\"media\/LatexHyperrefCustomNames.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Custom Anchors<\/h2>\r\n\r\n<p>It&rsquo;s also possible to simulate the same system without having to use labels and references. You can create an anchor anywhere within the document with<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\hypertarget{<em>labelName<\/em>}{<em>caption<\/em>}<\/code><\/p>\r\n\r\n<p>At the place you insert it, the target location, the text <em>caption<\/em> is displayed. You can leave it empty if you want. To link to it, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\hyperlink{<em>labelName<\/em>}{<em>caption<\/em>}<\/code><\/p>\r\n\r\n<p>The text <em>caption<\/em> is displayed, which can&rsquo;t be empty, otherwise there&rsquo;d be nothing to click!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\hypertarget{target1}{I'm a target!} \\par\r\n\\vspace{20mm}\r\n\r\n% Clicking this moves the top of the page to the spot of the hypertarget\r\n\\hyperlink{target1}{Go to the target!}\r\n<\/pre>\r\n<div><img src=\"media\/LatexHyperrefCustomAnchor.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Local Files and Emails<\/h2>\r\n\r\n<p>Very easily, you can use these commands to create links to files on the reader&rsquo;s computer, or that automatically open an email client pointed at your email.<\/p>\r\n\r\n<p>For quick emailing, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\href{mailto:<em>yourMail<\/em>}{<em>yourMail<\/em>}<\/code><\/p>\r\n\r\n<p>For files, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\href{run:<em>pathToFile.ext<\/em>}{<em>caption<\/em>}<\/code><\/p>\r\n","slur":"latex-hyperlinks-URLs","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"282","title":"[LaTeX] Figures & Images","post":"<p>We&rsquo;ve already seen the <code>table<\/code> environment that does nothing more than contain anything related to a table within the document. Its (very) similar ally is the <code>figure<\/code> environment, that signals LaTeX that any type of figure is to come &ndash; an image, mathematical graphic, whatever. The syntax is<\/p> \r\n\r\n<p><code class=\"longsyntax\">\b\\begin{figure}[<em>position<\/em>]\r\n\t<em>your figure<\/em>\r\n\tcaption{<em>theCaption<\/em>}\r\n\\end{figure}<\/code><\/p>\r\n\r\n<h2>Images<\/h2>\r\n\r\n<p>Again, because TeX was created mainly for typesetting text, way before computer images were a big deal, they aren&rsquo;t supported by default. To use them, include the <code>graphicx<\/code> package. Then, including any graphics is <em>exactly<\/em> as you&rsquo;d expect:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\includegraphics[<em>parameters<\/em>]{<em>linkToFile<\/em>}<\/code><\/p>\r\n\r\n<p>Links can be relative ( <em>someFile.jpg<\/em> ) or absolute ( <em>C:\\Users\\John\\someFile.jpg<\/em> ). There are four formatted image types: <code>.png<\/code>, <code>.jpg<\/code>, <code>.pdf<\/code>, <code>.eps<\/code>.<\/p>\r\n\r\n<p>The <em>parameters<\/em> can be used to scale and\/or crop the image. To do so, you can set these properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the width<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>height<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the height<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>scale<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifies the scale with a factor, default is 1.0.<\/p>\r\n\r\n\t\t\t<p>For example, 0.5 means half the original size.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>angle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specify the amount of degrees to rotate the image<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>trim<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Takes four values, which represent the length to trim from the <em>left<\/em>, <em>bottom<\/em>, <em>right<\/em> and <em>top<\/em> side, respectively.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>clip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Needs to be set to <em>true<\/em> for the <code>trim<\/code> option to work<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>page<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>If your graphic is a pdf file, you can specify which page to display.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{graphicx}\r\n\r\n\\begin{document}\r\nLorem ipsum Uno\r\n\\begin{figure}\r\n    \\includegraphics[width=0.25\\textwidth]{ProfPanda.png}\r\n\\end{figure}\r\nLorem ipsum Duo\r\n\\begin{figure}[h]\r\n    \\includegraphics[width=0.25\\textwidth]{ProfPanda.png}\r\n\\end{figure}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexIncludeGraphics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: If you only specify a width <em>or<\/em> height, the other dimension scales accordingly to keep the aspect ratio the same.<\/p>\r\n\r\n<h2>Wrapping Text around Figures<\/h2>\r\n\r\n<p>The regular <code>figure<\/code> environment adds line breaks before and after the graphic. If you want text (and other environments) to nicely wrap around it, include the <code>wrapfig<\/code> package, and use a special environment:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\b\\begin{wrapfigure}[<em>lineHeight<\/em>]{<em>position<\/em>}{<em>width<\/em>}<\/code><\/p>\r\n\r\n<p>The <em>width<\/em> is, obviously, the width of the figure. The <em>position<\/em> has eight possible values:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier I<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier II<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>r<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>R<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Right side of the text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>l<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>L<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Left side of the text<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>i<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>I<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inside edge (in a <em>twoside<\/em> document)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>o<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>O<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Outside edge (in a <em>twoside<\/em> document)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The uppercase versions allow LaTeX to float the figure to the best place &ndash; they are merely suggestions &ndash; while the lowercase versions force it to follow whatever you specified.<\/p>\r\n\r\n<p>The optional <em>lineHeight<\/em> argument accepts any positive integer, and will set the figure&rsquo;s height to the height that amount of lines takes up.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{graphicx}\r\n\\usepackage{wrapfig}\r\n\r\n\\begin{document}\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non arcu pulvinar, mattis diam sed, tempus velit. Proin et faucibus sapien, eu vehicula lorem. Fusce consequat diam ac urna ullamcorper, sodales pharetra eros accumsan. \r\n\\begin{wrapfigure}{r}{220pt}\r\n    \\caption{What?! I don't see anything!?}\r\n\\end{wrapfigure}\r\nMaecenas accumsan tellus eu erat molestie, eget sollicitudin sem volutpat. Morbi vel nisi vel magna consectetur pellentesque. Pellentesque in orci id urna luctus ornare. Praesent nisi nulla, congue et molestie vel, molestie in est.\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexWrapFigures.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Side Caption<\/h2>\r\n\r\n<p>So far, captions could be placed either above or below the figure. If you want them to the side of the graphic, include the <code>sidecap<\/code> package, and use the <code>SCfigure<\/code> environment.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{graphicx}\r\n\\usepackage{sidecap}\r\n\r\n\\begin{document}\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non arcu pulvinar, mattis diam sed, tempus velit. Proin et faucibus sapien, eu vehicula lorem. Fusce consequat diam ac urna ullamcorper, sodales pharetra eros accumsan. \r\n\\begin{SCfigure}\r\n    \\includegraphics[scale=0.25]{ProfPanda.png}\r\n    \\caption{Oh noes, a wild panda! Did you know, that pandas don't even like bamboo, but just eat it anyway?}\r\n\\end{SCfigure}\r\nMaecenas accumsan tellus eu erat molestie, eget sollicitudin sem volutpat. Morbi vel nisi vel magna consectetur pellentesque. Pellentesque in orci id urna luctus ornare. Praesent nisi nulla, congue et molestie vel, molestie in est.\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexSideCaptionFigures.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Minipage<\/h2>\r\n\r\n<p>Minipages are environments that do exactly what they say &ndash; contain a mini page, completely separated from the overall document. This is useful for creating complex layouts, such as putting lots of images next to each other. This is possible, because minipages scale to the size of whatever&rsquo;s inside, and don&rsquo;t insert any white space or line breaks around it.<\/p>\r\n\r\n<p>To create one, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\begin{minipage}[<em>position<\/em>]{<em>width<\/em>}\r\n\t<em>whatever you want inside<\/em>\r\n\\end{minipage}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{minipage}[t]{0.5\\textwidth}\r\n    \\centering\r\n    \\includegraphics[width=0.5\\textwidth]{ProfPanda.png}\\\\\r\n    Panda Uno\r\n\\end{minipage}\r\n\\begin{minipage}[t]{0.5\\textwidth}\r\n    \\centering\r\n    \\includegraphics[width=0.5\\textwidth]{ProfPanda.png}\\\\\r\n    Panda Duo\r\n\\end{minipage}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMinipage.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: It might be a fun exercise to recreate the <em>wrapfigure<\/em> and <em>sidecaption<\/em> environments using minipages.<\/p>\r\n","slur":"latex-figures-images","cat":"Writing","subcat":"LaTeX","video":"","diff":"4","quiz":""},
{"id":"283","title":"[LaTeX] Special Pages I","post":"<p>We&rsquo;ve already seen the title page and table of contents at the start of every document, but there&rsquo;s also lots of pages that are usually included after the main contents. These can be grouped into four types: <strong>appendix<\/strong>, <strong>index<\/strong>, <strong>glossary<\/strong>, and<strong> nomenclature<\/strong>.<\/p> \r\n\r\n<h2>Appendix<\/h2>\r\n\r\n<p>An appendix is a section containing extra background information for whatever was inside the document, or information that isn&rsquo;t important for everyone reading the main document. For example, a book on LaTeX could provide an appendix that explains how to install it, in case you hadn&rsquo;t already, or had troubles. First, include the <code>appendix<\/code> package.<\/p>\r\n\r\n<p>Then, you can start an <code>appendices<\/code> environment, and use regular <code>\\section<\/code> commands to create different appendices within it. A <code>subappendices<\/code> environment can even be used within it, with <code>\\subsections<\/code>. These appendices are numbered with capital letters, and are the same as the pages of the main document, which means you can use any command here as well.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{appendix}\r\n\r\n\\begin{document}\r\n\\begin{appendices}\r\n    \\section{What I Forgot}\r\n    Lorem Ipsum...\r\n    \\begin{subappendices}\r\n        \\subsection{Important stuff}\r\n        Lorem ipsum...\r\n        \\subsection{Leftovers}\r\n        Lorem ipsum...\r\n    \\end{subappendices}\r\n\\end{appendices}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexAppendixBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The package can take a number of useful (optional) properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>page<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The appendix environment has a large header <em>Appendices<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>toc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Appendices entries are added to the table of contents<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>title<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Appendices are labelled &lsquo;Appendix <em>letter<\/em>&rsquo;, instead of simply the letter.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>titletoc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Appendices are added to the table of contents as &lsquo;Appendix <em>letter<\/em>&rsquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage[title, titletoc]{appendix}\r\n\r\n\\begin{document}\r\n\\tableofcontents\r\n\\begin{appendices}\r\n    \\section{What I Forgot}\r\n    Lorem Ipsum...\r\n    \\section{And Something Else}\r\n    Lorem Ipsum...\r\n\\end{appendices}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexAppendixAdvanced.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Index<\/h2>\r\n\r\n<p>An index contains all important words from the document, in alphabetic order, together with all the pages they occur on. Of course, it would be a pain to count every occurrence of a word yourself, which means you can make life a lot easier with a package called <code>imakeidx<\/code> (<em>i make index<\/em>).<\/p>\r\n\r\n<p>Now, every time you write a word you want included in the index, type <code>\\index{<em>word<\/em>}<\/code> immediately after it. This command doesn&rsquo;t render the text, otherwise the word would be doubled every time, but signals the index that an occurrence is here.<\/p>\r\n\r\n<p>If you want the document to keep track of these, type <code>\\makeindex<\/code> at the top of your document. This makes compilation a lot slower, if the document is large, which means you might want to comment it out sometimes. Then, to actually print the index, use <code>\\printindex<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{imakeidx}\r\n\\makeindex\r\n\r\n\\begin{document}\r\nAn appendix\\index{appendix} is a section containing extra background information\\index{information} for whatever was inside the document, or information\\index{information} that isn't important for everyone reading the main document. For example, a book on \\LaTeX{} could provide an appendix\\index{appendix} that explains how to install it, in case you hadn't already, or had troubles.\r\n\r\n\\printindex\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexIndexBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>It&rsquo;s also possible, to nest these keywords. For example, if you give an important definition at the first page, and some definitions that expand the first one later, you could include those underneath the first keyword, to make clear they belong together. To do so, use <code>\\index{<em>parent<\/em>!<em>word<\/em>}<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nArithmetic\\index{arithmetic} is fascinating subject. We'll talk mostly about addition\\index{arithmetic!addition}, subtraction\\index{arithmetic!subtraction}, multiplication\\index{arithmetic!multiplication} and division\\index{arithmetic!division}. Have fun!\r\n\r\n\\printindex\r\n<\/pre>\r\n<div><img src=\"media\/LatexIndexAdvanced.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>Lastly, the <code>\\makeindex<\/code> command can receive some optional arguments:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>title=<em>Title<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Give a different title than the default <em>Index<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>intoc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Add an <em>index<\/em> entry to the table of contents<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>columns=<em>Number<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How many columns to use<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>columnsep=<em>Length<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The white space between columns<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>colemnseprule=<em>Length<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The width of the vertical line between columns<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{imakeidx}\r\n\\makeindex[columns=1,title=Mighty Index]\r\n\r\n\\begin{document}\r\nArithmetic\\index{arithmetic} is fascinating subject. We'll talk mostly about addition\\index{arithmetic!addition}, subtraction\\index{arithmetic!subtraction}, multiplication\\index{arithmetic!multiplication} and division\\index{arithmetic!division}. Have fun!\r\n\r\n\\printindex\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexIndexSuperAdvanced.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-special-pages-I","cat":"Writing","subcat":"LaTeX","video":"","diff":"4","quiz":""},
{"id":"284","title":"[LaTeX] Special Pages II","post":"<p>Continuing on last chapter, here are the two other quite important special pages.<\/p> \r\n\r\n<h2>Glossary<\/h2>\r\n\r\n<p>A glossary is a list with terms and their definitions. These terms could be known by the reader, but they are usually field-specific and it&rsquo;s best to clarify exactly what you mean with them somewhere. On top of that, it keeps track of a list of page numbers where the terms occur, just like the index.<\/p>\r\n\r\n<p>First, include the <code>glossaries<\/code> package.<\/p>\r\n\r\n<p>To create a new glossary entry, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newglossaryentry{<em>label<\/em>} {\r\n\tname=<em>name<\/em>,\r\n\tdescription={<em>description<\/em>}\r\n}<\/code><\/p>\r\n\r\n<p>The <em>name<\/em> and <em>description<\/em> are what&rsquo;s actually going to be displayed in the glossary. The <em>label<\/em> is used to find all occurrences throughout the document. But, it would be odd to have a separate glossary entry for every different way of writing this label, for example, with or without capital letter.<\/p>\r\n\r\n<p>Therefore, the command that signals the glossary of an occurrence, requires the exact same notation for the <em>label<\/em> every time, but can transform it to make it look the way you want. Look at this table of possible commands:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>gls{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints the label all lowercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Gls{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints the label with a capital starting letter<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>glspl{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints the label all lowercase, in plural form<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Glspl{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints the label with capital letter, in plural form<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Just as with indices, to make the glossary as it&rsquo;s compiling, use the <code>\\makeglossary<\/code> command at the top. To print it, use <code>\\printglossary<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{glossaries}\r\n\\makeglossary\r\n\r\n\\newglossaryentry{arithm} {\r\n    name=arithmetic,\r\n    description={Doing computations with numbers}\r\n}\r\n\r\n\\newglossaryentry{add} {\r\n    name=addition,\r\n    description={Adding numbers together}\r\n}\r\n\r\n\\begin{document}\r\n\\Gls{arithm} is a fascinating subject. We'll talk mostly about \\Glspl{add}, subtraction, multiplication, and division. Have fun!\r\n\r\n\\printglossary\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexGlossariesNormal.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Acronyms<\/h2>\r\n\r\n<p>On top of a glossary of only terms, you can also include the expanded form of <em>acronyms<\/em>. To create a new acronym entry, use:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newacronym{<em>label<\/em>}{<em>acronym<\/em>}{<em>full form<\/em>}<\/code><\/p>\r\n\r\n<p>Then, within the text, you can use these three commands:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>acrlong{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints <em>full form <\/em>only<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>acrfull{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints <em>full form <\/em>(<em>acronym<\/em>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>acrshort{<em>label<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Prints <em>acronym<\/em> only<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>To print it, use <code>\\printglossary[type=\\acronymtype]<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage[acronym]{glossaries}\r\n\\makeglossary\r\n\r\n\\newacronym{www}{WWW}{World Wide Web}\r\n\r\n\\begin{document}\r\nThe \\acrlong{www} is a great place. For example, on the \\acrfull{www} you can learn all about the \\LaTeX{} language!\r\n\r\n\\printglossary[type=\\acronymtype]\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexGlossariesAcronyms.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Nomenclature<\/h2>\r\n\r\n<p>A nomenclature declares definitions for names or notations. It seems exactly the same as a glossary, but there are two important differences: it only explains names you invented or assigned yourself, and doesn&rsquo;t count the pages it occurs on.&nbsp;For example, the term <strong>speed of light<\/strong> could be expanded on in the glossary, while the symbol <strong>c<\/strong> could be explained in the nomenclature to mean the <em>speed of light<\/em>.<\/p>\r\n\r\n<p>To be able to create nomenclatures, include the <code>nomencl<\/code> package.<\/p>\r\n\r\n<p>To add an entry, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\nomenclature{<em>name or notation<\/em>}{<em>explanation<\/em>}<\/code><\/p>\r\n\r\n<p>At the top of the document, use <code>\\makenomenclature<\/code> to make it, and later use <code>\\printnomenclature<\/code> to print it.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{nomencl}\r\n\\makenomenclature\r\n\r\n\\begin{document}\r\n\\nomenclature{$c$}{Speed of Light}\r\n\\nomenclature{$e$}{Euler's Number}\r\nThe speed of light is a very important concept in modern physics.\r\n\r\n\\printnomenclature\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexNomenclatures.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-special-pages-II","cat":"Writing","subcat":"LaTeX","video":"","diff":"3","quiz":""},
{"id":"285","title":"[LaTeX] Page Layouts & Margin","post":"<p>Until now we&rsquo;ve just silently accepted the size of the margins LaTeX decides. Now we&rsquo;ll look at ways to change the amount of white space around your document, and how to add custom headers, footers and other notes within the margin.<\/p> \r\n\r\n<h2>Page Layout<\/h2>\r\n\r\n<p><img src=\"media\/LatexPageLayout.png\" \/><\/p>\r\n\r\n<p>NOTE: This is a right-hand page. The whole thing is simply mirrored for left-hand pages.<\/p>\r\n\r\n<p>All of these values are defined using regular lengths, which means we can change all of them the way we&rsquo;re used to. These internal built-in lengths are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Length<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Default<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1 inch + <code>\\hoffset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>72pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Total offset from left edge<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>1<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1 inch + <code>\\voffset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>72pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Total offset from top edge<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>2<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\oddsidemargin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>31pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Margin at the odd side<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>3<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\topmargin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>20pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Margin at the top<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>4<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\headheight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>12pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Height of the header<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>5<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\headsep<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>25pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Distance between header and text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>6<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textheight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>592pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Height of text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>7<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>390pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Width of text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>8<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\marginparsep<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>10pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Distance between margin paragraphs and text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>9<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\marginparwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>35pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Width of margin paragraph<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>10<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\footskip<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>30pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Distance between footer and text<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>11<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\marginparpush<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>7pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Distance between two margin paragraphs<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>12<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\hoffset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>0pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Extra horizontal offset from the left<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>13<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\voffset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>0pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Extra vertical offset from the top<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>14<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\paperwidth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>597pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Width of the actual paper<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>15<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\paperheight<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>845pt<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Height of the actual paper<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>16<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>As you can see, there are some properties talking about <em>margin paragraphs<\/em>. This simply means text written in the margin of the document, which is what we&rsquo;re going to discuss next.<\/p>\r\n\r\n<h2>Margin Notes<\/h2>\r\n\r\n<p>LaTeX supports margin notes by default, with the command<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\marginpar[<em>even side text<\/em>]{<em>odd side text<\/em>}<\/code><\/p>\r\n\r\n<p>That&rsquo;s great, but it doesn&rsquo;t support margin notes at all places &ndash; for example, footnotes and headers can&rsquo;t have notes written in the margin &ndash; and has no other options.<\/p>\r\n\r\n<p>The <code>marginnote<\/code> package solves this. The syntax becomes<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\marginnote[<em>vertical offset<\/em>]{<em>odd side text<\/em>}<\/code><\/p>\r\n\r\n<p>You can switch around the position of the margins with the <code>\\reversemarginpar<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \\marginpar[This margin is not displayed, because article document type has only one side for margin notes]{This is a cool margin note on the big, odd side} Proin porttitor justo quis dolor hendrerit, at ultricies nibh accumsan. Duis ut urna leo. Quisque in urna non odio suscipit faucibus quis at est. Proin in enim id leo vehicula ultricies nec at justo. Nam mattis, orci nec ullamcorper finibus, metus turpis laoreet leo, ac lacinia erat est quis risus.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMarginNotes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Headers and Footers<\/h2>\r\n\r\n<p>Very early in this course we&rsquo;ve seen how to automatically set headers and footers by changing the page style. But, you can set them to anything you like!<\/p>\r\n\r\n<p>The <code>\\markright{<em>text<\/em>}<\/code> command sets the header for all right-hand pages, while the <code>\\markboth{<em>text<\/em>}{<em>text<\/em>}<\/code> command sets the header for all pages.<\/p>\r\n\r\n<p>Within them, there are several commands you can use to make meaningful headers.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\thepage<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The current page number.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\leftmark<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Current chapter name, printed like &ldquo;CHAPTER X. CHAPTER TITLE&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\rightmark<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Current section name, printed like &ldquo;X.Y.Z SECTION TITLE&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\chaptername<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The actual word <em>chapter<\/em> in the document&rsquo;s language<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\thechapter<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The number of the current chapter<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\thesection<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The number of the current section.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE:Most of these are regular counters you&#39;ve already learnt about, and can also use outside of headers and footers.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\section{First Section}\r\n\\pagestyle{headings}\r\n\\markboth{Section \\thesection at page \\thepage}{Section \\thesection \\ at page \\thepage}\r\nLorem ipsum, blabla, you know it by now, I guess.\r\n<\/pre>\r\n<div><img src=\"media\/LatexCustomHeadersFooters.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-page-layouts-margin","cat":"Writing","subcat":"LaTeX","video":"","diff":"4","quiz":""},
{"id":"286","title":"[LaTeX] Conclusion: what now?","post":"<p>You&rsquo;ve seen and played with the fundamentals of LaTeX, and even some slightly advanced topics, and should be able to do nearly anything. But, we have only touched the surface! You can continue your journey with one of these two courses: <strong><em>LaTeX Math<\/em><\/strong> and <strong><em>Advanced LaTeX<\/em><\/strong>.<\/p> \r\n\r\n<p>The first one will talk about everything related to mathematics, or scientific pieces in general. The second one will talk about colours, more advanced packages, all sorts of options you can set &ndash; everything we had to leave out to keep this basic course relatively small. I, of course, suggest you read both of them. But do whatever you like!<\/p>\r\n","slur":"latex-conclusion","cat":"Writing","subcat":"LaTeX","video":"","diff":"4","quiz":""},
{"id":"287","title":"LaTeX Math","post":"<p>If you don&rsquo;t have any LaTeX knowledge, I <em>strongly<\/em> recommend you first look at the <strong><em>BASIC COURSE<\/em><\/strong>. Lots of fundamental concepts will be used in this course, but not explained again.<\/p> \r\n\r\n<p>With that out of the way, we can start our journey into beautifully typesetting mathematical formulas. This course will teach you the environments to use for different mathematical formats, and the commands to use for certain mathematical operations. LaTeX won&rsquo;t calculate things or run algorithms for you &ndash; it&rsquo;s only there to typeset the math.<\/p>\r\n\r\n<p>If you have a pretty good understanding of LaTeX, learning the mathematical side won&rsquo;t be difficult. Some of the chapters will have little explanation or new concepts, and will just provide some tables with symbols, for you to reference as you&rsquo;re working. Before we start, I have good news and bad news.<\/p>\r\n\r\n<p>The bad news is, that LaTeX can&rsquo;t typeset math and regular text without any extra help. Its default way of formatting anything is targeted at text only. To use math, we need to <em>always<\/em> put it inside a math environment &ndash; which is what the first few chapters will discuss.<\/p>\r\n\r\n<p>The good news is, that these environments behave a lot like you&rsquo;re used to, and can be created easily. Text and numbers are displayed like normal, just with a different font style. For example, these math characters can be typed right from the keyboard and automatically work beautifully:<\/p>\r\n\r\n<p><code class=\"longsyntax\">+  -  =  !  \/  (  )  [  ]  &lt;  &gt;  |  &#39;  :<\/code><\/p>\r\n\r\n<p>Most commands work inside them as well, and the same restrictions apply as with regular text typesetting. Good luck!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Math Environments I<\/li>\r\n\t<li>Math Environments II<\/li>\r\n\t<li>Display Styles &amp; Scripts<\/li>\r\n\t<li>Delimiters<\/li>\r\n\t<li>Math Accents<\/li>\r\n\t<li>Functions<\/li>\r\n\t<li>Sums, Integrals &amp; More<\/li>\r\n\t<li>Matrices<\/li>\r\n\t<li>Spacing &amp; Special Text<\/li>\r\n\t<li>Greek Letters<\/li>\r\n\t<li>Math Symbols<\/li>\r\n\t<li>Theorems &amp; Proofs<\/li>\r\n\t<li>Math Graphics<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"latex-math","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"2","quiz":""},
{"id":"288","title":"[LaTeX] Math Environments I","post":"<p>When it comes to math environments, there are 4 <strong>core<\/strong> environments, and lots of <strong>sub<\/strong> environments. The core ones start math mode, and define some crucial overall functionality and layout, while the sub environments are usually used to align everything properly and gain more control over the look.<\/p> \r\n\r\n<p>This chapter is only about the core ones; every math formula you&rsquo;ll ever use needs to start with one of these. Next chapter is about the others, which need to be placed inside a certain core environment &ndash; remember that, as I won&rsquo;t keep mentioning it! If you forget it, LaTeX will often throw an undecipherable error and stop compiling.<\/p>\r\n\r\n<p>The core math environments are: <code>math<\/code>, <code>displaymath<\/code>, <code>equation<\/code> and <code>array<\/code>.<\/p>\r\n\r\n<h2>Math<\/h2>\r\n\r\n<p>The math environment starts <em>inline<\/em> math mode, which means it&rsquo;s placed in line with the regular text within the paragraph. It can be started with one of the following three (equivalent) syntaxes:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\( &hellip; \\)\r\n$ &hellip; $\r\n\\begin{math} &hellip; \\end{math}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nJuan fetched some $H_{2}O$, and did $a^2 + b^2 = c^2$, and created a unicorn!\r\n<\/pre>\r\n<div><img src=\"media\/LatexInlineMath.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Displaymath<\/h2>\r\n\r\n<p>The displaymath environment starts math mode on a new line, and centres the equation. It can be started with one of the following two (equivalent) syntaxes:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\[ &hellip; \\]\r\n\\begin{displaymath} &hellip; \\end{displaymath}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nEinstein's famous formula, \r\n\\[ E = mc^2 \\]\r\nhas become an important cornerstone of modern physics\r\n<\/pre>\r\n<div><img src=\"media\/LatexDisplayMath.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Equation<\/h2>\r\n\r\n<p>The equation environment does the same as the previous environment, but also adds the equation number in the right margin. All equations are automatically numbered by LaTeX, starting from 1. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\b\\begin{equation} &hellip; \\end{equation}<\/code><\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{equation}\r\n    E = mc^2\r\n\\end{equation}\r\nFormula 1 was one of Einstein's most important formulas.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathEquation.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: The star variation, <code>equation*<\/code>, is exactly the same as the <code>displaymath<\/code> environment.<\/p>\r\n\r\n<p>The reason it numbers equations, is that it allows you to use labels and references, just as with tables and figures. For this, use the <code>\\label{<em>label<\/em>}<\/code> and <code>\\eqref{<em>label<\/em>}<\/code> commands.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{equation}\r\n    E = mc^2\\label{eq:Relativity}\r\n\\end{equation}\r\nFormula \\eqref{eq:Relativity} was one of Einstein's most important formulas.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathLabels.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Multiple equations can be put within the same math environment, which means you can have multiple labels within the environment &ndash; each corresponding with the equation on the current line.<\/p>\r\n\r\n<h2>Array<\/h2>\r\n\r\n<p>The array environment creates a table, but, unlike the regular <code>tabular<\/code> environment, all cells are automatically put into math mode. Of course, you could recreate the effect by starting math mode in every cell individually, but using this environment is much, much simpler. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\[\r\n\t\\begin{array}{<em>columns<\/em>}\r\n\t\t<em>item1<\/em> &amp; <em>item2<\/em> &amp; <em>item3<\/em> \\\\\r\n\t\t&hellip;\r\n\t\\end{array}\r\n\\]<\/code><\/p>\r\n\r\n<p>Because cells are all in math mode, the types of columns you can use are restricted to <code>l<\/code> (left), <code>c<\/code> (center), <code>r<\/code> (right) and <code>|<\/code> (vertical line).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n\t\\begin{array}{llll}\r\n\t\t2 &+& 2 & = 4 \\\\\r\n\t\t2 &+& 2 & = 0\r\n\t\\end{array}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathArray.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-math-environments-I","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"2","quiz":""},
{"id":"289","title":"[LaTeX] Math Environments II","post":"<p>Last chapter discussed, among others, the <code>displaymath<\/code> and <code>equation<\/code> environment. Anywhere within these, you can use the sub environments I&rsquo;ll discuss in this chapter. Most of these change the numbering or alignment of the equation(s) one way or another, but their applications are endless. So to speak, of course &ndash; there are limits, silly you.<\/p> \r\n\r\n<p>NOTE: When I first wrote this article, everything in here was a pure sub environment - it wouldn't work if it wasn't inside a core math environment. But, as time progresses, some things have changed, and some things were added, which means half of these math environments actually stand on their own. Check what type the environment is in the examples, or you'll meet lots of errors.<\/p>\r\n\r\n<p>These 8 sub environments are: <code>subequations<\/code>, <code>multline<\/code>, <code>split<\/code>, <code>align<\/code>, <code>flalign<\/code>, <code>alignat<\/code>, <code>gather<\/code>, and <code>cases<\/code>.<\/p>\r\n\r\n<p>But, these aren&rsquo;t supported by default, which means you need to include the <code>amsmath<\/code> package. Basic LaTeX actually doesn&rsquo;t support too many mathematical commands, which is why the AMS-LaTeX packages were invented by the <strong>A<\/strong>merican <strong>M<\/strong>athematical <strong>S<\/strong>ociety, of which <em>amsmath<\/em> is the most extensive. Most of the things that are going to be explained in this entire course require one of the AMS packages, remember that!<\/p>\r\n\r\n<h2>Subequations<\/h2>\r\n\r\n<p>This one is actually quite confusing. A <code>subequation<\/code> <em>contains<\/em> equations, which are numbered with letters affixed to the end of the equation number.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{subequations}\r\n    \\begin{equation}\r\n\t   5x + 6y = 10\r\n    \\end{equation}\r\n    \\begin{equation}\r\n\t   2x + y = 5\r\n    \\end{equation}\r\n\\end{subequations}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSubequations.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Multline &amp; Split<\/h2>\r\n\r\n<p>The <code>multline<\/code> environment allow you to split equations over multiple lines &ndash; which isn&rsquo;t possible in normal math mode &ndash; by using the familiar newline command: <code>\\\\<\/code>. It aligns the start of the equation with the left margin, and the end with the right margin.<\/p>\r\n\r\n<p>The <code>split<\/code> environment does roughly the same, but centres the equations, and also aligns the multiple lines by means of the ampersand ( <code>&amp;<\/code> ) character.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{multline}\r\n    5x + 6y = 10\\\\\r\n    2x + y = 5\r\n\\end{multline}\r\n\\hrulefill\r\n\\begin{equation}\r\n    \\begin{split}\r\n        5x + 6y &= 10\\\\\r\n        2x + y &= 5\r\n    \\end{split}\r\n\\end{equation}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathMultlineSplit.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: It's <em>multline<\/em>, not <em>multiline<\/em> (as you'd expect, because it allow multiple lines). Very annoying. There are often better alternatives than this.<\/p>\r\n\r\n<h2>Align &amp; Flalign<\/h2>\r\n\r\n<p>The <code>align<\/code> environment does the same as the split environment, but with two important differences.<\/p>\r\n\r\n<p>Firstly, the split environment is not supposed to go together with any other typeset material on the same line, while the align environment can be used next to other (unaligned) elements.<\/p>\r\n\r\n<p>Secondly, there's extra added space above and below the equations to make them stand out more.<\/p>\r\n\r\n<p>Actually, this environment is the improved version of an old and obsolete core environment, which means it also doesn't need to be placed inside one to work.<\/p>\r\n\r\n<p>But, if you don't want that much space around your align environment, you can use the <code>aligned<\/code> alternative. It has an optional parameter with values <code>t<\/code> (top) or <code>b<\/code> (bottom), which can be used to force vertical placement of the equation number. Semantically, <code>align<\/code> should be used for multiple equations, while <code>aligned<\/code> should be used for a single equation over multiple lines.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{align}\r\n    5x + 6y &= 10\\\\\r\n    2x + y &= 5\r\n\\end{align}\r\n\\hrulefill\r\n\\begin{equation}\r\n    \\begin{aligned}[b]\r\n        5x + 6y &= 10\\\\\r\n        2x + y &= 5\r\n    \\end{aligned}\r\n\\end{equation}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathAlignAligned.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>The <code>flalign<\/code> environment stands for <em>full align<\/em>, which simply means that the leftmost and rightmost columns are pushed against the margins, making the environment the full width of the text.<\/p>\r\n\r\n<h2>Alignat<\/h2>\r\n\r\n<p>The <code>alignat<\/code> environment <em>also<\/em> does the same, and groups the columns in left-right pairs &ndash; first column is right aligned, second is left aligned, third is right aligned, and so on. It has one required argument, which is the amount of pairs. The main difference is that it doesn't add any white space, which means you need to do that yourself (if you want that, which you probably do). It also has the semantically different variation that needs to be within a core environment, <code>alignedat<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n%The quad is used to separate the columns with some whitespace\r\n\\begin{alignat}{2}\r\n    5x + 6y \\quad &= 10 \\quad & a^2 + b^2 \\quad &=c^2 \\\\\r\n    2x + y  \\quad &= 5  \\quad & a^3 + b^3 \\quad &=c^3\r\n\\end{alignat}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathAlignat.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Gather<\/h2>\r\n\r\n<p>The <code>gather<\/code> environment centres all equations you put in, separated by a newline. The name comes from the fact that it gathers all equations around the centre.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{gather}\r\n    5x + 6y = 10\\\\\r\n    2x + y = 5\\\\\r\n    a^2 + b^2 = c^2\\\\   \r\n    a^3 + b^3 = c^3\r\n\\end{gather}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathGather.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Cases<\/h2>\r\n\r\n<p>The <code>cases<\/code> environment allows you to provide multiple cases for a single function, which means it&rsquo;s mostly useful for piecewise functions. Different cases are separated by newlines, and aligned with the familiar ampersands.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\nf(x) = \r\n\\begin{cases} \r\n    x &\\mbox{if } x = 0 \\\\\r\n    5x & \\mbox{if } x \\not= 0 \r\n\\end{cases} \\pmod{2}.\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathCases.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Removing Equation Numbers<\/h2>\r\n\r\n<p>All of these environments also have a starred variation that leaves out the equation tag. Simply add an asterisk to the end of the environment name in both the begin and end command! An example:<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{align*}\r\n    5x + 6y &= 10\\\\\r\n    2x + y &= 5\r\n\\end{align*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathNoNumber.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If you, however, want some equations within the same environment numbered, and not some others, you can use <code>\\nonumber<\/code> on those specific lines.<\/p>\r\n\r\n<p>It&rsquo;s also possible to customize the equation numbers, or sometimes called <em>equation tags<\/em>, by using the <code>\\tag{<em>text<\/em>}<\/code> command. If you want no tag, it's simply <code>\\notag<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{align*}\r\n    5x + 6y &= 10 \\tag{Equation Uno} \\\\\r\n    2x + y &= 5 \\tag{Equation Duo}\r\n\\end{align*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathEquationTags.png\" \/><\/div>\r\n<\/div>","slur":"latex-math-environments-II","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"290","title":"[LaTeX] Display Styles & Scripts","post":"<p>In the first chapter we saw two different types of math environments: in line with the text (<em>inline<\/em>), or on its own line(s) (<em>block<\/em>). Besides changing the overall position, this also changes the way certain math symbols are displayed. The most prominent differences you&rsquo;ll notice are:<\/p> \r\n\r\n<ul>\r\n\t<li>Some math operators, such as fractions and square roots, are displayed smaller in inline environments.<\/li>\r\n\t<li>Subscript and superscript components are displayed next to their element in inline environments, and underneath them in block environments. In other words, in block environments complex operators (such as sums and integrals) are promoted to a larger size.<\/li>\r\n<\/ul>\r\n\r\n<p>These changes are made to make sure inline environments don&rsquo;t get too big &ndash; an environment with large height would go through the text above and below it, making everything unreadable. Sometimes, however, you don&rsquo;t want this to be decided for you, which is why you can set <strong>display styles<\/strong>.<\/p>\r\n\r\n<h2>Display Styles<\/h2>\r\n\r\n<p>Four display style commands are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\displaystyle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes whatever comes after it to block environment style<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\textstyle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes whatever comes after it to inline environment style<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\scriptstyle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as the previous style, but smaller<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\scriptscriptstyle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as the previous style, but even smaller<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Just as the font size commands do with regular text, these influence everything after it, until a new command comes along.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis fraction $\\frac{5}{4}$ is some regular inline math.\r\n\r\nThis fraction $\\displaystyle \\frac{5}{4}$ is big and bold!\r\n\r\nThis looks odd and small:\r\n\\begin{equation}\r\n    a^2 + \\scriptscriptstyle b^2 = \\scriptstyle c^2\r\n\\end{equation}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathDisplayStyles.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>An alternative is to promise LaTeX that everything is going to be fine, and that it can just ignore the extra height of some equations. This is done by placing the equation within the <code>\\smash{<em>eq<\/em>}<\/code> command. If you dare to do this, it&rsquo;s up to you to make sure the equations don&rsquo;t interfere with the text.<\/p>\r\n\r\n<h2>Subscripts &amp; Superscripts<\/h2>\r\n\r\n<p>The reason these display styles are so important, is because subscripts and superscripts used <em>very often<\/em> in mathematical formulas. Typically, subscripts represent indices, while superscripts represent exponents, but there are many more moments to use them. Luckily, their syntax is easy.<\/p>\r\n\r\n<p>For subscripts, use <code><attr>_<\/attr>{<em>text<\/em>}<\/code>. For superscripts, use <code><attr>^<\/attr>{<em>text<\/em>}<\/code>. If something has both sub and super scripts, these can just be used right after each other, any order you like.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nIt's trivial to see that $a_1 + \\ldots + a_n = b^{2n}$.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSubSuperScripts.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: If <em>text<\/em> is only a single character, you can leave out the braces.<\/p>\r\n\r\n<p>NOTE 2: Sub and superscripts may also have sub and superscripts themselves &ndash; you can stack as much of them as you like, although it&rsquo;s a questionable practice.<\/p>\r\n\r\n<p>Alternatively, while not really a subscript, the <code><em>A<\/em> \\atop <em>B<\/em><\/code> command can be used to place B exactly underneath A.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nIt's trivial to see that $a \\atop b$ $= \\binom{a}{b}$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathATOP.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Font Size<\/h2>\r\n\r\n<p>The display style commands already provided ways to shrink or enlarge text size, but they can only be used inside of math environment, and don&rsquo;t support many sizes. If you want to change the size of one (or multiple) complete equations, you can simply use all the font size commands for regular text (<code>\\tiny<\/code>, <code>\\small<\/code>, &hellip;). Note that you have to place these outside of the math environment &ndash; inside, they won&rsquo;t work.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\tiny $\\sqrt{x^2 + y^2}$\r\n\\large $\\sqrt{x^2 + y^2}$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathFontSizes.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Alternating Text and Math<\/h2>\r\n\r\n<p>There will be times you want to use some regular text within a math environment, and can&rsquo;t quickly jump in and out of the environment to do so. For example, in the middle of an array environment, you can&rsquo;t just break out of math mode to place some text. The <code>\\mbox{<em>text<\/em>}<\/code> and <code>\\fbox{<em>text<\/em>}<\/code> commands from the basic course provide this, but don&rsquo;t support line breaks. Therefore, the more general <code>\\text{<em>text<\/em>}<\/code> command is preferred.<\/p>\r\n\r\n<p>Another difficulty often encountered using math and text next to each other, is that you&rsquo;ve lost track of whether you&rsquo;re inside a math environment at a certain point or not. For example, you could have started and closed an inline math environment with the dollar sign five times, but forget one somewhere in the middle, and now everything is typeset the wrong way. The <code>\\ensuremath{<em>equation<\/em>}<\/code> command ensures that whatever&rsquo;s inside is in math mode, no matter what happens around it.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$a = b \\text{ if and only if } b = a$ \\par\r\n\\ensuremath{\\sqrt{x^2 + y^2}}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathTextEnsureMath.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Font Style<\/h2>\r\n\r\n<p>Besides the regular math letters, three other notations are available: <strong>bolded<\/strong>, <strong>calligraphic<\/strong> and <strong>script<\/strong> letters. For example, a bolded R is the symbol for the set of all real numbers, and a calligraphic A is often used for symmetric matrices.<\/p>\r\n\r\n<p>To use these, the <code>amsfonts<\/code> package needs to be included. For calligraphic, you need the <code>mathsfrs<\/code> package.<\/p>\r\n\r\n<p>The commands to use are: <code>\\mathbb{<em>text<\/em>}<\/code>, <code>\\mathcal{<em>text<\/em>}<\/code> and <code>\\mathscr{<em>text<\/em>}<\/code>.<\/p>\r\n\r\n<p>There are two alternative styles for bolded and calligraphic letters, <code>\\mathds{<em>text<\/em>}<\/code> and <code>\\mathfrak{<em>text<\/em>}<\/code> (<em>fraktur letters<\/em>). For these, however, you need to include the <code>dsfont<\/code> package as well.<\/p>\r\n\r\n<p><img src=\"media\/LatexMathFontStyles.png\" \/><\/p>\r\n","slur":"latex-display-styles-scripts","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"291","title":"[LaTeX] Delimiters","post":"<p>Lots of mathematical formulas have their components grouped, or have a useful shorthand notation that requires a part to be enclosed within so-called <strong>delimiters<\/strong>. The regular symbols, such as parentheses ( <code>()<\/code> ) and braces ( <code>{}<\/code> ) work, but don&rsquo;t scale with the equation &ndash; a fraction, for example, is much taller than the symbols surrounding it, which looks ugly and messy.<\/p> \r\n\r\n<p>To solve this, LaTeX provides the <code>\\left<\/code> and <code>\\right<\/code> commands. These need to be used together, <em>always<\/em>, and both need a certain delimiter right after it. In between them, you are allowed to use as many <code>\\middle<\/code> commands with delimiters as you like. The possibilities are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Left<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Right<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Common Use<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>(<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular parentheses<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Grouping equations<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>[<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular brackets<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Alternative to grouping equations<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\{<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular braces<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Denoting sets<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\langle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\rangle<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Arrows<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Intervals or dot products<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Vertical lines<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Determinant or absolute value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\|<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Double vertical lines<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Norm<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>.<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>.<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Empty delimiter<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Displays nothing<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\lfloor<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\rfloor<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Box with open top and gap in bottom side<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounding a number down<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\lceil<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\rceil<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Box with open bottom and gap in top side<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounding a number up<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\ulcorner<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\urcorner<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Smaller version of the previous command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounding a number<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{equation*}\r\n    \\left( \\frac{2}{3} \\right)\r\n\\end{equation*}\r\n\\begin{equation*}\r\n     \\left| x+y \\right|\r\n\\end{equation*}\r\n\\begin{equation*}\r\n    \\left\\{ x \\in \\mathbb{R}^3 \\middle| x \\not= 2 \\right\\}\r\n\\end{equation*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathDelimiters.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Custom Sizes<\/h2>\r\n\r\n<p>If you&rsquo;re not satisfied with LaTeX stretching your delimiters to the correct length automatically, you can use the special symbol-sizing commands:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\big<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slightly bigger than normal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Big<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Even bigger<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bigg<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Even bigger<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Bigg<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Biggest<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>These also work for most other symbols, which you&rsquo;ll learn in a later chapter. Note that these should be used <em>instead<\/em> of the <code>\\left<\/code> and <code>\\right<\/code> commands.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{equation*}\r\n    %Yes, this looks awful, it's just for demonstrative purposes\r\n    \\Bigg( \\frac{2}{3} \\big)\r\n\\end{equation*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathDelimiterSizing.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-math-delimiters","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"292","title":"[LaTeX] Math Accents","post":"<p>It&rsquo;s already been discussed that you can&rsquo;t use text within a math environment like you normally would &ndash; that&rsquo;s what makes this math mode special. But, there are certain simple elements you can add to characters (or strings of characters), that change its meaning in a very important way, much like accents do to regular text. For example, adding an arrow above a letter magically turns it into a vector! I like to call these <strong>math accents<\/strong>, and this chapter provides all of them, ordered by their type<\/p> \r\n\r\n<h2>Real Accents<\/h2>\r\n\r\n<p>These look the most like accents you&rsquo;re used to, and are typically used on a single character, to place something above it. They can be used on multiple characters, but some need their wide counterpart to be able to do so properly. If you use the regular command on multiple characters, it simply places the accent in regular size above it, centred.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Regular Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Wide Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\vec{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\overrightarrow{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds an arrow from left to right<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\overleftarrow{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds an arrow from right to left<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\hat{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\widehat{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a hat, or &ldquo;rooftop&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\tilde{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\widetilde{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a tilde, or &ldquo;wavy line&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\dot{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a single dot<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\ddot{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a double dot<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\check{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a reverse hat, or check symbol<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\breve{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a breve, or &ldquo;cup&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\acute{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds an accent acute<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\grave{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds an accent grave<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bar{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>-<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a bar, or &ldquo;overline&rdquo;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Another very important characteristic of these real accents, is that they can be composed; using multiple after each other simply keeps adding the accents above each other.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{gather*}\r\n    \\vec{x} - \\overrightarrow{xyz} - \\overleftarrow{xyz}\\\\\r\n    \\hat{x} - \\widehat{xyz}\\\\\r\n    \\tilde{x} - \\widetilde{xyz}\\\\\r\n    \\dot{x}\\\\\r\n    \\ddot{x}\\\\\r\n    \\check{x}\\\\\r\n    \\breve{x}\\\\\r\n    \\acute{x}\\\\\r\n    \\grave{x}\\\\\r\n    \\bar{x}\r\n\\end{gather*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathAccentsOne.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>One-Argument Commands<\/h2>\r\n\r\n<p>These are somewhat like accents, but have no wide counterpart, and can&rsquo;t all be stacked on top of each other &ndash; this ability is only available to overlines and underlines.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\not{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slashes diagonally through the character, used mostly for turning an equal sign into a not-equal sign.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\cancel{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Also slashes diagonally through its argument, but from bottom left to top right. Requires the <code>cancel<\/code> package.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\overline{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a line above it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\underline{}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds a line underneath it<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The first command only accepts single-character arguments.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{cancel}\r\n\r\n\\begin{document}\r\n$\\not=  \\quad  \\cancel{XYZ}  \\quad  \\overline{XYZ}  \\quad  \\underline{XYZ}$\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathAccentsTwo.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Two-Argument Commands<\/h2>\r\n\r\n<p>These accept two arguments of arbitrary length, and place the text from one of the arguments above or below the other. They are automatically centred, and the first two have their brace automatically stretched to the correct length.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\overbrace{<em>arg1<\/em>}^{<em>arg2<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Places <em>arg2<\/em> above <em>arg1<\/em>, using a brace to group <em>arg1<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\underbrace{<em>arg1<\/em>}_{<em>arg2<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Places <em>arg2<\/em> below <em>arg1<\/em>, using a brace to group <em>arg1<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\overset{<em>arg1<\/em>}{<em>arg2<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Places <em>arg1<\/em> above <em>arg2<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\underset{<em>arg1<\/em>}{<em>arg2<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Places <em>arg1<\/em> below <em>arg2<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\begin{gather*}\r\n    \\overbrace{a + \\ldots + a}^{n \\times a} \\\\\r\n    \\underbrace{a + \\ldots + a}_{n \\times a} \\\\\r\n    a \\overset{def}{=} b \\\\\r\n    a \\underset{def}{=} b\r\n\\end{gather*}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathAccentsThree.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-math-accents","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"293","title":"[LaTeX] Functions","post":"<p>Any characters you put into a math environment, are automatically displayed in an italic math font. There are functions, however, that are typically written with regular letters or some other typical notation. For these functions, LaTeX provides a command that follows the syntax:<\/p> \r\n\r\n<p><code class=\"longsyntax\">\\&lt;<em>function<\/em>&gt;<\/code><\/p>\r\n\r\n<p>Some of these functions have text written underneath them. For example, limits have subscripts that tell us which variable is nearing what value, but these are displayed underneath them, instead of next to it. This typical way of rendering subscripts is common among lots of functions, and is automatically used if you provide a subscript with such commands.<\/p>\r\n\r\n<p>Here are all function commands in a nice table:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\arccos<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\arcsin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\arctan<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\arg<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\cos<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\cosh<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\cot<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\coth<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\csc<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\deg<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\det_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\dim<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\exp<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\gcd_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\hom<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\inf_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\key<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\lg<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\lim_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\liminf_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\limsup_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\ln<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\log<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\max_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\min_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\Pr_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\sec_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\sin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\sinh<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\sup_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\tan<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\tanh<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: Functions with <code>_<\/code> behind them use those typical subscripts I explained. You&rsquo;ll see much more of it next chapter.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$cos(x)^2 + sin(x)^2 = 1$ is wrong, instead use $\\cos^2 x + \\sin^2 x = 1$\r\n\r\n$lim_{x \\rightarrow 2}$ is ugly, instead use $\\displaystyle \\lim_{x \\to 2}$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathFunctions.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>If your favourite function isn&rsquo;t listed, you can get the same result with<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\operatorname{<em>yourOperator<\/em>}{<em>x<\/em>}<\/code><\/p>\r\n\r\n<p>If you want your operator to use those typical subscripts, use the star variation.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$\\operatorname{pandaFunction}{x+y} = 2x + 2y$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathCustomOperators.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Modulo<\/h2>\r\n\r\n<p>Modulo operators work mostly the same, but have two variations.<\/p>\r\n\r\n<p>The <code>\\bmod <em>expression<\/em><\/code> command simply adds <em>mod expression<\/em>, while the <code>\\pmod <em>expression<\/em><\/code> command adds more space and some parentheses around it.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$4 = 9 \\bmod 5$ is true, but also $4 = 9 \\pmod 5$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathModulo.png\" \/><\/div>\r\n<\/div>","slur":"latex-math-functions","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"294","title":"[LaTeX] Sums, Integrals & More","post":"<p>Some mathematical &ldquo;functions&rdquo; exist, that have their own special symbol, and aren&rsquo;t written by simply using their (shortened) name. I&rsquo;m talking about: <strong>fractions<\/strong>,<strong> binomials<\/strong>,<strong> (square) roots<\/strong>, <strong>sums<\/strong>, <strong>products<\/strong>, <strong>integrals<\/strong> and <strong>logic\/set operations<\/strong>.<\/p> \r\n\r\n<h2>Fractions<\/h2>\r\n\r\n<p>A fraction is created with the command<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\frac{<em>numerator<\/em>}{<em>denominator<\/em>}<\/code><\/p>\r\n\r\n<p>Fractions can be nested within fractions as often as you like, but those nested fractions keep getting smaller and smaller, which is why I don&rsquo;t recommend nesting them too deeply. If you want nested fractions to all stay at the same size, use the <code>\\cfrac{<em>num<\/em>}{<em>denom<\/em>}<\/code> (<em>continued fraction<\/em>) command.<\/p>\r\n\r\n<p>Alternatively, if you want your fractions displayed with a diagonal slash, you can achieve this effect by means of the <code>xfrac<\/code> package. After you&rsquo;ve included it, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\sfrac{<em>numerator<\/em>}{<em>denominator<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\frac{2}{3} \\text{ or } \\sfrac{2}{3} \\text{ or } x^{\\frac{2}{3}}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathFractions.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Binomial<\/h2>\r\n\r\n<p>The command for creating binomials &ndash; sometimes also used for column vectors &ndash; works similarly:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\binom{<em>top<\/em>}{<em>bottom<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\binom{6}{4} = \\frac{6!}{4! \\cdot 2!}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathBinomial.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>(Square) Roots<\/h2>\r\n\r\n<p>Any type of root can be created with:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\sqrt[<em>n<\/em>]{<em>equation<\/em>}<\/code><\/p>\r\n\r\n<p>If you leave out the optional parameter, it&rsquo;s a square root. Otherwise, it&rsquo;s the n-th root. The symbol automatically scales with the equation.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\sqrt{a^2 + b^2} \\ \\sqrt[4]{a^2 + b^2}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSquareRoots.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Sums &amp; Products<\/h2>\r\n\r\n<p>The syntax for creating a sum symbol is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\sum_{<em>subscript<\/em>}^{<em>superscript<\/em>}<\/code><\/p>\r\n\r\n<p>The syntax for creating a product symbol is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\prod_{<em>subscript<\/em>}{<em>superscript<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\sum_{i=1}^{n} 2i \\not= \\prod_{i=1}^{n} 2i\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSumsProducts.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Integrals<\/h2>\r\n\r\n<p>A single integral can be created with<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\int_{<em>subscript<\/em>}^{<em>superscript<\/em>}<\/code><\/p>\r\n\r\n<p>If you want more integrals, you can just place these after each other. But, if you want multiple integrals with a single subscript &ndash; for example, a double integral over an area A &ndash; you can use the <code>\\iint<\/code>, <code>\\iiint<\/code> and <code>\\iiiint<\/code> commands. These create two, three or four integrals after each other, respectively. For more integrals, you can use <code>\\idotsint<\/code>, which displays two integral symbols with the familiar dots between them.<\/p>\r\n\r\n<p>For cyclic integrals, you need to include the <code>esint<\/code> package. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\oint_{<em>subscript<\/em>}^{<em>superscript<\/em>}<\/code><\/p>\r\n\r\n<p>For a double cyclic integral, use <code>\\oiint<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{esint}\r\n\r\n\\begin{document}\r\n% Special command to make the differential in roman letters\r\n% Not necessary, but highly recommended\r\n\\newcommand*\\diff{\\mathop{}\\!\\mathrm{d}}\r\n\r\n% The actual integrals\r\n\\[\r\n    \\int_{a}^{b} 4x \\diff x \\not= \\idotsint 4x \\diff x\r\n\\]\r\n\\[\r\n    \\oint_{a}^{b} 4x \\diff x \\not= \\oiint 4x \\diff x\r\n\\]\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathIntegrals.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Logic &amp; Set Operations<\/h2>\r\n\r\n<p>For operations on sets (unions and intersections), use the <code>\\b\bigcup<\/code> and <code>\b\\bigcap<\/code> commands.<\/p>\r\n\r\n<p>For logical operations (AND and OR), use the <code>\\b\bigwedge<\/code> and <code>\\b\bigvee<\/code> commands.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    A \\bigcup B = \\left\\{ x \\in \\mathbb{R} \\middle| x \\in A \\bigvee x \\in B \\right\\}\r\n\\]\r\n\\[\r\n    A \\bigcap B = \\left\\{ x \\in \\mathbb{R} \\middle| x \\in A \\bigwedge x \\in B \\right\\}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathLogicSetSymbols.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Leftovers<\/h2>\r\n\r\n<p>Besides these, there are 6 other &ldquo;big&rdquo; symbols you can use:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Visual<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bigoplus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathBIGOPLUS.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bigotimes<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathBIGOTIMES.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bigodot<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathBIGODOT.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\bigsqcup<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathBIGSQCUP.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\biguplus<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathBIGUPLUS.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\coprod<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><img src=\"media\/LatexMathCOPRODUCT.png\" \/><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Stacking Subscripts<\/h2>\r\n\r\n<p>If you want multiple subscripts on top of each other under a big symbol, you could use the <code>atop<\/code> command, but a much better and easier solution is at hand:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\substack{<em>something<\/em> \\\\ <em>something<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\sum_{\\substack{ i=1 \\\\ i \\not= j}}^{n} i\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSubStacks.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Regular Superscripts<\/h2>\r\n\r\n<p>A problem arises if you try to get the subscript in <em>display style<\/em>, but want the superscript in regular <em>text style<\/em>. To solve this, you can set regular (and other) superscripts for big symbols with<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\sideset{<em>left superscripts<\/em>}{<em>superscript<\/em>}<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n    \\sideset{_a^b}{'}\\sum_{\\substack{ i=1 \\\\ i \\not= j}}^{n} i\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSideSet.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-sums-integrals-more","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"4","quiz":""},
{"id":"295","title":"[LaTeX] Matrices","post":"<p>There are other ways to create matrices, using the proper delimiters, but using a special type of matrix environment will always be the best way to do it. These environments all roughly do the same &ndash; create a matrix &ndash; but have subtle differences that might make your life easier. They all follow this general syntax:<\/p> \r\n\r\n<p><code class=\"longsyntax\">\\begin{<em>matrixType<\/em>}\r\n\t<em>row 1, number 1<\/em> &amp; &hellip; &amp; <em>row 1, number n<\/em> \\\\\r\n\t&hellip;\r\n\t<em>row m, number 1<\/em> &amp; &hellip; &amp; <em>row m, number n<\/em>\r\n\\end{<em>matrixType<\/em>}<\/code><\/p>\r\n\r\n<p>As you can see, each row is terminated by a newline (two backslashes), and each column by an ampersand.<\/p>\r\n\r\n<h2>Plain Matrix<\/h2>\r\n\r\n<p>The <code>matrix<\/code> environment creates a matrix with everything lined up correctly, but nothing around it to signal it&rsquo;s a matrix. This is useful, for instance, for creating a submatrix within a matrix.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n\\begin{matrix}\r\n    0 & 1 & 2\\\\\r\n    3 & 4 & 5\\\\\r\n    6 & 7 & 8\r\n\\end{matrix}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathPlainMatrix.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Surrounded Matrices<\/h2>\r\n\r\n<p>One of the following environments can be used if you want a certain kind of delimiter surrounding your matrix:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Environment<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>bmatrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Brackets around the matrix (usual notation)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Bmatrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Braces around the matrix<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>pmatrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Parentheses around the matrix<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>vmatrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Vertical bars around the matrix (used to represent the determinant)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Vmatrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Double vertical-bars around the matrix<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\[\r\n\\begin{bmatrix}\r\n    0 & 1 & 2\\\\\r\n    3 & 4 & 5\\\\\r\n    6 & 7 & 8\r\n\\end{bmatrix}\r\n\\]\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathMatrices.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Inline Matrices<\/h2>\r\n\r\n<p>To use a matrix inline, so that the flow of text is not disrupted, use the <code>smallmatrix<\/code> environment. This, however, only creates a smaller plain matrix, which means you need to add delimiters yourself, and the matrix can&rsquo;t be too large to begin with.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\nThis matrix, $\\begin{smallmatrix} a & 0\\\\0 & b \\end{smallmatrix}$, is inline.\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathInlineMatrix.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-matrices","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"296","title":"[LaTeX] Math Spacing & Special Text","post":"<p>Before I start throwing all existing symbols at you, there are some slight details to be discussed. Within math environments, you can use the same spacing commands as anywhere else in LaTeX, but those are often too rough &ndash; within formulas, it&rsquo;s about millimetres of added or removed space. That&rsquo;s why there are some special spacing commands for mathematics.<\/p> \r\n\r\n<h2>General Spacing<\/h2>\r\n\r\n<p>These commands can be placed anywhere to add (or remove) spacing.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\,<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Thin space<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\:<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Medium space<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Thick space<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\!<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Negative thin space. The only command that removes white space, to bring things closer together.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Operator &amp; Symbol Spacing<\/h2>\r\n\r\n<p>When it comes to mathematical operators, relations and symbols, LaTeX follows a complex set of rules to determine how much spacing is around everything. For example, a minus symbol is always pushed against the symbol it belongs to, while the equals sign has lots of space around it. Most of the times, this works fine and everything looks great, but you can define your own way of spacing if you want with these commands:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathrel{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Spacing as with binary <em>relations<\/em> (such as equals, or greater than)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathbin{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Spacing as with binary <em>operations<\/em> (such as plus, or minus)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathop{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Less spacing on the right than on the left. Asymmetric, unlike the other two commands.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$x \\mathop{=} y$\\\\\r\n$x \\mathbin{=} y$\\\\\r\n$x \\mathrel{=} y$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSpacing.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Special Text Styles<\/h2>\r\n\r\n<p>It won&rsquo;t happen too often, but sometimes you need to emphasize or format text in between a bunch of math. For this, the same commands as with regular text are available, but with <em>math<\/em> instead of <em>text<\/em>.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathrm{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Roman font (default)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathit{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Italic<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathbf{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Bold<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathsf{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sans-serif<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\mathtt{&hellip;}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Teletype<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n$x = x \\; \\mathbf{Wowza}, that \\; was \\; \\mathrm{so \\ unexpected!}$\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSpecialText.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-math-spacing-special-text","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"4","quiz":""},
{"id":"297","title":"[LaTeX] Greek Symbols","post":"<p>Within mathematics, it&rsquo;s common to use Greek letters for naming nearly everything. It&rsquo;s useful, because they are easily recognizable, but don&rsquo;t interfere with regular text. And luckily, LaTeX has support for all of them.<\/p> \r\n\r\n<h2>Uppercase Greek Letters<\/h2>\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\Gamma \\)<\/td><td><code>\\Gamma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Delta \\)<\/td><td><code>\\Delta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Theta \\)<\/td><td><code>\\Theta<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\Lambda \\)<\/td><td><code>\\Lambda<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Xi \\)<\/td><td><code>\\Xi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Pi \\)<\/td><td><code>\\Pi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Sigma \\)<\/td><td><code>\\Sigma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Upsilon \\)<\/td><td><code>\\Upsilon<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Phi \\)<\/td><td><code>\\Phi<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\Psi \\)<\/td><td><code>\\Psi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Omega \\)<\/td><td><code>\\Omega<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Lowercase Greek Letters<\/h2>\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\alpha \\)<\/td><td><code>\\alpha<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\beta \\)<\/td><td><code>\\beta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gamma \\)<\/td><td><code>\\gamma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\delta \\)<\/td><td><code>\\delta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\epsilon \\)<\/td><td><code>\\epsilon<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\zeta \\)<\/td><td><code>\\zeta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eta \\)<\/td><td><code>\\eta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\theta \\)<\/td><td><code>\\theta<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\iota \\)<\/td><td><code>\\iota<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\kappa \\)<\/td><td><code>\\kappa<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\lambda \\)<\/td><td><code>\\lambda<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\mu \\)<\/td><td><code>\\mu<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nu \\)<\/td><td><code>\\nu<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\xi \\)<\/td><td><code>\\xi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\pi \\)<\/td><td><code>\\pi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\rho \\)<\/td><td><code>\\rho<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\sigma \\)<\/td><td><code>\\sigma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\tau \\)<\/td><td><code>\\tau<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\upsilon \\)<\/td><td><code>\\upsilon<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\phi \\)<\/td><td><code>\\phi<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\chi \\)<\/td><td><code>\\chi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\psi \\)<\/td><td><code>\\psi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\omega \\)<\/td><td><code>\\omega<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Miscellaneous<\/h2>\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\digamma \\)<\/td><td><code>\\digamma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varepsilon \\)<\/td><td><code>\\varepsilon<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varkappa \\)<\/td><td><code>\\varkappa<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varphi \\)<\/td><td><code>\\varphi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varpi \\)<\/td><td><code>\\varpi<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varrho \\)<\/td><td><code>\\varrho<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\varsigma \\)<\/td><td><code>\\varsigma<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\vartheta \\)<\/td><td><code>\\vartheta<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n\r\n<script type=\"text\/javascript\" src=\"MathJax\/MathJax.js?config=TeX-AMS-MML_SVG\"><\/script>","slur":"latex-greek-symbols","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"298","title":"[LaTeX] Math Symbols","post":"<p>I&rsquo;ve already subtly mentioned that LaTeX uses a set of rules to determine the amount of spacing around symbols. It supports a humongous amount of symbols, which means I&rsquo;m going to use those rules as a way to group them and keep this page clean.<\/p> \r\n\r\n<p>Basically, LaTeX has placed symbols in 7 different groups or <em>levels<\/em>, which each have their own fixed spacing rules. The Greek symbols from last chapter, for example, are from the first level, and always have the default amount of spacing on both left and right side. All default letters and numbers, spacing commands, and the math accents we&rsquo;ve discussed, are also in level 1.<\/p>\r\n\r\n<p>Most of these symbols need the <code>amssymb<\/code> package. I, personally, always include it just to be sure.<\/p>\r\n\r\n<h2>Level 1 &ndash; Simple Symbols<\/h2>\r\n\r\n<p>Simple symbols don&rsquo;t have any advanced functionality &ndash; just type the command and the symbol is displayed. Some of them also have no predefined function in mathematics.<\/p>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\aleph \\)<\/td><td><code>\\aleph<\/code><\/td>\r\n\t<td>\\( \\mho \\)<\/td><td><code>\\mho<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\beth \\)<\/td><td><code>\\beth<\/code><\/td>\r\n\t<td>\\( \\partial \\)<\/td><td><code>\\partial<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\daleth \\)<\/td><td><code>\\daleth<\/code><\/td>\r\n\t<td>\\( \\wp \\)<\/td><td><code>\\wp<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gimel \\)<\/td><td><code>\\gimel<\/code><\/td>\r\n\t<td>\\( \\circledS \\)<\/td><td><code>\\circledS<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\complement \\)<\/td><td><code>\\complement<\/code><\/td>\r\n\t<td>\\( \\Bbbk \\)<\/td><td><code>\\Bbbk<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ell \\)<\/td><td><code>\\ell<\/code><\/td>\r\n\t<td>\\( \\Finv \\)<\/td><td><code>\\Finv<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eth \\)<\/td><td><code>\\eth<\/code><\/td>\r\n\t<td>\\( \\Game \\)<\/td><td><code>\\Game<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\hbar \\)<\/td><td><code>\\hbar<\/code><\/td>\r\n\t<td>\\( \\Im \\)<\/td><td><code>\\Im<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\hslash \\)<\/td><td><code>\\hslash<\/code><\/td>\r\n\t<td>\\( \\Re \\)<\/td><td><code>\\Re<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\# \\)<\/td><td><code>\\#<\/code><\/td>\r\n\t<td>\\( \\infty \\)<\/td><td><code>\\infty<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\angle \\)<\/td><td><code>\\angle<\/code><\/td>\r\n\t<td>\\( \\lozenge \\)<\/td><td><code>\\lozenge<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\backprime \\)<\/td><td><code>\\backprime<\/code><\/td>\r\n\t<td>\\( \\measuredangle \\)<\/td><td><code>\\measuredangle<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bigstar \\)<\/td><td><code>\\bigstar<\/code><\/td>\r\n\t<td>\\( \\nabla \\)<\/td><td><code>\\nabla<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacklozenge \\)<\/td><td><code>\\blacklozenge<\/code><\/td>\r\n\t<td>\\( \\natural \\)<\/td><td><code>\\natural<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacksquare \\)<\/td><td><code>\\blacksquare<\/code><\/td>\r\n\t<td>\\( \\neg \\)<\/td><td><code>\\neg<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacktriangle \\)<\/td><td><code>\\blacktriangle<\/code><\/td>\r\n\t<td>\\( \\nexists \\)<\/td><td><code>\\nexists<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacktriangledown \\)<\/td><td><code>\\blacktriangledown<\/code><\/td>\r\n\t<td>\\( \\prime \\)<\/td><td><code>\\prime<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bot \\)<\/td><td><code>\\bot<\/code><\/td>\r\n\t<td>\\( \\S \\)<\/td><td><code>\\S<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\clubsuit \\)<\/td><td><code>\\clubsuit<\/code><\/td>\r\n\t<td>\\( \\sharp \\)<\/td><td><code>\\sharp<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\diagdown \\)<\/td><td><code>\\diagdown<\/code><\/td>\r\n\t<td>\\( \\spadesuit \\)<\/td><td><code>\\spadesuit<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\diagup \\)<\/td><td><code>\\diagup<\/code><\/td>\r\n\t<td>\\( \\sphericalangle \\)<\/td><td><code>\\sphericalangle<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\diamondsuit \\)<\/td><td><code>\\diamondsuit<\/code><\/td>\r\n\t<td>\\( \\square p \\)<\/td><td><code>\\square p<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\emptyset \\)<\/td><td><code>\\emptyset<\/code><\/td>\r\n\t<td>\\( \\surd \\)<\/td><td><code>\\surd<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\exists \\)<\/td><td><code>\\exists<\/code><\/td>\r\n\t<td>\\( \\top \\)<\/td><td><code>\\top<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\flat \\)<\/td><td><code>\\flat<\/code><\/td>\r\n\t<td>\\( \\triangle \\)<\/td><td><code>\\triangle<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\forall \\)<\/td><td><code>\\forall<\/code><\/td>\r\n\t<td>\\( \\triangledown \\)<\/td><td><code>\\triangledown<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\heartsuit \\)<\/td><td><code>\\heartsuit<\/code><\/td>\r\n\t<td>\\( \\varnothing \\)<\/td><td><code>\\varnothing<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Level 2 &ndash; Functions<\/h2>\r\n\r\n<p>Contains the big symbols and functions we&rsquo;ve discussed, with those fancy subscripts and superscripts. Nothing new here, let&rsquo;s continue!<\/p>\r\n\r\n<h2>Level 3 &ndash; Binary Operators<\/h2>\r\n\r\n<p>Binary operators perform an operation using the two letters\/symbols around it, which means there&rsquo;s not much space around them.<\/p>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( * \\)<\/td><td><code>*<\/code><\/td>\r\n\t<td>\\( \\divideontimes \\)<\/td><td><code>\\divideontimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( + \\)<\/td><td><code>+<\/code><\/td>\r\n\t<td>\\( \\dotplus \\)<\/td><td><code>\\dotplus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( - \\)<\/td><td><code>-<\/code><\/td>\r\n\t<td>\\( \\doublebarwedge \\)<\/td><td><code>\\doublebarwedge<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\amalg \\)<\/td><td><code>\\amalg<\/code><\/td>\r\n\t<td>\\( \\gtrdot \\)<\/td><td><code>\\gtrdot<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ast \\)<\/td><td><code>\\ast<\/code><\/td>\r\n\t<td>\\( \\intercal \\)<\/td><td><code>\\intercal<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\barwedge \\)<\/td><td><code>\\barwedge<\/code><\/td>\r\n\t<td>\\( \\leftthreetimes \\)<\/td><td><code>\\leftthreetimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bigcirc \\)<\/td><td><code>\\bigcirc<\/code><\/td>\r\n\t<td>\\( \\lessdot \\)<\/td><td><code>\\lessdot<\/code><\/td><\/tr>\r\n\t\r\n\t<tr><td>\\( \\bigtriangledown \\)<\/td><td><code>\\bigtriangledown<\/code><\/td>\r\n\t<td>\\( \\ltimes \\)<\/td><td><code>\\ltimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bigtriangleup \\)<\/td><td><code>\\bigtriangleup<\/code><\/td>\r\n\t<td>\\( \\mp \\)<\/td><td><code>\\mp<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\boxdot \\)<\/td><td><code>\\boxdot<\/code><\/td>\r\n\t<td>\\( \\odot \\)<\/td><td><code>\\odot<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\boxminus \\)<\/td><td><code>\\boxminus<\/code><\/td>\r\n\t<td>\\( \\ominus \\)<\/td><td><code>\\ominus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\boxplus \\)<\/td><td><code>\\boxplus<\/code><\/td>\r\n\t<td>\\( \\oplus \\)<\/td><td><code>\\oplus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\boxtimes \\)<\/td><td><code>\\boxtimes<\/code><\/td>\r\n\t<td>\\( \\oslash \\)<\/td><td><code>\\oslash<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bullet \\)<\/td><td><code>\\bullet<\/code><\/td>\r\n\t<td>\\( \\otimes \\)<\/td><td><code>\\otimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\cap \\)<\/td><td><code>\\cap<\/code><\/td>\r\n\t<td>\\( \\pm \\)<\/td><td><code>\\pm<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\Cap \\)<\/td><td><code>\\Cap<\/code><\/td>\r\n\t<td>\\( \\rightthreetimes \\)<\/td><td><code>\\rightthreetimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\cdot \\)<\/td><td><code>\\cdot<\/code><\/td>\r\n\t<td>\\( \\rtimes \\)<\/td><td><code>\\rtimes<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\centerdot \\)<\/td><td><code>\\centerdot<\/code><\/td>\r\n\t<td>\\( \\setminus \\)<\/td><td><code>\\setminus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circ \\)<\/td><td><code>\\circ<\/code><\/td>\r\n\t<td>\\( \\smallsetminus \\)<\/td><td><code>\\smallsetminus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circledast \\)<\/td><td><code>\\circledast<\/code><\/td>\r\n\t<td>\\( \\sqcap \\)<\/td><td><code>\\sqcap<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circledcirc \\)<\/td><td><code>\\circledcirc<\/code><\/td>\r\n\t<td>\\( \\sqcup \\)<\/td><td><code>\\sqcup<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circleddash \\)<\/td><td><code>\\circleddash<\/code><\/td>\r\n\t<td>\\( \\star \\)<\/td><td><code>\\star<\/code><\/td><\/tr>\r\n\t\r\n\t<tr><td>\\( \\cup \\)<\/td><td><code>\\cup<\/code><\/td>\r\n\t<td>\\( \\times \\)<\/td><td><code>\\times<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Cup \\)<\/td><td><code>\\Cup<\/code><\/td>\r\n\t<td>\\( \\triangleleft \\)<\/td><td><code>\\triangleleft<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curlyvee \\)<\/td><td><code>\\curlyvee<\/code><\/td>\r\n\t<td>\\( \\triangleright \\)<\/td><td><code>\\triangleright<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curlywedge \\)<\/td><td><code>\\curlywedge<\/code><\/td>\r\n\t<td>\\( \\uplus \\)<\/td><td><code>\\uplus<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\dagger \\)<\/td><td><code>\\dagger<\/code><\/td>\r\n\t<td>\\( \\vee \\)<\/td><td><code>\\vee<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ddagger \\)<\/td><td><code>\\ddagger<\/code><\/td>\r\n\t<td>\\( \\veebar \\)<\/td><td><code>\\veebar<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\diamond \\)<\/td><td><code>\\diamond<\/code><\/td>\r\n\t<td>\\( \\wedge \\)<\/td><td><code>\\wedge<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\div \\)<\/td><td><code>\\div<\/code><\/td>\r\n\t<td>\\( \\wr \\)<\/td><td><code>\\wr<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Level 4 &ndash; Relations<\/h2>\r\n\r\n<p>Relational operators define a relationship between what&rsquo;s around it, such as equality or a specific inequality. They also contain the symbols often used for displaying relationships &ndash; arrows.<\/p>\r\n\r\n<h5>Relational\/Comparison Operators<\/h5>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( &lt; \\)<\/td><td><code>&lt;<\/code><\/td><td>\\( \\lll \\)<\/td><td><code>\\lll<\/code><\/td><\/tr>\r\n\t<tr><td>\\( = \\)<\/td><td><code>=<\/code><\/td><td>\\( \\lnapprox \\)<\/td><td><code>\\lnapprox<\/code><\/td><\/tr>\r\n\t<tr><td>\\( &gt; \\)<\/td><td><code>&gt;<\/code><\/td><td>\\( \\lneq \\)<\/td><td><code>\\lneq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\approx \\)<\/td><td><code>\\approx<\/code><\/td><td>\\( \\lneqq \\)<\/td><td><code>\\lneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\approxeq \\)<\/td><td><code>\\approxeq<\/code><\/td><td>\\( \\lnsim \\)<\/td><td><code>\\lnsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\asymp \\)<\/td><td><code>\\asymp<\/code><\/td><td>\\( \\lvertneqq \\)<\/td><td><code>\\lvertneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\backsim \\)<\/td><td><code>\\backsim<\/code><\/td><td>\\( \\ncong \\)<\/td><td><code>\\ncong<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\backsimeq \\)<\/td><td><code>\\backsimeq<\/code><\/td><td>\\( \\neq \\)<\/td><td><code>\\neq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bumpeq \\)<\/td><td><code>\\bumpeq<\/code><\/td><td>\\( \\ngeq \\)<\/td><td><code>\\ngeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Bumpeq \\)<\/td><td><code>\\Bumpeq<\/code><\/td><td>\\( \\ngeqq \\)<\/td><td><code>\\ngeqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circeq \\)<\/td><td><code>\\circeq<\/code><\/td><td>\\( \\ngeqslant \\)<\/td><td><code>\\ngeqslant<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\cong \\)<\/td><td><code>\\cong<\/code><\/td><td>\\( \\ngtr \\)<\/td><td><code>\\ngtr<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curlyeqprec \\)<\/td><td><code>\\curlyeqprec<\/code><\/td><td>\\( \\nleq \\)<\/td><td><code>\\nleq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curlyeqsucc \\)<\/td><td><code>\\curlyeqsucc<\/code><\/td><td>\\( \\nleqq \\)<\/td><td><code>\\nleqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\doteq \\)<\/td><td><code>\\doteq<\/code><\/td><td>\\( \\nleqslant \\)<\/td><td><code>\\nleqslant<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\doteqdot \\)<\/td><td><code>\\doteqdot<\/code><\/td><td>\\( \\nless \\)<\/td><td><code>\\nless<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eqcirc \\)<\/td><td><code>\\eqcirc<\/code><\/td><td>\\( \\nprec \\)<\/td><td><code>\\nprec<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eqsim \\)<\/td><td><code>\\eqsim<\/code><\/td><td>\\( \\npreceq \\)<\/td><td><code>\\npreceq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eqslantgtr \\)<\/td><td><code>\\eqslantgtr<\/code><\/td><td>\\( \\nsim \\)<\/td><td><code>\\nsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\eqslantless \\)<\/td><td><code>\\eqslantless<\/code><\/td><td>\\( \\nsucc \\)<\/td><td><code>\\nsucc<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\equiv \\)<\/td><td><code>\\equiv<\/code><\/td><td>\\( \\nsucceq \\)<\/td><td><code>\\nsucceq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\fallingdotseq \\)<\/td><td><code>\\fallingdotseq<\/code><\/td><td>\\( \\prec \\)<\/td><td><code>\\prec<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\geq \\)<\/td><td><code>\\geq<\/code><\/td><td>\\( \\precapprox \\)<\/td><td><code>\\precapprox<\/code><\/td><\/tr>\r\n\r\n\t<tr><td>\\( \\geqq \\)<\/td><td><code>\\geqq<\/code><\/td><td>\\( \\preccurlyeq \\)<\/td><td><code>\\preccurlyeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\geqslant \\)<\/td><td><code>\\geqslant<\/code><\/td><td>\\( \\preceq \\)<\/td><td><code>\\preceq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gg \\)<\/td><td><code>\\gg<\/code><\/td><td>\\( \\precnapprox \\)<\/td><td><code>\\precnapprox<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ggg \\)<\/td><td><code>\\ggg<\/code><\/td><td>\\( \\precneqq \\)<\/td><td><code>\\precneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gnapprox \\)<\/td><td><code>\\gnapprox<\/code><\/td><td>\\( \\precnsim \\)<\/td><td><code>\\precnsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gneq \\)<\/td><td><code>\\gneq<\/code><\/td><td>\\( \\precsim \\)<\/td><td><code>\\precsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gneqq \\)<\/td><td><code>\\gneqq<\/code><\/td><td>\\( \\risingdotseq \\)<\/td><td><code>\\risingdotseq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gnsim \\)<\/td><td><code>\\gnsim<\/code><\/td><td>\\( \\sim \\)<\/td><td><code>\\sim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gtrapprox \\)<\/td><td><code>\\gtrapprox<\/code><\/td><td>\\( \\simeq \\)<\/td><td><code>\\simeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gtreqless \\)<\/td><td><code>\\gtreqless<\/code><\/td><td>\\( \\succ \\)<\/td><td><code>\\succ<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gtreqqless \\)<\/td><td><code>\\gtreqqless<\/code><\/td><td>\\( \\succapprox \\)<\/td><td><code>\\succapprox<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gtrless \\)<\/td><td><code>\\gtrless<\/code><\/td><td>\\( \\succcurlyeq \\)<\/td><td><code>\\succcurlyeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gtrsim \\)<\/td><td><code>\\gtrsim<\/code><\/td><td>\\( \\succeq \\)<\/td><td><code>\\succeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\gvertneqq \\)<\/td><td><code>\\gvertneqq<\/code><\/td><td>\\( \\succnapprox \\)<\/td><td><code>\\succnapprox<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leq \\)<\/td><td><code>\\leq<\/code><\/td><td>\\( \\succneqq \\)<\/td><td><code>\\succneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leqq \\)<\/td><td><code>\\leqq<\/code><\/td><td>\\( \\succnsim \\)<\/td><td><code>\\succnsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leqslant \\)<\/td><td><code>\\leqslant<\/code><\/td><td>\\( \\succsim \\)<\/td><td><code>\\succsim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\lessapprox \\)<\/td><td><code>\\lessapprox<\/code><\/td><td>\\( \\thickapprox \\)<\/td><td><code>\\thickapprox<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\lesseqgtr \\)<\/td><td><code>\\lesseqgtr<\/code><\/td><td>\\( \\thicksim \\)<\/td><td><code>\\thicksim<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\lesseqqgtr \\)<\/td><td><code>\\lesseqqgtr<\/code><\/td><td>\\( \\triangleq \\)<\/td><td><code>\\triangleeq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\lessgtr \\)<\/td><td><code>\\lessgtr<\/code><\/td><td><\/td><td><\/td><\/tr>\r\n\t<tr><td>\\( \\lesssim \\)<\/td><td><code>\\lesssim<\/code><\/td><td><\/td><td><\/td><\/tr>\r\n\t<tr><td>\\( \\ll \\)<\/td><td><code>\\ll<\/code><\/td><td><\/td><td><\/td><\/tr>\r\n<\/table>\r\n\r\n<h5>Arrows<\/h5>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\circlearrowleft \\)<\/td><td><code>\\circlearrowleft<\/code><\/td><td>\\( \\Lsh \\)<\/td><td><code>\\Lsh<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\circlearrowright \\)<\/td><td><code>\\circlearrowright<\/code><\/td><td>\\( \\mapsto \\)<\/td><td><code>\\mapsto<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curvearrowleft \\)<\/td><td><code>\\curvearrowleft<\/code><\/td><td>\\( \\multimap \\)<\/td><td><code>\\multimap<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\curvearrowright \\)<\/td><td><code>\\curvearrowright<\/code><\/td><td>\\( \\nLeftarrow \\)<\/td><td><code>\\nLeftarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\downdownarrows \\)<\/td><td><code>\\downdownarrows<\/code><\/td><td>\\( \\nLeftrightarrow \\)<\/td><td><code>nLeftrightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\downharpoonleft \\)<\/td><td><code>\\downharpoonleft<\/code><\/td><td>\\( \\nRightarrow \\)<\/td><td><code>\\nRightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\downharpoonright \\)<\/td><td><code>\\downharpoonright<\/code><\/td><td>\\( \\nearrow \\)<\/td><td><code>\\nearrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\hookleftarrow \\)<\/td><td><code>\\hookleftarrow<\/code><\/td><td>\\( \\nleftarrow \\)<\/td><td><code>\\nleftarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\hookrightarrow \\)<\/td><td><code>\\hookrightarrow<\/code><\/td><td>\\( \\nleftrightarrow \\)<\/td><td><code>\\nleftrightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftarrow \\)<\/td><td><code>\\leftarrow<\/code><\/td><td>\\( \\nrightarrow \\)<\/td><td><code>\\nrightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Leftarrow \\)<\/td><td><code>\\Leftarrow<\/code><\/td><td>\\( \\nwarrow \\)<\/td><td><code>\\nwarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftarrowtail \\)<\/td><td><code>\\leftarrowtail<\/code><\/td><td>\\( \\rightarrow \\)<\/td><td><code>\\rightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftharpoondown \\)<\/td><td><code>\\leftharpoondown<\/code><\/td><td>\\( \\Rightarrow \\)<\/td><td><code>\\Rightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftharpoonup \\)<\/td><td><code>\\leftharpoonup<\/code><\/td><td>\\( \\rightarrowtail \\)<\/td><td><code>\\rightarrowtail<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftleftarrows \\)<\/td><td><code>\\leftleftarrows<\/code><\/td><td>\\( \\rightharpoondown \\)<\/td><td><code>\\rightharpoondown<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftrightarrow \\)<\/td><td><code>\\leftrightarrow<\/code><\/td><td>\\( \\rightharpoonup \\)<\/td><td><code>\\rightharpoonup<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Leftrightarrow \\)<\/td><td><code>\\Leftrightarrow<\/code><\/td><td>\\( \\rightleftarrows \\)<\/td><td><code>\\rightleftarrows<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftrightarrows \\)<\/td><td><code>\\leftrightarrows<\/code><\/td><td>\\( \\rightleftharpoons \\)<\/td><td><code>\\rightleftharpoons<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftrightharpoons \\)<\/td><td><code>\\leftrightharpoons<\/code><\/td><td>\\( \\rightrightarrows \\)<\/td><td><code>\\rightrightarrows<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\leftrightsquigarrow \\)<\/td><td><code>\\leftrightsquigarrow<\/code><\/td><td>\\( \\rightsquigarrow \\)<\/td><td><code>\\rightsquigarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Lleftarrow \\)<\/td><td><code>\\Lleftarrow<\/code><\/td><td>\\( \\Rrightarrow \\)<\/td><td><code>\\Rrightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\longleftarrow \\)<\/td><td><code>\\longleftarrow<\/code><\/td><td>\\( \\Rsh \\)<\/td><td><code>\\Rsh<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Longleftarrow \\)<\/td><td><code>\\Longleftarrow<\/code><\/td><td>\\( \\searrow \\)<\/td><td><code>\\searrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\longleftrightarrow  \\)<\/td><td><code>\\longleftrightarrow <\/code><\/td><td>\\( \\swarrow \\)<\/td><td><code>\\swarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Longleftrightarrow \\)<\/td><td><code>\\Longleftrightarrow<\/code><\/td><td>\\( \\twoheadleftarrow \\)<\/td><td><code>\\twoheadleftarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\longmapsto \\)<\/td><td><code>\\longmapsto<\/code><\/td><td>\\( \\twoheadrightarrow \\)<\/td><td><code>\\twoheadrightarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\longrightarrow \\)<\/td><td><code>\\longrightarrow<\/code><\/td><td>\\( \\upharpoonleft \\)<\/td><td><code>\\upharpoonleft<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Longrightarrow \\)<\/td><td><code>\\Longrightarrow<\/code><\/td><td>\\( \\upharpoonright \\)<\/td><td><code>\\upharpoonright<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\looparrowleft \\)<\/td><td><code>\\looparrowleft<\/code><\/td><td>\\( \\upuparrows \\)<\/td><td><code>\\upuparrows<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\looparrowright \\)<\/td><td><code>\\looparrowright<\/code><\/td><td><\/td><td><\/td><\/tr>\r\n<\/table>\r\n\r\n<h5>Others<\/h5>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\backepsilon \\)<\/td><td><code>\\backepsilon<\/code><\/td><td>\\( \\smallfrown \\)<\/td><td><code>\\smallfrown<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\because \\)<\/td><td><code>\\because<\/code><\/td><td>\\( \\smallsmile \\)<\/td><td><code>\\smallsmile<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\between \\)<\/td><td><code>\\between<\/code><\/td><td>\\( \\smile \\)<\/td><td><code>\\smile<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacktriangleleft \\)<\/td><td><code>\\blacktriangleleft<\/code><\/td><td>\\( \\sqsubset \\)<\/td><td><code>\\sqsubset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\blacktriangleright \\)<\/td><td><code>\\blacktriangleright<\/code><\/td><td>\\( \\sqsubseteq \\)<\/td><td><code>\\sqsubseteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\bowtie \\)<\/td><td><code>\\bowtie<\/code><\/td><td>\\( \\sqsupset \\)<\/td><td><code>\\sqsupset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\dashv \\)<\/td><td><code>\\dashv<\/code><\/td><td>\\( \\sqsupseteq \\)<\/td><td><code>\\sqsupseteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\frown \\)<\/td><td><code>\\frown<\/code><\/td><td>\\( \\subset \\)<\/td><td><code>\\subset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\in \\)<\/td><td><code>\\in<\/code><\/td><td>\\( \\Subset \\)<\/td><td><code>\\Subset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\mid \\)<\/td><td><code>\\mid<\/code><\/td><td>\\( \\subseteq \\)<\/td><td><code>\\subseteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\models \\)<\/td><td><code>\\models<\/code><\/td><td>\\( \\subseteqq \\)<\/td><td><code>\\subseteqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ni \\)<\/td><td><code>\\ni<\/code><\/td><td>\\( \\subsetneq \\)<\/td><td><code>\\subsetneq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nmid \\)<\/td><td><code>\\nmid<\/code><\/td><td>\\( \\subsetneqq \\)<\/td><td><code>\\subsetneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\notin \\)<\/td><td><code>\\notin<\/code><\/td><td>\\( \\supset \\)<\/td><td><code>\\supset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nparallel \\)<\/td><td><code>\\nparallel<\/code><\/td><td>\\( \\Supset \\)<\/td><td><code>\\Supset<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nshortmid \\)<\/td><td><code>\\nshortmid<\/code><\/td><td>\\( \\supseteq \\)<\/td><td><code>\\supseteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nshortparallel \\)<\/td><td><code>\\nshortparallel<\/code><\/td><td>\\( \\supseteqq \\)<\/td><td><code>\\supseteqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nsubseteq \\)<\/td><td><code>\\nsubseteq<\/code><\/td><td>\\( \\supsetneq \\)<\/td><td><code>\\supsetneq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nsubseteqq \\)<\/td><td><code>\\nsubseteqq<\/code><\/td><td>\\( \\supsetneqq \\)<\/td><td><code>\\supsetneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nsupseteq \\)<\/td><td><code>\\nsupseteq<\/code><\/td><td>\\( \\therefore \\)<\/td><td><code>\\therefore<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nsupseteqq \\)<\/td><td><code>\\nsupseteqq<\/code><\/td><td>\\( \\trianglelefteq \\)<\/td><td><code>\\trianglelefteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ntriangleleft \\)<\/td><td><code>\\ntriangleleft<\/code><\/td><td>\\( \\trianglerighteq \\)<\/td><td><code>\\trianglerighteq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ntrianglelefteq \\)<\/td><td><code>\\ntrianglelefteq<\/code><\/td><td>\\( \\varpropto \\)<\/td><td><code>\\varpropto<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ntriangleright \\)<\/td><td><code>\\ntriangleright<\/code><\/td><td>\\( \\varsubsetneq \\)<\/td><td><code>\\varsubsetneq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\ntrianglerighteq \\)<\/td><td><code>\\ntrianglerighteq<\/code><\/td><td>\\( \\varsubsetneqq \\)<\/td><td><code>\\varsubsetneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nvdash \\)<\/td><td><code>\\nvdash<\/code><\/td><td>\\( \\varsupsetneq \\)<\/td><td><code>\\varsupsetneq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nVdash \\)<\/td><td><code>\\nVdash<\/code><\/td><td>\\( \\varsupsetneqq \\)<\/td><td><code>\\varsupsetneqq<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nvDash \\)<\/td><td><code>\\nvDash<\/code><\/td><td>\\( \\vartriangle \\)<\/td><td><code>\\vartriangle<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\nVDash \\)<\/td><td><code>\\nVDash<\/code><\/td><td>\\( \\vartriangleleft \\)<\/td><td><code>\\vartriangleleft<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\parallel \\)<\/td><td><code>\\parallel<\/code><\/td><td>\\( \\vartriangleright \\)<\/td><td><code>\\vartriangleright<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\perp \\)<\/td><td><code>\\perp<\/code><\/td><td>\\( \\vdash \\)<\/td><td><code>\\vdash<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\pitchfork \\)<\/td><td><code>\\pitchfork<\/code><\/td><td>\\( \\Vdash \\)<\/td><td><code>\\Vdash<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\propto \\)<\/td><td><code>\\propto<\/code><\/td><td>\\( \\vDash \\)<\/td><td><code>\\vDash<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\shortmid \\)<\/td><td><code>\\shortmid<\/code><\/td><td>\\( \\Vvdash \\)<\/td><td><code>\\Vvdash<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\shortparallel \\)<\/td><td><code>\\shortparallel<\/code><\/td><td><\/td><td><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Level 5 &amp; 6 &ndash; Left\/Open and Right\/Close Operators<\/h2>\r\n\r\n<p>We&rsquo;ve already discussed these in depth in the <em>Delimiters<\/em> chapter. The only thing new here is vertical arrows that have the ability to scale with whatever they are around.<\/p>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\uparrow \\)<\/td><td><code>\\uparrow<\/code><\/td>\r\n\t<td>\\( \\Downarrow \\)<\/td><td><code>\\Downarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\Uparrow \\)<\/td><td><code>\\uparrow<\/code><\/td>\r\n\t<td>\\( \\updownarrow \\)<\/td><td><code>\\updownarrow<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\downarrow \\)<\/td><td><code>\\downarrow<\/code><\/td>\r\n\t<td>\\( \\Updownarrow \\)<\/td><td><code>\\Updownarrow<\/code><\/td><\/tr>\r\n<\/table>\r\n\r\n<h2>Level 7 &ndash; Punctuation Symbols<\/h2>\r\n\r\n<p>This level, not surprisingly, contains all regular symbols used for punctuation. On top of that, there are some commands that generate dots, which are more useful than you think.<\/p>\r\n\r\n<table class=\"donthyphenate\">\r\n\t<tr><td>Visual<\/td><td>Command<\/td><td>Visual<\/td><td>Command<\/td><\/tr>\r\n\t<tr><td>\\( \\dotsb \\)<\/td><td><code>\\dotsb<\/code><\/td>\r\n\t<td>\\( \\ddots \\)<\/td><td><code>\\ddots<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\vdots \\)<\/td><td><code>\\vdots<\/code><\/td>\r\n\t<td>\\( \\dotsc \\)<\/td><td><code>\\dotsc<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\dotsi \\)<\/td><td><code>\\dotsi<\/code><\/td>\r\n\t<td>\\( \\dotsm \\)<\/td><td><code>\\dotsm<\/code><\/td><\/tr>\r\n\t<tr><td>\\( \\dotso \\)<\/td><td><code>\\dotso<\/code><\/td>\r\n\t<td><\/td><td><\/td><\/tr>\r\n<\/table>\r\n\r\n<script type=\"text\/javascript\" src=\"MathJax\/MathJax.js?config=TeX-AMS-MML_SVG\"><\/script>","slur":"latex-math-symbols","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"4","quiz":""},
{"id":"299","title":"[LaTeX] Theorems & Proofs","post":"<p>Until now we&rsquo;ve been doing everything inside math environments &ndash; which isn&rsquo;t weird for a LaTeX Math course &ndash; but now it&rsquo;s time to step out of it, and look at mathematical concepts that don&rsquo;t necessarily need to be formulas or equations. I&rsquo;m talking about all of these: <strong>theorems<\/strong>, <strong>lemmas<\/strong>, <strong>corollaries<\/strong>, <strong>remarks<\/strong>, <strong>definitions<\/strong>, and <strong>proofs<\/strong>.<\/p> \r\n\r\n<h2>General Syntax<\/h2>\r\n\r\n<p>To create these different types of mathematical paragraphs, a single command is available in standard LaTeX. This command simply creates an environment for this type, and you can use some extra arguments to customize them. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newtheorem{<em>environment name<\/em>}{<em>environment text<\/em>}[<em>reset<\/em> <em>counter<\/em>]<\/code><\/p>\r\n\r\n<p>The first argument specifies the name of the environment you want to use. The standard name, such as <em>theorem<\/em> or <em>lemma<\/em> will do.<\/p>\r\n\r\n<p>The second argument specifies what text is automatically displayed at the start of the environment. Again, the standard text (in your document&rsquo;s language) will do.<\/p>\r\n\r\n<p>The third argument is optional, and requires the name of an existing counter. Every theorem environment receives its own independent counter, but every time the <em>reset counter<\/em> is incremented, this theorem counter is reset. This way, for example, you can number your theorems starting from one in every section, by using <em>section<\/em> as the reset counter.<\/p>\r\n\r\n<h2>Applying the Syntax<\/h2>\r\n\r\n<p>This way, you can create all those mathematical constructs I mentioned at the start of the chapter. Simply define your theorem, and start a new environment of the same name. Additionally, every theorem environment can receive an optional argument that specifies the title of your theorem.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\newtheorem{theorem}{THEOREM}[section]\r\n\\newtheorem{lemma}{LEMMA}[theorem]\r\n\r\n\\begin{document}\r\n\r\n\\section{Chapter 1}\r\n\\begin{theorem}[Pythagorean Theorem]\r\n    It's simply $a^2 + b^2 = c^2$\r\n\\end{theorem}\r\n\r\n\\begin{lemma}\r\n    Some trivial lemma here.\r\n\\end{lemma}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathTheoremsBasics.png\" \/><\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Because each theorem environment receives its own counter, you can use those as reset counters as well in subsequent new theorems you define!<\/p>\r\n\r\n<h2>Customizing the Layout<\/h2>\r\n\r\n<p>All these environments are typeset the same: the <em>environment text<\/em>, and optionally the <em>title<\/em>, are bold, while all the text inside is in italics. If you want to modify this, you&rsquo;ll need to use the last of the AMS packages: <code>amsthm<\/code> (<em>AMS theorems<\/em>). This provides two important functionalities: unnumbered theorem environments, and predefined styles for each type of environment.<\/p>\r\n\r\n<h5>Unnumbered Environments<\/h5>\r\n\r\n<p>To create unnumbered environments, simply use the star variation of the command:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newtheorem*{<em>name<\/em>}{<em>text<\/em>}[<em>reset<\/em>]<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{amsthm}\r\n\r\n\\newtheorem*{theorem}{THEOREM}\r\n\r\n\\begin{document}\r\n\\begin{theorem}[Pythagorean Theorem]\r\n    It's simply $a^2 + b^2 = c^2$\r\n\\end{theorem}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathUnnumberedTheorems.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h5>Theorem Styles<\/h5>\r\n\r\n<p>To give a theorem environment a certain style, use this command before you define the theorem:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\theoremstyle{<em>type of theorem<\/em>}<\/code><\/p>\r\n\r\n<p>The AMS theorems package has predefined styles for every type, which are often exactly what you need, and are in some way the universal notation.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\usepackage{amsthm}\r\n\r\n\\theoremstyle{theorem}\r\n\\newtheorem*{theorem}{Theorem}\r\n\\theoremstyle{remark}\r\n\\newtheorem*{remark}{Remark}\r\n\r\n\\begin{document}\r\n\\begin{theorem}[Pythagorean Theorem]\r\n    It's simply $a^2 + b^2 = c^2$\r\n\\end{theorem}\r\n\r\n\\begin{remark}\r\n    Some trivial remark.\r\n\\end{remark}\r\n\\end{document}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathTheoremStyles.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Proofs<\/h2>\r\n\r\n<p>Proofs are essentially no different from everything discussed thus far &ndash; they are also created by simply using the <code>proof<\/code> environment &ndash; but are naturally supported by the AMS package. This means you don&rsquo;t have to define them yourself, and the already have the correct style. On top of that, a square is added at the end of every proof. This is the QED symbol that demonstrates a proof is complete. To change this, renew the <code>\\qedsymbol<\/code> command.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\renewcommand{\\qedsymbol}{$\\heartsuit$}\r\n\\begin{proof}\r\n\r\n Assume that in fact $\\cup_{A \\in F} A$ is negligible for any such~$F$.  \r\n Then the family of {\\em all}\\\/ negligible subsets of~$[0,1]$ would satisfy the hypotheses of Zorn's Lemma! \r\n There would then be a maximal negligible subset. But this is absurd. \r\n Indeed, suppose $S$\\\/ is a maximal negligible subset of~$[0,1]$.  \r\n If there were $x\\in [0,1]$ not contained in~$S$, then $S \\cup \\{x\\}$ would be a negligible subset of~$[0,1]$ strictly containing~$S$. \r\n Hence there is no such~$x$, and $S=[0,1]$. But it is known that $[0,1]$ is not negligible.\r\n \r\n\\end{proof}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathProofs.png\" \/><\/div>\r\n<\/div>\r\n","slur":"latex-theorems-proofs","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"3","quiz":""},
{"id":"300","title":"[LaTeX] Math Graphics","post":"<p>In the basic course we saw that the command for including a picture file, which could be a picture of mathematics of course, was <code>\\includegraphics<\/code>, which was slightly odd. LaTeX does have a simple <code>picture<\/code> environment, but because the language was meant to typeset pieces with heavy use of math, this environment is reserved for <em>mathematical graphics<\/em>.<\/p> \r\n\r\n<p>Within the <code>picture<\/code> environment, there&rsquo;s a small list of commands you can use to place different types of simply figures, which combined together can generate complex mathematical graphics. It isn&rsquo;t very difficult, it might just be a lot to take in at once. We&rsquo;ll start off simple.<\/p>\r\n\r\n<h2>Starting the Picture Environment<\/h2>\r\n\r\n<p>It&rsquo;s a regular environment, except for the fact that the arguments are supplied differently: with parentheses, instead of brackets. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">\b\\begin{picture}{<em>width<\/em>, <em>height<\/em>)(<em>xOffset<\/em>, <em>yOffset<\/em>)\r\n\t<em>picture commands &hellip;<\/em>\r\n\\end{picture}<\/code><\/p>\r\n\r\n<p>These arguments are <em>not<\/em> regular LaTeX numbers with units &ndash; they refer to the amount of units within the picture. To length that holds this information is <code>\\unitlength<\/code>, which you can change the way you&rsquo;re used to.<\/p>\r\n\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\unitlength}{4pt}\r\n\\begin{picture}(20,20)(0,0)\r\n    %Picture with width and height of 80pt\r\n    %But there's nothing in it yes, let's change that!\r\n\\end{picture}\r\n<\/pre>\r\n\r\n<p>NOTE: The <em>xOffset<\/em> and <em>yOffset<\/em> set the coordinates of the lower left corner of the picture. So, in the example, the point <em>(0,0)<\/em> is used for the lower left corner, which means any negative coordinates would not be visible inside the picture.<\/p>\r\n\r\n<h2>Putting Graphics on the Page<\/h2>\r\n\r\n<p>To put graphics on the page, three very important commands are available.<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\put(<em>x<\/em>, <em>y<\/em>){<em>object<\/em>}<\/code><\/p>\r\n\r\n<p>Places <em>object<\/em> at position (x,y). You&rsquo;ll learn about all the math objects soon.<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\multiput(<em>x<\/em>, <em>y<\/em>)(<em>deltaX<\/em>, <em>deltaY<\/em>){<em>n<\/em>}{<em>object<\/em>}<\/code><\/p>\r\n\r\n<p>Places <em>n<\/em> objects, starting at position (x,y), with <em>deltaX<\/em> and <em>deltaY<\/em> space between each object and the next.<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\qbezier(x<sub>1<\/sub>, y<sub>1<\/sub>) (x<sub>2<\/sub>, y<sub>2<\/sub>) (x<sub>3<\/sub>, y<sub>3<\/sub>)<\/code><\/p>\r\n\r\n<p>Places a quadratic Bezier curve using the three data points you provide. Mostly used for drawing graphs. These curves are, sadly enough, beyond the scope of this tutorial.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\unitlength}{4pt}\r\n\\begin{picture}(20,20)(0,0)\r\n    \\put(0,0){\\line(1,0){5}}\r\n    \\multiput(4,3)(1,1){10}{\\line(0,1){5}}\r\n\\end{picture}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathPicturePutting.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Changing Thickness<\/h2>\r\n\r\n<p>By default, lines have medium thickness. You can change this at any time, by adding one these commands. Such a command has effect until a next one is encountered.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\thicklines<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slightly thicker lines<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\thinlines<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Slightly thinner lines<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\linethickness{<em>length<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets a custom line thickness<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Math Objects<\/h2>\r\n\r\n<p>As promised, here&rsquo;s a list of all the math objects that can be placed within the picture:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Command<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\line(<em>x<\/em>, <em>y<\/em>){<em>length<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates a line with length <em>length<\/em>, with direction vector (<em>x,y<\/em>). A direction vector can only take integers.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\vector(<em>x, y<\/em>){<em>length<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Also creates a line, but with an arrow at the end.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\circle{<em>diameter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates a circle<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\circle*{<em>diameter<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates a filled circle (a <em>disk<\/em>).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\oval(<em>width<\/em>, <em>height<\/em>)[<em>position<\/em>]<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates an oval. The optional argument <em>position<\/em> can be top, right, bottom or left (<code>t<\/code>, <code>r<\/code>, <code>b<\/code>, <code>l<\/code>), and determines what part to show.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\frame{<em>&hellip;<\/em>}<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates a rectangular frame around the object that&rsquo;s inside, with no padding space.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em>Text or math<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>You can put any of the LaTeX you learned inside a picture &ndash; regular text and fancy math. This, however, only works for single lines.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\unitlength}{4pt}\r\n\\begin{picture}(20,20)(0,0)\r\n    \\put(0,0){The formula is $x^2 + y^2 = 4$}\r\n    \\put(8,8){\\circle{4}}\r\n    \\put(16,16){\\oval(6,6)[t]}\r\n    \\put(12,12){\\vector(1,0){10}}\r\n\\end{picture}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathPictureObjects.png\" \/><\/div>\r\n<\/div>\r\n\r\n<h2>Save Boxes<\/h2>\r\n\r\n<p>If you want to reuse a certain (complex) graphic multiple times in your picture, you can save it in a <em>save box<\/em>. This way you can put a graphic in the picture, just by referencing the name under which you saved it. This is a very powerful way of creating pictures, which greatly reduces the time it takes to create them.<\/p>\r\n\r\n<p>To declare a new save box, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\newsavebox{<em>name<\/em>}<\/code><\/p>\r\n\r\n<p>To define it, i.e., tell exactly what&rsquo;s inside, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\savebox{<em>name<\/em>}(<em>width<\/em>, <em>height<\/em>)[<em>position<\/em>]{<em>content<\/em>}<\/code><\/p>\r\n\r\n<p>Then, you can put it in your picture wherever you want, and as many times as you like, using<\/p>\r\n\r\n<p><code class=\"longsyntax\">\\usebox{<em>name<\/em>}<\/code><\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"tex\">\r\n\\setlength{\\unitlength}{4pt}\r\n\\begin{picture}(20,20)(0,0)\r\n    \\newsavebox{MYBOX}\r\n    \\savebox{MYBOX}(5,5)[l]{%\r\n        \\put(0,0){\\circle*{4}}\r\n        \\put(1,0){\\circle*{4}}\r\n    }\r\n    \\put(10,10){\\usebox{MYBOX}}\r\n\\end{picture}\r\n<\/pre>\r\n<div><img src=\"media\/LatexMathSaveBoxes.png\" \/><\/div>\r\n<\/div>","slur":"latex-math-graphics","cat":"Writing","subcat":"LaTeX Math","video":"","diff":"4","quiz":""},
{"id":"301","title":"Complete SVG Course","post":"<p>The acronym SVG stands for Scalable Vector Graphics, and has been a W3C recommendation for quite some time. This simply means that it is supported completely by all browsers, and integrates seamlessly with HTML. If you&rsquo;re looking to dynamically create graphics within the browser, this is probably just the thing for you!<\/p> \r\n\r\n<p>The name says it all: with SVG, you can easily create <em>vector graphics<\/em> (to be used) within webpages.<\/p>\r\n\r\n<p><em>What are Vector Graphics?<\/em> They are an alternative to the usual way images are created, which are what we call <em>bitmap images<\/em>. Bitmap images assign a colour to every pixel, and all pixels together create the image (if you don&rsquo;t look from too close).<\/p>\r\n\r\n<p>Vector images don&rsquo;t do this. Instead, they consist of multiple lines of code, which generate certain shapes. When a vector image is to be displayed, the browser reads the lines of code and generates the image from that. This sounds hard and slow, but it&rsquo;s actually very easy and extremely fast. This has two huge advantages: the image can be scaled infinitely, and the different elements within the picture can be accessed. For example, we could add a line of code that tells the browser to display a circle of certain width and colour. After the circle has first appeared, we can still access it to dynamically change its properties &ndash; we could, for instance, change the circle&rsquo;s colour when the user clicks a button.<\/p>\r\n\r\n<p><img src=\"media\/SVGBitmapvsVector.png\" \/><\/p>\r\n\r\n<p>The word <em>scalable<\/em> is actually redundant &ndash; the whole idea behind vector graphics is that they&rsquo;re infinitely scalable.<\/p>\r\n\r\n<p>Of course, the circle from our little example could easily have been achieved with some basic HTML and CSS. That&rsquo;s why most vector graphics consist of lots of groups containing so-called <em>basic shapes<\/em>, which, combined together, can make the most beautiful pictures. Most of this course is about how to create and modify those basic shapes. Nevertheless, you still need some basic HTML and CSS knowledge to get started with SVG, and some advanced knowledge if you really want to enrich your vector graphics and script them.<\/p>\r\n\r\n<p>NOTE: All icons on this website are SVG graphics. Most images within tutorials aren&rsquo;t, because they are often far too complex to transform into vector graphics, and I know the exact place and size I want to use them with. The icons, on the other hand, appear throughout the site at lots of different sizes and positions.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Displaying SVGs<\/li>\r\n\t<li>Coordinates &amp; Viewports<\/li>\r\n\t<li>Aspect Ratio &amp; Grouping<\/li>\r\n\t<li>Rectangles<\/li>\r\n\t<li>Circles &amp; Ellipses<\/li>\r\n\t<li>Lines, Polylines &amp; Polygons<\/li>\r\n\t<li>Paths<\/li>\r\n\t<li>Definitions &amp; Symbols<\/li>\r\n\t<li>Markers<\/li>\r\n\t<li>Text<\/li>\r\n\t<li>Switches, Links &amp; Images<\/li>\r\n\t<li>Gradients<\/li>\r\n\t<li>Masks<\/li>\r\n\t<li>Filters I<\/li>\r\n\t<li>Filters II<\/li>\r\n\t<li>Filters III<\/li>\r\n\t<li>Scripting &amp; Animation<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"complete-svg-course","cat":"Website","subcat":"SVG","video":"","diff":"1","quiz":""},
{"id":"302","title":"[SVG] Displaying SVGs","post":"<p>What&rsquo;s great about SVGs, is that they use <em>tags<\/em> for everything, exactly like HTML does. In fact, everything this course is going to discuss is simply an HTML tag with special, graphical function(s). There are only a few tags available in SVG, but each of them also accepts a multitude of <em>attributes<\/em> &ndash; such as, for example, <em>x-position<\/em>, <em>y-position<\/em> and <em>colour<\/em> &ndash; that allow you to create nearly anything you want. And that&rsquo;s exactly the way this course will be set up: each chapter introduces new tags with their own special attributes until we&rsquo;ve discussed everything there is to know.<\/p> \r\n\r\n<p>NOTE: The idea of using tags comes from a more general language called XML: Extensible Markup Language, which is the foundation for most web-based markup languages. If you want to know more about tags, you could take a look at that.<\/p>\r\n\r\n<h2>The svg Element<\/h2>\r\n\r\n<p>Because of this tags structure, we need an element to tell the browser an SVG element is coming. For this, we use the <code>&lt;svg&gt;<\/code> element, with the following standard syntax:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;svg xmlns=&rdquo;http:\/\/www.w3.org\/2000\/svg&rdquo; xmlns:xlink=&rdquo;http:\/\/www.w3.org\/1999\/xlink&rdquo;&gt;\r\n\t<em>&hellip; svg objects &hellip;<\/em>\r\n&lt;\/svg&gt;<\/code><\/p>\r\n\r\n<p>The two attributes in the starting tag are to tell the browser to parse whatever&rsquo;s inside as an SVG object, and not as regular XML. It&rsquo;s not always strictly necessary, but I recommend just including these attributes by default.<\/p>\r\n\r\n<h2>Displaying<\/h2>\r\n\r\n<p>The three ways to display an SVG are: <strong>inline<\/strong>, <strong>image<\/strong> and <strong>background-image<\/strong>.<\/p>\r\n\r\n<h3>Inline<\/h3>\r\n\r\n<p>You can, whenever you want, just include the <code>&lt;svg&gt;<\/code> element inside your HTML document. It&rsquo;s an element, just like paragraphs or headings in HTML, and will be interpreted correctly. This way, the SVG is hardcoded into the HTML file, and will display like it was an image file. By default, it scales to the full width and height of its parent container.<\/p>\r\n\r\n<p>The inline method has the advantage of allowing us access to the SVG with JavaScript, which we can use to make the graphic dynamic. It has the disadvantage that you can&rsquo;t reuse the code somewhere else without having to copy-paste it.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg xmlns=&#x22;http:\/\/www.w3.org\/2000\/svg&#x22; xmlns:xlink=&#x22;http:\/\/www.w3.org\/1999\/xlink&#x22;&#x3E;\r\n&#x9;&#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;40&#x22; height=&#x22;40&#x22; fill=&#x22;green&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\">\r\n\t<rect x=\"0\" y=\"0\" width=\"40\" height=\"40\" fill=\"green\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Image<\/h3>\r\n\r\n<p>Alternatively, you can save your <code>&lt;svg&gt;<\/code> markup within a text file, with extension <code>.svg<\/code>.<\/p>\r\n\r\n<p>Then, the regular <code>&lt;img \/&gt;<\/code> tag can display this SVG file for you, which is nothing different from displaying any other image file. To remind you, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;img src=&rdquo;<em>yourFile.svg<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The advantage here is that we can reuse the same graphic throughout the whole project, but the disadvantage is that it&rsquo;s loaded as an image file, which means we can&rsquo;t access its individual tags.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;img src=&#x22;icons\/SVG.svg&#x22; \/&#x3E;\r\n<\/pre>\r\n<div>\r\n<img style=\"max-height:50px !important;\" src=\"icons\/SVG.svg\" \/>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Background-Image<\/h3>\r\n\r\n<p>Similar to the previous method, you can use the <code>background-image<\/code> CSS property on an element to set the vector graphic as the background. To remind you, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">background-image:url(<em>yourFile.svg<\/em>)<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;div style=&#x22;background-image:url(icons\/SVG.svg)&#x22;&#x3E;&#x3C;\/div&#x3E;\r\n<\/pre>\r\n<div style=\"background-image:url(icons\/SVG.svg);\">\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: When you save your vector graphics inside a <code>.svg<\/code> file, you still need to put it inside an <code>&lt;svg&gt;<\/code> tag, because it needs to be interpreted as such. We&rsquo;ll also soon see that his tag has some very important attributes you&rsquo;ll often need.<\/p>\r\n\r\n<h2>Content Type<\/h2>\r\n\r\n<p>If you ever plan on serving SVG content from a different file than <code>.svg<\/code>, you need to set the Content-Type HTTP Header of the response to <code>image\/svg+xml<\/code>.<\/p>\r\n\r\n<p><em>What is this and why would I do that?<\/em> Well, it could happen that you have a PHP file reading data from a server, and generating a graphic based on that, which you need to display. The problem is that the browser doesn&rsquo;t interpret it correctly, because it comes from the wrong file type. This is fixed by telling the browser the type of content inside the file. Don&rsquo;t worry about it for now.<\/p>\r\n\r\n<h2>Quick (Important) Note<\/h2>\r\n\r\n<p>In case you hadn&rsquo;t figured it out yet: because SVG are tags, you can also use CSS to style them. You, however, can&rsquo;t use the normal HTML tags within an SVG graphic &ndash; the <code>&lt;svg&gt;<\/code> tag allows only its own special tags. It&rsquo;s also the other way around, as all the tags you&rsquo;ll learn here can <em>not<\/em> be used outside of an <code>&lt;svg&gt;<\/code> element.<\/p>\r\n","slur":"svg-displaying-vector-graphics","cat":"Website","subcat":"SVG","video":"","diff":"2","quiz":""},
{"id":"303","title":"[SVG] Coordinates & Viewports","post":"<p>Before we can start doing anything in the world of vector graphics, there are two important concepts to understand. It might seem boring to kick off this course with some dull theory, but if I&rsquo;d discussed them later, you&rsquo;d problem run into quite a lot of problems you didn&rsquo;t know how to fix.<\/p> \r\n\r\n<h2>Coordinates<\/h2>\r\n\r\n<p>The coordinate system from SVG is not like the one used in mathematics.<\/p>\r\n\r\n<p>In math, when drawing the graph of some function, we&rsquo;d use the <em>Cartesian coordinate system<\/em>. This means that the origin (the point <code>(0,0)<\/code>) is at the lower left corner, and if we move <em>upwards<\/em> we get higher y-values, and if we move to the right we get higher x-values.<\/p>\r\n\r\n<p>In SVG, however, and most other computer graphics systems, we use a mirrored version. Our origin is at the top left corner, and if we move <em>downwards<\/em> we get higher y-values.<\/p>\r\n\r\n<img src=\"media\/SVGCoordinateSystem.png\" \/>\r\n\r\n<p>Within this coordinate system, we can use regular CSS units to specify the sizes and positions of objects.<\/p>\r\n\r\n<p>Knowing this, we can see that negative values for position, be it the <em>x<\/em> or <em>y<\/em> value, are always outside of the picture. The reason it&rsquo;s done this way, is because web pages (and articles in print) extend downwards. A webpage places its first paragraph at the top, and moves the next one below it, and the next one below that. Using this inverted coordinate system for SVGs, our graphics will be part of the team, and behave like all the other HTML elements.<\/p>\r\n\r\n<p>If we were to use the Cartesian system for SVG graphics, we&rsquo;d run into all sorts of problems. We&rsquo;d need to calculate the height every time and offset it by that amount to prevent interfering with the text above, and we&rsquo;d need to think exactly the other way around when designing graphics for our web page layout. That&rsquo;s why it&rsquo;s not done this way.<\/p>\r\n\r\n<h2>What to Display?<\/h2>\r\n\r\n<p>I just stated that negative values are simply not within the picture frame, but, a vector graphic is infinitely scalable, so where <em>does<\/em> it end? How does the browser decide where to cut it off, and at what size to display it? Good questions!<\/p>\r\n\r\n<p>By default, SVG strictly uses the axes &ndash; which mark the transition between positive and negative numbers &ndash; as the left and top borders. For the right and bottom borders, the graphic grows to whatever size is necessary to display everything. For example, if the only thing inside your SVG is a circle at position <code>(5px,5px)<\/code> with radius <code>5px<\/code>, then your graphic will have width and height <code>5+5 = 10px<\/code>. Because SVG cuts off the graphic that precisely, it&rsquo;s default behaviour is to scale to the full width and height of its container parent.<\/p>\r\n\r\n<img src=\"media\/SVGElementSizing.png\" \/>\r\n\r\n<p>But, there will be times when you want full control over the width and height of the graphic, and what area to display. For this, we use something called a <strong>viewport<\/strong> and <strong>viewbox<\/strong>, respectively.<\/p>\r\n\r\n<h2>Viewport<\/h2>\r\n\r\n<p>The viewport means the exact size of the SVG graphic itself. With the <code><attr>width<\/attr>=&rdquo;<em>value<\/em>&rdquo;<\/code> and <code><attr>height<\/attr>=&rdquo;<em>value<\/em>&rdquo;<\/code> attributes we can set the size of the SVG element exactly. This doesn&rsquo;t scale the graphic to fit these dimensions, but it sets the element&rsquo;s dimensions within the webpage to this size, and displays only those objects that fall within this area. You can look at it as being the port through which you look into the SVG graphic&rsquo;s world.<\/p>\r\n\r\n<img src=\"media\/SVGViewPort.png\" \/>\r\n\r\n<p>If you <em>do<\/em> want the graphic to scale to fit with a fixed width and height, you can just use the CSS <code>width<\/code> and <code>height<\/code> properties on the element.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg width=&#x22;8&#x22;&#x3E;\r\n    &#x3C;circle cx=&#x22;10&#x22; cy=&#x22;10&#x22; r=&#x22;10&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg width=\"8\">\r\n    <circle cx=\"10\" cy=\"10\" r=\"10\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: If you don&rsquo;t specify units for these width\/height <em>values<\/em>, it defaults to pixels.<\/p>\r\n\r\n<h2>Viewbox<\/h2>\r\n\r\n<p>The determine what area we want to display, without saying anything about the element&rsquo;s dimensions, use the <code>viewbox<\/code> attribute. You need to specify a rectangle, which it uses to crop the graphic. Everything outside of the rectangle is discarded, and scaling the image (perhaps with CSS) simply means that everything inside the <em>viewbox rectangle<\/em> is scaled by that amount. You can look at it as putting a box underneath a specific part of the graphic, pushing everything above it in the box, and then forgetting the rest and only focussing on that box.<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">viewbox=&rdquo;<em>origin-x<\/em> <em>origin-y<\/em> <em>width<\/em> <em>height<\/em>&rdquo;<\/code><\/p>\r\n\r\n<img src=\"media\/SVGViewBox.png\" \/>\r\n\r\n<p>Note that, using a negative origin, we can bring back negative values!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&lt;!-- Notice how we're able to fill the whole SVG element with the circle, even though it's placed at a coordinate far away from the origin, (30,30) --&gt;\r\n&#x3C;svg viewbox=&#x22;20 20 20 20&#x22;&#x3E;\r\n    &#x3C;circle cx=&#x22;30&#x22; cy=&#x22;30&#x22; r=&#x22;10&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg viewbox=\"20 20 20 20\" style=\"min-height:10px;min-width:10px;max-height:50px;\">\r\n    <circle cx=\"30\" cy=\"30\" r=\"10\"\/>\r\n<\/svg>\r\n<\/div>\r\n","slur":"svg-coordinates-viewports","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"304","title":"[SVG] Aspect Ratio & Grouping","post":"<p>Only one question remains now, which is about <strong>aspect ratio<\/strong>; the ratio between the width and height of the picture. All this reframing and scaling of vector graphics is great, but what if we (don&rsquo;t) want to maintain aspect ratio? How do we force an image to fill the entire width <em>and<\/em> height, even if that means stretching it one way or another?<\/p> \r\n\r\n<p>By default, SVG preserves this aspect ratio, which is often what you want &ndash; at any size, the graphic looks good because the proportions are all correct. But we can turn it off, or customize this behaviour, using the <code>preserveAspectRatio<\/code> attribute. Its (very general) syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">preserveAspectRatio=&rdquo;<em>align<\/em> [<em>meetOrSlice<\/em>]&rdquo;<\/code><\/p>\r\n\r\n<p>I&rsquo;ll provide the full explanation of the syntax here, but you don&rsquo;t need to understand or remember it all at the moment &ndash; you haven&rsquo;t even created your first basic shape with SVG yet!<\/p>\r\n\r\n<dl>\r\n\t<dt><code><em>align<\/em><\/code><\/dt>\r\n\t<dd><ul style=\"list-style-type:circle\">\r\n\t\t<li><code>none<\/code>: Do not preserve aspect ratio.<\/li>\r\n\t\t<li><code>x<em>&lt;pos&gt;<\/em>Y<em>&lt;pos&gt;<\/em><\/code>: There are three values to fill in for <code><em>&lt;pos&gt;<\/em><\/code>; <code>min<\/code>, <code>mid<\/code> and <code>max<\/code>. The first aligns the smallest value of the viewbox with the smallest value of viewport. The second aligns the midpoint value of the viewbox with the midpoint value of the viewport. The third aligns the maximum value of the viewbox with the maximum value of the viewport.<\/li>\r\n\t<\/ul>\r\n\t<\/dd>\r\n\t<dt><code><em>meetOrSlice<\/em><\/code><\/dt>\r\n\t<dd><ul style=\"list-style-type:circle\">\r\n\t\t<li>Optional. The possible values are:<\/li>\r\n\t\t<li><code>meet<\/code>: Default. Scale up the graphic as much as possible, while preserving aspect ratio and making the entire viewbox visible within the viewport.<\/li>\r\n\t\t<li><code>slice<\/code>: Scale down the graphic as much as possible, while preserving aspect ratio and covering the entire viewport with the viewbox.<\/li>\r\n\t<\/ul><\/dd>\r\n<\/dl>\r\n\r\n<img src=\"media\/SVGPreserveAspectRatio.png\" \/>\r\n\r\n<h2>Grouping<\/h2>\r\n\r\n<p>If you haven&rsquo;t been scared off by the previous section, you&rsquo;re in for a treat &ndash; things will all be much simpler from here on. Let&rsquo;s stop talking about that <code>&lt;svg&gt;<\/code> element, and introduce the simplest element of them all: the <code>&lt;g&gt;<\/code> tag.<\/p>\r\n\r\n<p>This tag has no predetermined properties (such as position or size), and groups everything inside it. This way, you can assign multiple objects to the same ID or class, and perform lots of operations on them all at the same time. This is easiest with CSS, but there&rsquo;s an attribute available to all SVG objects, which is especially useful for groups: <code><attr>transform<\/attr>=&rdquo;<em>transformOperation<\/em>&rdquo;<\/code>.<\/p>\r\n\r\n<p>The <em>transformOperation<\/em> follows the same syntax as standard CSS transforms, but with values separated by white space. To illustrate this, the next example rotates a group -45 degrees around the z-axis (the imaginary axis coming out of the screen, straight at the reader).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;g transform=&#x22;rotate(-45 0 0)&#x22;&#x3E;\r\n        &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;15&#x22; height=&#x22;30&#x22; style=&#x22;fill:blue;&#x22;\/&#x3E;\r\n        &#x3C;rect x=&#x22;10&#x22; y=&#x22;50&#x22; width=&#x22;15&#x22; height=&#x22;30&#x22; \/&#x3E;\r\n        &#x3C;rect x=&#x22;30&#x22; y=&#x22;10&#x22; width=&#x22;15&#x22; height=&#x22;30&#x22; \/&#x3E;\r\n        &#x3C;rect x=&#x22;30&#x22; y=&#x22;50&#x22; width=&#x22;15&#x22; height=&#x22;30&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n    &#x3C;\/g&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <g transform=\"rotate(-45 0 0)\">\r\n        <rect x=\"10\" y=\"10\" width=\"15\" height=\"30\" style=\"fill:blue;\"\/>\r\n        <rect x=\"10\" y=\"50\" width=\"15\" height=\"30\" \/>\r\n        <rect x=\"30\" y=\"10\" width=\"15\" height=\"30\" \/>\r\n        <rect x=\"30\" y=\"50\" width=\"15\" height=\"30\" style=\"fill:red;\" \/>\r\n    <\/g>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>It&rsquo;s not mandatory to group all elements, but I recommend creating some general groups to keep the markup structured, and make it easy to add the same styles to multiple similar objects at the same time.<\/p>\r\n\r\n<p>As the example demonstrated, there&rsquo;s quite a bit of overlap between CSS properties and SVG attributes. Some CSS properties, such as <code>transform<\/code>, can be used as attributes on SVG elements. But more importantly, there are lots of special SVG attributes which can all be used as CSS properties as well. For example, lines have the <code>stroke-width<\/code> attribute to set the line width, but you can also use it as a CSS property. In the previous example we see the same thing happening for the <code>fill<\/code> attribute\/property. Keep in mind, however, that this only has effect on SVG objects.<\/p>\r\n","slur":"svg-aspect-ratio-grouping","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"305","title":"[SVG] Rectangles","post":"<p>This chapter, and the next six, will be about all the basic shapes in SVG. We&rsquo;ll start with the simplest of them all, the <strong>rectangle<\/strong>. The minimal syntax is:<\/p> \r\n\r\n<p><code class=\"longsyntax\">&lt;rect x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; width=&rdquo;<em>width<\/em>&rdquo; height=&rdquo;<em>height<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>Obviously, the first two attributes determine the position to place the rectangle at, while the last two determine its dimensions. I like to call these the <em>basic attributes<\/em>, as these four attributes are used on nearly every SVG element (sometimes with slight variation). And for a good reason of course: every element needs to be placed <em>somewhere<\/em>, and if you don&rsquo;t specify dimensions, it&rsquo;s invisible.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Vector Attributes<\/h2>\r\n\r\n<p>Now you know how to create a solid black rectangle, but that&rsquo;s boring. There&rsquo;s another set of attributes used on everything, which I like to call the <em>vector attributes<\/em>, because these are what make vector graphics the way they are.<\/p>\r\n\r\n<p>Every vector graphic is essentially a path; a set of points connected with lines. You can <em>fill<\/em> this path with a certain colour, and\/or <em>stroke<\/em> the path with a certain colour, width and style. This stroking is very similar to borders in CSS. Lines, for example, are stroked paths. You can fill lines, but it wouldn&rsquo;t show anything, because there&rsquo;s no area to fill. Rectangles are paths of four points connected with straight lines, forming right angles.<\/p>\r\n\r\n<p>The tables below show all vector attributes.<\/p>\r\n\r\n<h2>Fill<\/h2>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Desciption<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>fill<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Fill colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Any valid CSS colour code, default is black<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>fill-opacity<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Opacity of fill colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Numerical value between 0 and 1, default is 1<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect fill=&#x22;blue&#x22; x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; \/&#x3E;\r\n    &#x3C;rect fill=&#x22;green&#x22; fill-opacity=&#x22;0.7&#x22; x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect fill=\"blue\" x=\"10\" y=\"10\" width=\"30\" height=\"30\" \/>\r\n    <rect fill=\"green\" fill-opacity=\"0.7\" x=\"0\" y=\"0\" width=\"30\" height=\"30\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Stroke<\/h2>\r\n\r\n<img src=\"media\/SVGStrokeAttributes.png\" \/>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Attribute<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Stroke colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Any valid CSS colour code, default is black<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke-width<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Stroke width or size<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Numerical value, default is 0px<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke-opacity<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Opacity of stroke colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Numerical value between 0 and 1, default is 1.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke-dasharray<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Dashed stroke<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Two values, <em>dash length<\/em> and <em>gap length<\/em>, separated by space or comma.<\/p>\r\n\r\n\t\t\t<p>Default is no dashed stroke at all; <code>none<\/code>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke-linecap<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How to display stroke caps<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Three possible values:<\/p>\r\n\r\n\t\t\t<p><code>butt<\/code>: Default, line ends are immediately cut off straight.<\/p>\r\n\r\n\t\t\t<p><code>round<\/code>: Round endings &ndash; half circles at both ends.<\/p>\r\n\r\n\t\t\t<p><code>square<\/code>: Adds squares at the end. Same as default, but makes for a slightly extended line.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>stroke-linejoin<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How to join two lines at a point<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Three possible values:<\/p>\r\n\r\n\t\t\t<p><code>miter<\/code>: Default, pointy corner<\/p>\r\n\r\n\t\t\t<p><code>round<\/code>: Round corner<\/p>\r\n\r\n\t\t\t<p><code>bevel<\/code>: Straight cut off corner<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect stroke=&#x22;blue&#x22; x=&#x22;30&#x22; y=&#x22;30&#x22; width=&#x22;60&#x22; height=&#x22;60&#x22; fill=&#x22;transparent&#x22;\/&#x3E;\r\n    &#x3C;rect stroke=&#x22;green&#x22; stroke-dasharray=&#x22;10 5&#x22; x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;60&#x22; height=&#x22;60&#x22; fill=&#x22;transparent&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect stroke=\"blue\" x=\"30\" y=\"30\" width=\"60\" height=\"60\" fill=\"transparent\"\/>\r\n    <rect stroke=\"green\" stroke-dasharray=\"10 5\" x=\"0\" y=\"0\" width=\"60\" height=\"60\" fill=\"transparent\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Round Corners<\/h2>\r\n\r\n<p>Rectangles are known for their right angles, but SVG allows you to make those corners round. For this, you must use the <code><attr>rx<\/attr>=&rdquo;<em>radius<\/em>&rdquo;<\/code> and <code><attr>ry<\/attr>=&rdquo;<em>radius<\/em>&rdquo;<\/code> attributes. These supply the x-radius and y-radius, respectively, essentially creating an ellipse of which each corner of the rectangle is one quadrant.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect stroke=&#x22;red&#x22; stroke-width=&#x22;10&#x22; rx=&#x22;5&#x22; ry=&#x22;15&#x22; fill=&#x22;orange&#x22; x=&#x22;30&#x22; y=&#x22;30&#x22; width=&#x22;60&#x22; height=&#x22;60&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect stroke=\"red\" stroke-width=\"10\" rx=\"5\" ry=\"15\" fill=\"orange\" x=\"30\" y=\"30\" width=\"60\" height=\"60\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>","slur":"svg-rectangles","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"306","title":"[SVG] Circles & Ellipses","post":"<p>After the rectangle, the friendly circles and ellipses are the obvious basic shapes.<\/p> \r\n\r\n<p>To create a circle, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;circle cx=&rdquo;<em>xPos<\/em>&rdquo; cy=&rdquo;<em>yPos<\/em>&rdquo; r=&rdquo;<em>radius<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>Instead of positioning a circle using its top left corner, it&rsquo;s much more convenient to position it using the centre or midpoint. That&rsquo;s why we don&rsquo;t use regular <code>x<\/code> and <code>y<\/code> attributes, but <code>cx<\/code> and <code>cy<\/code> attributes that define the position of the circle&#39;s centre. Furthermore, width and height are the same, which means we use the <code>r<\/code> attribute instead, to set the radius of the circle. To remind you, the radius is half the width or height.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;circle cx=&#x22;30&#x22; cy=&#x22;30&#x22; r=&#x22;25&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <circle cx=\"30\" cy=\"30\" r=\"25\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Ellipses<\/h2>\r\n\r\n<p>To create an ellipse, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;ellipse cx=&rdquo;<em>xPos<\/em>&rdquo; cy=&rdquo;<em>yPos<\/em>&rdquo; rx=&rdquo;<em>xRadius<\/em>&rdquo; ry=&rdquo;<em>yRadius<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>As you can see, the only difference is that the radius has been split into two seperate ones: <code>rx<\/code>, which is the radius in the x-direction, and <code>ry<\/code>, the radius in the y-direction.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;ellipse cx=&#x22;40&#x22; cy=&#x22;25&#x22; rx=&#x22;30&#x22; ry=&#x22;15&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <ellipse cx=\"40\" cy=\"25\" rx=\"30\" ry=\"15\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-circles-ellipses","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"307","title":"[SVG] Lines, Polylines & Polygons","post":"<p>Lines are nothing more than a stroked, straight path between two points. Therefore, the only thing a line needs is the position of the first and second point. The order doesn&rsquo;t matter. The syntax is:<\/p> \r\n\r\n<p><code class=\"longsyntax\">&lt;line x1=&rdquo;<em>xStart<\/em>&rdquo; y1=&rdquo;<em>yStart<\/em>&rdquo; x2=&rdquo;<em>xEnd<\/em>&rdquo; y2=&rdquo;<em>yEnd<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;line x1=&#x22;5&#x22; y1=&#x22;5&#x22; x2=&#x22;60&#x22; y2=&#x22;60&#x22; stroke-width=&#x22;10px&#x22; stroke=&#x22;red&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <line x1=\"5\" y1=\"5\" x2=\"60\" y2=\"60\" stroke-width=\"10px\" stroke=\"red\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Polylines<\/h2>\r\n\r\n<p>If you want a line with more than two points, which technically speaking isn&rsquo;t a line anymore, you need to use polylines. In this case, however, having to type two attributes for every point is a pain, which is why polylines use a single attribute that contains all the points, separated by a white space.<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;polyline points=&rdquo;<em>x<sub>1<\/sub>,y<sub>1<\/sub> &hellip; x<sub>n<\/sub>,y<sub>n<\/sub><\/em>&rdquo;\/&gt;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;polyline points=&#x22;5,5 60,60 100,40&#x22; stroke-width=&#x22;10px&#x22; stroke=&#x22;red&#x22; fill=&#x22;orange&#x22; stroke-linecap=&#x22;round&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <polyline points=\"5,5 60,60 100,40\" stroke-width=\"10px\" stroke=\"red\" fill=\"orange\" stroke-linecap=\"round\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Note that polylines, unlike lines, <em>can<\/em> have a fill. If your polyline isn&rsquo;t a perfectly straight line, the fill property will draw an imaginary straight line from end to start point to close off the path, and fill that.<\/p>\r\n\r\n<h2>Polygons<\/h2>\r\n\r\n<p>Now that we know about polylines, creating polygons &ndash; such as triangles or stars &ndash; only requires a different tag: <code>&lt;polygon&gt;<\/code>. It does the same as polyline, but automatically closes the path for you by adding a (non-imaginary) line between start and end point. This way you only have to supply every corner point of the polygon, and they&rsquo;ll <em>all<\/em> be automatically connected with straight lines.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;polygon points=&#x22;5,5 60,60 100,40&#x22; stroke-width=&#x22;10px&#x22; stroke=&#x22;red&#x22; fill=&#x22;orange&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <polygon points=\"5,5 60,60 100,40\" stroke-width=\"10px\" stroke=\"red\" fill=\"orange\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-lines-polylines-polygons","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"308","title":"[SVG] Paths","post":"<p>All those nice basic shapes up until now are easy and quick, but they can&rsquo;t do everything. For example, points are all connected by straight lines, which means any type of curve is already out of the question.<\/p>\r\n\r\n<p>This advanced functionality is provided by the <strong>path<\/strong> element, which has the following syntax:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;path d=&rdquo;<em>some complex path<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The <code>d<\/code> here stands for <em>data<\/em>, as you&rsquo;ll be providing all the path&rsquo;s data to that attribute. This data, again, comes in the form of lots of points, separated by a whitespace. The difference with polylines, however, is that in front of every point you need to provide the method to use for connecting the previous point with this point. This is called the <strong>specifier<\/strong>, and is just a certain predefined letter. I&rsquo;ll provide them all in a table at the end of this chapter, but I first want to give you an idea of how it works before overwhelming you. So, let&rsquo;s look at an example.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;path d=&#x22;M15,15 L60,60 Q120,40 40,10 Z&#x22; stroke=&#x22;red&#x22; stroke-width=&#x22;8&#x22; fill=&#x22;orange&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <path d=\"M15,15 L60,60 Q120,40 40,10 Z\" stroke=\"red\" stroke-width=\"8\" fill=\"orange\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>When a path is drawn, it always starts at the point <code>(0,0)<\/code>, and simply moves through this list of points step by step, connecting them all together. The element relies on you completely to make sure the path turns out great &ndash; it doesn&rsquo;t close off the path for you, nor does it automatically smoothen your path. Most paths start with the specifier <code>M<\/code>, because quite often you don&rsquo;t want your path drawing a line between <code>(0,0)<\/code> and your first data point.<\/p>\r\n\r\n<h2>Specifiers<\/h2>\r\n\r\n<p>Some specifiers also require more (or less) parameters than the two coordinates of the point it is attached to, which is why I&rsquo;ll provide which parameters it takes for every single one.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Specifier<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p style=\"white-space:pre;\">Arguments<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>M<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x, y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Moveto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Moves to (<em>x,y<\/em>) without drawing a line<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>L<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x, y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Lineto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws a line to (<em>x,y<\/em>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>H<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Horizontal Lineto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws a horizontal line to <em>x<\/em> (keeping the same <em>y <\/em>as the previous point)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>V<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Vertical Lineto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws a vertical line to <em>y<\/em> (keeping the same <em>x<\/em> as the previous point)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>C<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x<sub>1<\/sub>,y<sub>1<\/sub> x<sub>2<\/sub>,y<sub>2<\/sub> x,y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Curveto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws cubic Bezier curve to (<em>x,y<\/em>).<\/p>\r\n\r\n\t\t\t<p>The points (<em>x<sub>1<\/sub>,y<sub>1<\/sub><\/em>) and (<em>x<sub>2<\/sub>,y<sub>2<\/sub><\/em>) are the start and end control points.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>S<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x<sub>2<\/sub>,y<sub>2<\/sub> x,y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Smooth Curveto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws cubic Bezier curve to (<em>x,y<\/em>)<\/p>\r\n\r\n\t\t\t<p>The point (<em>x<sub>2<\/sub>,y<sub>2<\/sub><\/em>) is the end control point. The start control point is assumed the same as the previous curve.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Q<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x<sub>1<\/sub>,y<sub>1<\/sub> x,y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Quadratic Bezier Curveto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws quadratic Bezier curve to (<em>x,y<\/em>).<\/p>\r\n\r\n\t\t\t<p>The point (<em>x<sub>1<\/sub>,y<sub>1<\/sub><\/em>) is the control point for controlling how the curve bends.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>T<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>x, y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Smooth quadratic Bezier Curveto<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws quadratic Bezier curve to (<em>x,y<\/em>).<\/p>\r\n\r\n\t\t\t<p>Control point is assumed to be the same as the last control point used.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>A<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code><em>rx ry<\/em><\/code><\/p>\r\n\r\n\t\t\t<p><code><em>x-axis-rotation<\/em><\/code><\/p>\r\n\r\n\t\t\t<p><code><em>large-arc-flag<\/em><\/code><\/p>\r\n\r\n\t\t\t<p><code><em>sweepflag<\/em><\/code><\/p>\r\n\r\n\t\t\t<p><code><em>x, y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Elliptical arc<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Draws arc to the point (<em>x,y<\/em>)<\/p>\r\n\r\n\t\t\t<p>The values <em>rx<\/em> and <em>ry<\/em> are the radiuses of the ellipse.<\/p>\r\n\r\n\t\t\t<p>The <em>x-axis-rotation<\/em> rotates the ellipse the arc is created from (without changing start\/end point).<\/p>\r\n\r\n\t\t\t<p>The <em>large-arc-flag<\/em> (0 or 1) determines how wide the arc is.<\/p>\r\n\r\n\t\t\t<p>The <em>sweepflag <\/em>(0 or 1) determines which way the arc goes (underneath or above).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>Z<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Closepath<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Closes the path by drawing a straight line from the current point to the first point. Doesn&rsquo;t need an argument.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Each of these also has a <em>lowercase<\/em> variation, which works exactly the same way, except for one major difference: the points you give as parameters are interpreted as <em>relative<\/em> to the previous point. The example will demonstrate this as well.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n\t&lt;!-- Red line --&gt;\r\n    &#x3C;path d=&#x22;M30,30 l60,60&#x22; stroke=&#x22;red&#x22; stroke-width=&#x22;8&#x22;\/&#x3E;\r\n    &lt;!-- Orange Line --&gt;\r\n    &#x3C;path d=&#x22;M120,50 L60,60&#x22; stroke=&#x22;orange&#x22; stroke-width=&#x22;8&#x22;\/&#x3E;\r\n    &lt;!-- Orange-Red Arc --&gt;\r\n    &#x3C;path d=&#x22;M120,120 A10,10 45 0 1 200,140&#x22; stroke=&#x22;red&#x22; stroke-width=&#x22;8&#x22; fill=&#x22;orange&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <path d=\"M30,30 l60,60\" stroke=\"red\" stroke-width=\"8\"\/>\r\n    <path d=\"M120,50 L60,60\" stroke=\"orange\" stroke-width=\"8\"\/>\r\n    <path d=\"M120,120 A10,10 45 0 1 200,140\" stroke=\"red\" stroke-width=\"8\" fill=\"orange\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>If you&rsquo;re wondering <em>what are Bezier curves?<\/em> I&rsquo;m planning on creating an in-depth tutorial on these one day, as part of a complete vector graphics course, as the subject is too long and difficult to explain here. But, as long as it&rsquo;s not ready, Google it! For now, just know that they are smooth curves between two points.<\/p>\r\n\r\n<p>Paths are powerful, but complex. I don&rsquo;t recommend trying to create those from the top of your head &ndash; I think it&rsquo;s much faster and easier to use software that can output SVG files.<\/p>\r\n","slur":"svg-paths","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"309","title":"[SVG] Definitions & Symbols","post":"<p>If you want to reuse the same graphic throughout your project, you&rsquo;ll need to <em>define<\/em> it somewhere. It&rsquo;s common practice to do this at the top, but this can be anywhere. Such definitions are not displayed immediately, but only whenever you request them somewhere within the SVG element.<\/p> \r\n\r\n<h2>Definitions versus Symbols<\/h2>\r\n\r\n<p>A group of definitions is put within the <code>&lt;defs&gt;<\/code> element. Such an element has no attributes or special functions at all, except for the fact that what&rsquo;s inside is <em>not<\/em> displayed. Inside of it can be anything, even CSS styling rules.<\/p>\r\n\r\n<p>The <code>&lt;symbol id=&rdquo;<em>name<\/em>&rdquo;&gt;<\/code> element does the same, but is only allowed to contain shapes.<\/p>\r\n\r\n<p>The difference is mostly for practical and semantical reasons. Within a <code>&lt;defs&gt;<\/code> element you can place multiple definitions with their own names you can reference. Within a <code>&lt;symbol&gt;<\/code> element you can only define that particular symbol, and the element itself has one id\/name you can use as reference. For example, you can place as many <code>&lt;symbol&gt;<\/code> elements as you want within a <code>&lt;defs&gt;<\/code> element, but not the other way around. <em>Symbols<\/em> can be referenced specifically and used throughout the graphic, while <em>definitions<\/em> are just wrapper or grouping elements for such symbols. We&rsquo;ll see later in the course that there are several other (important) SVG object types that must be placed inside a <code>&lt;defs&gt;<\/code> element.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;!-- Define our own symbol here --&#x3E;\r\n        &#x3C;symbol id=&#x22;blueCircle&#x22;&#x3E;\r\n            &#x3C;circle cx=&#x22;5&#x22; cy=&#x22;5&#x22; r=&#x22;5&#x22; fill=&#x22;blue&#x22;\/&#x3E;\r\n        &#x3C;\/symbol&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;!-- Notice how nothing is displayed, because everything&#x27;s inside a &#x3C;defs&#x3E; element --&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <symbol id=\"blueCircle\">\r\n            <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"blue\"\/>\r\n        <\/symbol>\r\n    <\/defs>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Actually Using Them<\/h2>\r\n\r\n<p>To use them, not surprisingly, we write this tag:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;use xlink:href=&rdquo;#<em>name<\/em>&rdquo; x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>This instantiates the symbol with id <em>name<\/em> at position (<em>xPos<\/em>, <em>yPos<\/em>).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;symbol id=&#x22;blueCircle&#x22;&#x3E;\r\n            &#x3C;circle cx=&#x22;5&#x22; cy=&#x22;5&#x22; r=&#x22;5&#x22; fill=&#x22;blue&#x22;\/&#x3E;\r\n        &#x3C;\/symbol&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;!-- Now something&#x27;s displayed, because we&#x27;re calling our symbol --&#x3E;\r\n    &#x3C;use xlink:href=&#x22;#blueCircle&#x22; x=&#x22;10&#x22; y=&#x22;10&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <symbol id=\"blueCircle\">\r\n            <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"blue\"\/>\r\n        <\/symbol>\r\n    <\/defs>\r\n    <use xlink:href=\"#blueCircle\" x=\"10\" y=\"10\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Symbols Specialties<\/h2>\r\n\r\n<p>Because symbols are contained, standalone graphics, you could view them as their own SVG environment. We can instantiate them multiple times throughout the graphic, but what determines their size? Well, two things.<\/p>\r\n\r\n<p>Firstly, we can set regular <code>width<\/code> and <code>height<\/code> attributes on the <code>&lt;use&gt;<\/code> element. This does nothing in terms of scaling the symbol, but only sets a maximum width and height<\/p>\r\n\r\n<p>Secondly, the symbols determine it themselves, the same way the global size of the SVG element is determined: using <code>viewbox<\/code> and <code>preserveAspectRatio<\/code> attributes. These attributes can be used to set how the symbol should scale to fit the dimensions of the <code>&lt;use&gt;<\/code> element that called it.<\/p>\r\n\r\n<p>NOTE: The example below should scale the circle to the full width of the svg element, but doesn't want to work on this particular page for some reason. Try this one out for yourself, I'd say.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;!-- We place the full circle within the viewbox, allowing it to scale to full size when we use it --&#x3E;\r\n        &#x3C;symbol id=&#x22;blueCircle&#x22; viewbox=&#x22;0 0 10 10&#x22;&#x3E;\r\n            &#x3C;circle cx=&#x22;5&#x22; cy=&#x22;5&#x22; r=&#x22;5&#x22; fill=&#x22;blue&#x22;\/&#x3E;\r\n        &#x3C;\/symbol&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;use xlink:href=&#x22;#blueCircle&#x22; x=&#x22;10&#x22; y=&#x22;10&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <symbol id=\"blueCircle\" viewbox=\"0 0 10 10\">\r\n            <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"blue\"\/>\r\n        <\/symbol>\r\n    <\/defs>\r\n    <use xlink:href=\"#blueCircle\" x=\"10\" y=\"10\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-definitions-symbols","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"310","title":"[SVG] Markers","post":"<p>We&rsquo;ve looked at filling and stroking elements as a whole, but what if we want to style individual points of the path? That&rsquo;s when <strong>markers<\/strong> come into play!<\/p> \r\n\r\n<p>A marker can contain any type or amount of SVG content, and is a sort of <em>minigraphic<\/em>. It&rsquo;s a small, contained graphic that you can use to mark individual path points. You need two building bricks for this to work: an element that defines and contains this marker, and an element &ndash; with a path, of course &ndash; that has a link to that marker.<\/p>\r\n\r\n<h2>Creating a Marker<\/h2>\r\n\r\n<p>The syntax for creating a marker is<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;marker id=&quot;<em>referenceID<\/em>&quot; markerWidth=&quot;<em>value<\/em>&quot; markerHeight=&quot;<em>value<\/em>&quot; refX=&quot;<em>value<\/em>&quot; refY=&quot;<em>value<\/em>&quot; orient=&quot;<em>value<\/em>&quot;&gt;\r\n\t<em>&hellip; svg content &hellip;<\/em>\r\n&lt;\/marker&gt;<\/code>\r\n\r\n<p>The value inside the <code>id<\/code> attribute is the name of this marker, which is used by other elements to reference and use the marker. You can make up these names yourself.<\/p>\r\n\r\n<p>The <code>markerWidth<\/code> and <code>markerHeight<\/code> attributes set the width and height of the <em>marker<\/em>. This doesn&rsquo;t change the content, but only the size at which the marker is displayed when referenced.<\/p>\r\n\r\n<p>The <code>refX<\/code> and <code>refY<\/code> attributes set the <em>midpoint<\/em> or <em>origin<\/em>. This midpoint is what is actually aligned with the point on the path. The default value is <code>0<\/code> for both, which means the top left corner.<\/p>\r\n\r\n<p>The <code>orient<\/code> attribute decides how the marker is oriented, or <em>rotated<\/em>. You can set it to a value to rotate the marker that amount of <em>degrees<\/em>, or you can set it to <code>auto<\/code> to make sure it&rsquo;s automatically set to the orientation of the point that it&rsquo;s on.<\/p>\r\n\r\n<p>Additionally, the <code>markerUnits<\/code> attribute <em>can<\/em> be set, which has two possible values: <code>strokeWidth<\/code> scales the marker&rsquo;s size in accordance with the stroke-width of the path it&rsquo;s used on, while <code>userSpaceOnUse<\/code> prevents that behaviour.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&lt;!-- Nothing is displayed, even if the marker isn't inside a &lt;defs&gt; element --&gt;\r\n&#x3C;svg&#x3E;\r\n    &#x3C;marker id=&#x22;blueRectangle&#x22; markerWidth=&#x22;30&#x22; markerHeight=&#x22;30&#x22; refX=&#x22;15&#x22; refY=&#x22;15&#x22;&#x3E;\r\n        &#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; fill=&#x22;blue&#x22; \/&#x3E;\r\n    &#x3C;\/marker&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <marker id=\"blueRectangle\" markerWidth=\"30\" markerHeight=\"30\" refX=\"15\" refY=\"15\">\r\n        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" fill=\"blue\" \/>\r\n    <\/marker>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Referencing a Marker<\/h2>\r\n\r\n<p>As stated earlier, the name you gave your marker in the <code>id<\/code> attribute will be used for referencing that marker &ndash; just like with anchors in HTML, or ids in CSS. The notation is the same as well, which means a marker can be referenced with <code>url(#<em>markerID<\/em>)<\/code>.<\/p>\r\n\r\n<p>There are, however, three different positions a marker can be used, and therefore three different <em>attributes<\/em> to which a marker can be supplied. These are <code>marker-start<\/code>, <code>marker-mid<\/code> and <code>marker-end<\/code>. The first determines what marker to use for the first point of the path, the third what to use for the last point of the path, and the second what to use for all points in between.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;!-- Notice how the rectangle is oriented in the same direction as the line --&#x3E;\r\n        &#x3C;marker id=&#x22;blueRectangle&#x22; markerWidth=&#x22;30&#x22; markerHeight=&#x22;30&#x22; refX=&#x22;15&#x22; refY=&#x22;15&#x22; orient=&#x22;auto&#x22; markerUnits=&#x22;userSpaceOnUse&#x22;&#x3E;\r\n            &#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; fill=&#x22;blue&#x22; \/&#x3E;\r\n        &#x3C;\/marker&#x3E;\r\n        &#x3C;!-- Notice how the circle is scaled according to the stroke-width of the path --&#x3E;\r\n        &#x3C;marker id=&#x22;redCircle&#x22; markerWidth=&#x22;30&#x22; markerHeight=&#x22;30&#x22; refX=&#x22;15&#x22; refY=&#x22;15&#x22;&#x3E;\r\n            &#x3C;circle cx=&#x22;15&#x22; cy=&#x22;15&#x22; r=&#x22;15&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n        &#x3C;\/marker&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;polyline points=&#x22;40,40 100,100 200,50&#x22; marker-start=&#x22;url(#blueRectangle)&#x22; marker-mid=&#x22;url(#blueRectangle)&#x22; marker-end=&#x22;url(#redCircle)&#x22; fill=&#x22;transparent&#x22; stroke=&#x22;orange&#x22; stroke-width=&#x22;3&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <!-- Notice how the rectangle is oriented in the same direction as the line -->\r\n        <marker id=\"blueRectangle\" markerWidth=\"30\" markerHeight=\"30\" refX=\"15\" refY=\"15\" orient=\"auto\" markerUnits=\"userSpaceOnUse\">\r\n            <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" fill=\"blue\" \/>\r\n        <\/marker>\r\n        <!-- Notice how the circle is scaled according to the stroke-width of the path -->\r\n        <marker id=\"redCircle\" markerWidth=\"30\" markerHeight=\"30\" refX=\"15\" refY=\"15\">\r\n            <circle cx=\"15\" cy=\"15\" r=\"15\" fill=\"red\" \/>\r\n        <\/marker>\r\n    <\/defs>\r\n    <polyline points=\"40,40 100,100 200,50\" marker-start=\"url(#blueRectangle)\" marker-mid=\"url(#blueRectangle)\" marker-end=\"url(#redCircle)\" fill=\"transparent\" stroke=\"orange\" stroke-width=\"3\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Markers &amp; Symbols<\/h2>\r\n\r\n<p>Maybe you&rsquo;ve already noticed that markers and symbols are quite similar, in the sense that they are both a sort of minigraphic. It&rsquo;s always possible, and even highly recommended, to place markers inside a <code>&lt;defs&gt;<\/code> element. It helps keep your code structured, because markers are essentially definitions to be used elsewhere later on. It isn&rsquo;t possible, however, to reference markers with the <code>&lt;use&gt;<\/code> element from last chapter.<\/p>","slur":"svg-markers","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"311","title":"[SVG] Text","post":"<p>Even though the regular HTML tags aren&rsquo;t available within vector graphics, SVG makes up for that by supplying a set of special text elements. These have some disadvantages if you want to place long amounts of text within the graphic, but have numerous advantages if you just want a few beautiful lines. The biggest issue is that text doesn&rsquo;t naturally wrap and form paragraphs like with HTML, but you get much more text and letter customizability in return.<\/p> \r\n\r\n<h2>Standard Text<\/h2>\r\n\r\n<p>To create some standard text, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;text x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo;&gt;\r\n\t<em>your text<\/em>\r\n&lt;\/text&gt;<\/code><\/p>\r\n\r\n<p>In the case of text, unlike other elements, the <code>x<\/code> and <code>y<\/code> refer to the bottom left corner.<\/p>\r\n\r\n<p>To change this, use the <code>text-anchor<\/code> attribute. The possible values are <code>start<\/code>, <code>middle<\/code> and <code>end<\/code>, which set what part of the text element the <code>x<\/code> attribute refers to.<\/p>\r\n\r\n<p>Just like all other SVG elements, you can <em>fill<\/em> and <em>stroke<\/em> the text in any way you like.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&lt;!-- Notice how text is on a single line and cut off at the edge of the SVG --&gt;\r\n&#x3C;svg&#x3E;\r\n    &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n        Juan plays the guitar. \r\n        But he also likes playing with SVG.\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <text x=\"10\" y=\"20\">\r\n        Juan plays the guitar. \r\n        But he also likes playing with SVG.\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Vertical Text<\/h2>\r\n\r\n<p>To create vertical text, you can set the <code>writing-mode<\/code> attribute to <code>tb<\/code> (top to bottom), which essentially only rotates the text. If you want letters to still stand upright, but just underneath instead of next to each other, you can undo this rotation of the letters or so-called <em>glyphs<\/em>. To do so, use the <code>glyph-orientation-vertical<\/code> attribute, which accepts any number, and reads it as an amount of degrees.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;10&#x22; writing-mode=&#x22;tb&#x22;&#x3E;\r\n        Juan plays the guitar. \r\n    &#x3C;\/text&#x3E;\r\n    &#x3C;text x=&#x22;60&#x22; y=&#x22;10&#x22; writing-mode=&#x22;tb&#x22; glyph-orientation-vertical=&#x22;0&#x22; &#x3E;\r\n        But he also likes playing with SVG.\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <text x=\"20\" y=\"10\" writing-mode=\"tb\">\r\n        Juan plays the guitar. \r\n    <\/text>\r\n    <text x=\"60\" y=\"10\" writing-mode=\"tb\" glyph-orientation-vertical=\"0\" >\r\n        But he also likes playing with SVG.\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Text Length<\/h2>\r\n\r\n<p>Instead of manually setting <em>font size<\/em> and <em>letter spacing<\/em> with CSS to make text fit certain dimensions, you can also let SVG do that for you. Use the <code>textLength<\/code> attribute to set a fixed width, and the <code>lengthAdjust<\/code> attribute to determine <em>how<\/em> it will scale. This value could be <code>spacing<\/code> (which grows\/shrinks spaces between words), or <code>spacingAndGlyps<\/code> (which changes spacing, as well as glyph size).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22; textLength=&#x22;300&#x22;&#x3E;\r\n        Juan plays the guitar. \r\n    &#x3C;\/text&#x3E;\r\n    &#x3C;text x=&#x22;10&#x22; y=&#x22;40&#x22; textLength=&#x22;300&#x22; lengthAdjust=&#x22;spacingAndGlyphs&#x22;&#x3E;\r\n        Juan plays the guitar. \r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <text x=\"10\" y=\"20\" textLength=\"300\">\r\n        Juan plays the guitar. \r\n    <\/text>\r\n    <text x=\"10\" y=\"40\" textLength=\"300\" lengthAdjust=\"spacingAndGlyphs\">\r\n        Juan plays the guitar. \r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Text Wrapping<\/h2>\r\n\r\n<p>We&rsquo;ve seen that the SVG <code>&lt;text&gt;<\/code> element can only deal with single lines of text, but luckily, there&rsquo;s another element to simulate multiline text. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;tspan dx=&rdquo;<em>xOffset<\/em>&rdquo; dy=&rdquo;<em>yOffset<\/em>&rdquo;&gt;\r\n\t<em>your text<\/em>\r\n&lt;\/tspan&gt;<\/code><\/p>\r\n\r\n<p>This element will position itself relative to the previous line of text. If you supply a single number as <em>xOffset<\/em> or <em>yOffset<\/em>, the <code>&lt;tspan&gt;<\/code> element will offset all its content by that amount. If you supply multiple numbers, separated by spaces, it will apply these offsets to single glyphs.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n        Juan plays the guitar. \r\n        &#x3C;tspan dx=&#x22;-100&#x22; dy=&#x22;20&#x22;&#x3E;\r\n            He also plays with SVG \r\n        &#x3C;\/tspan&#x3E;\r\n        &#x3C;tspan dx=&#x22;-200&#x22; dy=&#x22;20&#x22;&#x3E;\r\n            But mostly plays guitar, though.\r\n        &#x3C;\/tspan&#x3E;\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <text x=\"10\" y=\"20\">\r\n        Juan plays the guitar. \r\n        <tspan dx=\"-100\" dy=\"20\">\r\n            He also plays with SVG \r\n        <\/tspan>\r\n        <tspan dx=\"-200\" dy=\"20\">\r\n            But mostly plays guitar, though.\r\n        <\/tspan>\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Text Spanning<\/h2>\r\n\r\n<p>Alternatively, you can use the <code>&lt;tspan&gt;<\/code> element as the SVG equivalent of the HTML <code>&lt;span&gt;<\/code> element &ndash; to style parts of an element&rsquo;s content. When used this way, the <code>dx<\/code> and <code>dy<\/code> attributes are completely optional.<\/p>\r\n\r\n<p>An extra attribute is also available, which is <code>baseline-shift<\/code>. It makes whatever is inside <em>superscript<\/em> or <em>subscript<\/em>. The possible values are, not surprisingly, <code>super<\/code> and <code>sub<\/code>.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n        Juan plays the &#x3C;tspan baseline-shift=&#x22;sub&#x22;&#x3E;guitar&#x3C;\/tspan&#x3E;. \r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <text x=\"10\" y=\"20\">\r\n        Juan plays the <tspan baseline-shift=\"sub\">guitar<\/tspan>. \r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Defining Text for Multiple Use<\/h2>\r\n\r\n<p>Similar to basic shapes, it&rsquo;s possible to define a piece of text somewhere, and instantiate it multiple times within the graphic. All you have to do is give a <code>&lt;text&gt;<\/code> element a name, using the familiar <code>id<\/code> attribute, and place it inside a <code>&lt;defs&gt;<\/code> element. Now you have defined a text element you can access by using the name you gave it.<\/p>\r\n\r\n<p>We can then use the familiar <code>&lt;use&gt;<\/code> element to instantiate it.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;text id=&#x22;JUAN&#x22;&#x3E;\r\n            Juan is cool. He plays the guitar.\r\n        &#x3C;\/text&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;use xlink:href=&#x22;#JUAN&#x22; x=&#x22;20&#x22; y=&#x22;20&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <text id=\"JUAN\">\r\n            Juan is cool. He plays the guitar.\r\n        <\/text>\r\n    <\/defs>\r\n    <use xlink:href=\"#JUAN\" x=\"20\" y=\"20\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Text along a Path<\/h2>\r\n\r\n<p>Perhaps one of the biggest advantages of SVG text over HTML tags, is that text can easily be laid out along a custom path. For this, two components are required: a definition of the path we want to use, and text placed within a special element that links to our path.<\/p>\r\n\r\n<p>The first part is nothing special; just create a path the way inside a <code>&lt;defs&gt;<\/code> element the way you&rsquo;re used to. And give it a name we can use, of course.<\/p>\r\n\r\n<p>The second part requires a new element:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;text&gt;\r\n\t&lt;textPath xlink:href=&rdquo;#<em>nameOfPath<\/em>&rdquo;&gt; \r\n\t\t<em>your text<\/em>\r\n\t&lt;\/textPath&gt;\r\n&lt;\/text&gt;<\/code><\/p>\r\n\r\n<p>Even though you&rsquo;d think the <code>&lt;textPath&gt;<\/code> already starts to display the text, it still needs to be within a <code>&lt;text&gt;<\/code> element.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;path id=&#x22;thePath&#x22; d=&#x22;M5,5 l80,80 l80,-80&#x22; \/&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;text&#x3E;\r\n    &#x9;&#x3C;textPath xlink:href=&#x22;#thePath&#x22;&#x3E; \r\n    &#x9;&#x9;This is text along a path!\r\n    &#x9;&#x3C;\/textPath&#x3E;\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <path id=\"thePath\" d=\"M5,5 l80,80 l80,-80\" \/>\r\n    <\/defs>\r\n    <text>\r\n    \t<textPath xlink:href=\"#thePath\"> \r\n    \t\tThis is text along a path!\r\n    \t<\/textPath>\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-text","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"312","title":"[SVG] Switches, Links & Images","post":"<p>Last chapter on text wrapped up the chapters on the most important parts of SVG, which means it might seem a bit unstructured from now on. The rest of this course still contains large and important components of SVG, but these aren&rsquo;t fundamental concepts. Instead, they use what you&rsquo;ve already learned and add some variety and dynamics to your graphics.<\/p> \r\n\r\n<h2>Switches<\/h2>\r\n\r\n<p>The <code>&lt;switch&gt;<\/code> element contains groups of text and shapes, and switches between them based on the user&rsquo;s system language. This means that you could, for example, display a welcome message within your graphic, tailored to the user&rsquo;s native language. To determine which group belongs to which language, use the <code><attr>systemLanguage<\/attr>=&rdquo;<em>lang<\/em>&rdquo;<\/code> attribute. Languages use standard HTML codes, which means two-letter abbreviations.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;switch&#x3E;\r\n        &#x3C;g systemLanguage=&#x22;en&#x22;&#x3E;\r\n            &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n                Welcome!\r\n            &#x3C;\/text&#x3E;\r\n        &#x3C;\/g&#x3E;\r\n        &#x3C;g systemLanguage=&#x22;du&#x22;&#x3E;\r\n            &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n                Wilkommen!\r\n            &#x3C;\/text&#x3E;\r\n        &#x3C;\/g&#x3E;\r\n        &#x3C;g systemLanguage=&#x22;nl&#x22;&#x3E;\r\n            &#x3C;text x=&#x22;10&#x22; y=&#x22;20&#x22;&#x3E;\r\n                Welkom!\r\n            &#x3C;\/text&#x3E;\r\n        &#x3C;\/g&#x3E;\r\n    &#x3C;\/switch&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <switch>\r\n        <g systemLanguage=\"en\">\r\n            <text x=\"10\" y=\"20\">\r\n                Welcome!\r\n            <\/text>\r\n        <\/g>\r\n        <g systemLanguage=\"du\">\r\n            <text x=\"10\" y=\"20\">\r\n                Wilkommen!\r\n            <\/text>\r\n        <\/g>\r\n        <g systemLanguage=\"nl\">\r\n            <text x=\"10\" y=\"20\">\r\n                Welkom!\r\n            <\/text>\r\n        <\/g>\r\n    <\/switch>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Links<\/h2>\r\n\r\n<p>You know the <code>&lt;a&gt;<\/code> element for links from HTML, and SVG is, in this respect, no different. To make something &ndash; anything &ndash; into a link, place it within this element:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;a xlink:href=&rdquo;<em>linkToSomething<\/em>&rdquo;&gt; <em>any content<\/em> &lt;\/a&gt;<\/code><\/p>\r\n\r\n<p>Fortunately, it also accepts the <code>target<\/code> attribute with the same possible values as in regular HTML.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;a xlink:href=&#x22;http:\/\/google.com&#x22;&#x3E;\r\n&lt!-- Try clicking the rectangle! --&gt;\r\n        &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;50&#x22; height=&#x22;50&#x22;\/&#x3E;\r\n    &#x3C;\/a&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <a xlink:href=\"http:\/\/google.com\">\r\n        <rect x=\"10\" y=\"10\" width=\"50\" height=\"50\"\/>\r\n    <\/a>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Images<\/h2>\r\n\r\n<p><em>Why would I place an image within an image?<\/em> Well, there are times when you want a regular, bitmap image in your vector graphic &ndash; for example, when you have a picture you can&rsquo;t (or don&rsquo;t want to) transform into vector format. You can include it anywhere and at any size you like, but keep in mind that these bitmap images are not infinitely scalable; at a certain point, they <em>will<\/em> become pixelated. The syntax for placing an image is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;image x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; width=&rdquo;<em>width<\/em>&rdquo; height=&rdquo;<em>height<\/em>&rdquo; xlink:href=&rdquo;<em>linkToImage<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;image x=&#x22;20&#x22; y=&#x22;20&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; xlink:href=&#x22;media\/SVGBitmapvsVector.png&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <image x=\"20\" y=\"20\" width=\"100\" height=\"100\" xlink:href=\"media\/SVGBitmapvsVector.png\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>","slur":"svg-switches-links-images","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"313","title":"[SVG] Gradients","post":"<p>If you know about CSS, you probably already know a lot about gradients, so let me just give you a quick overview here.<\/p> \r\n\r\n<p>Gradients fill a shape with an uneven colour &ndash; this could be just multiple colours or a pattern, but people usually stick to a gradually changing colour. For these, we need to set a gradient direction and size in its main element, and we need to set so-called <strong>colour stops<\/strong> within it. These colour stops are just places within the gradient where the colour changes &ndash; the previous colour stops there, and a new one begins.<\/p>\r\n\r\n<p>Gradients are defined within the <code>&lt;defs&gt;<\/code> element, and applied to an element with <code><attr>fill<\/attr>=&rdquo;url(#<em>gradientName<\/em>)&rdquo;<\/code>.<\/p>\r\n\r\n<h2>Colour Stops<\/h2>\r\n\r\n<p>A single colour stop is set with the syntax<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;stop stop-color=&rdquo;<em>color<\/em>&rdquo; stop-opacity=&rdquo;<em>opacity<\/em>&rdquo; offset=&rdquo;<em>position<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The first two attributes determine the colour, while the third is a percentage that represents the spot at which to change into this colour. It is a percentage, where <code>0%<\/code> is the start point of the gradient, and <code>100%<\/code> the end point.<\/p>\r\n\r\n<h2>Linear vs Radial<\/h2>\r\n\r\n<p>A gradient can start at one edge of the shape, and extend in a direct line to the opposite edge. This is a <strong>linear gradient<\/strong>.<\/p>\r\n\r\n<p>But, we can also start at some point within the shape, and extend in all directions to make a circle or ellipse. This is a <strong>radial gradient<\/strong>.<\/p>\r\n\r\n<p>For <em>linear gradients<\/em>, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;linearGradient x1=&rdquo;<em>val<\/em>&rdquo; y1=&rdquo;<em>val<\/em>&rdquo; x2=&rdquo;<em>val<\/em>&rdquo; y2=&rdquo;<em>val<\/em>&rdquo; spreadMethod=&rdquo;<em>method<\/em>&rdquo;&gt;\r\n\t<em>&hellip; colour stops &hellip;<\/em>\r\n&lt;\/linearGradient&gt;<\/code><\/p>\r\n\r\n<p>Here, the point <code>(x1, y1)<\/code> is the starting point, and <code>(x2, y2)<\/code> the end point. If one of these points is not at the edge of the gradient, this means there&rsquo;s still some space left to fill within the shape. The <code>spreadMethod<\/code> attribute takes care of that, which has three possible values:<\/p>\r\n\r\n<ul>\r\n\t<li><code>pad<\/code>: the first and last colour step are extended towards the edges of the shape<\/li>\r\n\t<li><code>repeat<\/code>: the whole gradient is repeated as often as it takes to fill the shape<\/li>\r\n\t<li><code>reflect<\/code>: the gradient is repeated, but mirrored\/reflected every time it does so<\/li>\r\n<\/ul>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;linearGradient id=&#x22;linGrad&#x22; x1=&#x22;0%&#x22; y1=&#x22;0%&#x22; x2=&#x22;100%&#x22; y2=&#x22;100%&#x22; spreadMethod=&#x22;pad&#x22;&#x3E;\r\n            &#x3C;stop stop-color=&#x22;red&#x22; offset=&#x22;0%&#x22; \/&#x3E;\r\n            &#x3C;stop stop-color=&#x22;orange&#x22; offset=&#x22;100%&#x22; \/&#x3E;\r\n        &#x3C;\/linearGradient&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; fill=&#x22;url(#linGrad)&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <linearGradient id=\"linGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" spreadMethod=\"pad\">\r\n            <stop stop-color=\"red\" offset=\"0%\" \/>\r\n            <stop stop-color=\"orange\" offset=\"100%\" \/>\r\n        <\/linearGradient>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"url(#linGrad)\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>For <em>radial gradients<\/em>, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;radialGradient cx=&rdquo;<em>val<\/em>&rdquo; cy=&rdquo;<em>val<\/em>&rdquo; fx=&rdquo;<em>val<\/em>&rdquo; fy=&rdquo;<em>val<\/em>&rdquo; r=&rdquo;<em>val<\/em>&rdquo; spreadMethod=&rdquo;<em>method<\/em>&rdquo;&gt;\r\n\t<em>&hellip; colour stops &hellip;<\/em>\r\n&lt;\/radialGradient&gt;<\/code><\/p>\r\n\r\n<p>The coordinate (<code>cx<\/code>, <code>cy<\/code>) is the centre point of the gradient, or where it is placed. But, (<code>fx<\/code>,<code> fy<\/code>) is the focal point, which means the point at which the first colour stop starts. The <code>r<\/code> attribute sets the radius or size of the gradient.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;radialGradient id=&#x22;radGrad&#x22; cx=&#x22;50%&#x22; cy=&#x22;50%&#x22; fx=&#x22;20%&#x22; fy=&#x22;20%&#x22; spreadMethod=&#x22;pad&#x22;&#x3E;\r\n            &#x3C;stop stop-color=&#x22;red&#x22; offset=&#x22;0%&#x22; \/&#x3E;\r\n            &#x3C;stop stop-color=&#x22;orange&#x22; offset=&#x22;100%&#x22; \/&#x3E;\r\n        &#x3C;\/radialGradient&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; fill=&#x22;url(#radGrad)&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <radialGradient id=\"radGrad\" cx=\"50%\" cy=\"50%\" fx=\"20%\" fy=\"20%\" spreadMethod=\"pad\">\r\n            <stop stop-color=\"red\" offset=\"0%\" \/>\r\n            <stop stop-color=\"orange\" offset=\"100%\" \/>\r\n        <\/radialGradient>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"url(#radGrad)\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Patterns<\/h2>\r\n\r\n<p>Another way of customizing the <em>fill<\/em> of an object is by using patterns. A pattern is simply a group of shapes, which, when used on a shape, tile across the full width and height of the shape. For example, if wanted a dotted fill for an object, we&rsquo;d create a pattern consisting of a single (small) circle, which would then automatically fill the whole object with these dots.<\/p>\r\n\r\n<p>A pattern must be created within a <code>&lt;defs&gt;<\/code> element, with the following syntax:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;pattern id=&rdquo;<em>name<\/em>&rdquo; x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; width=&rdquo;<em>width<\/em>&rdquo; height=&rdquo;<em>height<\/em>&rdquo;&gt;\r\n\t<em>&hellip; your shapes &hellip;<\/em>\r\n&lt;\/pattern&gt;<\/code><\/p>\r\n\r\n<p>The <code>x<\/code> and <code>y<\/code> attributes set where the pattern starts, relative to the shape&rsquo;s top left corner. The <code>width<\/code> and <code>height<\/code> attributes set the size of a single tile within the pattern.<\/p>\r\n\r\n<p>To use it on an element, set <code><attr>fill<\/attr>=&rdquo;url(#<em>name<\/em>)&rdquo;<\/code>. Notice the similarity with other <code>url(#<em>name<\/em>)<\/code> syntaxes here, which means you can also put patterns and gradients into another pattern!<\/p>\r\n\r\n<p>One important thing to note here is that if you make a shape larger, the size of each tile stays the same, and more tiles are added to fill the available space.<\/p>\r\n\r\n<p>The <code>patternContentUnits<\/code> attribute changes this. It has two possible values:<\/p>\r\n\r\n<ul><li><code>userSpaceOnUse<\/code>: Default, does what I just described.<\/li>\r\n<li><code>objectBoundingBox<\/code>: Stretches the tiles instead, to make the pattern fit the object&rsquo;s dimensions exactly.<\/li>\r\n<\/ul>\r\n\r\n<p>Similarly, the <code>patternUnits<\/code> attribute is for setting the coordinate system of the pattern. It has two possible values:<\/p>\r\n\r\n<ul><li><code>objectBoundingBox<\/code>: Default, uses the bounding box of the object.<\/li>\r\n<li><code>userSpaceOnUse<\/code>: uses the coordinate system that was in place at the time the pattern was created.<\/li>\r\n<\/ul>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;pattern id=&#x22;myPattern&#x22; width=&#x22;0.25&#x22; height=&#x22;0.25&#x22; patternContentUnits=&#x22;objectBoundingBox&#x22;&#x3E;\r\n        &#x9;&#x3C;circle cx=&#x22;0.125&#x22; cy=&#x22;0.125&#x22; r=&#x22;0.1&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n        &#x3C;\/pattern&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;120&#x22; height=&#x22;120&#x22; fill=&#x22;url(#myPattern)&#x22; stroke=&#x22;black&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <pattern id=\"myPattern\" width=\"0.25\" height=\"0.25\" patternContentUnits=\"objectBoundingBox\">\r\n        \t<circle cx=\"0.125\" cy=\"0.125\" r=\"0.1\" fill=\"red\" \/>\r\n        <\/pattern>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"120\" height=\"120\" fill=\"url(#myPattern)\" stroke=\"black\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-gradients","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"314","title":"[SVG] Masks","post":"<p>An easy way to create very complex shapes, is using <strong>clip paths<\/strong> and <strong>masks<\/strong>.<\/p> \r\n\r\n<p>A <em>clip path<\/em> is a path which you can lay over another shape, or group of shapes, to cut off everything that is <em>not<\/em> inside the path. Essentially, it clips a graphic to a certain path.<\/p>\r\n\r\n<p>First, define your path inside a <code>&lt;defs&gt;<\/code> element using:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;clipPath id=&rdquo;<em>name<\/em>&rdquo;&gt;\r\n\t<em>&hellip; any path you want &hellip;<\/em>\r\n&lt;\/clipPath&gt;<\/code><\/p>\r\n\r\n<p>You don&rsquo;t necessarily need to put a <code>&lt;path&gt;<\/code> inside it; you can use any shape you want as a <em>clip path<\/em>, even text!<\/p>\r\n\r\n<p>To apply this to a certain element, use <code><attr>clip-path<\/attr>=&rdquo;url(#<em>name<\/em>)&rdquo;<\/code>. That&rsquo;s it!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;!-- The clip path is a circle --&#x3E;\r\n        &#x3C;clipPath id=&#x22;clipper&#x22;&#x3E;\r\n        &#x9;&#x3C;circle cx=&#x22;30&#x22; cy=&#x22;30&#x22; r=&#x22;30&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n        &#x3C;\/clipPath&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;!-- Only the part of the rectangle within the circle is displayed --&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;120&#x22; height=&#x22;120&#x22; clip-path=&#x22;url(#clipper)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <clipPath id=\"clipper\">\r\n        \t<circle cx=\"30\" cy=\"30\" r=\"30\" fill=\"red\" \/>\r\n        <\/clipPath>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"120\" height=\"120\" clip-path=\"url(#clipper)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Masks<\/h2>\r\n\r\n<p>Masks are a more advanced version of clip paths. Instead of fully showing a shape inside it, or not showing it outside it, masks can set <em>to what extent<\/em> to display a shape. With a mask, for example, you can set a certain part of an element to be fully opaque, and another part to be slightly transparent.<\/p>\r\n\r\n<p>First, again inside a <code>&lt;defs&gt;<\/code> element, define a mask using:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;mask id=&rdquo;<em>name<\/em>&rdquo;&gt;\r\n\t<em>&hellip; any shapes you want &hellip;<\/em>\r\n&lt;\/mask&gt;<\/code><\/p>\r\n\r\n<p>To apply the mask to a certain element, use the <code><attr>mask<\/attr>=&rdquo;url(#<em>name<\/em>&rdquo;)<\/code> attribute.<\/p>\r\n\r\n<p>Now, the important thing here, is that you can use the fill colours of the shapes within the mask, to set the transparency of the masked shape. If your mask is a rectangle with colour <code>#ffffff<\/code> (white), the masked shape will be fully opaque. If its fill colour is <code>#000000<\/code> (black), the masked shape is fully transparent.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;mask id=&#x22;masker&#x22;&#x3E;\r\n        &#x9;&#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;60&#x22; height=&#x22;60&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n        &#x9;&#x3C;!-- Top left is fully opaque --&#x3E;\r\n        &#x9;&#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; fill=&#x22;white&#x22; \/&#x3E;\r\n        &#x9;&#x3C;!-- Lower right is removed --&#x3E;\r\n        &#x9;&#x3C;rect x=&#x22;40&#x22; y=&#x22;40&#x22; width=&#x22;30&#x22; height=&#x22;30&#x22; fill=&#x22;black&#x22; \/&#x3E;\r\n        &#x3C;\/mask&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;60&#x22; height=&#x22;60&#x22; mask=&#x22;url(#masker)&#x22; fill=&#x22;blue&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <mask id=\"masker\">\r\n        \t<rect x=\"10\" y=\"10\" width=\"60\" height=\"60\" fill=\"red\" \/>\r\n        \t<rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" fill=\"white\" \/>\r\n        \t<rect x=\"40\" y=\"40\" width=\"30\" height=\"30\" fill=\"black\" \/>\r\n        <\/mask>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"60\" height=\"60\" mask=\"url(#masker)\" fill=\"blue\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>","slur":"svg-clip-path-masks","cat":"Website","subcat":"SVG","video":"","diff":"3","quiz":""},
{"id":"315","title":"[SVG] Filters I","post":"<p>Filters are a very large part of SVG because they are very powerful. Applying a filter to any basic shape can subtly change it to make it look much better, but also transform an object to the point you can&rsquo;t recognize it anymore. There are lots of filters available, and every element can have one or multiple attached. If you hadn&rsquo;t noticed: by default, no filters are attached to anything.<\/p> \r\n\r\n<p>One thing you should understand very well, is the fact that filters work on a pixel level. If you scale an SVG graphic, the filter will try to scale with it by recalculating the filter, but it will still just be a bunch of pixels. Filters read what you put into it as a bunch of pixels with the colour channels R, G, B and A - each with a value between 0 and 1 - and every action you perform is about changing the values of all pixels in one way or another. Now we can continue with the fun parts!<\/p>\r\n\r\n<p>Filters work using the same two-step method as most other things in this course: define the filter somewhere inside a <code>&lt;defs&gt;<\/code> element, and use a special attribute on an element to use this filter. Filters, however, can be chained. This means that one filter can have multiple filter elements within it, which each build on the output the previous one produced. For example, I could first blur a shape, and then apply drop shadow to the blurred shape (instead of the original).<\/p>\r\n\r\n<img src=\"media\/SVGFilterPipeline.png\" \/>\r\n\r\n<p>Because of this, we always need to group the steps of our filter within a <code>&lt;filter&gt;<\/code> element. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;filter id=&rdquo;<em>filterName<\/em>&rdquo; x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; width=&rdquo;<em>width<\/em>&rdquo; height=&rdquo;<em>height<\/em>&rdquo;&gt;\r\n\t<em>&hellip; all the filter elements you want &hellip;<\/em>\r\n&lt;\/filter&gt;<\/code><\/p>\r\n\r\n<p>The <code>x<\/code> and <code>y<\/code> attributes position the filter relative to whatever graphic it&rsquo;s used on (default is <code>-10%<\/code>). For example, if you want a drop shadow to appear at the upper left corner, you&rsquo;ll need to offset the filter by a negative amount to make room for it. The <code>width<\/code> and <code>height<\/code> attributes serve a similar purpose: most filters end up a different size than the graphic they&rsquo;re used on (default is <code>120%<\/code>).<\/p>\r\n\r\n<p>To apply a filter to any shape, all you have to do is use this attribute:<\/p>\r\n\r\n<p><code class=\"longsyntax\">filter=\"url(#<em>filterName<\/em>)\"<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22;&#x3E;\r\n            \r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" x=\"0\" y=\"0\" width=\"100\" height=\"100\">\r\n            \r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" filter=\"url(#ourFilter)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>The Filter Primitives<\/h2>\r\n\r\n<p>As you&rsquo;ve probably noticed, last example didn&rsquo;t do anything. That&rsquo;s because we&rsquo;ve defined a filter container and given it a nice name, but there are no <em>filter primitives<\/em> inside it. These are the actual elements that have a certain effect on the graphic, which you can partly influence using special attributes.<\/p>\r\n\r\n<p>There are a lot of them, and I think just throwing them in a list now wouldn&rsquo;t clear things up, which is why I&rsquo;ll first demonstrate their general working.<\/p>\r\n\r\n<p>Every filter primitive has two standard attributes: <code>in<\/code> and <code>result<\/code>.<\/p>\r\n\r\n<p>The <code>in<\/code> attribute determines what is put into the filter. The value <code>SourceGraphic<\/code> simply uses the shape the filter is called upon as input, while <code>SourceAlpha<\/code> inputs the shape&rsquo;s alpha. Besides these standard values, you can also use the output of other filters as input.<\/p>\r\n\r\n<p>The <code>result<\/code> attribute is used for exactly that: specifying the output of a filter. This way you can chain lots of filter primitives in any way you like, by using the output of a filter as the input for the next.<\/p>\r\n\r\n<p>NOTE: The last filter primitive that is used within a filter, doesn&rsquo;t need the <code>result<\/code> attribute set. Its result is automatically used, no need to make up a name for it.<\/p>\r\n\r\n<h2>Merging<\/h2>\r\n\r\n<p>It&rsquo;s very important to understand that a filter acts on the original graphic. You&rsquo;ll need to go through some effort if you want to maintain the original shape together with the filter. This is done by <em>merging<\/em> the original shape and its filter together, and that will be our first filter primitive!<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feMerge&gt;\r\n\t&lt;feMergeNode in=&rdquo;<em>SomeFilter<\/em>&rdquo;\/&gt;\r\n\t&lt;feMergeNode in=&rdquo;SourceGraphic&rdquo; \/&gt;\r\n&lt;\/feMerge&gt;<\/code><\/p>\r\n\r\n<p>Of course, you can put many more nodes in there if you want, although it would make things quite complex.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22;&#x3E;\r\n            &#x3C;!-- You&#x27;ll learn about this blur primitive next section--&#x3E;\r\n            &#x3C;feGaussianBlur stdDeviation=&#x22;15&#x22; result=&#x22;blur&#x22;\/&#x3E;\r\n            \r\n            &#x3C;feMerge&#x3E;\r\n                &#x3C;feMergeNode in=&#x22;SourceGraphic&#x22; \/&#x3E;\r\n                &#x3C;feMergeNode in=&#x22;blur&#x22; \/&#x3E;\r\n            &#x3C;\/feMerge&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; filter=&#x22;url(#ourFilter)&#x22; fill=&#x22;red&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" x=\"0\" y=\"0\" width=\"100\" height=\"100\">\r\n            <feGaussianBlur stdDeviation=\"15\" result=\"blur\"\/>\r\n            \r\n            <feMerge>\r\n                <feMergeNode in=\"SourceGraphic\" \/>\r\n                <feMergeNode in=\"blur\" \/>\r\n            <\/feMerge>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" filter=\"url(#ourFilter)\" fill=\"red\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Blur<\/h2>\r\n\r\n<p>To blur a graphic around the edges, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feGaussianBlur stdDeviation=&rdquo;<em>value<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The <em>value<\/em> determines how wide the blur is &ndash; a low value creates a slight glow around the graphic, while a high value almost makes it unrecognizable.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22;&#x3E;\r\n            &#x3C;feGaussianBlur stdDeviation=&#x22;50&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; filter=&#x22;url(#ourFilter)&#x22; fill=&#x22;red&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" x=\"0\" y=\"0\" width=\"100\" height=\"100\">\r\n            <feGaussianBlur stdDeviation=\"50\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" filter=\"url(#ourFilter)\" fill=\"red\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Drop Shadow<\/h2>\r\n\r\n<p>For a drop shadow, we&rsquo;ll need (at least) two primitives.<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feOffset dx=&rdquo;<em>offsetX<\/em>&rdquo; dy=&rdquo;<em>offsetY<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>This simply offsets whatever is put into it by (<em>offsetX<\/em>, <em>offsetY<\/em>) amount.<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feBlend in2=&rdquo;<em>secondFilter<\/em>&rdquo; mode=&rdquo;<em>blendMode<\/em>&rdquo;\/&gt;<\/code><\/p>\r\n\r\n<p>This requires a second <em>in <\/em>attribure, <code>in2<\/code>, which it blends with the regular <code>in<\/code> attribute. This is very similar to merging, except for the fact that you can determine the way they are merged with <em>blendMode<\/em>. The possible values for this are: <code>normal<\/code>, <code>multiply<\/code>, <code>screen<\/code>, <code>darken<\/code>, and <code>lighten<\/code>.<\/p>\r\n\r\n<p>Usually, a drop shadow is also blurred, for which you can use the command from the previous section!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;-10%&#x22; y=&#x22;-10%&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feOffset dx=&#x22;15&#x22; dy=&#x22;15&#x22; result=&#x22;offset&#x22;\/&#x3E;\r\n            &#x3C;feGaussianBlur in=&#x22;offset&#x22; result=&#x22;shadow&#x22; stdDeviation=&#x22;15&#x22;\/&#x3E;\r\n            &#x3C;feBlend in=&#x22;shadow&#x22; in2=&#x22;SourceGraphic&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; filter=&#x22;url(#ourFilter)&#x22; fill=&#x22;black&#x22;\/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" x=\"-10%\" y=\"-10%\" width=\"200\" height=\"200\">\r\n            <feOffset dx=\"15\" dy=\"15\" result=\"offset\"\/>\r\n            <feGaussianBlur in=\"offset\" result=\"shadow\" stdDeviation=\"15\"\/>\r\n            <feBlend in=\"shadow\" in2=\"SourceGraphic\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" filter=\"url(#ourFilter)\" fill=\"black\"\/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-filters-I","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"316","title":"[SVG] Filters II","post":"<p>Continuing on last chapter, I&rsquo;ll discuss all other filters available in SVG. I won&rsquo;t go into too much detail &ndash; you&rsquo;ll need to experiment with these yourself to fully understand them, I think.<\/p> \r\n\r\n<h2>Textures<\/h2>\r\n\r\n<p>To place an image within the graphic, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feImage xlink:href=&rdquo;<em>linkToImage<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>To tile the result of another filter, for example the image from the previous one, across the entire graphic, use:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feTile \/&gt; <\/code><\/p>\r\n\r\n<p>To create a random noise texture, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feTurbulence baseFrequency=&rdquo;<em>value<\/em>&rdquo; numOctaves=&rdquo;<em>value<\/em>&rdquo; seed=&rdquo;<em>value<\/em>&rdquo; stitchTiles=&rdquo;<em>value<\/em>&rdquo; type=&rdquo;<em>value<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The first argument controls x and y pattern repetition. The second controls the level of detail, while the third represents the starting value for the randomness. These three mainly influence the algorithm for creating the noise.<\/p>\r\n\r\n<p>The <code>stitchTiles<\/code> attribute has values <code>stitch<\/code> and <code>noStitch<\/code>; the first attempts to make the noise look smooth, while the second doesn&rsquo;t. The <code>type<\/code> can be either <code>fractalNoise<\/code> (which will output more of a sandy result), or <code>turbulence<\/code> (default).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feTurbulence baseFrequency=&#x22;0.2&#x22; numOctaves=&#x22;10&#x22; seed=&#x22;4&#x22; in=&#x22;SourceGraphic&#x22; stichTiles=&#x22;stitch&#x22;\/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;70&#x22; height=&#x22;70&#x22; filter=&#x22;url(#ourFilter)&#x22; fill=&#x22;red&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" width=\"200\" height=\"200\">\r\n            <feTurbulence baseFrequency=\"0.2\" numOctaves=\"10\" seed=\"4\" in=\"SourceGraphic\" stichTiles=\"stitch\"\/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"70\" height=\"70\" filter=\"url(#ourFilter)\" fill=\"red\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>HTML SVG EXAMPLE<\/p>\r\n\r\n<h2>Morphing &amp; Displacing<\/h2>\r\n\r\n<p>To extrude or intrude a shape, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feMorphology operator=&rdquo;<em>value<\/em>&rdquo; radius=&rdquo;<em>value<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The first argument has the values <code>erode<\/code> (shrink the edges of the shape) and <code>dilate<\/code> (enlarge the edges of the shape). The <code>radius<\/code> determines by what amount this operator is executed.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feMorphology in=&#x22;SourceGraphic&#x22; operator=&#x22;erode&#x22; radius=&#x22;1&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n        &#x3C;filter id=&#x22;ourSecondFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feMorphology in=&#x22;SourceGraphic&#x22; operator=&#x22;dilate&#x22; radius=&#x22;2&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;50&#x22; filter=&#x22;url(#ourFilter)&#x22; style=&#x22;font-size:60px;&#x22; fill=&#x22;red&#x22;&#x3E;\r\n        LIFE\r\n    &#x3C;\/text&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;120&#x22; filter=&#x22;url(#ourSecondFilter)&#x22; style=&#x22;font-size:60px;&#x22; fill=&#x22;red&#x22;&#x3E;\r\n        LIFE\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter1\" width=\"200\" height=\"200\">\r\n            <feMorphology in=\"SourceGraphic\" operator=\"erode\" radius=\"1\" \/>\r\n        <\/filter>\r\n        <filter id=\"ourSecondFilter1\" width=\"200\" height=\"200\">\r\n            <feMorphology in=\"SourceGraphic\" operator=\"dilate\" radius=\"2\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <text x=\"20\" y=\"50\" filter=\"url(#ourFilter1)\" style=\"font-size:60px;\" fill=\"red\">\r\n        LIFE\r\n    <\/text>\r\n    <text x=\"20\" y=\"120\" filter=\"url(#ourSecondFilter1)\" style=\"font-size:60px;\" fill=\"red\">\r\n        LIFE\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>To morph two shapes together, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feComposite in2=&rdquo;<em>secondShape<\/em>&rdquo; operator=&rdquo;<em>value<\/em>&rdquo; k1=&rdquo;<em>val<\/em>&rdquo; k2=&rdquo;<em>val<\/em>&rdquo; k3=&rdquo;<em>val<\/em>&rdquo; k4=&rdquo;<em>val<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>It determines, using a certain operator, which alpha to assign to a pixel; a value of <code>0<\/code> means the pixel isn&rsquo;t displayed, a value of <code>1<\/code> means it&rsquo;s fully displayed. The last four arguments are only applicable if you choose the <code>arithmetic<\/code> operator. In that case, the result is calculated with the formula<\/p>\r\n\r\n<p><code class=\"longsyntax\">result = k1 * i1 * i2 + k2 * i1 + k3 * i2 + k4 \t<spancode>(<em>i = input<\/em>)<\/span><\/code><\/p>\r\n\r\n<p>This way of using it is especially important when working with lighting, which you&rsquo;ll see next chapter. The other values for the <code>operator<\/code> are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>over<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Both images are displayed over each other<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>in<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The part of the first image that is within the second image is displayed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>out<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The part of the first image that is outside of the second image is displayed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>atop<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as in, but now both images are displayed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>xor<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Both images are displayed, except for every overlapping pixel<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;-10%&#x22; y=&#x22;-10%&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feImage x=&#x22;10&#x22; y=&#x22;20&#x22; width=&#x22;90&#x22; height=&#x22;90&#x22; xlink:href=&#x22;media\/SVGBitmapvsVector.png&#x22; result=&#x22;img&#x22;\/&#x3E;\r\n            &#x3C;feComposite in=&#x22;SourceGraphic&#x22; in2=&#x22;img&#x22; operator=&#x22;xor&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;80&#x22; filter=&#x22;url(#ourFilter)&#x22; style=&#x22;font-size:60px;&#x22; fill=&#x22;red&#x22;&#x3E;\r\n        LIFE\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter2\" x=\"-10%\" y=\"-10%\" width=\"200\" height=\"200\">\r\n            <feImage x=\"10\" y=\"20\" width=\"90\" height=\"90\" xlink:href=\"media\/SVGBitmapvsVector.png\" result=\"img\"\/>\r\n            <feComposite in=\"SourceGraphic\" in2=\"img\" operator=\"xor\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <text x=\"20\" y=\"80\" filter=\"url(#ourFilter2)\" style=\"font-size:60px;\" fill=\"red\">\r\n        LIFE\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Lastly, we can displace a graphic using information from another graphic. For that, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feDisplacementMap in2=&rdquo;<em>secondGraphic<\/em>&rdquo; scale=&rdquo;<em>value<\/em>&rdquo; xChannelSelector=&rdquo;<em>value<\/em>&rdquo; yChannelSelector=&rdquo;<em>value<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The channel selectors each can have one of the values <code>R<\/code>, <code>G<\/code>, <code>B<\/code> or <code>A<\/code>. They select one of these colour channels of the second graphic to use for <em>x<\/em> or <em>y<\/em> displacement. The <code>scale<\/code> attribute scales the displacement, which means <code>0<\/code> will undo any displacement, and <code>1<\/code> is the default scale.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;-10%&#x22; y=&#x22;-10%&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;!-- The text is red, which means it&#x27;s displaced a lot in the x direction. --&#x3E;\r\n            &#x3C;!-- The y direction isn&#x27;t, because it uses blue, which is 0 --&#x3E;\r\n            &#x3C;feDisplacementMap in=&#x22;SourceGrapic&#x22; in2=&#x22;SourceGraphic&#x22; scale=&#x22;3&#x22; xChannelSelector=&#x22;R&#x22; yChannelSelector=&#x22;B&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;80&#x22; filter=&#x22;url(#ourFilter)&#x22; style=&#x22;font-size:60px;&#x22; fill=&#x22;red&#x22;&#x3E;\r\n        LIFE\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter3\" x=\"-10%\" y=\"-10%\" width=\"200\" height=\"200\">\r\n            <!-- The text is red, which means it's displaced a lot in the x direction. -->\r\n            <!-- The y direction isn't, because it uses blue, which is 0 -->\r\n            <feDisplacementMap in=\"SourceGrapic\" in2=\"SourceGraphic\" scale=\"3\" xChannelSelector=\"R\" yChannelSelector=\"B\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <text x=\"20\" y=\"80\" filter=\"url(#ourFilter3)\" style=\"font-size:60px;\" fill=\"red\">\r\n        LIFE\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>3D Transforms<\/h2>\r\n\r\n<p>There&rsquo;s only one element to transform shapes to be (seemingly) 3D, which means it has <em>lots<\/em> of attributes. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feConvolveMatrix order=&rdquo;<em>matSize<\/em>&rdquo; kernelMatrix=&rdquo;<em>matrix<\/em>&rdquo; divisor=&rdquo;<em>div<\/em>&rdquo; bias=&rdquo;<em>bias<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The <code>order<\/code> attribute sets the size of the matrix using two comma separated numbers. The matrix itself is supplied within the <code>kernelMatrix<\/code> attribute. The matrix consists of numbers, separated by whitespace. You can view the size of the matrix as the depth of extrusion (4x4 means 4-pixel deep extrusion), and the placing of <code>1<\/code>s as the angle. The <em>div<\/em> value divides the values that come out of this matrix, while the <em>bias<\/em> value adds to all those values.<\/p>\r\n\r\n<p>Furthermore, the <code>targetX<\/code> and <code>targetY<\/code> attributes set how to position the <em>matrix<\/em> relative to the target pixels. The default is at the centre, i.e., <code>floor(order\/2);<\/code><\/p>\r\n\r\n<p>The <code>edgeMode<\/code> attribute determines how to extrude the input graphic. Possible values are:<\/p>\r\n\r\n<ul>\r\n\t<li><code>duplicate<\/code>: Default. Extends along each border, using the pixel value on the outside.<\/li>\r\n\t<li><code>wrap<\/code>: Extends along each border, using the pixel value on the inside.<\/li>\r\n\t<li><code>none<\/code>: &nbsp; Extends using a pixel value of <code>0<\/code> for R, G, B and A.<\/li>\r\n<\/ul>\r\n\r\n<p>The <code>kernelUnitLength<\/code> can be set to assign a new value for how the distance in the graphic relates to the distance between two columns of the <em>matrix<\/em>. This means that the size of the <em>matrix<\/em> doesn&rsquo;t automatically determine the size of extrusion, but you can scale it yourself.<\/p>\r\n\r\n<p>Lastly, the <code>preserveAlpha<\/code> attribute can be set to either <code>false<\/code> or <code>true<\/code>. The first is default, and means the alpha channel is taken into account during all these matrix multiplications,&nbsp; while the latter means the matrix only applies to the colour channels.<\/p>\r\n\r\n<p>NOTE: (Remind me, if you read this, that I need to explain this better one day if I have the time)<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; x=&#x22;-10%&#x22; y=&#x22;-10%&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;!-- Text is extruded by 3\/0.5 = 6 pixels--&#x3E;\r\n            &#x3C;feConvolveMatrix order=&#x22;3,3&#x22; kernelMatrix=&#x22;1 0 0 0 1 0 0 0 1&#x22; divisor=&#x22;0.5&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;text x=&#x22;20&#x22; y=&#x22;20&#x22; filter=&#x22;url(#ourFilter)&#x22;&#x3E;\r\n        LIFE IS LIFE\r\n    &#x3C;\/text&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter4\" x=\"-10%\" y=\"-10%\" width=\"200\" height=\"200\">\r\n            <!-- Text is extruded by 3\/0.5 = 6 pixels-->\r\n            <feConvolveMatrix order=\"3,3\" kernelMatrix=\"1 0 0 0 1 0 0 0 1\" divisor=\"0.5\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <text x=\"20\" y=\"20\" filter=\"url(#ourFilter4)\">\r\n        LIFE IS LIFE\r\n    <\/text>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-filters-II","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"317","title":"[SVG] Filters III","post":"<p>This last chapter on filters tries to explain the two biggest groups: <strong>colours<\/strong> and <strong>lighting<\/strong>.<\/p> \r\n\r\n<h2>Colours<\/h2>\r\n\r\n<p>To just flood fill the whole filter with a certain colour, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feFlood flood-color=&rdquo;<em>color<\/em>&rdquo; flood-opacity=&rdquo;<em>opacity<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feFlood flood-color=&#x22;green&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;70&#x22; height=&#x22;70&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter\" width=\"200\" height=\"200\">\r\n            <feFlood flood-color=\"green\" \/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"70\" height=\"70\" filter=\"url(#ourFilter)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>To transform any colour you put in, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feColorMatrix type=&rdquo;<em>value<\/em>&rdquo; values=&rdquo;<em>values<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The possible types are<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>matrix<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sets the colour using matrix specified in <code>values<\/code>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>saturate<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Saturates the colour by the amount specified in <code>values<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>hueRotate<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes the hue by the amount of degrees specified in <code>values<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>luminanceToAlpha<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Uses the colour&rsquo;s luminance to set the alpha component of the colour, making it greyscale. Doesn&rsquo;t need a <code>values<\/code> attribute.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>This matrix is essentially a 5x4 matrix of values separated by spaces. The first four values of each row multiply the current R, G, B and A value with their number. The fifth value is a constant, and is automatically multiplied by 1. The value that comes out of each row sets the value for the R, G, B and A channel of the new colour, respectively. This process is repeated for all pixels.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feColorMatrix values=&#x22;0 0 0 0 5\r\n                                   0 0 0 0 0\r\n                                   0 0 0 0 0\r\n                                   0 0 0 0 0.5&#x22; type=&#x22;matrix&#x22; \/&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;70&#x22; height=&#x22;70&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter1\" width=\"200\" height=\"200\">\r\n            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5\"\/>\r\n        <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"70\" height=\"70\" filter=\"url(#ourFilter1)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n\r\n<p>To be able to transform colour channels <em>separately<\/em>, instead of all at the same time, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feComponentTransfer color-interpolation-filters=&rdquo;<em>value<\/em>&rdquo;&gt;<\/code><\/p>\r\n\r\n<p>The possible <em>values<\/em> are <code>linearRGB<\/code> (default) and <code>sRGB<\/code>. The second is a special form of RGB which can be used for very dark or light colours &ndash; for others it doesn&rsquo;t work at all like you want it to.&nbsp;<\/p>\r\n\r\n<p>Within the <code>&lt;feComponentTransfer&gt;<\/code> element, you can specify these child elements<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feFuncR type=&rdquo;<em>type<\/em>&rdquo; \/&gt;\r\n&lt;feFuncG type=&rdquo;<em>type<\/em>&rdquo; \/&gt;\r\n&lt;feFuncB type=&rdquo;<em>type<\/em>&rdquo; \/&gt;\r\n&lt;feFuncA type=&rdquo;<em>type<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>Of course, you don&rsquo;t necessarily need to specify all of them &ndash; only the colour channels you want changed.<\/p>\r\n\r\n<p>Depending on the type, several other attributes must be specified.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Attributes<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>identity<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Changes nothing &ndash; just passes on the input value as the output value.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>linear<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>intercept<\/code>, <code>slope<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Applies a simple linear formula to each pixel:<\/p>\r\n\r\n\t\t\t<p>output = intercept + slope*input<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>gamma<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>offset<\/code>, <code>amplitude<\/code>, <code>exponent<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Applies the gamma function:<\/p>\r\n\r\n\t\t\t<p>output = offset + amplitude*(input^exponent)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>table<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tableValues<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Divides the input range by the <em>amount<\/em> of numbers specified in the attribute. These ranges are mapped to the corresponding ranges specified within the attribute.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>discrete<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tableValues<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Divides the input range by the <em>amount<\/em> of numbers specified in the attribute. These ranges are mapped to the corresponding value within the attribute.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n        &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n            &#x3C;feComponentTransfer&#x3E;\r\n                &#x3C;!-- A bit of red is added everywhere, but especially at the orange side, because it already contained some red --&#x3E;\r\n                &#x3C;feFuncR type=&#x22;linear&#x22; intercept=&#x22;0.3&#x22; slope=&#x22;0.4&#x22;\/&#x3E;\r\n                &#x3C;!-- The area around the rectangle with alpha 0 is mapped to alpha 0.3. The rectangle itself had alpha 1, so it&#x27;s mapped to 0.8.--&#x3E;\r\n                &#x3C;feFuncA type=&#x22;discrete&#x22; tableValues=&#x22;0.3 0.8&#x22; \/&#x3E;\r\n            &#x3C;\/feComponentTransfer&#x3E;\r\n        &#x3C;\/filter&#x3E;\r\n        &#x3C;linearGradient id=&#x22;linGrad&#x22; x1=&#x22;0%&#x22; y1=&#x22;0%&#x22; x2=&#x22;100%&#x22; y2=&#x22;100%&#x22;&#x3E;\r\n            &#x3C;stop stop-color=&#x22;orange&#x22; offset=&#x22;0%&#x22; \/&#x3E;\r\n            &#x3C;stop stop-color=&#x22;green&#x22; offset=&#x22;100%&#x22;\/&#x3E;\r\n        &#x3C;\/linearGradient&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;70&#x22; height=&#x22;70&#x22; fill=&#x22;url(#linGrad)&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n        <filter id=\"ourFilter2\" width=\"200\" height=\"200\">\r\n            <feComponentTransfer>\r\n                <!-- A bit of red is added everywhere, but especially at the orange side, because it already contained some red -->\r\n                <feFuncR type=\"linear\" intercept=\"0.3\" slope=\"0.4\"\/>\r\n                <!-- The area around the rectangle with alpha 0 is mapped to alpha 0.3. The rectangle itself had alpha 1, so it's mapped to 0.8.-->\r\n                <feFuncA type=\"discrete\" tableValues=\"0.3 0.8\" \/>\r\n            <\/feComponentTransfer>\r\n        <\/filter>\r\n        <linearGradient id=\"linGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n            <stop stop-color=\"orange\" offset=\"0%\" \/>\r\n            <stop stop-color=\"green\" offset=\"100%\"\/>\r\n        <\/linearGradient>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"70\" height=\"70\" fill=\"url(#linGrad)\" filter=\"url(#ourFilter2)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Lighting<\/h2>\r\n\r\n<p>Lighting is usually viewed as a fundamental concept you need to master for 3D graphics, but it has its uses in 2D graphics as well. For example, there are lots of 2D games that create artificial lighting to create atmosphere, or numerous websites that simulate lighting to highlight certain parts or make them <em>seem<\/em> 3D. In SVG, two types of lighting are naturally supported.<\/p>\r\n\r\n<h3>Specular vs Diffuse<\/h3>\r\n\r\n<p>To be able to use any lighting, you need to wrap it inside one of these elements:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feSpecularLighting lighting-color=&rdquo;<em>color<\/em>&rdquo;&gt; <em>&hellip; your lights &hellip;<\/em> &lt;\/feSpecularLighting&gt;<\/code><\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feDiffuseLighting lighting-color=&rdquo;<em>color<\/em>&rdquo;&gt; <em>&hellip; your lights &hellip; <\/em>&lt;\/feDiffuseLighting&gt;<\/code><\/p>\r\n\r\n<p>The main difference is that <em>specular<\/em> lighting acts as if your graphic was a plain, smooth surface, while <em>diffuse<\/em> pretends it&rsquo;s a rough surface. In the first case, most light is reflected back at you, which leads to light, well-lit areas. In the second case, light waves fly in all directions, which generally leads to dark areas outside of the spot that the light focusses on. Diffuse lighting has a more subdued effect than specular.<\/p>\r\n\r\n<p>With <em>specular<\/em>, you can set the attributes <code>specularExponent<\/code> and <code>specularConstant<\/code>. The first determines the area of the falloff (how slowly light fades away), while the second sets a base level of lightness. With <em>diffuse<\/em>, two similar attributes <code>diffuseExponent<\/code> and <code>diffuseConstant<\/code> exist.<\/p>\r\n\r\n<p>Obviously, the <code>lighting-color<\/code> sets the colour of the light that is applied.<\/p>\r\n\r\n<h3>Blending Light &amp; Shape<\/h3>\r\n\r\n<p>To blend the created lighting and the original shape, it&rsquo;s best to use an <code>&lt;feComposite&gt;<\/code> element with the operator set to <code>algorithm<\/code>. It might be a good exercise to see for yourself why we should use the parameters given below &ndash; or just ignore that and believe me these are the real deal:<\/p>\r\n\r\n<p>For <em>specular<\/em> lighting, use <code>k1=0<\/code>, <code>k2=1<\/code>, <code>k3=1<\/code> and <code>k4=0<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n    &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n        &#x3C;feGaussianBlur in=&#x22;SourceAlpha&#x22; stdDeviation=&#x22;4&#x22; result=&#x22;blur1&#x22;\/&#x3E;\r\n        &#x3C;feSpecularLighting result=&#x22;specOut&#x22; in=&#x22;blur1&#x22; specularExponent=&#x22;20&#x22; lighting-color=&#x22;#bbbbbb&#x22;&#x3E;\r\n            &#x3C;fePointLight x=&#x22;50&#x22; y=&#x22;100&#x22; z=&#x22;200&#x22;\/&#x3E;\r\n        &#x3C;\/feSpecularLighting&#x3E;\r\n        &#x3C;feComposite in=&#x22;SourceGraphic&#x22; in2=&#x22;specOut&#x22; operator=&#x22;arithmetic&#x22; k1=&#x22;0&#x22; k2=&#x22;1&#x22; k3=&#x22;1&#x22; k4=&#x22;0&#x22;\/&#x3E;\r\n    &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;70&#x22; height=&#x22;70&#x22; fill=&#x22;orange&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n    <filter id=\"ourFilter3\" width=\"200\" height=\"200\">\r\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur1\"\/>\r\n        <feSpecularLighting result=\"specOut\" in=\"blur1\" specularExponent=\"20\" lighting-color=\"#bbbbbb\">\r\n            <fePointLight x=\"50\" y=\"100\" z=\"200\"\/>\r\n        <\/feSpecularLighting>\r\n        <feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\"\/>\r\n    <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"70\" height=\"70\" fill=\"orange\" filter=\"url(#ourFilter3)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>For <em>diffuse<\/em> lighting, use <code>k1=1<\/code>, <code>k2=0<\/code>, <code>k3=0<\/code> and <code>k4=0<\/code>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n    &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n        &#x3C;feGaussianBlur in=&#x22;SourceAlpha&#x22; stdDeviation=&#x22;10&#x22; result=&#x22;blur1&#x22;\/&#x3E;\r\n        &#x3C;feDiffuseLighting result=&#x22;specOut&#x22; in=&#x22;blur1&#x22; diffuseExponent=&#x22;20&#x22; diffuseConstant=&#x22;10&#x22; lighting-color=&#x22;#bbbbbb&#x22;&#x3E;\r\n            &#x3C;fePointLight x=&#x22;50&#x22; y=&#x22;100&#x22; z=&#x22;10&#x22;\/&#x3E;\r\n        &#x3C;\/feDiffuseLighting&#x3E;\r\n        &#x3C;feComposite in=&#x22;SourceGraphic&#x22; in2=&#x22;specOut&#x22; operator=&#x22;arithmetic&#x22; k1=&#x22;1&#x22; k2=&#x22;0&#x22; k3=&#x22;0&#x22; k4=&#x22;0&#x22;\/&#x3E;\r\n    &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;100&#x22; height=&#x22;100&#x22; fill=&#x22;orange&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n    <filter id=\"ourFilter4\" width=\"200\" height=\"200\">\r\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"10\" result=\"blur1\"\/>\r\n        <feDiffuseLighting result=\"specOut\" in=\"blur1\" diffuseExponent=\"20\" diffuseConstant=\"10\" lighting-color=\"#bbbbbb\">\r\n            <fePointLight x=\"50\" y=\"100\" z=\"10\"\/>\r\n        <\/feDiffuseLighting>\r\n        <feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"1\" k2=\"0\" k3=\"0\" k4=\"0\"\/>\r\n    <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"orange\" filter=\"url(#ourFilter4)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Point Light<\/h3>\r\n\r\n<p>A point light can be viewed like a light bulb &ndash; a small, round (local) area of lighting. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;fePointLight x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; z=&rdquo;<em>zPos<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>Note that the Z-axis is the imaginary axis pointing out of the screen, directly at the user. The previous two examples used point lights.<\/p>\r\n\r\n<h3>Distant Light<\/h3>\r\n\r\n<p>A distant light can be viewed like the sun &ndash; it shines from a certain direction and lights nearly everything in its path, except the few bits of graphic at the far end. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feDistantLight azimuth=&rdquo;<em>angleXY<\/em>&rdquo; elevation=&rdquo;<em>angleZ<\/em>&rdquo; \/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <\/code><\/p>\r\n\r\n<p>The <em>angleXY<\/em> value determines the angle or direction of the light in the XY plane. The <em>angleZ<\/em> value determines the angle in the Z plane.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n    &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n        &#x3C;feGaussianBlur in=&#x22;SourceAlpha&#x22; stdDeviation=&#x22;4&#x22; result=&#x22;blur1&#x22;\/&#x3E;\r\n        &#x3C;feSpecularLighting result=&#x22;specOut&#x22; in=&#x22;blur1&#x22; specularExponent=&#x22;20&#x22; lighting-color=&#x22;#bbbbbb&#x22;&#x3E;\r\n            &#x3C;feDistantLight azimuth=&#x22;45&#x22; elevation=&#x22;45&#x22;\/&#x3E;\r\n        &#x3C;\/feSpecularLighting&#x3E;\r\n        &#x3C;feComposite in=&#x22;SourceGraphic&#x22; in2=&#x22;specOut&#x22; operator=&#x22;arithmetic&#x22; k1=&#x22;0&#x22; k2=&#x22;1&#x22; k3=&#x22;1&#x22; k4=&#x22;0&#x22;\/&#x3E;\r\n    &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;120&#x22; height=&#x22;120&#x22; fill=&#x22;red&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n    <filter id=\"ourFilter5\" width=\"200\" height=\"200\">\r\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur1\"\/>\r\n        <feSpecularLighting result=\"specOut\" in=\"blur1\" specularExponent=\"20\" lighting-color=\"#bbbbbb\">\r\n            <feDistantLight azimuth=\"45\" elevation=\"45\"\/>\r\n        <\/feSpecularLighting>\r\n        <feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\"\/>\r\n    <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"120\" height=\"120\" fill=\"red\" filter=\"url(#ourFilter5)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Spot Light<\/h3>\r\n\r\n<p>A spot light is some sort of compromise between the previous two types. It shines from a certain direction, but is contained within a circle. It&rsquo;s very similar to a spot light used in, for example, theatres in real life.<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;feSpotLight x=&rdquo;<em>xPos<\/em>&rdquo; y=&rdquo;<em>yPos<\/em>&rdquo; z=&rdquo;<em>zPos<\/em>&rdquo; pointsAtX=&rdquo;<em>targetX<\/em>&rdquo; pointsAtY=&rdquo;<em>targetY<\/em>&rdquo; pointsAtZ=&rdquo;<em>targetZ<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The <code>x<\/code>, <code>y<\/code> and <code>z<\/code> attributes determine the actual position of the spotlight, while the <code>pointsAtX<\/code>, <code>pointsAtY<\/code> and <code>pointsAtZ<\/code> attributes determine what it actually points towards.<\/p>\r\n\r\n<p>Additionally, the <code>limitingConeAngle<\/code> attribute can be set to restrict the angle under which light is projected. No light is projected outside of this cone.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;defs&#x3E;\r\n    &#x3C;filter id=&#x22;ourFilter&#x22; width=&#x22;200&#x22; height=&#x22;200&#x22;&#x3E;\r\n        &#x3C;feGaussianBlur in=&#x22;SourceAlpha&#x22; stdDeviation=&#x22;4&#x22; result=&#x22;blur1&#x22;\/&#x3E;\r\n        &#x3C;feSpecularLighting result=&#x22;specOut&#x22; in=&#x22;blur1&#x22; specularExponent=&#x22;20&#x22; lighting-color=&#x22;#bbbbbb&#x22;&#x3E;\r\n            &#x3C;feSpotLight x=&#x22;120&#x22; y=&#x22;60&#x22; z=&#x22;100&#x22; pointsAtX=&#x22;70&#x22; pointsAtY=&#x22;60&#x22; pointsAtZ=&#x22;0&#x22; limitingConeAngle=&#x22;20&#x22;\/&#x3E;\r\n        &#x3C;\/feSpecularLighting&#x3E;\r\n        &#x3C;feComposite in=&#x22;SourceGraphic&#x22; in2=&#x22;specOut&#x22; operator=&#x22;arithmetic&#x22; k1=&#x22;0&#x22; k2=&#x22;1&#x22; k3=&#x22;1&#x22; k4=&#x22;0&#x22;\/&#x3E;\r\n    &#x3C;\/filter&#x3E;\r\n    &#x3C;\/defs&#x3E;\r\n    &#x3C;rect x=&#x22;10&#x22; y=&#x22;10&#x22; width=&#x22;120&#x22; height=&#x22;120&#x22; fill=&#x22;red&#x22; filter=&#x22;url(#ourFilter)&#x22; \/&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <defs>\r\n    <filter id=\"ourFilter6\" width=\"200\" height=\"200\">\r\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur1\"\/>\r\n        <feSpecularLighting result=\"specOut\" in=\"blur1\" specularExponent=\"20\" lighting-color=\"#bbbbbb\">\r\n            <feSpotLight x=\"120\" y=\"60\" z=\"100\" pointsAtX=\"70\" pointsAtY=\"60\" pointsAtZ=\"0\" limitingConeAngle=\"20\"\/>\r\n        <\/feSpecularLighting>\r\n        <feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\"\/>\r\n    <\/filter>\r\n    <\/defs>\r\n    <rect x=\"10\" y=\"10\" width=\"120\" height=\"120\" fill=\"red\" filter=\"url(#ourFilter6)\" \/>\r\n<\/svg>\r\n<\/div>\r\n<\/div>","slur":"svg-filters-III","cat":"Website","subcat":"SVG","video":"","diff":"5","quiz":""},
{"id":"318","title":"[SVG] Scripting & Animation","post":"<p>Finally, the last chapter will fulfil the promise of <em>dynamic graphics<\/em> I made at the beginning. Because SVG seamlessly integrates with HTML and CSS, we can just use JavaScript to attach any sort of script to elements. Even better, we can change\/animate all attributes by means of the regular JavaScript notation for accessing attributes. For simple animations and transitions, we can use CSS as well &ndash; but, when things get complex, we&rsquo;ll need to rely on some special SVG animation elements.<\/p> \r\n\r\n<h2>JavaScript<\/h2>\r\n\r\n<p>If you don&rsquo;t know JavaScript, or have forgotten how it works, here&rsquo;s a quick reminder.<\/p>\r\n\r\n<p>By using <code>document.getElementById(<em>someID<\/em>)<\/code> we can access elements by their <code>id<\/code> attribute, which is what we&rsquo;ve been using every time to assign names to elements.<\/p>\r\n\r\n<p>Then, we can use the <code>setAttribute(<em>name<\/em>, <em>newValue<\/em>)<\/code> attribute on that element to set an attribute&rsquo;s value, and <code>getAttribute(<em>name<\/em>)<\/code> to get the current value of a certain attribute.<\/p>\r\n\r\n<pre data-lang=\"javascript\">\r\nvar obj = document.getElementById(\"circly\"); \/\/Gets element with id \"circly\", which is a circle\r\nobj.setAttribute(r,50); \/\/Changes the circle's radius to 50\r\n<\/pre>\r\n\r\n<h2>SVG Animation<\/h2>\r\n\r\n<p>CSS can do a lot for you in terms of animation, but its support for animations and transitions has to stop at some point, and that is when a few SVG-specific elements can step in. These are a bit more complex than simple CSS animations, but you get much more customizability in return. The four SVG animation elements are: <code>&lt;set&gt;<\/code>, <code>&lt;animate&gt;<\/code>, <code>&lt;animateTransform&gt;<\/code> and <code>&lt;animateMotion&gt;<\/code>.<\/p>\r\n\r\n<p>There&rsquo;s one thing these all have in common: they need to be placed <em>within<\/em> the element they have an effect on. So, for example, if you want to animate a circle shape, you place one of these animation elements as a child element within the circle element.<\/p>\r\n\r\n<h2>The set Element<\/h2>\r\n\r\n<p>Let&rsquo;s start simple. To set the value of an attribute after a certain amount of time &ndash; which I like to call <em>delayed attribute assignment<\/em> &ndash; use this:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;set attributeType=&rdquo;XML&rdquo; attributeName=&rdquo;<em>someAttribute<\/em>&rdquo; to=&rdquo;<em>newValue<\/em>&rdquo; begin=&rdquo;<em>time<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The first argument is required for all animations of SVG attributes, because they are based on XML (as I briefly discussed at the start of the course).<\/p>\r\n\r\n<p>This element changes <em>someAttribute<\/em> to <em>newValue<\/em>, and does so after waiting <em>time<\/em> amount of time.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;circle cx=&#x22;40&#x22; cy=&#x22;40&#x22; r=&#x22;20&#x22;&#x3E;\r\n        &#x3C;!-- Wait for 5 seconds to see this change! --&#x3E;\r\n        &#x3C;set attributeType=&#x22;XML&#x22; attributeName=&#x22;r&#x22; to=&#x22;40&#x22; begin=&#x22;5s&#x22; \/&#x3E;\r\n    &#x3C;\/circle&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <circle cx=\"40\" cy=\"40\" r=\"20\">\r\n        <set attributeType=\"XML\" attributeName=\"r\" to=\"40\" begin=\"5s\" \/>\r\n    <\/circle>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Time Units<\/h2>\r\n\r\n<p>SVG knows four units for time:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Unit<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>h<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>hour<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>min<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>minutes<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>s<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>seconds<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ms<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>milliseconds<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Regular Animations<\/h2>\r\n\r\n<p>We can extend this concept of changing attributes after a certain time, and instead gradually change an attribute over time. For this, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;animate attributeName=&rdquo;<em>attr<\/em>&rdquo; attributeType=&rdquo;XML&rdquo; from=&rdquo;<em>startVal<\/em>&rdquo; to=&rdquo;<em>targetVal<\/em>&rdquo; begin=&rdquo;<em>time<\/em>&rdquo; dur=&rdquo;<em>duration<\/em>&rdquo; repeatCount=&rdquo;<em>number<\/em>&rdquo;\/&gt;<\/code><\/p>\r\n\r\n<p>This changes the attribute <em>attr<\/em> from <em>startVal<\/em> to <em>targetVal<\/em>, over the course of <em>duration<\/em> time. If you want, you can delay the start using the <code>begin<\/code> attribute. The <code>repeatCount<\/code> attribute determines how often the animation is repeated; a value of <code>indefinite<\/code> keeps the animation looping forever.<\/p>\r\n\r\n<p>Additionally, the <code><attr>fill<\/attr>=&rdquo;<em>value<\/em>&rdquo;<\/code> attribute sets what to do when the animation is completed. The default value is <code>fill<\/code>, which resets the shape. The other value is <code>freeze<\/code>, which doesn&rsquo;t do anything on completion.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;circle cx=&#x22;40&#x22; cy=&#x22;40&#x22; r=&#x22;20&#x22;&#x3E;\r\n        &#x3C;animate attributeType=&#x22;XML&#x22; attributeName=&#x22;cx&#x22; from=&#x22;0&#x22; to=&#x22;100&#x22; begin=&#x22;0s&#x22; dur=&#x22;10s&#x22; repeatCount=&#x22;indefinite&#x22; \/&#x3E;\r\n    &#x3C;\/circle&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <circle cx=\"40\" cy=\"40\" r=\"20\">\r\n        <animate attributeType=\"XML\" attributeName=\"cx\" from=\"0\" to=\"100\" begin=\"0s\" dur=\"10s\" repeatCount=\"indefinite\" \/>\r\n    <\/circle>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Transform Animations<\/h2>\r\n\r\n<p>For some reason, to animate transforms we need another element. The syntax for this is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;animateTransform attributeName=&rdquo;transform&rdquo; type=&rdquo;<em>transform<\/em>&rdquo; from=&rdquo;<em>startVals<\/em>&rdquo; to=&rdquo;<em>targetVals<\/em>&rdquo; begin=&rdquo;<em>time<\/em>&rdquo; dur=&rdquo;<em>duration<\/em>&rdquo; repeatCount=&rdquo;<em>number<\/em>&rdquo; \/&gt;<\/code><\/p>\r\n\r\n<p>The possible values for <code>type<\/code> are what you expect from CSS transforms: <code>translate<\/code>, <code>rotate<\/code> and <code>scale<\/code>. Because these need multiple values as input, you can separate values by whitespace in the <code>from<\/code> and <code>to<\/code> attribute.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect x=&#x22;40&#x22; y=&#x22;40&#x22; width=&#x22;20&#x22; height=&#x22;20&#x22;&#x3E;\r\n        &#x3C;animateTransform attributeType=&#x22;XML&#x22; attributeName=&#x22;transform&#x22; type=&#x22;rotate&#x22; from=&#x22;0 60 70&#x22; to=&#x22;360 60 70&#x22; begin=&#x22;0s&#x22; dur=&#x22;5s&#x22; repeatCount=&#x22;indefinite&#x22; \/&#x3E;\r\n    &#x3C;\/rect&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect x=\"40\" y=\"40\" width=\"20\" height=\"20\">\r\n        <animateTransform attributeType=\"XML\" attributeName=\"transform\" type=\"rotate\" from=\"0 60 70\" to=\"360 60 70\" begin=\"0s\" dur=\"5s\" repeatCount=\"indefinite\" \/>\r\n    <\/rect>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Animations along Paths<\/h2>\r\n\r\n<p>To create an animation along a path, you&rsquo;ll need<\/p>\r\n\r\n<p><code class=\"longsyntax\">&lt;animateMotion begin=&rdquo;<em>time<\/em>&rdquo; dur=&rdquo;<em>duration<\/em>&rdquo; repeatCount=&rdquo;<em>number<\/em>&rdquo; &gt;\r\n\t&lt;mpath xlink:href=&rdquo;#<em>thePath<\/em>&rdquo; \/&gt;\r\n&lt;\/animateMotion&gt;<\/code><\/p>\r\n\r\n<p>Because these animations automatically influence the x and y position, you don&rsquo;t need to set an attribute. They also automatically start at the beginning of the path, and finish at the end of the path.<\/p>\r\n\r\n<p>Additionally, you can set an extra <code><attr>rotate<\/attr>=&rdquo;auto&rdquo;<\/code> attribute to automatically rotate the shape to be oriented in the same direction as its current position on the motion path. You can also set this attribute to a specific value, to set the shape to a fixed amount of degrees.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n&#x9;&#x3C;path d=&#x22;M20,40 L60,20 L120,80&#x22; id=&#x22;somePath&#x22; stroke=&#x22;green&#x22; fill=&#x22;transparent&#x22;\/&#x3E;\r\n    &#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;20&#x22; height=&#x22;20&#x22;&#x3E;\r\n        &#x3C;animateMotion begin=&#x22;0s&#x22; dur=&#x22;5s&#x22; repeatCount=&#x22;indefinite&#x22;&#x3E;\r\n            &#x3C;mpath xlink:href=&#x22;#somePath&#x22; \/&#x3E;\r\n        &#x3C;\/animateMotion&#x3E;\r\n    &#x3C;\/rect&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n\t<path d=\"M20,40 L60,20 L120,80\" id=\"somePath\" stroke=\"green\" fill=\"transparent\"\/>\r\n    <rect x=\"0\" y=\"0\" width=\"20\" height=\"20\">\r\n        <animateMotion begin=\"0s\" dur=\"5s\" repeatCount=\"indefinite\">\r\n            <mpath xlink:href=\"#somePath\" \/>\r\n        <\/animateMotion>\r\n    <\/rect>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Combining &amp; Chaining Animations<\/h2>\r\n\r\n<p>To combine animations, which means executing them at the same time, you just need to include multiple animation elements within the same shape. With <code>&lt;animateTransform&gt;<\/code> elements, however, multiple animations cancel each other out. To prevent this, add an <code><attr>additive<\/attr>=&rdquo;sum&rdquo;<\/code> attribute to all of those elements.<\/p>\r\n\r\n<p>To chain animations, however, we need to know when a certain animation stops. To do so, we first assign a name to an animation with the <code>id<\/code> attribute (like we&rsquo;re used to). Then, we use <code><em>name<\/em>.begin<\/code> to get the time a certain animation begins, or <code><em>name<\/em>.end<\/code> to get when the referenced animation ends. These just return values, which means we can also perform calculations with them to obtain the specific effect we want.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;svg&#x3E;\r\n    &#x3C;rect x=&#x22;0&#x22; y=&#x22;0&#x22; width=&#x22;30&#x22; height=&#x22;15&#x22;&#x3E;\r\n    \r\n        &#x3C;animate id=&#x22;one&#x22;\r\n                 attributeName=&#x22;x&#x22; attributeType=&#x22;XML&#x22;\r\n                 from=&#x22;0&#x22; to=&#x22;50&#x22;\r\n                 begin=&#x22;0s&#x22; dur=&#x22;3s&#x22; fill=&#x22;freeze&#x22;\r\n                \/&#x3E;\r\n        &#x3C;animate\r\n                attributeName=&#x22;y&#x22; attributeType=&#x22;XML&#x22;\r\n                from=&#x22;0&#x22; to=&#x22;50&#x22;\r\n                begin=&#x22;one.end&#x22; dur=&#x22;3s&#x22; fill=&#x22;freeze&#x22;\r\n                \/&#x3E;\r\n    &#x3C;\/rect&#x3E;\r\n&#x3C;\/svg&#x3E;\r\n<\/pre>\r\n<div>\r\n<svg>\r\n    <rect x=\"0\" y=\"0\" width=\"30\" height=\"15\">\r\n    \r\n        <animate id=\"one\"\r\n                 attributeName=\"x\" attributeType=\"XML\"\r\n                 from=\"0\" to=\"50\"\r\n                 begin=\"0s\" dur=\"3s\" fill=\"freeze\"\r\n                \/>\r\n        <animate\r\n                attributeName=\"y\" attributeType=\"XML\"\r\n                from=\"0\" to=\"50\"\r\n                begin=\"one.end\" dur=\"3s\" fill=\"freeze\"\r\n                \/>\r\n    <\/rect>\r\n<\/svg>\r\n<\/div>\r\n<\/div>\r\n","slur":"svg-scripting-animation","cat":"Website","subcat":"SVG","video":"","diff":"4","quiz":""},
{"id":"319","title":"Guide to (HTML5) Canvas","post":"<p>When HTML5 came around the corner, a new and very powerful element was introduced. I&rsquo;m talking about the <code>&lt;canvas&gt;<\/code> element, which does exactly what you&rsquo;d expect: create an empty canvas within a webpage, for you to paint your pretty pictures on. The element itself, just like the rest of HTML, doesn&rsquo;t have any complexity to it; all you need to do is type it, and your canvas is ready to be used. To do anything meaningful with it, though, JavaScript is used. JavaScript has lots of objects and methods designed specifically for the canvas, and those are what this course will teach you. Therefore, before you start, make sure you know the basics of HTML and JavaScript. The first chapter will take you by the hand and remind you of everything, but I subsequently keep the examples clean and simple.<\/p> \r\n\r\n<p>Because JavaScript is used to create, draw and modify the canvas, there&rsquo;s a lot more to it than just <em>creating a picture<\/em>. For example, the main use of the canvas is for creating games right in your web browser. This course will not really focus on that particular aspect, but I just wanted to tell you what you could use all this information for.<\/p>\r\n\r\n<p>Have fun!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>The canvas Element<\/li>\r\n\t<li>Paths<\/li>\r\n\t<li>Lines &amp; Curves<\/li>\r\n\t<li>Stroke Styles<\/li>\r\n\t<li>Shapes<\/li>\r\n\t<li>Fill Styles<\/li>\r\n\t<li>Text<\/li>\r\n\t<li>Transformations<\/li>\r\n\t<li>Images<\/li>\r\n\t<li>Composites<\/li>\r\n\t<li>Animation<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"guide-html5-canvas","cat":"Website","subcat":"Canvas","video":"","diff":"1","quiz":""},
{"id":"320","title":"[Canvas] The canvas Element","post":"<p>From an HTML perspective, creating a canvas is nothing special. It's just a regular tag with no extraordinary attributes or syntax. To create a canvas, use:<\/p> \r\n\r\n<p><code class=\"longsyntax\">&lt;canvas id=&rdquo;<em>myID<\/em>&rdquo; width=&rdquo;<em>width<\/em>&rdquo; height=&rdquo;<em>height<\/em>&rdquo;&gt; <em>fallback text<\/em> &lt;\/canvas&gt;<\/code><\/p>\r\n\r\n<p>The <em>fallback text<\/em> is displayed only if a user&rsquo;s browser doesn&rsquo;t support this element.<\/p>\r\n\r\n<p>Unlike the rest of HTML, you shouldn&rsquo;t use CSS to set the width and height of the canvas. The canvas defaults to a size of <code>300px<\/code> (width) by <code>150px<\/code> (height), and if you set a width or height with CSS, it simply <em>stretches<\/em> or <em>shrinks<\/em> the original canvas image to be this size. Sometimes you want that, but more often than not you don&rsquo;t. If you want your canvas to be a specific size, set the <code>width<\/code> and <code>height<\/code> <em>attributes<\/em> on the canvas element itself.<\/p>\r\n\r\n<p>And last but not least, we need to set an <code>id<\/code> if we want to be able to access the canvas element with JavaScript. Of course, there are other ways to select elements, but this is by far the easiest.<\/p>\r\n\r\n<h2>Timing<\/h2>\r\n\r\n<p>One of the common issues with JavaScript is that you need to wait for elements to finish loading before you can access them. Therefore, any code that wants to manipulate the canvas&nbsp;needs to be executed at the right time. There are two common ways to do so: by placing your code <em>after<\/em> the canvas element within the body of the page, or by placing it inside a function that is called after the page has been loaded.<\/p>\r\n\r\n<p>Accessing the canvas can be done in the same way you&rsquo;d access any other element, with <code>getElementById()<\/code>, but that is not enough if we want to draw something on it. We need to access the part of the element that is responsible for drawing, which is done with <code>getContext(&lsquo;2d&rsquo;)<\/code>. Any time I refer to the <em>context<\/em> in this course, I mean this 2D context of the canvas. Any and every canvas method should be applied to its context, and not the element itself.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"html\">\r\n&#x3C;canvas id=&#x22;myCanvas&#x22; width=&#x22;600&#x22; height=&#x22;300&#x22;&#x3E;\r\n&#x9;&#x3C;p&#x3E;Sorry, your browser doesn&#x27;t support the CANVAS element.&#x3C;\/p&#x3E;\r\n&#x3C;\/canvas&#x3E;\r\n&#x3C;script&#x3E;\r\nvar canvas = document.getElementById(&#x27;myCanvas&#x27;);\r\nvar ctx = canvas.getContext(&#x27;2d&#x27;);\r\n\r\n\/\/Perform canvas operations with the context stored in the ctx variable\r\n\/\/For example, creating a rectangle!\r\nctx.fillRect(10,10,100,100);\r\n&#x3C;\/script&#x3E;\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>I will leave out this important bit of JavaScript in the examples&nbsp;from now on, but never forget to include it yourself!<\/p>\r\n\r\n<h2>Coordinate System<\/h2>\r\n\r\n<p>Before we continue our journey into the world of canvas, I need to clear up one thing. The coordinate system used is not like in traditional mathematics (<em>Cartesian coordinates<\/em>).<\/p>\r\n\r\n<p>In the traditional system, moving <em>upwards<\/em> from the origin increases values on the y-axis. In the canvas system, the origin is at the top left corner, and moving <em>downwards<\/em> increases values on the y-axis.<\/p>\r\n\r\n<img src=\"media\/CanvasCoordinateSystem.png\" \/>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.fillRect(10,10,100,100);\r\n<\/script>\r\n","slur":"html5-canvas-element","cat":"Website","subcat":"Canvas","video":"","diff":"2","quiz":""},
{"id":"321","title":"[Canvas] Paths","post":"<p>Essentially, every shape you draw is a bunch of points connected with lines, which we call a <strong>path<\/strong>. A path has to start somewhere, and can be closed when we&rsquo;ve created all the necessary parts. For example, a rectangle is a path of four points with straight lines connecting them.<\/p> \r\n\r\n<p>To create a path, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">beginPath();\r\n\t<em>any path methods<\/em>\r\nclosePath();<\/code><\/p>\r\n\r\n<p>Closing the path is not strictly necessary, as beginning a new path automatically tells JavaScript that the previous one should be closed (we can&rsquo;t nest paths inside paths). The <code>closePath()<\/code> method therefore connects the first and last point with a straight line, literally closing the path.<\/p>\r\n\r\n<h2>Displaying Paths<\/h2>\r\n\r\n<p>Creating a path, however, is not enough to display it. Now JavaScript has a bunch of points connected in certain ways, but it doesn&rsquo;t know, for example, what colour to use. There are two different components of a path that can be styled, which is the <strong>stroke<\/strong> and the <strong>fill<\/strong>.<\/p>\r\n\r\n<p>The <em>stroke<\/em> is the actual path, or outline of the path. When you draw a straight line between two points, you can display the line by displaying the stroke of the path.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To stroke the last shape you created, use <code>stroke()<\/code><\/p>\r\n\r\n<p>The <em>fill<\/em> is how a path is filled. When you draw a rectangle, you can make it a blue rectangle by changing the fill to be blue.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">To fill the last shape you created, use <code>fill()<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.drawRect(10,10,100,100);\r\n\/\/At this point, nothing is displayed yet\r\nctx.stroke();\r\nctx.fill();\r\n\/\/Now the rectangle is filled and outlined with black\r\n\/\/Because the rectangle already is a closed shape, closePath() is not needed\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>As you might have noticed, we still haven&rsquo;t said anything about the colours or techniques to use for stroking\/filling, in which case the canvas defaults to black. Throughout this course you&rsquo;ll learn ways to do that, but for now I want to focus on those <em>path methods<\/em> that actually create the shapes you want.<\/p>\r\n\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.rect(10,10,100,100);\r\nctx.stroke();\r\nctx.fill();\r\n<\/script>\r\n","slur":"html5-canvas-paths","cat":"Website","subcat":"Canvas","video":"","diff":"3","quiz":""},
{"id":"322","title":"[Canvas] Lines & Curves","post":"<p>Let&rsquo;s start with the most basic path elements of them all: straight and curved lines.<\/p> \r\n\r\n<h2>Straight Lines<\/h2>\r\n\r\n<p>A straight line needs two things: a starting point, and subsequent points of the line.<\/p>\r\n\r\n<p>Use <code>moveTo(<em>x<\/em>, <em>y<\/em>)<\/code> to set the starting point to (<em>x,y<\/em>).<\/p>\r\n\r\n<p>Use <code>lineTo(<em>x,<\/em> <em>y<\/em>)<\/code> to create a line from the previous point to (<em>x,y<\/em>). You can put as many of these methods as you want after each other, but the order in which you supply them matters a lot; the line it creates uses the last coordinates as starting point.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.lineTo(20,50);\r\nctx.lineTo(50,20);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Quadratic Curve<\/h2>\r\n\r\n<p>A quadratic curve is a curved line between two points, which needs one extra control point to determine how exactly it is curved. The only difference from straight lines, therefore, is that instead of <code>lineTo()<\/code>, it uses:<\/p>\r\n\r\n<p><code class=\"longsyntax\">quadraticCurveTo(<em>controlX, controlY, x, y<\/em>) <\/code><\/p>\r\n\r\n<img src=\"media\/CanvasQuadraticCurveTo.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.quadraticCurveTo(30,30,50,10);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Bezier Curve<\/h2>\r\n\r\n<p>The Bezier curve goes one step further, and needs two control points. This way, you make more complicated curves, going in two different directions between two points. Instead of <code>lineTo()<\/code>, it uses:<\/p>\r\n\r\n<p><code class=\"longsyntax\">bezierCurveTo(<em>controlX<sub>1<\/sub>, controlY<sub>1<\/sub>, controlX<sub>2<\/sub>, controlY<sub>2<\/sub>, x, y<\/em>)<\/code><\/p>\r\n\r\n<img src=\"media\/CanvasBezierCurveTo.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.bezierCurveTo(30,10,60,30,80,10);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Arc<\/h2>\r\n\r\n<p>An arc is a (part of a) circle. It allows you to create perfectly round paths from one point to another, without doing difficult things with control points. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">arc(<em>x, y, r, startAngle, endAngle, direction<\/em>)<\/code><\/p>\r\n\r\n<img src=\"media\/CanvasArc.png\" \/>\r\n\r\n<p>Basically, the arc draws a circle with centre point (<em>x,y<\/em>) and radius <em>r<\/em>, but then only takes the part between <em>startAngle<\/em> and <em>endAngle<\/em>.<\/p>\r\n\r\n<p>The last parameter, <em>direction<\/em>, can be either <code>true<\/code> or <code>false<\/code>. In the first case, the arc is drawn <em>clockwise<\/em>. In the second case, <em>counterclockwise<\/em>.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.arc(30,30,20,0,Math.PI);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Arc Lines<\/h2>\r\n\r\n<p>Now you might be wondering: wouldn&rsquo;t it be great if we could not only use arcs as standalone paths, but also as part of a path? Well you&rsquo;re in luck, because instead of <code>lineTo()<\/code>, you can use<\/p>\r\n\r\n<p><code class=\"longsyntax\">arcTo(<em>x<sub>1<\/sub>, y<sub>1<\/sub>, x<sub>2<\/sub>, y<sub>2<\/sub>, r<\/em>)<\/code><\/p>\r\n\r\n<img src=\"media\/CanvasArcTo.png\" \/>\r\n\r\n<p>Instead of using angles, it uses two points to set the size and direction of the arc.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.arcTo(60,30,60,60,20);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas5\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Such arcs are commonly used to create round corners for shapes.<\/p>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.lineTo(20,50);\r\nctx.lineTo(50,20);\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.quadraticCurveTo(30,30,50,10);\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(10,10)\r\nctx.bezierCurveTo(30,10,60,30,80,10);\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.arc(30,30,20,0,Math.PI);\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas5');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.arcTo(60,30,60,60,20);\r\nctx.stroke();\r\n<\/script>\r\n","slur":"html5-canvas-lines-curves","cat":"Website","subcat":"Canvas","video":"","diff":"3","quiz":""},
{"id":"323","title":"[Canvas] Stroke Styles","post":"<p>Last chapter introduced lots of ways to create fancy lines, but their default black, thin stroke is already becoming quite boring. Not only can we use certain properties to make our lines bigger and in different colour, but there are also subtle changes to be made which can have a big impact<\/p> \r\n\r\n<h2>Line Width<\/h2>\r\n\r\n<p>The size of the line. The default is <code>1<\/code>, which makes a stroke only <code>1px<\/code> wide. To change this, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">lineWidth = <em>number<\/em><\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.lineWidth = 10;\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Stroke Colour<\/h2>\r\n\r\n<p>The colour of the line. The default is black, to change this use<\/p>\r\n\r\n<p><code class=\"longsyntax\">strokeStyle = <em>value<\/em><\/code><\/p>\r\n\r\n<p>The <em>value<\/em> can be any valid CSS colour code, but also a variable that contains a gradient or pattern. You&rsquo;ll learn how to create those later.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.strokeStyle = \"red\";\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Line Cap<\/h2>\r\n\r\n<p>The <em>line cap<\/em> determines how the two end points of a line are styled. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">lineCap = <em>value<\/em><\/code><\/p>\r\n\r\n<p>There are three possible values: <code>butt<\/code> (default), <code>round<\/code> and <code>square<\/code>.<\/p>\r\n\r\n<img src=\"media\/CanvasLineCap.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.lineWidth = 30;\r\nctx.lineCap = 'round';\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Line Join<\/h2>\r\n\r\n<p>This property determines how a point &ndash; one where two lines meet or <em>join<\/em> &ndash; is styled. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">lineJoin = <em>value<\/em><\/code><\/p>\r\n\r\n<p>There are three possible values: <code>miter<\/code> (default), <code>round<\/code> and <code>bevel<\/code>. Especially on thicker lines, this can make a huge difference.<\/p>\r\n\r\n<img src=\"media\/CanvasLineJoin.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(60,20);\r\nctx.lineTo(100,60);\r\nctx.lineWidth = 30;\r\nctx.lineJoin = \"bevel\";\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Miter Limit<\/h2>\r\n\r\n<p>The default method for joining lines has the nasty side-effect that it creates very large, sharp corners if the angle between two lines is very small. You can tell the canvas to cut off this so-called <em>miter<\/em> if it gets too long using an upper bound:<\/p>\r\n\r\n<img src=\"media\/CanvasMiterLimit.png\" \/>\r\n\r\n<p><code class=\"longsyntax\">miterLimit = <em>number<\/em><\/code><\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(30,20);\r\nctx.lineTo(40,60);\r\nctx.lineWidth = 10;\r\nctx.miterLimit = 3;\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas5\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Dashed Lines<\/h2>\r\n\r\n<p>Dashed lines are lines consisting of dashes with gaps between them. They deviate a bit from the standard syntax we&rsquo;ve been using thus far, because they require a method to set the line dash, instead of a property. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">setLineDash([<em>dash<\/em>, <em>gap<\/em>, &hellip;, <em>dash<\/em>, <em>gap<\/em>])<\/code><\/p>\r\n\r\n<p>You can put as many of those <em>dash-gap<\/em> pairs as want in there. They basically create a pattern of stroke and no-stroke that is repeated all over the path.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(60,20);\r\nctx.lineTo(100,60);\r\nctx.lineTo(140,20);\r\nctx.lineWidth = 5;\r\n\/\/The pattern is short stroke (2), gap (3), long stroke (5), gap (3)\r\nctx.setLineDash([2,3,5,3]);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas6\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.lineWidth = 10;\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.strokeStyle = \"red\";\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,20);\r\nctx.lineTo(80,20);\r\nctx.lineWidth = 30;\r\nctx.lineCap = 'round';\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(60,20);\r\nctx.lineTo(100,60);\r\nctx.lineWidth = 30;\r\nctx.lineJoin = \"bevel\";\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas5');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(30,20);\r\nctx.lineTo(40,60);\r\nctx.lineWidth = 10;\r\nctx.miterLimit = 3;\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas6');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,60);\r\nctx.lineTo(60,20);\r\nctx.lineTo(100,60);\r\nctx.lineTo(140,20);\r\nctx.lineWidth = 5;\r\nctx.setLineDash([2,3,5,3]);\r\nctx.stroke();\r\n<\/script>\r\n","slur":"html5-canvas-stroke-styles","cat":"Website","subcat":"Canvas","video":"","diff":"3","quiz":""},
{"id":"324","title":"[Canvas] Shapes","post":"<p>Now that we&rsquo;ve discussed everything that has to do with lines and stroking, it&rsquo;s time for shapes and their filling.<\/p> \r\n\r\n<h2>Rectangle<\/h2>\r\n\r\n<p>To quickly create a rectangle, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">rect(<em>x<\/em>, <em>y<\/em>, <em>width<\/em>, <em>height<\/em>)<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.rect(20,20,100,100);\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Quick Rectangles<\/h2>\r\n\r\n<p>Because rectangles are so important, there are three methods that simplify the process of creating, stroking and filling a rectangle.<\/p>\r\n\r\n<p>To create a filled rectangle (using the current fill settings), use<\/p>\r\n\r\n<p><code class=\"longsyntax\">fillRect(<em>x, y, width, height<\/em>)<\/code><\/p>\r\n\r\n<p>To create a stroked rectangle (using the current stroke settings), use<\/p>\r\n\r\n<p><code class=\"longsyntax\">strokeRect(<em>x, y, width, height<\/em>)<\/code><\/p>\r\n\r\n<p>To erase part of the canvas &ndash; setting all pixels to <em>transparent<\/em> black &ndash; use<\/p>\r\n\r\n<p><code class=\"longsyntax\">clearRect(<em>x, y, width, height<\/em>)<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.strokeStyle=\"green\";\r\nctx.strokeRect(20,20,100,100);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Circles<\/h2>\r\n\r\n<p>To create a circle, or semi-circle, one can simply use the <code>arc<\/code> method. If you create a semi-circle, don&rsquo;t forget to close off the path once you&rsquo;re done.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.fillStyle=\"green\";\r\nctx.arc(50,50,30,0,2*Math.PI);\r\nctx.fill();\r\n\r\nctx.beginPath();\r\nctx.fillStyle=\"red\";\r\nctx.arc(100,100,30,0,Math.PI);\r\nctx.closePath();\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Custom Shapes<\/h2>\r\n\r\n<p>We can create any custom shape we want simply by using a series of straight\/curved lines, and then <em>closing<\/em> the path. There&rsquo;s no magic involved here!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.fillStyle=\"green\";\r\nctx.moveTo(20,20);\r\nctx.lineTo(60,20);\r\nctx.lineTo(80,50);\r\nctx.lineTo(60,80);\r\nctx.lineTo(20,80);\r\nctx.lineTo(0,50);\r\nctx.closePath();\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.rect(20,20,100,100);\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.strokeStyle=\"green\";\r\nctx.strokeRect(20,20,100,100);\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.fillStyle=\"green\";\r\nctx.arc(50,50,30,0,2*Math.PI);\r\nctx.fill();\r\n\r\nctx.beginPath();\r\nctx.fillStyle=\"red\";\r\nctx.arc(100,100,30,0,Math.PI);\r\nctx.closePath();\r\nctx.fill();\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.fillStyle=\"green\";\r\nctx.moveTo(20,20);\r\nctx.lineTo(60,20);\r\nctx.lineTo(80,50);\r\nctx.lineTo(60,80);\r\nctx.lineTo(20,80);\r\nctx.lineTo(0,50);\r\nctx.closePath();\r\nctx.fill();\r\n<\/script>","slur":"html5-canvas-shapes","cat":"Website","subcat":"Canvas","video":"","diff":"3","quiz":""},
{"id":"325","title":"[Canvas] Fill Styles","post":"<p>Fortunately, there aren&rsquo;t as many different ways to <em>fill<\/em> a shape as there are to <em>stroke <\/em>it.&nbsp; Unfortunately, most of these ways are a little more complex. The four ways to fill a path are: <strong>solid colour<\/strong>, <strong>linear gradient<\/strong>, <strong>radial gradient<\/strong>, and <strong>pattern<\/strong>.<\/p> \r\n\r\n<h2>Changing the Fill Style<\/h2>\r\n\r\n<p>The same property is used for all four ways. Not surprisingly, the syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">fillStyle = <em>value<\/em><\/code><\/p>\r\n\r\n<h2>Solid Colour<\/h2>\r\n\r\n<p>To fill a shape with a solid colour, simply use any valid CSS colour code as value.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.beginPath();\r\nctx.fillStyle=\"blue\";\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Gradients<\/h2>\r\n\r\n<p>To fill a shape with a gradient, you need to go through several steps. First you need to create your gradient and save it inside a variable, then you use this variable as the <em>value<\/em> for the fill style.<\/p>\r\n\r\n<p>NOTE: I assume you have some gradient knowledge from CSS. If you don&rsquo;t, I strongly recommend learning CSS in the first place.<\/p>\r\n\r\n<h3>Colour Stops<\/h3>\r\n\r\n<p>As you know from CSS, gradients use colour stops to set points at which the colour should be changed, and it&rsquo;s not different with our canvas.<\/p>\r\n\r\n<p>To set a colour stop, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">addColorStop(<em>position<\/em>, <em>colour<\/em>)<\/code><\/p>\r\n\r\n<p>A <em>position<\/em> of <code>0<\/code> is the start of the gradient, and <code>1<\/code> the end of it.<\/p>\r\n\r\n<h3>Linear Gradient<\/h3>\r\n\r\n<p>To create a <strong>linear gradient<\/strong>, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">createLinearGradient(<em>startX<\/em>, <em>startY<\/em>, <em>endX<\/em>, <em>endY<\/em>)<\/code><\/p>\r\n\r\n<p>This creates a gradient that moves along an imaginary line with starting point (<em>startX, startY<\/em>), and end point (<em>endX, endY<\/em>).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nvar grad = ctx.createLinearGradient(0,0,100,0);\r\ngrad.addColorStop(0,\"red\");\r\ngrad.addColorStop(1,\"orange\");\r\n\r\nctx.beginPath();\r\nctx.fillStyle=grad;\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Radial Gradient<\/h3>\r\n\r\n<p>To create a <strong>radial gradient<\/strong>, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">createRadialGradient(<em>startX, startY, startR, endX, endY, endR<\/em>)<\/code><\/p>\r\n\r\n<p>Radial gradients are defined as an area between two circles. The inner circle has centre point (<em>startX, startY<\/em>) and radius <em>startR<\/em>. The outer circle has centre point (<em>endX, endY<\/em>) and radius <em>endR<\/em>.<\/p>\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nvar grad = ctx.createRadialGradient(50,50,10,50,50,100);\r\ngrad.addColorStop(0,\"red\");\r\ngrad.addColorStop(1,\"orange\");\r\n\r\nctx.beginPath();\r\nctx.fillStyle = grad;\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Patterns<\/h2>\r\n\r\n<p>A pattern can be used to fill a shape with an image, or the contents of another canvas. If the pattern is smaller than the shape, it can be repeated, similar to the CSS <code>background-image<\/code> property.<\/p>\r\n\r\n<p>To create a pattern, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">createPattern(<em>image<\/em>, <em>repetition<\/em>)<\/code><\/p>\r\n\r\n<p>The first parameter requires a variable holding an image or canvas <em>context<\/em>. (You&rsquo;ll learn about loading images later.)<\/p>\r\n\r\n<p>The second parameter can have one of these four values:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&ldquo;repeat&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Repeats pattern in both directions (default)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&ldquo;repeat-x&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Repeats pattern only in x-direction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&ldquo;repeat-y&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Repeats pattern only in y-direction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&ldquo;no-repeat&rdquo;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Doesn&rsquo;t repeat the pattern at all<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>One tricky thing is that, if you load an image within the canvas itself, you&rsquo;ll need to wait for it to finish loading before you can assign it to a pattern. You&rsquo;ll learn everything about image loading soon.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nvar imageObj = new Image();\r\nimageObj.onload = function() {\r\n\tvar pat = ctx.createPattern(imageObj,\"repeat\");\r\n\tctx.beginPath();\r\n\tctx.fillStyle = pat;\r\n\tctx.rect(20,20,100,100);\r\n\tctx.fill();\r\n}\r\nimageObj.src = 'image.png';\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>As stated earlier, these patterns and gradients can also be used on the <em>stroke<\/em> instead of fill. This doesn&rsquo;t require any extra syntax. Yay!<\/p>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.beginPath();\r\nctx.fillStyle=\"blue\";\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nvar grad = ctx.createLinearGradient(0,0,100,0);\r\ngrad.addColorStop(0,\"red\");\r\ngrad.addColorStop(1,\"orange\");\r\n\r\nctx.beginPath();\r\nctx.fillStyle=grad;\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nvar grad = ctx.createRadialGradient(50,50,10,50,50,100);\r\ngrad.addColorStop(0,\"red\");\r\ngrad.addColorStop(1,\"orange\");\r\n\r\nctx.beginPath();\r\nctx.fillStyle = grad;\r\nctx.rect(20,20,100,100);\r\nctx.fill();\r\n\r\nvar canvas = document.getElementById('myCanvas4');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nvar imageObj = new Image();\r\nimageObj.onload = function() {\r\n\tvar pat = ctx.createPattern(imageObj,\"repeat\");\r\n\tctx.beginPath();\r\n\tctx.fillStyle = pat;\r\n\tctx.rect(20,20,100,100);\r\n\tctx.fill();\r\n}\r\nimageObj.src = 'media\/LatexMathBIGODOT.png';\r\n<\/script>","slur":"html5-canvas-fill-styles","cat":"Website","subcat":"Canvas","video":"","diff":"4","quiz":""},
{"id":"326","title":"[Canvas] Text","post":"<p>Because HTML and CSS provide lots of ways to easily display and customize text, you might think you could just overlay your canvas with another element if you want text displayed there. This is true, and might sometimes be a good method, but using native text methods within the canvas is often much easier. They can be positioned exactly at the right spot, and styled by setting the right properties.<\/p> \r\n\r\n<h2>Displaying Text<\/h2>\r\n\r\n<p>To display the phrase <em>text<\/em> at position (<em>x,y<\/em>), use<\/p>\r\n\r\n<p><code class=\"longsyntax\">fillText(<em>text<\/em>, <em>x<\/em>, <em>y<\/em>)<\/code><\/p>\r\n\r\n<p>The default colour for text is, as always, <em>black<\/em>, and the default font the same as the default font for CSS.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.fillText(\"Hello Whale!\", 10, 10);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Styling Text<\/h2>\r\n\r\n<p>If you want to style this text, you need to set a few properties <em>before<\/em> you call the <code>fillText()<\/code> method. Just as everything else, text is considered a shape, which means the colour can be determined with the <code>fillStyle<\/code> property. Similarly, the text can be stroked using the properties and methods you&rsquo;ve already learned.<\/p>\r\n\r\n<h2>Font Family &amp; Size<\/h2>\r\n\r\n<p>Both the font and its display size are set with the same property:<\/p>\r\n\r\n<p><code class=\"longsyntax\">font = &ldquo;<em>size<\/em> <em>font-family<\/em>&rdquo;<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.font = \"36pt Calibri\";\r\nctx.fillText(\"Hello Whale!\", 10, 50);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Aligning Text Horizontally<\/h2>\r\n\r\n<p>To align the text, use:<\/p>\r\n\r\n<p><code class=\"longsyntax\">textAlign = <em>value<\/em><\/code><\/p>\r\n\r\n<p>The possible values are: <code>left<\/code>, <code>center<\/code> and <code>right<\/code>. Additionally, if your document uses a specified text direction you can use <code>start<\/code> and <code>end<\/code> to refer to the start and end of lines. For instance, if your document uses <code>rtl<\/code> (for right-to-left), the start of the line actually means aligning it to the right.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.textAlign = \"right\";\r\n\r\nctx.font = \"36pt Calibri\";\r\nctx.fillText(\"Hello Whale!\", 10, 50);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Aligning Text Vertically<\/h2>\r\n\r\n<p>To align the text horizontally, we change where the <em>baseline<\/em> is located. The baseline is, normally, the imaginary line that all letters sit on, and used for the y-position of the text. The syntax is:<\/p>\r\n\r\n<p><code class=\"longsyntax\">textBaseline = <em>value<\/em><\/code><\/p>\r\n\r\n<p>The possible values are best displayed with a picture:<\/p>\r\n\r\n<img src=\"media\/CanvasTextBaselines.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.font = \"36pt Calibri\";\r\nctx.fillText(\"Hello\", 10, 50);\r\n\r\nctx.textBaseline = \"bottom\";\r\n\r\nctx.fillText(\"Whale!\", 120,50);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n\r\n<h2>Text Wrapping &amp; Metrics<\/h2>\r\n\r\n<p>What&rsquo;s important to notice, is that text within the canvas doesn&rsquo;t naturally wrap &ndash; you can&rsquo;t set a width, which means text will extend horizontally, infinitely.<\/p>\r\n\r\n<p>If you want to measure the current width of text, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">measureText(<em>text<\/em>).width<\/code><\/p>\r\n\r\n<p>At the time of writing this method only returns width, but there are plans to make it calculate more than that.<\/p>\r\n\r\n<p>This width can then, for example, be used to create a custom function that enables text wrapping.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n&#x9;\/** @param ctx (Context we&#x27;re drawing in)\r\n&#x9;&#x9;@param text (The text to wrap)\r\n&#x9;&#x9;@param x (x-position to place the text block)\r\n&#x9;&#x9;@param y (y-position to place the text block)\r\n&#x9;&#x9;@param maxWidth (Maximum length of a line, in pixels)\r\n&#x9;&#x9;@param lineHeight (height of one line)\r\n&#x9;*\/\r\nfunction wrapText(ctx, text, x, y, maxWidth, lineHeight) {\r\n    var words = text.split(&#x27; &#x27;);\r\n    var line = &#x27;&#x27;;\r\n\r\n    for(var n = 0; n &#x3C; words.length; n++) {\r\n      var testLine = line + words[n] + &#x27; &#x27;;\r\n      var metrics = ctx.measureText(testLine);\r\n      var testWidth = metrics.width;\r\n      if (testWidth &#x3E; maxWidth &#x26;&#x26; n &#x3E; 0) {\r\n        ctx.fillText(line, x, y);\r\n        line = words[n] + &#x27; &#x27;;\r\n        y += lineHeight;\r\n      }\r\n      else {\r\n        line = testLine;\r\n      }\r\n    }\r\n    ctx.fillText(line, x, y);\r\n}\r\n\r\nwrapText(ctx,&#x22;This is a very long sentence trying to showcase a function designed to wrap text.&#x22;,10,10,80,16);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas5\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.fillText(\"Hello Whale!\", 10, 10);\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.font = \"36pt Calibri\";\r\nctx.fillText(\"Hello Whale!\", 10, 50);\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.font = \"36pt Calibri\";\r\nctx.textAlign = \"right\";\r\nctx.fillText(\"Hello Whale!\", 10, 50);\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.font = \"36pt Calibri\";\r\nctx.fillText(\"Hello\", 10, 50);\r\nctx.textBaseline = \"bottom\";\r\nctx.fillText(\"Whale!\", 120,50);\r\n\r\ncanvas = document.getElementById('myCanvas5');\r\nctx = canvas.getContext('2d');\r\n\r\nfunction wrapText(ctx, text, x, y, maxWidth, lineHeight) {\r\n    var words = text.split(' ');\r\n    var line = '';\r\n\r\n    for(var n = 0; n < words.length; n++) {\r\n      var testLine = line + words[n] + ' ';\r\n      var metrics = ctx.measureText(testLine);\r\n      var testWidth = metrics.width;\r\n      if (testWidth > maxWidth && n > 0) {\r\n        ctx.fillText(line, x, y);\r\n        line = words[n] + ' ';\r\n        y += lineHeight;\r\n      }\r\n      else {\r\n        line = testLine;\r\n      }\r\n    }\r\n    ctx.fillText(line, x, y);\r\n}\r\n\r\nwrapText(ctx,\"This is a very long sentence trying to showcase a function designed to wrap text.\",10,10,80,16);\r\n<\/script>\r\n","slur":"html5-canvas-text","cat":"Website","subcat":"Canvas","video":"","diff":"3","quiz":""},
{"id":"327","title":"[Canvas] Transformations","post":"<p>Transformations, in CSS at least, are what you&rsquo;d apply to a complete element to move, rotate or scale it. Transformations work that way in nearly all languages &ndash; but not canvas. You can&rsquo;t transform individual elements, but only the complete canvas. This allows you to modify multiple shapes (in the same way) at once, and add lots of transforms on top of each other. The obvious question here is: what if we want to reset all those transforms we&rsquo;ve chained together, or just want to modify only a single shape at a time? For this, there is the <strong>state stack<\/strong>.<\/p> \r\n\r\n<h2>State Stack<\/h2>\r\n\r\n<p>The state stack is simply a list of states you saved, in a certain order, that canvas keeps track of.<\/p>\r\n\r\n<p>To save the current state of the canvas, which means the current set of transforms applied, use <code>save()<\/code>. This adds the current state on top of the state stack.<\/p>\r\n\r\n<p>To restore the last state you saved, use <code>restore()<\/code>. This reads the state on top of the state stack, and resets the canvas to that state. Once that&rsquo;s done, this state is removed from the state stack.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/\/Save inital state of canvas\r\nctx.save();\r\n\r\n\/\/Rotate the canvas, created filled rectangle\r\nctx.rotate(0.2*Math.PI);\r\nctx.fillRect(0,0,30,30);\r\n\r\n\/\/Restore the initial canvas state, without rotation\r\nctx.restore();\r\nctx.fillRect(35,35,20,20);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas0\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n<p>The reason I wanted to start with this is because it becomes <em>very<\/em> important once you start using multiple transforms. Now let&rsquo;s look at all the available transforms!<\/p>\r\n\r\n<p>NOTE: Even though the focus is on transforms here, the state of a canvas also saves all the currently set properties, such as <em>fillStyle<\/em> or <em>strokeStyle<\/em>. So, if you&rsquo;re working with canvasses with lots of objects, you&rsquo;ll still need to make heavy use of the state stack, even if you don&rsquo;t use transform operations.<\/p>\r\n\r\n<h2>Translate<\/h2>\r\n\r\n<p>To translate means to move the canvas. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">translate(<em>xOffset<\/em>, <em>yOffset<\/em>)<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.fillRect(5,5,20,20);\r\nctx.translate(30,30);\r\nctx.fillRect(5,5,20,20);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Rotate<\/h2>\r\n\r\n<p>To rotate means, well, rotating the entire canvas around its origin. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">rotate(<em>radians<\/em>)<\/code><\/p>\r\n\r\n<p>Note that the angle must be set in radians, not degrees.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/\/Note that it uses the upper left corner as centre of rotation\r\nctx.rotate(0.1*Math.PI);\r\nctx.fillRect(50,50,30,30);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Scale<\/h2>\r\n\r\n<p>To scale means making the canvas larger\/smaller, using the origin as the centre point. The syntax is<\/p>\r\n\r\n<p><code class=\"longsyntax\">scale(<em>xScale<\/em>, <em>yScale<\/em>)<\/code><\/p>\r\n\r\n<p>The default scale is 1, which means a value smaller than that makes everything smaller, and a value larger makes everything larger. Negative values are also allowed, and mirror\/flip the canvas.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/\/Scale canvas 150% both directions, flip everything vertically\r\nctx.scale(1.5,-1.5);\r\n\r\n\/\/Draw rectangle pointing upwards. \r\n\/\/Note that we draw it above the canvas, as the scaling transformation uses the top of the canvas as its origin.\r\nctx.beginPath();\r\nctx.moveTo(20,-40);\r\nctx.lineTo(40,-80);\r\nctx.lineTo(60,-40);\r\nctx.closePath();\r\n\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Custom Transforms<\/h2>\r\n\r\n<p>With custom transforms you can easily perform multiple transform operations at the same time. That&rsquo;s why the method takes no less than six parameters:<\/p>\r\n\r\n<p><code class=\"longsyntax\">transform(<em>scaleX<\/em>, <em>skewX, skewY, scaleY, translateX, translateY<\/em>)<\/code><\/p>\r\n\r\n<p>As you can see, rotation isn&rsquo;t easily achieved with this method. Another tiny problem is that things can behave unexpectedly, because you&rsquo;re applying so many transforms at the same time, <em>on top of<\/em> all the existing transforms.<\/p>\r\n\r\n<p>To solve this, one extra method exists that removes all current transforms, before applying the new one you supply:<\/p>\r\n\r\n<p><code class=\"longsyntax\">setTransform(<em>scaleX<\/em>, <em>skewX<\/em>, <em>skewY<\/em>, <em>scaleY<\/em>, <em>translateX<\/em>, <em>translateY<\/em>)<\/code><\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.transform(1,5,5,1,30,30);\r\n\r\nctx.fillRect(0,0,50,50);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n\r\n<h2>An Example: Ellipses<\/h2>\r\n\r\n<p>One very basic shape we haven&rsquo;t seen yet are <em>ellipses<\/em>. Well, now we can make them with the help of some nifty transformations!<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/\/Save state\r\nctx.save();\r\n\r\n\/\/Translate ctx\r\nctx.translate(20,20);\r\n\r\n\/\/Scale ctx horizontally\r\nctx.scale(2, 1);\r\n\r\n\/\/Draw circle which will be stretched into an oval\r\nctx.beginPath();\r\nctx.arc(20,20,10, 0, 2 * Math.PI, false);\r\n\r\n\/\/Restore to original state\r\nctx.restore();\r\n\r\n\/\/Apply styling\r\nctx.fillStyle = '#8ED6FF';\r\nctx.fill();\r\nctx.lineWidth = 5;\r\nctx.strokeStyle = 'green';\r\nctx.stroke();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas5\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas0');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.save();\r\nctx.rotate(0.2*Math.PI);\r\nctx.fillRect(0,0,30,30);\r\nctx.restore();\r\nctx.fillRect(35,35,20,20);\r\n\r\n\r\ncanvas = document.getElementById('myCanvas');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.fillRect(5,5,20,20);\r\nctx.translate(30,30);\r\nctx.fillRect(5,5,20,20);\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.rotate(0.1*Math.PI);\r\nctx.fillRect(50,50,30,30);\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.scale(1.5,-1.5);\r\n\r\nctx.beginPath();\r\nctx.moveTo(20,-40);\r\nctx.lineTo(40,-80);\r\nctx.lineTo(60,-40);\r\nctx.closePath();\r\n\r\nctx.stroke();\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.transform(1,5,5,1,30,30);\r\n\r\nctx.fillRect(0,0,50,50);\r\n\r\ncanvas = document.getElementById('myCanvas5');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.save();\r\nctx.translate(20,20);\r\nctx.scale(2, 1);\r\nctx.beginPath();\r\nctx.arc(20,20,10, 0, 2 * Math.PI, false);\r\nctx.restore();\r\nctx.fillStyle = '#8ED6FF';\r\nctx.fill();\r\nctx.lineWidth = 5;\r\nctx.strokeStyle = 'green';\r\nctx.stroke();\r\n<\/script>\r\n","slur":"html5-canvas-transformations","cat":"Website","subcat":"Canvas","video":"","diff":"4","quiz":""},
{"id":"328","title":"[Canvas] Images","post":"<p>Using images within canvas is not as straightforward as you&rsquo;d expect from HTML. But, just as with text, it&rsquo;s even more complex if you were to overlay your canvas with HTML images, which is why I recommend learning how to use images within canvas.<\/p> \r\n\r\n<p>NOTE: Everything described in this chapter requires an image to be present on the server the code is hosted on. If you use links to external images (hosted on other servers), you get a security error.<\/p>\r\n\r\n<p>To display an image, you need to load it, then <em>wait for it to load<\/em>, and only once it&rsquo;s retrieved you can display it. Let&rsquo;s look at how this plays out in code:<\/p>\r\n\r\n<p><code class=\"longsyntax\">var imageObj = new Image();\r\nimageObj.onload = function() {\r\n\t<em>\/\/draw actual image<\/em>\r\n}\r\n\r\nimageObj.src = &ldquo;<em>linkToImage<\/em>&rdquo;;<\/code><\/p>\r\n\r\n<p>All it does is load an image object, point it to an image, and attach an event listener that executes once it has loaded.<\/p>\r\n\r\n<h2>Actually Drawing the Image<\/h2>\r\n\r\n<p>To draw the image, you only need to use a single method. This method, however, has quite a lot of parameters:<\/p>\r\n\r\n<p><code class=\"longsyntax\">drawImage(imageObj, <em>sourceX, sourceY, sourceWidth, sourceHeight, X, Y, Width, Height<\/em>)<\/code><\/p>\r\n\r\n<p>The last four parameters are what determine the position and size of the image within the canvas.<\/p>\r\n\r\n<p>The parameters with <em>source<\/em> in front are used to <code>crop<\/code> the original image.<\/p>\r\n\r\n<img src=\"media\/CanvasCropImages.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nvar imageObj = new Image();\r\nimageObj.onload = function() {\r\n\t\/\/Cropped version\r\n\tctx.drawImage(imageObj, 10, 10, 20, 20, 40, 40, 20, 20);\r\n\t\/\/Full version\r\n\tctx.drawImage(imageObj, 0, 0, 40, 40, 80, 40, 40, 40);\r\n}\r\nimageObj.src = 'image.png';\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Changing Images: Pixel by Pixel<\/h2>\r\n\r\n<p>While most graphical programming languages gives us <em>filters<\/em> to modify images, the canvas gives us something more fundamental: we can access every pixel individually and change it. To access a certain rectangle of the canvas (which can contain anything), use<\/p>\r\n\r\n<p><code class=\"longsyntax\">getImageData(<em>x<\/em>, <em>y<\/em>, <em>width<\/em>, <em>height<\/em>).data<\/code><\/p>\r\n\r\n<p>This returns the pixel data within that rectangle as an array. This array starts at the upper left corner, and works through all pixels row by row. Every pixel has 4 elements within the array; one for the <em>red<\/em>, <em>blue<\/em>, <em>green<\/em> and <em>alpha<\/em> channel, respectively. We can just loop through this data array like we&rsquo;d loop through any array, and assign new values (between 255 and 0) to every element.<\/p>\r\n\r\n<p>Then, we can put this new pixel data back into the canvas with<\/p>\r\n\r\n<p><code class=\"longsyntax\">putImageData(<em>data<\/em>, <em>x<\/em>, <em>y<\/em>)<\/code><\/p>\r\n\r\n<p>Normally, you&rsquo;d use the same <em>x<\/em> and <em>y <\/em>&nbsp;coordinates you used when getting the data, as you want to replace the same rectangle you extracted from the canvas.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/**\r\nExample that inverts the image you just saw about how to crop images.\r\n*\/\r\nfunction drawInverted(imageObj) {\r\n    var x = 10;\r\n    var y = 10;\r\n\r\n    \/\/Draw original image\r\n    ctx.drawImage(imageObj, x, y, 225, 100);\r\n\r\n    \/\/Access current pixel data\r\n    var imageData = ctx.getImageData(x, y, imageObj.width, imageObj.height);\r\n    var data = imageData.data;\r\n\r\n    for(var i = 0; i &lt; data.length; i += 4) {\r\n      \/\/Red\r\n      data[i] = 255 - data[i];\r\n      \/\/Green\r\n      data[i + 1] = 255 - data[i + 1];\r\n      \/\/Blue\r\n      data[i + 2] = 255 - data[i + 2];\r\n    }\r\n\r\n    \/\/Overwrite original image\r\n    ctx.putImageData(imageData, x, y);\r\n  }\r\n  \r\nvar imageObj = new Image();\r\nimageObj.onload = function() {\r\n\tdrawInverted(this);\r\n};\r\nimageObj.src = 'image.png';\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Saving Images: Data URLs<\/h2>\r\n\r\n<p>Last but not least, there might be times when you want to save or copy the contents of a canvas. To do so, you need to convert a canvas to an image, and canvas uses PNG images for that. These are just strings of characters saved in a file, which means all we need to do to save an image, is get the <em>string<\/em> or <em>data URL<\/em> that represents it. To access this data URL of a canvas context, use<\/p>\r\n\r\n<p><code class=\"longsyntax\">toDataURL()<\/code><\/p>\r\n\r\n<p>NOTE: This is the only method that works on the canvas itself, <em>not<\/em> the drawing context - we're not drawing anything, just accessing the canvas as a whole.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.fillStyle = 'red';\r\nctx.fillRect(10,10,50,50);\r\n\/\/Should show the string of characters the makes up this specific canvas in the console:\r\nconsole.log(canvas.toDataURL());\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nvar imageObj2 = new Image();\r\nimageObj2.onload = function() {\r\n\tctx.drawImage(imageObj2, 10, 10, 20, 20, 40, 40, 20, 20);\r\n\tctx.drawImage(imageObj2, 0, 0, 40, 40, 80, 40, 40, 40);\r\n}\r\nimageObj2.src = 'media\/LatexMathBIGODOT.png';\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx2 = canvas.getContext('2d');\r\nvar curCtx = ctx2;\r\n\r\nfunction drawInverted(imageObj,ctx) {\r\n    var x = 10;\r\n    var y = 10;\r\n\r\n    ctx.drawImage(imageObj, x, y, 225, 100);\r\n\r\n    var imageData = ctx.getImageData(x, y, imageObj.width, imageObj.height);\r\n    var data = imageData.data;\r\n\r\n    for(var i = 0; i < data.length; i += 4) {\r\n      \/\/ red\r\n      data[i] = 255 - data[i];\r\n      \/\/ green\r\n      data[i + 1] = 255 - data[i + 1];\r\n      \/\/ blue\r\n      data[i + 2] = 255 - data[i + 2];\r\n    }\r\n\r\n    \/\/ overwrite original image\r\n    ctx.putImageData(imageData, x, y);\r\n  }\r\n  \r\nvar imageObj = new Image();\r\nimageObj.onload = function() {\r\n\tdrawInverted(this,curCtx);\r\n};\r\nimageObj.src = 'media\/CanvasCropImages.png';\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx3 = canvas.getContext('2d');\r\n\r\nctx3.fillStyle = 'red';\r\nctx3.fillRect(10,10,50,50);\r\n\/\/Should show the string of characters the makes up this specific canvas in the console:\r\nconsole.log(canvas.toDataURL());\r\n<\/script>\r\n","slur":"html5-canvas-images","cat":"Website","subcat":"Canvas","video":"","diff":"4","quiz":""},
{"id":"329","title":"[Canvas] Composites","post":"<p>Though the title of the chapter may be daunting, composites are a simple concept. A composite is a shape consisting of two shapes. In other words, they determine what happens when two shapes are composed together. There are four main topics: <strong>shadows<\/strong>, <strong>clipping<\/strong>, <strong>global alpha<\/strong> and <strong>global operations<\/strong>.<\/p> \r\n\r\n<h2>Shadows<\/h2>\r\n\r\n<p>Drop shadows are very popular, and can be used to add a sense of depth or detail. As always, the canvas doesn&rsquo;t distinguish between different objects, which means you need to set the shadow properties before calling <code>fill()<\/code>. Four properties regarding shadows can be set:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Syntax<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Possible Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>shadowColor<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Any colour<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The colour of the shadow<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>shadowBlur<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Positive number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>How blurred the shadow is. A lower value means a sharper shadow.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>shadowOffsetX<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shadow offset in x-direction relative to top-left corner of shape<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>shadowOffsetY<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Number<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shadow offset in y-direction relative to top-left corner of shape<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Remember that, just like any other property, these stay in effect until you reset them or restore a canvas state.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.rect(10, 10, 50, 50);\r\n\r\nctx.shadowColor = '#999';\r\nctx.shadowBlur = 15;\r\nctx.shadowOffsetX = 10;\r\nctx.shadowOffsetY = 10;\r\n\r\nctx.fillStyle = 'red';\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Clipping<\/h2>\r\n\r\n<p>Clipping means showing only that part of a shape that&rsquo;s inside another shape. To turn everything that&rsquo;s inside the canvas at that certain moment into a clip path, use the <code>clip()<\/code> method. Now, everything you draw afterwards will be clipped to that path, and only the parts inside the clip path displayed. However, you probably don&rsquo;t want everything to be clipped, which is why it&rsquo;s wise to save the state of the canvas before calling the <code>clip()<\/code> method, and restoring the previous state when you&rsquo;re done.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\n\/\/Save original state of canvas\r\nctx.save();\r\n\r\n\/\/Set clip path to a circle (the path itself is not displayed)\r\nctx.arc(50,50,30,0,2*Math.PI,false);\r\nctx.clip();\r\n\r\n\/\/Draw a rectangle that will automatically be clipped\r\nctx.fillRect(30,30,50,50);\r\n\r\n\/\/Restore original canvas state to get us out of the clipping path\r\nctx.restore();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas2\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Global Alpha<\/h2>\r\n\r\n<p>You can set certain shapes to an alpha level other than 1 (fully opaque), simply by assigning it a transparent fill colour. But, you can also set the whole canvas to a certain opacity level, and everything you draw afterwards will have that alpha. To do so, set the <code>globalAlpha<\/code> property to a value between 0 and 1.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.globalAlpha = 0.5;\r\n\r\nctx.fillRect(10,10,40,40);\r\n\r\nctx.arc(50,50,40,0,2*Math.PI,false);\r\nctx.fill();\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas3\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Global Operations<\/h2>\r\n\r\n<p>Like the global alpha, we can set a global composite operation to be applied to everything from there on. Not surprisingly, the property to change is <code>globalCompositeOperation<\/code>. Lots of values for operations are available, which this image will demonstrate:<\/p>\r\n\r\n<img src=\"media\/CanvasGlobalCompositeOperations.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nctx.globalCompositeOperation = 'xor';\r\n\r\nctx.fillRect(10,10,40,40);\r\nctx.fillRect(40,10,40,40);\r\nctx.fillRect(25,30,40,40);\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas4\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nctx.rect(10, 10, 50, 50);\r\n\r\nctx.shadowColor = '#999';\r\nctx.shadowBlur = 15;\r\nctx.shadowOffsetX = 10;\r\nctx.shadowOffsetY = 10;\r\n\r\nctx.fillStyle = 'red';\r\nctx.fill();\r\n\r\ncanvas = document.getElementById('myCanvas2');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.save();\r\nctx.arc(50,50,30,0,2*Math.PI,false);\r\nctx.clip();\r\nctx.fillRect(30,30,50,50);\r\nctx.restore();\r\n\r\ncanvas = document.getElementById('myCanvas3');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.globalAlpha = 0.5;\r\nctx.fillRect(10,10,40,40);\r\nctx.arc(50,50,40,0,2*Math.PI,false);\r\nctx.fill();\r\n\r\ncanvas = document.getElementById('myCanvas4');\r\nctx = canvas.getContext('2d');\r\n\r\nctx.globalCompositeOperation = 'xor';\r\nctx.fillRect(10,10,40,40);\r\nctx.fillRect(40,10,40,40);\r\nctx.fillRect(25,30,40,40);\r\n<\/script>\r\n","slur":"html5-canvas-composites","cat":"Website","subcat":"Canvas","video":"","diff":"4","quiz":""},
{"id":"330","title":"[Canvas] Animation","post":"<p>Because canvas doesn&rsquo;t work with individual objects, it doesn&rsquo;t have support for animations in the usual way. With CSS, for example, you can select an element and change one of its properties over time, and you have an animation. With canvas, you have to constantly <em>redraw<\/em> the canvas with the next frame of the animation. This means that you need two things:<\/p> \r\n\r\n<ul>\r\n\t<li>A function containing a set of methods that draw what you want, depending on which frame you&rsquo;re on.<\/li>\r\n\t<li>A loop that calls this function at regular intervals<\/li>\r\n<\/ul>\r\n\r\n<p>Luckily, JavaScript doesn&rsquo;t leave you in the dark completely, and has a special method for calling a function at regular intervals:<\/p>\r\n\r\n<p><code class=\"longsyntax\">requestAnimationFrame(<em>function<\/em>)<\/code><\/p>\r\n\r\n<p>This tries to call <em>function<\/em> at 60 FPS (frames per second), or every 1\/60<sup>th<\/sup> of a second. It&rsquo;s perfectly possible though that your function is too heavy for the computer and can&rsquo;t be executed that quick, in which case the JavaScript just tries to call the function as quickly as possible. Another great advantage of this method is that it stops executing if you&rsquo;re not focused on the canvas. So, if you move to another tab, it stops wasting resources on keeping the animation running.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"javascript\">\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nrequestAnimationFrame(animate);\r\nvar frame = 0;\r\nvar box = {x:0, y:20, colour:'red', width:30, height:30};\r\n\r\nfunction animate() {\r\n\t\/\/Clear whole canvas\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\/\/Increase frame count\r\n\tframe++;\r\n\r\n\t\/\/Make box slide to the right\r\n\tbox.x += 0.5;\r\n\r\n\t\/\/Redraw the box using new settings\r\n\tdrawBox();\r\n\r\n\t\/\/After 120 frames, reset the box\r\n\tif(frame == 120) {\r\n\t\tbox.x = 0;\r\n\t\tframe = 0;\r\n\t}\r\n\r\n\t\/\/Request our next frame!\r\n\trequestAnimationFrame(animate);\r\n}\r\n\r\nfunction drawBox() {\r\n\tctx.beginPath();\r\n\tctx.rect(box.x, box.y, box.width, box.height);\r\n\tctx.fillStyle = box.colour;\r\n\tctx.fill();\r\n}\r\n<\/pre>\r\n<div>\r\n<canvas id=\"myCanvas\"><\/canvas>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>The example is really just an example in this case; it&rsquo;s up to you how you animate things. But, the usual practice is to update a set of global variables each frame, and use those variables to determine what must be drawn (and how) every frame.<\/p>\r\n\r\n<p>If you want to learn more about this method of animating and creating a dynamic canvas, I suggest looking at the course on HTML5 games.<\/p>\r\n\r\n<script>\r\nvar canvas = document.getElementById('myCanvas');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nrequestAnimationFrame(animate);\r\nvar frame = 0;\r\nvar box = {x:0, y:20, colour:'red', width:30, height:30};\r\n\r\nfunction animate() {\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\tframe++;\r\n\tbox.x += 0.5;\r\n\tdrawBox();\r\n\tif(frame == 120) {\r\n\t\tbox.x = 0;\r\n\t\tframe = 0;\r\n\t}\r\n\trequestAnimationFrame(animate);\r\n}\r\n\r\nfunction drawBox() {\r\n\tctx.beginPath();\r\n\tctx.rect(box.x, box.y, box.width, box.height);\r\n\tctx.fillStyle = box.colour;\r\n\tctx.fill();\r\n}\r\n<\/script>\r\n","slur":"html5-canvas-animation","cat":"Website","subcat":"Canvas","video":"","diff":"4","quiz":""},
{"id":"331","title":"Fundamentals of Drawing","post":"<p>Learning to draw is not only useful if you want to become a painter, but applicable to all branches of life. In a business meeting, clear drawings help visualize what you&rsquo;re trying to say. In a game, imaginative drawings can take the gameplay to another level. This course therefore doesn&rsquo;t aim to teach you a particular style or (set of) technique(s), but tries to provide a general overview of the principles behind any type of image, such as depth, perspective and shading.<\/p> \r\n\r\n<p>While most people try to start their artistic career by just copying lots of illustrations (in the style they admire), I want to try a different approach. We&rsquo;ll still be copying lots of simple illustrations, but only to help you understand the concepts I explain. These concepts can, once understood, be transferred to any style or drawing you want. The main advantage is that you don&rsquo;t waste time learning to draw one specific object or style, but instead gain insight in the principles behind any image you&rsquo;ll ever encounter, or create yourself.<\/p>\r\n\r\n<p>Having said this, you might be afraid that things will be very theoretical and boring, but don&rsquo;t worry; I promise I&rsquo;ll do my best to keep you inspired!<\/p>\r\n\r\n<p>I recommend you read through all tutorials within this course, and only then pick your specialization. Even if you want to learn to draw simple comics, you still need to know how to quickly draw simple objects and people, which is exactly what this tutorial aims for.<\/p>\r\n\r\n<p>NOTE: Of course, I need <em>some<\/em> style to showcase the principles, and for that I use an extremely simple yet realistic style. Simply put, things are drawn as they are seen, albeit a bit simplistically (as to not make such a basic course too complex). From this style you can develop your own; by leaving things out, for example, or adding your own details, slightly changing important curves or changing proportions.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Tools &amp; Setup<\/li>\r\n\t<li>The Laws of Drawing<\/li>\r\n\t<li>Lines<\/li>\r\n\t<li>Edges<\/li>\r\n\t<li>Shapes<\/li>\r\n\t<li>Rectangles<\/li>\r\n\t<li>Ovals<\/li>\r\n\t<li>Construction &amp; Form<\/li>\r\n\t<li>Cubes<\/li>\r\n\t<li>Spheres<\/li>\r\n\t<li>Cylinders<\/li>\r\n\t<li>Pyramids &amp; Cones<\/li>\r\n\t<li>Intersections &amp; Organic Forms<\/li>\r\n\t<li>Detailing &amp; Enrichment<\/li>\r\n\t<li>Proportions<\/li>\r\n\t<li>Light<\/li>\r\n\t<li>Shading<\/li>\r\n\t<li>Colouring<\/li>\r\n\t<li>Perspective<\/li>\r\n\t<li>Texture<\/li>\r\n\t<li>Studies &amp; References<\/li>\r\n\t<li>The Right Mind-Set I<\/li>\r\n\t<li>The Right Mind-Set II<\/li>\r\n\t<li>Imagination &amp; Creativity<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n","slur":"fundamentals-of-drawing","cat":"Design","subcat":"Drawing","video":"","diff":"1","quiz":""},
{"id":"332","title":"[Drawing] Tools & Setup","post":"<p>Before we can start drawing, we need tools that allow us to do so. These days, there are two ways to draw: plain old pencil and paper (the traditional way), and using a computer and drawing tablet (the digital way). Whatever way you choose, the exact same principles apply, and only your tools will differ vastly. I would go so far as to say that digital painting has numerous advantages over the traditional method, and you should definitely try it &ndash; but only after you&rsquo;ve completed this fundamental course! Without a basic understanding of perspective and shading, it doesn&rsquo;t matter how good you are with computers, your drawings will probably lack realism or style.<\/p> \r\n\r\n<h2>The Tools of the Trade<\/h2>\r\n\r\n<p>For traditional drawing, I recommend these tools:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Paper<\/strong>, preferably a few stacked on top of each other.<\/li>\r\n\t<li><strong>Pencils<\/strong>, with different levels of thickness (and sharpened points, of course).<\/li>\r\n\t<li><strong>Erasers<\/strong> of different sizes. Use proper erasers that don&rsquo;t smudge the paper after you&rsquo;ve used them once.<\/li>\r\n\t<li><strong>Pen<\/strong>, either regular or felt (tip).<\/li>\r\n\t<li><strong>Tape<\/strong>, to make sure your paper doesn&rsquo;t move as you draw.<\/li>\r\n\t<li><strong>Triangle<\/strong>, to be sure about your edges and straight lines.<\/li>\r\n\t<li><strong>Compass<\/strong>, to make precise circles.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingTools.png\" \/><\/p>\r\n\r\n<p>Additionally, it helps to get a piece of see-through plastic that you can paint on with markers. This way, you can look at objects and directly copy them on the plastic, and later copy those to the actual drawing (paper).<\/p>\r\n\r\n<h2>The Talk of the Trade<\/h2>\r\n\r\n<p>I tried my best to keep fancy terminology out of this course, but there will always be some core concepts that need clear names to clarify them. I must say, however, that not all of these names are fixed. Most artists prefer their own version of a concept, and have given different names to the same principle. When that&rsquo;s the case, I will mention it, but the real take away is: if you can find a better way to memorize or understand the technique, use it!<\/p>\r\n\r\n<h2>Course Setup<\/h2>\r\n\r\n<p>I initially wrote the course as a very theoretical one, but after I finished and read it a few times, it just seemed boring and not really helpful in a practical sense. So I rewrote the whole thing, with a new structure altogether. Next chapter will provide you with a quick overview of every concept you need to know, and after that we&rsquo;ll slowly build towards achieving that goal.<\/p>\r\n\r\n<p>Every chapter starts with the reason why you need to know that particular thing, and the theory behind it that you just need to memorize. Then comes the fun part: exercises and practical applications! I&rsquo;ll explain lots of theory by showing you how to do it, and giving you a fun exercise to master it. Remember, only 20% of your skill comes from reading tutorials, the other 80% comes from practicing and training.<\/p>\r\n\r\n<p>Ultimately, at the end of the course, you should be able to draw anything, be it from real life or imagination. How you fill in the details or make your drawing unique, is of course completely up to you &ndash; I&rsquo;m only here to get you started.<\/p>\r\n\r\n<h2>Before we Start<\/h2>\r\n\r\n<p>Before we fly into the world of drawing, it&rsquo;s useful to acquire a few new habits.<\/p>\r\n\r\n<p>First of all, every time you finish a drawing, quickly write down the <em>title<\/em>, <em>date<\/em>, and your <em>signature<\/em> somewhere in the corner. This allows you to keep track of your progress as an artist. Additionally, if you feel like it, leave comments at the back about what was difficult, or what you like or don&rsquo;t like about it in particular. You might think you&rsquo;re wasting your time, but you&rsquo;ll love yourself for doing it consistently later on.<\/p>\r\n\r\n<p>Secondly, keep your tools clean and stored in a safe place that is easy to reach. Obviously, dirty tools hinder your drawing process, while tools that are hard to reach might make it difficult to motivate yourself to start a drawing.<\/p>\r\n\r\n<p>Keep all your drawings stored together in some sort of map, so you can easily look through them to see how far you&rsquo;ve come, or use them as reference when you&rsquo;re in doubt about how to execute some idea.<\/p>\r\n\r\n<p>The most important thing to remember is that learning to draw is actually about two things: to <em>see<\/em> the world in a different way, and to <em>draw<\/em> what&rsquo;s on your mind. Both require lots of time and practice to evolve and strengthen. This might make it difficult for you to stay motivated, which is why I encourage looking at your progress from time to time, and doing lots of drawings without worrying about the outcome!<\/p>\r\n","slur":"drawing-tools-setup","cat":"Design","subcat":"Drawing","video":"","diff":"1","quiz":""},
{"id":"333","title":"[Drawing] The Laws of Drawing","post":"<p>What makes a drawing good? Why is it that some people can draw a beautiful panda in ten minutes, while others struggle to draw a realistic box in an hour? Well, a drawing is regarded as &ldquo;good&rdquo; when it is able to convey the information it wants to convey! If you want to draw a panda as your company&rsquo;s logo, you of course want that panda to be recognizable. In other words, you want people to see it and think: &lsquo;Hey, that is one good looking panda! Wait, isn&rsquo;t that the company X logo?&rsquo;<\/p> \r\n\r\n<p>The keyword here is <strong>realism<\/strong>. You want your drawings to feel like they are real, like they are snapshots of a scene that is actually happening in front of the viewer&rsquo;s eyes. And in order to achieve this realism, we need to give our drawing <em>depth<\/em>. Our world is three dimensional, but our drawing has only two dimensions, which means we need some extra skill to create the illusion of that third dimension.<\/p>\r\n\r\n<p>For this, I have what I call the 9 Laws of Drawing:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Contour Lines.<\/strong> Imagine your lines as curves wrapping around the form of a 3D object, not simply as two dimensional stripes.<\/li>\r\n\t<li><strong>Edges.<\/strong> Use the right type of edge to portray what you want.<\/li>\r\n\t<li><strong>Foreshortening<\/strong>. Distort shapes to create the illusion that they aren&rsquo;t flat.<\/li>\r\n\t<li><strong>Overlapping<\/strong>. Overlap shapes to show one is closer to the viewer than the other.<\/li>\r\n\t<li><strong>Construct.<\/strong> Use basic 3D shapes to construct your objects in a logical and realistic way.<\/li>\r\n\t<li><strong>Proportions<\/strong>. Use size and proportional relationships to show the position and form of an object.<\/li>\r\n\t<li><strong>Shading<\/strong>. Use light and shadow to show the form of a 3D object.<\/li>\r\n\t<li><strong>Perspective. <\/strong>Use the elements of perspective, such as horizon lines, placement up or down the page, and vanishing points.<\/li>\r\n\t<li><strong>Details.<\/strong> Use details &ndash; such as texture, colouring or density &ndash; to enrich the drawing even more.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingLawsOfDrawing.png\" \/><\/p>\r\n\r\n<p>These laws aren&rsquo;t placed in a random order; they are ordered from basic to advanced, and structured in the same way as this whole course. I&rsquo;ll start with teaching you to get simple lines and curves looking right, and then continue to shapes, which leads to 3D objects, which leads to adding enrichment and details. Essentially, last sentence already describes the whole <em>drawing process<\/em>. You&rsquo;ve already learnt everything you need to know! Now all I need to do is use the rest of the course to show you how to do it. Yes, it&rsquo;s that simple.<\/p>\r\n","slur":"drawing-laws-of-drawing","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":"0?Contour Lines?Lines showcasing an object's 3D form@\r\n0?Edges?Lines signaling a sudden change@\r\n0?Foreshortening?Distorting shapes to create illusion of 3D@\r\n0?Overlapping?Erasing parts of objects that are behind others in 3D space@\r\n0?Constructing?Building complex objects out of 3D basic shapes@\r\n0?Proportions?Showcasing 3D placement by increasing or decreasing size@\r\n0?Shading?Using properties of light to make something seem 3D@\r\n0?Perspective?Using some rules to make whole scenes look 3D@\r\n0?Details?Using techniques like texture and colouring to enrich the drawing"},
{"id":"334","title":"[Drawing] Lines","post":"<p>Let&rsquo;s face it, everything you draw is essentially a line. It&rsquo;s not like you can create a three dimensional box by waving your pencil in the air. Because of that, it&rsquo;s only logical that your line making technique should be perfect.<\/p> \r\n\r\n<h2>Confident Lines<\/h2>\r\n\r\n<p>Lots of beginning artists are afraid to draw. They draw short, sketchy strokes which should, after a while, resemble the line they were after. Of course, using the eraser can tidy up some things, but the process is slow and just not right. When you draw a line, you should be confident about it!<\/p>\r\n\r\n<img src=\"media\/DrawingConfidentLines.png\" \/>\r\n\r\n<p>When you know what line you want to draw, perform a swift pencil stroke to do so. Don&rsquo;t worry if it doesn&rsquo;t turn out alright, you can just erase the whole line and try again. Using this method you&rsquo;ll see immediate improvements in the quality of your lines, and after a while, you&rsquo;ll rarely draw a wrong line.<\/p>\r\n\r\n<h2>Drawing from the Shoulder<\/h2>\r\n\r\n<p>Write your name on a piece of paper. When you&rsquo;re done, ask yourself the questions:<\/p>\r\n\r\n<ul>\r\n\t<li>What parts of my body were involved in writing this?<\/li>\r\n\t<li>Did I shift my position or hunch my back?<\/li>\r\n<\/ul>\r\n\r\n<p>Odds are, you primarily used your wrist for the writing and leaned forward a bit. For handwriting, this is okay, as you&rsquo;re making small controlled motions which should just resemble some letters. When drawing, this stiffness makes it hard to create smooth and natural lines. The solution is: drawing from your shoulder!<\/p>\r\n\r\n<img src=\"media\/DrawingFromTheShoulder.gif\" \/>\r\n\r\n<p>Instead of leaning on your hand and using only your wrist, lock your wrist and draw by rotating the <em>shoulder<\/em> and <em>elbow<\/em>. You&rsquo;ll notice that this feels out-of-control and unbalanced, at first. A good way to combat this feeling is by having a correct posture: sitting upright and with both feet firmly on the ground. If you&rsquo;re constantly shifting position, you&rsquo;ll have to adjust your drawing technique every time, which is wasteful. In the end, however, only practicing this drawing method a lot will make you accustomed to it.<\/p>\r\n\r\n<p>Nevertheless, as illustrated by my handwriting example, you shouldn&rsquo;t always draw from your shoulder. This type of drawing is great for medium to large curves and lines, but when you want to draw small details and finishing touches, you should actually draw from the wrist. It gives you more control and stability in the small range that it gives you. A good drawing will often be a combination of the two: large and loose strokes, combined with small and detailed ones.<\/p>\r\n\r\n<h2>Extended Lines<\/h2>\r\n\r\n<p>Even after years of practice, you&rsquo;ll still occasionally have problems with drawing a line with the correct length in one try. Fortunately, we have an eraser! When drawing lines, it&rsquo;s sometimes helpful to &ldquo;overshoot&rdquo; the line. Just draw the line longer than it has to be, and later on erase the parts you don&rsquo;t need.<\/p>\r\n\r\n<img src=\"media\/DrawingOvershootingLines.png\" \/>\r\n\r\n<h2>Line Thickness<\/h2>\r\n\r\n<p>There&rsquo;s one great tool built into every pencil that most people overlook. By varying the amount of pressure you put on it, you get thinner and thicker lines. Instead of creating all your lines at the exact same size, you can use the thickness of the line to make the drawing more dynamic. As a rule of thumb, thick lines are often used to show something is closer to the viewer or in the shadows.<\/p>\r\n\r\n<img src=\"media\/DrawingLineThickness.png\" \/>\r\n\r\n<h2>Rotate the Page!<\/h2>\r\n\r\n<p>One last tip: if you find yourself having troubles with a certain line or curve, simply rotate the page until it becomes easier for you. Most people naturally draw smoother and easier when they&rsquo;re moving the pencil towards them, instead of away from their body.<\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>I recommend doing these exercises on a day to day basis, and as often as you can. They can also be used as a warmup, if you like.<\/p>\r\n\r\n<h3>Straight Lines<\/h3>\r\n\r\n<p>Let&rsquo;s start easy. Draw lines of any length and in any direction you want, as long as they are (mostly) straight. If you find your lines curving or having bumps in them, keep practicing! Nevertheless, keep your arm loose and focus on drawing smooth and fast lines.<\/p>\r\n\r\n<img src=\"media\/DrawingStraightLines.gif\" \/>\r\n\r\n<h3>Curved Lines<\/h3>\r\n\r\n<p>Place dots at random positions on the paper. Now, connect all the dots by drawing a curved line through all of them. Make sure you don&rsquo;t take any sharp turns, keep everything smooth, and go through ever dot exactly.<\/p>\r\n\r\n<img src=\"media\/DrawingCurves.gif\" \/>\r\n\r\n<h3>Copying Lines<\/h3>\r\n\r\n<p>Draw a random line. Now, copy the exact same line; continue trying to copy it until it looks almost identical.<\/p>\r\n\r\n<img src=\"media\/DrawingCopyingLines.gif\" \/>\r\n\r\n<h3>Doodle!<\/h3>\r\n\r\n<p>This is the fun one. Doodle anything you like, it doesn&rsquo;t have to resemble anything or be pretty. Below is an example of something I just randomly doodled.<\/p>\r\n\r\n<img src=\"media\/DrawingDoodleExercise.png\" \/ (drawingdoodleexercise.png)<\/p>\r\n","slur":"drawing-lines","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":"2?Get smooth lines?Overshooting lines@\r\n2?Get large, natural curves?Drawing from the shoulder@\r\n2?Get small, precise lines?Drawing from the wrist@\r\n2?Achieve more dynamic drawings?Varying the line thickness@\r\n2?Draw challenging curves?Rotating the page"},
{"id":"335","title":"[Drawing] Edges","post":"<p>One of the biggest issues people have with drawing is that they don&rsquo;t know what lines they should and shouldn&rsquo;t draw. <em>Should I draw lines at every spot the object changes colour\/texture?<\/em> <em>Or should I draw lines everywhere there&rsquo;s a change of shape? Or should I solely draw the outlines? <\/em>These questions have no definite answer, but a few approaches can be used.<\/p> \r\n\r\n<h2>Hard, Soft and Lost Edges<\/h2>\r\n\r\n<p>We can identify three different types of edges: <strong>hard edges<\/strong>, <strong>soft edges<\/strong> and <strong>lost edges<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DrawingEdgeTypes.png\" \/><\/p>\r\n\r\n<p><em>Hard Edges<\/em> signal a sharp or sudden edge. For example, buildings often have lots of hard edges because of their &ldquo;squaredness&rdquo;. Likewise, a line that separates one object from another is also hard, as you can&rsquo;t smoothly transition between two different objects.<\/p>\r\n\r\n<p><em>Soft Edges<\/em> signal a subtle, smooth or curved edge. For example, wrinkles in clothes are soft edges as you can&rsquo;t really create sharp folds in cloth.<\/p>\r\n\r\n<p><em>Lost Edges<\/em> are, well, edges that are lost. When two objects next to each other have (almost) the same colour, the edge between them disappears.<\/p>\r\n\r\n<p>It&rsquo;s your job to determine the edges in your drawing, and most of all determine their type. Really, it comes down to personal choice<\/p>\r\n\r\n<h2>Style<\/h2>\r\n\r\n<p>Even though the course has just started, we&rsquo;ve already reached a topic that hugely influences the style of your drawing. &nbsp;Simple cartoons and comics, for example, usually have only hard edges. Realistic paintings, on the other hand, try to employ a lot of soft and lost edges for realism or artistic effect.<\/p>\r\n\r\n<p>Besides personal choice, what you&rsquo;re going to use the drawing for also has an impact. If you&rsquo;re designing characters for a game, you can&rsquo;t use lost edges as the characters will be moving around, and you&rsquo;ll probably use hard edges to make the character stand out amongst all sorts of backgrounds. If you&rsquo;re creating a background drawing for a website, you&rsquo;ll want to use as little hard edges as possible, because it shouldn&rsquo;t scream for attention.<\/p>\r\n\r\n<p><img src=\"media\/DrawingEdgeStyle.png\" \/><\/p>\r\n\r\n<p>In the end, you&rsquo;ll only learn to use edges well by experimenting and looking at art in the style you&rsquo;re after.<\/p>\r\n\r\n<h2>A Different Approach<\/h2>\r\n\r\n<p>If this seems vague to you, there&rsquo;s another approach I think is useful to know. Here it comes: <em>edges are lines shared by two shapes<\/em>. When trying to find your edges, look for shapes that are colliding. If they are radically different, there&rsquo;s a good chance it&rsquo;s a hard edge. It they are similar, there&rsquo;s a good chance you should go for a soft or lost edge. Next chapter will be all about shapes, and will hopefully clarify this statement of mine.<\/p>\r\n\r\n<h2>Pointy Edges<\/h2>\r\n\r\n<p>It&rsquo;s important to understand that hard edges are not equal to pointy edges, which are used for things such as spikes or knifes. You can&rsquo;t really draw such sharp points with one stroke, as you&rsquo;ll end up with a way to smooth corner. Instead, draw these points as two lines intersecting, and perhaps erase some of the thickness at the end.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPointyEdges.gif\" \/><\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>To practice giving your lines more meaning, look at the images below, and draw each one of them two times.&nbsp; The first time, copy the image exactly and identify the types of edges. The second time, change one edge to another type.<\/p>\r\n\r\n<p><img src=\"media\/DrawingEdgesExercise.png\" \/><\/p>\r\n","slur":"drawing-edges","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":"3?Hard Edges?Signals sharp and sudden edges@\r\n3?Soft Edges?Signals subtle, smooth or curved edges@\r\n3?Lost Edges?Reduces complexity and increases unity"},
{"id":"336","title":"[Drawing] Shapes","post":"<p>When multiple lines intersect to create a closed area, we call it a <em>shape<\/em>. When you look at an image closely, you&rsquo;ll see that it&rsquo;s nothing more than a bunch of shapes forming a visual illusion. I&rsquo;m not talking about objects or parts of objects, I&rsquo;m only talking about pieces of a drawing that are visually different. A shadow, for example, is a shape as well, just as a highlight.<\/p> \r\n\r\n<p><img src=\"media\/DrawingShapesAreEverything.png\" \/><\/p>\r\n\r\n<h2>Drawing from Real Life<\/h2>\r\n\r\n<p>If you (only) want to draw from real life, we&rsquo;re already done here. I only need to explain a few things about shapes and techniques, and you&rsquo;re good to go. I, however, think you want to be able to draw anything, not just copy some object that you put in front of you. The rest of the course is focussed solely on achieving that goal; drawing anything you can imagine. Nevertheless, the methods described here are still fundamental concepts that will probably be of some value to you.<\/p>\r\n\r\n<p>There are two methods to draw from real life: <strong>contouring<\/strong> and <strong>block-in<\/strong>.<\/p>\r\n\r\n<h3>Contouring<\/h3>\r\n\r\n<p>This sounds the simplest, but actually is the hardest. Contouring simply means that you copy every shape you see directly to the paper. You don&rsquo;t need to know the structure behind the objects in your picture, or how shading works &ndash; you can see the shapes right in front of you, and you can just copy them.<\/p>\r\n\r\n<p><img src=\"media\/DrawingContouring.gif\" \/><\/p>\r\n\r\n<h3>Block-in<\/h3>\r\n\r\n<p>This method is a simplification of the contouring method. Instead of drawing objects shape by shape, you draw the shapes around it (at the edges of the paper), where <em>nothing happens<\/em>. When done carefully, these blocks reveal the shapes you were trying to draw. The more often you refine your blocks, the smoother your shapes will be.<\/p>\r\n\r\n<p><img src=\"media\/DrawingBlockIn.gif\" \/><\/p>\r\n\r\n<h2>Positive &amp; Negative Shapes<\/h2>\r\n\r\n<p>Broadly speaking, the world is a set of so-called <em>positive<\/em> and <em>negative<\/em> shapes, balancing each other. When you hold your pencil up in the air before your eyes, you see a pencil shape (obviously). Your focus is on the pencil, which is why it&rsquo;s called a positive shape. There is, however, something else you also (unconsciously) see: the space around the pencil. This space is mostly ignored by your brain, as it is blurred and empty, and therefore a negative shape.<\/p>\r\n\r\n<p><img src=\"media\/DrawingNegativeSpaces.png\" \/><\/p>\r\n\r\n<p>The block-in method from last section already made great use of these negative shapes, and you should use them as well any time you notice their existence!<\/p>\r\n\r\n<p>As you can see, positive shapes are surrounded by negative shapes; objects are surrounded by empty spaces without any object. When it comes to drawing, both of these shapes are important. To remember this distinction, it helps to know other names for negative spaces that are more descriptive: <em>trapped shapes<\/em> or <em>negative space<\/em>.<\/p>\r\n\r\n<h2>The Four Rules of Shape<\/h2>\r\n\r\n<p>It&rsquo;s possible that &ldquo;just draw the shapes as you see them&rdquo; is a bit overwhelming, which is why I would like to list the four rules of shape, which are always a good starting point.<\/p>\r\n\r\n<ol>\r\n\t<li><strong>Start Large<\/strong>. Draw large shapes first, then smaller shapes. Start with a general outline of each object, or maybe even a general outline of multiple objects at the same time. Squinting your eyes or rotating the image can help notice the largest of forms and shapes.<\/li>\r\n\t<li><strong>Enrich<\/strong>. Distinguish between those major shapes by adding details and shading. Look for shapes that enrich what you already have, such as highlights, shadows, reflections, patterns, or textures. All of these are also shapes by themselves, although not always as obvious or simple as you think shapes to be.<\/li>\r\n\t<li><strong>Connect. <\/strong>Tie shapes together to simplify the drawing, and make your life easier. You might think this adds to the confusion, but it actually greatly reduces it. Instead of adding all sorts of small scribbly lines and subtle tone differences, everything is unified and the viewer automatically interprets it the right way.<\/li>\r\n\t<li><strong>Think &ldquo;Negative&rdquo;<\/strong>. When you see a trapped shape, draw it. Trapped shapes inherently reveal the positive shapes.<\/li>\r\n<\/ol>\r\n\r\n<p>Note that points 2&mdash;4 are in no particular order. As illustrated with the drawing below, you can apply them in any way you like.<\/p>\r\n\r\n<p><img src=\"media\/DrawingRulesOfShape.png\" \/><\/p>\r\n\r\n<h2>Imaginative Drawing<\/h2>\r\n\r\n<p>Now that you&rsquo;ve learnt all about drawing from real life, you&rsquo;re surely eager to know how you can draw anything that pops into your head. For this, the only method available is called <strong>construction<\/strong>. Simply put, everything can be constructed out of basic shapes, which are <em>rectangles<\/em> and <em>ovals<\/em>. And, of course, all sorts of variations on those (ellipses, trapezoids, egg-like shapes, etcetera). Next chapters will tell you all about those!<\/p>\r\n\r\n<p><img src=\"media\/DrawingFromImagination.png\" \/><\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>After such a general and abstract chapter, there aren&rsquo;t really exercises to be done. All I can say is: if you have the time, find an interesting object, and try drawing it using the methods I provided. Especially try to see and draw the negative shapes. Go wild!<\/p>\r\n","slur":"drawing-shapes","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"0?Contouring?Drawing outlines and visible edges of an object as you see them@\r\n0?Block-in?Drawing blocks of negative space around an object to reveal its form@\r\n0?Start Large?Drawing big shapes first, then the smaller ones@\r\n0?Enrich?Making shapes come to live by adding details (such as shading or texture)@\r\n0?Connecting?Merging shapes together to keep the drawing simple and clean@\r\n0?Thinking Negative?Drawing the empty space around objects"},
{"id":"337","title":"[Drawing] Rectangles","post":"<p>The obvious first basic shape, is the rectangle. I, however, will use this name to refer to any shape that has four edges, to keep terminology simple.<\/p> \r\n\r\n<h2>A Standard Rectangle<\/h2>\r\n\r\n<p>Drawing a regular rectangle is simple. Draw two vertical lines next to each other, and two horizontal lines underneath each other, and voila. Again, the overshooting technique I taught you is useful to get smooth lines.<\/p>\r\n\r\n<img src=\"media\/DrawingRegularRectangles.png\" \/>\r\n\r\n<h2>Rectangles in Perspective<\/h2>\r\n\r\n<p>But, how often do you see such perfect rectangles in real life? Not often. Only when you look at rectangular objects in perfect side view, you actually see a rectangle. If you look at objects from an angle, the shapes will be distorted, which we call <em>foreshortening<\/em>. The reason for this is simply that things that are further away seem smaller, even though the sides of the rectangle are essentially of the same size in (three dimensional space).<\/p>\r\n\r\n<p>In a rectangle, the vertical lines are parallel to each other (they have the same direction), and the horizontal lines as well. Foreshortened rectangles have at least one pair of parallel lines moving towards each other, depending on the perspective you choose. Essentially, this means that the parts of the rectangle that are further away should be smaller.<\/p>\r\n\r\n<img src=\"media\/DrawingForeshortenedRectangles.png\" \/>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>The first law of drawing talked about contour lines; the lines wrapping around an object that showcase the three-dimensional form. With rectangles, it might seem obvious that the contour lines are nothing more than even more parallel lines within the rectangle. In perspective, however, it&rsquo;s difficult to establish direction and position of contour lines from the top of your head. To solve this, there is a method called <em>dividing rectangles<\/em>.<\/p>\r\n\r\n<p>Simply put, the two main diagonals of any rectangle intersect at its centre point, and basically subdivide the rectangle into four smaller ones. With these you can perform the same technique until you have the precision you need. The best thing about it is that it works for any shape, even in perspective!<\/p>\r\n\r\n<img src=\"media\/DrawingDividingRectangles.gif\" \/>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>The exercises for this are simple ones&nbsp;I recommend you try to do every day as a warm-up.<\/p>\r\n\r\n<h3>Any Rectangle<\/h3>\r\n\r\n<p>Draw rectangles at different sizes. Try to create a square once in a while. If you feel adventurous, try to draw rotated rectangles as well.<\/p>\r\n\r\n<img src=\"media\/DrawingAnyRectangleExercise.gif\" \/>\r\n\r\n<h3>Perspective Rectangles<\/h3>\r\n\r\n<p>Draw a random foreshortened rectangle, and subdivide it once.<\/p>\r\n\r\n<img src=\"media\/DrawingForeshortenedRectangleExercise.gif\" \/>\r\n\r\n<h3>Houses<\/h3>\r\n\r\n<p>Draw houses or churches, just like you used to do when you were young (probably). Try to use subdivision and foreshortening to add windows or other details.<\/p>\r\n\r\n<img src=\"media\/DrawingRectangleHousesExercise.gif\" \/>","slur":"drawing-rectangles","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":"2?Make rectangles 3D?Parallel lines angling towards each other@\r\n2?Find a rectangle's midpoint in 3D?Rectangle division@\r\n2?Draw a house, or any other rectangly object?Multiple foreshortened rectangles"},
{"id":"338","title":"[Drawing] Ovals","post":"<p>I called this chapter ovals, and not circles, because drawing a perfect circles is actually rarely required in a drawing. Just as with rectangles, you&rsquo;ll encounter lots of distorted and modified ovals when trying to draw 3D.<\/p> \r\n\r\n<h2>Circles<\/h2>\r\n\r\n<p>A perfect circle takes time to get right, even when drawing from the shoulder. Small circles are okay, but if you need large ones it&rsquo;s best to just draw a quick and loose oval, and later on use the eraser and small strokes here and there to adjust it. I have to say, though, that organic shapes that <em>seem<\/em> circular (such as the head) are often slightly stretched circles, or egg-like shapes. Try to look closely at your object to see how it actually looks.<\/p>\r\n\r\n<img src=\"media\/DrawingPerfectCircles.png\" \/>\r\n\r\n<h2>Ellipses<\/h2>\r\n\r\n<p>Ellipses are <em>incredibly<\/em> important when drawing, and the annoying thing is that they&rsquo;re the hardest to get right. Ellipses are the only way to represent <em>foreshortened circles<\/em>. I think the best way to learn to control them, is by knowing some basic theory about ellipses. This picture sums it up:<\/p>\r\n\r\n<img src=\"media\/DrawingEllipseTheory.png\" \/>\r\n\r\n<p>The degree is named that way for a good reason. It represents the angle at which we look at the circle; for example, a large degree means the ellipse is a circle, and we&rsquo;re looking at it in perfect side view. A small degree means we&rsquo;re looking from a large angle, and we see a hugely foreshortened circle.<\/p>\r\n\r\n<p>To illustrate this further, we can draw a circle <em>within a rectangle<\/em>, and then rotate the rectangle (using our knowledge from last chapter). Notice how the circle becomes an ellipse with decreasing degree.<\/p>\r\n\r\n<img src=\"media\/DrawingForeshortenedCircles.png\" \/>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>Just as with rectangles, we can subdivide our ovals into multiple parts. Again, the easiest way to accomplish this is by drawing a rectangle around it, and subdividing that. The point where they intersect is the centre point of the oval, and you should have a circle with 8 equally big parts.<\/p>\r\n\r\n<img src=\"media\/DrawingDividingCircles.gif\" \/>\r\n\r\n<p>Now, these contour lines help you to draw a pie, but don&rsquo;t seem to have much more use than that. However, if we relate these contour lines of the flat oval shape to a 3D object, we can easily create the visual illusion of depth and form. I call this the <strong>umbrella method<\/strong>.<\/p>\r\n\r\n<p>All you do is draw a subdivided circle &ndash; or only part of it, if you don&rsquo;t need all of it &ndash; underneath&nbsp; your object, and then draw straight strokes from the subdivision lines to the object, to see where your contour lines should be on your object. (Don&rsquo;t worry, we&rsquo;ll take a closer look at contour lines in later chapters when we&rsquo;re actually working with 3D objects)<\/p>\r\n\r\n<img src=\"media\/DrawingUmbrellaMethod.gif\" \/>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>Again, simple exercises I suggest you do daily, or whenever you have some time to kill.<\/p>\r\n\r\n<h3>Ovals<\/h3>\r\n\r\n<p>Draw ovals at different sizes. They don&rsquo;t have to be perfect. Try to keep the ovals smooth, and especially try to end the line exactly where you started.<\/p>\r\n\r\n<img src=\"media\/DrawingOvalsExercise.gif\" \/>\r\n\r\n<h3>Circles &amp; Ellipses<\/h3>\r\n\r\n<p>Last exercise was a loose one, with this exercise you try to draw perfect circles and ellipses at all angles\/sizes.<\/p>\r\n\r\n<img src=\"media\/DrawingCirclesEllipsesExercise.gif\" \/>\r\n\r\n<h3>Tracing Shapes<\/h3>\r\n\r\n<p>Simply draw any of the shapes from the previous exercises. Now, trace over that exact shape again and again. Start slow, but aim to trace your shapes as fast as possible.<\/p>\r\n\r\n<img src=\"media\/DrawingTracingShapesExercise.gif\" \/>\r\n\r\n<h3>Combine<\/h3>\r\n\r\n<p>Draw anything that combines all the previously discussed shapes. Especially useful, I think, is to draw ovals inside rectangles, or vice versa.<\/p>\r\n\r\n<img src=\"media\/DrawingCombiningShapesExercise.gif\" \/>","slur":"drawing-ovals","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"0?The Umbrella Method?Drawing circular contour lines in 3D using a subdivided circle@\r\n0?Degree?The amount to which a circle is rotated in 3D@\r\n0?Major Axis?The longest side of an ellipse@\r\n2?Draw small circles?Controlled, tight drawing from the wrist@\r\n2?Draw big circles?Loose, natural drawing from the shoulder@\r\n2?Accurately rotate a circle in 3D?Drawing the circle inside foreshortened rectangles@\r\n2?Subdivide a circle?The division lines of the rectangle that surrounds the circle"},
{"id":"339","title":"[Drawing] Construction & Form","post":"<p>Now that you can draw the most important shapes, it&rsquo;s time to dig a little deeper into that <em>construction<\/em> method. I already told you that you can use basic shapes to construct <em>anything<\/em>, but how do you know which shapes to use and where to place them?<\/p> \r\n\r\n<p>Well, that can be accomplished by constructing your objects out of actual 3D shapes! Instead of trying to magically figure out the shapes of an object, you can build it out of basic shapes &ndash; such as cubes, spheres and cylinders &ndash; and use that as a very useful guide. When I refer to the actual three-dimensional construction of an object, I&rsquo;ll use the term <strong>form<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DrawingFormBasicShapes.png\" \/><\/p>\r\n\r\n<p>When you see an object, you only see its outside, and not what is on the inside. This, however, is quite deceptive; how the object is constructed from the inside is what actually determines how it looks to our eyes. By learning to build your objects from the inside to the outside, you learn to understand its form, <em>and<\/em> you&rsquo;re able to draw it in any way you like.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>Laws of Form #1: <\/strong>Learn to recognize and draw the 3D basic shapes: cubes, circles, cylinders, pyramids and cones.<\/p>\r\n\r\n<h2>Pose<\/h2>\r\n\r\n<p>An object with the same form, can have multiple <strong>poses<\/strong>. A human can sit in many different poses, but it stays the same human with the exact same body. That human is able to do so because multiple parts of his body are connected at so-called <em>joints<\/em> (that can rotate freely, to some extent).<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>Laws of Form #2: <\/strong>Find out where the joints are, and how they connect two parts of the object<\/p>\r\n\r\n<p><img src=\"media\/DrawingPoses.png\" \/><\/p>\r\n\r\n<p>The important things to remember is that joints can be hinge-like, such as the elbow that connects upper arm and lower arm, as well as fixed, such as screwing a leg to a chair&rsquo;s sitting surface.<\/p>\r\n\r\n<p>In this case, I use the word <em>pose<\/em> in a general sense: it doesn&rsquo;t only apply to humans or living things, but also to lifeless objects. For example, a building can be in different states as well (windows can be opened, curtains can be closed), but in general lifeless objects are more static and drawing basic shapes is often enough to understand them.<\/p>\r\n\r\n<h2>Gesture &amp; Rhythm<\/h2>\r\n\r\n<p>Most poses have a general action, direction or movement within them, which I call the <em>gesture<\/em> or <em>rhythm<\/em>. If you don&rsquo;t know where to start, it&rsquo;s always wise to lay down the basic gesture. For example, if you&rsquo;re drawing a human, a simple vertical curve already establishes that the human is standing up. If you&rsquo;re drawing a tree blowing in the wind, a simple diagonal curve establishes the gesture you can then work on.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>Laws of Form #3:<\/strong> Before anything else, loosely sketch the gesture of your object.<\/p>\r\n\r\n<p><img src=\"media\/DrawingGesture.png\" \/><\/p>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>The only problem with basic shapes, is that they&rsquo;re quite static. A panda&rsquo;s upper body can be approximated with a cylinder &ndash; but it doesn&rsquo;t actually look anything like a cylinder! Once you laid out the basic shapes, it&rsquo;s time to modify them and add details to improve the realism of your drawing.<\/p>\r\n\r\n<p>The best way to reliably do so, is to subdivide your basic shapes and add contour lines here and there. In the previous chapters I&rsquo;ve already discussed how to subdivide shapes, while drawing contour lines in 3D will be dealt with in the next chapters. By adding these contour lines, you can really see how the form flows, and you can make adjustments <em>in accordance with<\/em> those lines. If you were to modify a basic shape in a completely different flow than the contour lines, it would look odd.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>Laws of Form #4:<\/strong> Modify basic shapes to increase realism, and use contour lines to aid this process.<\/p>\r\n\r\n<p><img src=\"media\/DrawingFormContourLines.png\" \/><\/p>\r\n\r\n<h2>Balance<\/h2>\r\n\r\n<p>Last but not least, a quick tip for you. If an object is not falling over, it&rsquo;s <em>balanced<\/em>. Therefore, if you&rsquo;re drawing something that shouldn&rsquo;t fall over, you should make sure the balance is right. For example, if you look at your drawing and see that your character is slightly leaning to the left, while he should just be standing perfectly straight, this would look weird. If you, however, move his left foot outward, he regains balance and the way your drew him is just a pose you gave him. Always try to find out what your object leans on, and where the centre of mass (approximately) is, and use this information to make the pose balanced.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><strong>Laws of Form #5:<\/strong> If your object isn&rsquo;t falling over, make sure it&rsquo;s balanced. If your object actually <em>is<\/em> falling over, or you want a surrealistic effect, reduce balance on purpose.<\/p>\r\n\r\n<p><img src=\"media\/DrawingFormBalance.png\" \/><\/p>\r\n","slur":"drawing-construction-form","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"0?Basic Shapes?Cubes, spheres, cylinders, pyramids, and cones@\r\n0?Joint?Anything that connects two different parts@\r\n0?Form?The three-dimensional construction of an object@\r\n0?Gesture?The action, direction or movement of a pose@\r\n0?Contour Lines?Lines only there to showcase an object's form@\r\n0?Balance?The fact that most poses look best when you place the centre of mass accurately"},
{"id":"340","title":"[Drawing] Cubes","post":"<p>Things in our world tend to be very cube-like. Our buildings are approximately cubes, our vehicles are approximately cubes, and the list goes on and on. Fortunately, the cube is the easiest basic shape to draw in perspective!<\/p> \r\n\r\n<h2>What&rsquo;s a Cube?<\/h2>\r\n\r\n<p>Technically, a cube is a three-dimensional square, but I will use it as a term for boxes of any size, just as I used <em>rectangle<\/em> for all shapes with four corners. A cube is what happens when you add depth to a rectangle, and essentially extend it in the z-direction. Cubes can be found nearly everywhere, and are often a good way to establish the overall form of objects before adding in the details.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesOverview.png\" \/>\r\n\r\n<h2>Cubes in Perspective<\/h2>\r\n\r\n<p>Because a cube is just a set of rectangles, we can use foreshortened rectangles to make it look nice in perspective. Because we can never see more than three sides of a cube &ndash; if you disagree, check for yourself &ndash; we only need (at most) three <em>vanishing points<\/em>. I already told you that parallel lines angle towards each other in perspective, and the reason for this is that parallel lines converge or intersect at those so-called vanishing points. They are nothing more than imaginary points somewhere in the distance where two parallel lines would eventually meet. You often don&rsquo;t even need to know their exact position, as an approximation is enough to create accurate cubes.<\/p>\r\n\r\n<p>So, when drawing a cube, simply establish the vanishing points and draw lines from them, and you&rsquo;re done!<\/p>\r\n\r\n<img src=\"media\/DrawingCubesThreePoints.png\" \/>\r\n\r\n<p>As you can see in the image, if you choose your vanishing points too close to your object, you get a very distorted perspective, which often isn&rsquo;t realistic at all. Something you perhaps also noticed, is that the three vanishing points always form a nice triangle. After you&rsquo;ve chosen two vanishing points (which shouldn&rsquo;t be too close to each other), the third one should be at an equal distance from both points.<\/p>\r\n\r\n<p>NOTE: If you&rsquo;re wondering <em>why<\/em> parallel lines converge, think about looking down from a very high spot, such as a mountain. Below you can see the houses and maybe even people, but they are nothing more than dots to your eyes. Because they are so far away, their shapes converge towards a single point (from your point of view). More will be explained in the chapter on perspective.<\/p>\r\n\r\n<h2>Viewing Angles<\/h2>\r\n\r\n<p>You probably noticed that I said you needed <em>at most<\/em> three vanishing points. You can remove one vanishing point, which means that parallel lines in that direction simply stay parallel. In this case, you&rsquo;ll only see two sides of the cube. In fact, sometimes a cube even requires only a single vanishing point. To understand when or why this is the case, I need to talk about viewing angles.<\/p>\r\n\r\n<p>There are three dimensions in which you can rotate, which I&rsquo;ll call <em>x<\/em>, <em>y<\/em> and <em>z<\/em>. You may also call them <em>width<\/em>, <em>height<\/em>, and <em>depth<\/em> if you like. Not only can we rotate other objects in these directions, we can also tilt our own head and by doing so change the <em>viewing angle<\/em> at which we see the world.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesViewingAngles.png\" \/>\r\n\r\n<p>Essentially, when one of our viewing angles aligns with one of the cube&rsquo;s angles, we have only one or two vanishing points. When all viewing angles are aligned, there are no vanishing points; the cube has become a flat rectangle to our eyes. When none of our viewing angles are aligned, we get the three vanishing points again.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesViewingAnglesAligning.png\" \/>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>Because I already took the time to explain to you how to divide rectangles, drawing contour lines on cubes is easypeasy. Cubes have only flat sides, which means you can simply draw the individual contour lines for each rectangle shape, and you should be good.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesContourLines.png\" \/>\r\n\r\n<p>If you&rsquo;re wondering &ndash; &ldquo;<em>what are those contour lines good for?&rdquo;<\/em> &ndash; just think about how often shapes in the real world are cubes with holes in them or certain parts extruded. If you want to accurately morph your cube into the actual shape you were looking for, you need the contour lines to show you how the surface wraps in perspective.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesModified.png\" \/>\r\n\r\n<h2>Drawing Through<\/h2>\r\n\r\n<p>One last tip I have for you is applicable to all (basic) shapes really, and especially useful if you need to draw the interior of an object (like, for example, what&rsquo;s inside a box) or a transparent object. The technique is called <strong>drawing through<\/strong>, and it means that you draw the lines at the other side of the shape, even though you&rsquo;re not actually going to see them all. This helps build an understanding of how an object is build, and makes it even easier for you to add details.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesInside.png\" \/>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>These exercises will generally take a bit longer than the previous ones, but I still suggest you practice drawing your cubes every day.<\/p>\r\n\r\n<h3>Simple Cubes<\/h3>\r\n\r\n<p>Place four dots on the paper, making sure that two of them are on the same horizontal line, and the other two on the same vertical line. Connect them with lines to get a hugely distorted rectangle, which represents the top of the cube. Now draw the rest of the cube.<\/p>\r\n\r\n<img src=\"media\/DrawingSimpleCubesExercise.gif\" \/>\r\n\r\n<p>NOTE: This is kind of the reversed way of drawing a cube. First, you draw the division lines, and then you use them to create your foreshortened rectangles.<\/p>\r\n\r\n<h3>Advanced Cubes<\/h3>\r\n\r\n<p>Place one, two or three random vanishing points on the paper. Now draw the cube that results from them.<\/p>\r\n\r\n<img src=\"media\/DrawingCubesThreePointsExercise.gif\" \/>\r\n\r\n<h3>Connecting Cubes<\/h3>\r\n\r\n<p>Draw a random cube. Now divide all the sides, and connect a smaller cube to one of the subdivisions. This one takes some practice, but is extremely useful. Once you get better, start adding more and more cubes, and maybe even some variations.<\/p>\r\n\r\n<img src=\"media\/DrawingConnectedCubesExercise.png\" \/>","slur":"drawing-cubes","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"2?Draw a subdivided cube?The contour lines of all the foreshortened rectangles of a cube@\r\n2?Establish the amount of vanishing points?The viewing angle@\r\n2?Create open boxes?Drawing through the cube@\r\n2?Properly apply the foreshortening principle to create realistic 3D cubes?Parallel lines converging towards their respective vanishing points@\r\n0?Vanishing Point?A point in 3D space that parallel lines are angled towards.\r\n0?Distorted Perspective?Vanishing points too close to each other that make your cubes look unrealistic@\r\n0?X Axis?Imaginary line representing the width of an object@\r\n0?Y Axis?Imaginary line representing the height of an object@\r\n0?Z Axis?Imaginary line representing the depth of an object@"},
{"id":"341","title":"[Drawing] Spheres","post":"<p>When it comes to organic forms, such as animals or trees, the sphere is a very important tool. Drawing a sphere, however, might be one of the hardest things to do for beginning artists. The combination of drawing a perfect circle and trying to make it look 3D is more often than not a challenge. Fortunately, I&rsquo;ve already explained how circles and ellipses work, which should make things a lot easier!<\/p> \r\n\r\n<h2>What&rsquo;s a Sphere?<\/h2>\r\n\r\n<p>A sphere is just a ball. Earth is a sphere, just as a wheel, orange or tennis ball. Technically, a sphere is what happens when you add together three different circles; one in each main direction (the <em>x<\/em>, <em>y<\/em>, and <em>z<\/em> axes, remember?). Even though spheres look <em>exactly the same<\/em> from any angle, it&rsquo;s important to understand how they are constructed, for both contour lines and drawing special spheres.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSpheres.png\" \/><\/p>\r\n\r\n<h2>Special Spheres?<\/h2>\r\n\r\n<p>Yes, special spheres. The sphere is a three-dimensional circle, which means it is equally large in all dimensions. But, what if we want to stretch or shrink the sphere in certain directions? (Think of, for example, a kiwi.) Then we&rsquo;d get a <em>spheroid<\/em>!<\/p>\r\n\r\n<p>These may seem difficult at first, as they <em>do<\/em> change their shape when you look from different angles. But, if you just draw the three ellipses that make up this spheroid, and then connect the ends with a nice curve, you should be fine.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSpheroids.png\" \/><\/p>\r\n\r\n<p>NOTE: As you see in the picture, spheroids take on a shape <em>similar to<\/em> the ellipse in perspective. The main difference in most of the cases, is that this ellipse has much longer flat sides.<\/p>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>Because spheres (usually) don&rsquo;t have hard edges, using the contour lines of a sphere is often the only way to show its three dimensional form. The other alternative is using shading as a soft edge, but more on that later. Additionally, contour lines can be used to establish the direction in which the circle is rotated; this is useful, for instance, when drawing a head looking in a certain direction.<\/p>\r\n\r\n<p>To draw the contour lines, draw multiple ellipses of decreasing degree along the <em>x<\/em> and <em>y<\/em> axis. Essentially, these divide the shape just like with rectangles, but this time we&rsquo;re using curves instead of diagonals. For a standard sphere, these ellipses would be pointed in the vertical and horizontal direction. If your sphere is rotated, these &ldquo;constructive ellipses&rdquo; turn with it.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSphereContourLines.png\" \/><\/p>\r\n\r\n<p>NOTE: The <em>x<\/em> and <em>y<\/em> axis are always perpendicular, so your ellipses should be as well.<\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>Just like the cube, try to do these as often as you can.<\/p>\r\n\r\n<h3>Simple Spheres<\/h3>\r\n\r\n<p>Draw a sphere, and add contour lines to it.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSpheresExercise.gif\" \/><\/p>\r\n\r\n<h3>Special Spheres<\/h3>\r\n\r\n<p>Draw a spheroid. If you&rsquo;re having trouble, start with perfect side view, as it&rsquo;s much easier to do.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSpheroidsExercise.gif\" \/><\/p>\r\n\r\n<h3>Orienting Spheres<\/h3>\r\n\r\n<p>Draw a sphere, and use the contour lines to make it face the direction you want. If you want, add simple eyes (and nose) to make it into a face.<\/p>\r\n\r\n<p><img src=\"media\/DrawingOrientedSpheresExercise.gif\" \/><\/p>\r\n","slur":"drawing-spheres","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":"2?Draw a sphere?A plain old circle@\r\n2?Construct a spheroid?Three ellipses oriented along each major axis@\r\n2?Draw a sphere's contour lines?Drawing ellipses of diminishing degree within a circle@\r\n2?Make an ellipse look realistic and natural?Making sure the ends of the ellipse are round, and not pointy@\r\n2?Rotate a sphere or spheroid in 3D?Rotating the constructive ellipses inside of it "},
{"id":"342","title":"[Drawing] Cylinders","post":"<p>Let me tell you a secret. The favourite basic shape of the world is not the cube nor the sphere &hellip; but a combination of both! The cylinder can be found everywhere, and is often an even better shape to approximate form, than a cube. A tree trunk is a bunch of cylinders, as well as its branches. The human body is best approximated with a cylinder, as well as most animal spines. Really, they&rsquo;re everywhere.<\/p> \r\n\r\n<h2>What&rsquo;s a Cylinder?<\/h2>\r\n\r\n<p>A cylinder is what happens when you add depth to a circle, or extend a circle in the z-direction. The top and bottom sides are flat circles, and in between those is a tube connecting them. It&rsquo;s basically a bunch of flat circles stacked on top of each other. Not surprisingly, for the top\/bottom we can use ellipses, and we can use straight lines for the part in between.<\/p>\r\n\r\n<p><img src=\"media\/DrawingBasicCylinders.png\" \/><\/p>\r\n\r\n<h2>Cylinders in Perspective<\/h2>\r\n\r\n<p>If you&rsquo;re not looking at cylinders in perfect side view, you need to keep a close eye on the rules of perspective, or your cylinders will look odd. As usual, the straight lines should converge into the distance. This automatically leads to the fact that the side that is furthest away should be represented by a smaller ellipse than the side close to the viewer. Nevertheless, it&rsquo;s important to make a distinction here between the <em>size<\/em> of an ellipse and its <em>degree<\/em> (or <em>width<\/em>).<\/p>\r\n\r\n<p>Because the other side is further away, it&rsquo;s smaller; we learned that from cubes and vanishing points. But, because of its different position, we&rsquo;re looking at it at another angle, so the degree should be greater. I hope the image clarifies this more.<\/p>\r\n\r\n<p><img src=\"media\/DrawingCylindersInPerspective.png\" \/><\/p>\r\n\r\n<h2>Putting Cylinders in Boxes<\/h2>\r\n\r\n<p>If you&rsquo;re using a really tricky perspective, or you have trouble with cylinders in general, there&rsquo;s always the option of drawing a cube around it. Simply draw your cube like you normally would, nothing fancy, but make sure to <em>draw through<\/em> it. This means that you draw the lines at the back, which you normally don&rsquo;t see, as well. Now you can use the front and back face of the cube to draw the ellipses that transform it into a cylinder.<\/p>\r\n\r\n<p><img src=\"media\/DrawingCylindersInBoxes.png\" \/><\/p>\r\n\r\n<p>You&rsquo;ve probably noticed that some of my ellipses are rotated, and that&rsquo;s good, because it is very important! We&rsquo;ve thus far only used vanishing points as great guidelines for drawing rectangular shapes, but we can also use them for ellipses and circular shapes. All you need to do is make sure that the <em>minor axis<\/em> converges at the vanishing point as well.<\/p>\r\n\r\n<h2>Contour Lines<\/h2>\r\n\r\n<p>The contour lines for the cylinder are somewhat complicated. In one direction, we have nothing but straight lines. In the other direction, we have nothing but ellipses wrapping around the curvy side of the cylinder. Together, all these lines form a nice grid for you to see how the form of your cylinder works.<\/p>\r\n\r\n<p>Just as with constructing spheres, it&rsquo;s important to change the degree of the ellipse when moving in three-dimensional space.<\/p>\r\n\r\n<p><img src=\"media\/DrawingContouredCylinders.png\" \/><\/p>\r\n\r\n<h2>Exercise<\/h2>\r\n\r\n<p>Not surprisingly, these exercises should also be done as often as possible.<\/p>\r\n\r\n<h3>Simple Cylinders<\/h3>\r\n\r\n<p>Draw a cylinder in side view. This means that all you need is two ellipses parallel to each other, and two lines connecting them.<\/p>\r\n\r\n<p><img src=\"media\/DrawingSimpleCylindersExercise.gif\" \/><\/p>\r\n\r\n<h3>Advanced Cylinders<\/h3>\r\n\r\n<p>Draw a cube, using one, two or three vanishing points (whatever you like). Now draw the cylinder inside it.<\/p>\r\n\r\n<p><img src=\"media\/DrawingCylindersPerspectiveExercise.gif\" \/><\/p>\r\n\r\n<h3>Cylinders with Connections<\/h3>\r\n\r\n<p>This one is hard. Draw a cylinder, and add the contour lines. Now, at random spots, connect cubes or other cylinders to it. Make sure to follow those contour lines, and don&rsquo;t forget the rules of perspective on the shapes you connect to it! When in doubt, check the tree in the image at the start of this chapter; it makes heavy use of (distorted) cylinders.<\/p>\r\n","slur":"drawing-cylinders","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":"2?Draw a cylinder in perspective?Putting the cylinder within a well-drawn cube@\r\n2?Draw a cylinder in top or bottom view?A regular circle@\r\n2?Rotate the cylinder's ellipses correctly?Alignment of the minor axis with the cylinder's vanishing point@\r\n2?Differentiate between the front and back face of the cylinder?Drawing the ellipse furthest away with a higher degree"},
{"id":"343","title":"[Drawing] Pyramids & Cones","post":"<p>Now that we&rsquo;ve discussed the biggest and most important forms of all &ndash; cubes, spheres and cylinders &ndash; it&rsquo;s time to look at the last two basic shapes, which are much simpler and less common. Nevertheless, they certainly have their place in the world of drawing.<\/p> \r\n\r\n<h2>Pyramids<\/h2>\r\n\r\n<p>A pyramid is a cube, but with one side collapsed into a single point. Therefore, to draw a pyramid, is to draw a cube and then replace one side for its midpoint. Again and again, the concept of dividing rectangles comes into play.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPyramids.png\" \/><\/p>\r\n\r\n<p>Of course, pyramids don&rsquo;t necessarily have to have equally large sides. You can pick any point on a side and use it as the pyramid&rsquo;s sharp point, but there&rsquo;s no quick way to determine what point to use in a certain perspective. This one&rsquo;s up to your intuition, I think<\/p>\r\n\r\n<h2>Pyramid Contour Lines<\/h2>\r\n\r\n<p>A pyramid&rsquo;s contour lines are rather simple. If we regard the bottom of the pyramid, which is a rectangle, as the <em>base<\/em>, the contour lines are straight lines parallel to the base lines.<\/p>\r\n\r\n<p><img src=\"media\/DrawingContouredPyramids.png\" \/><\/p>\r\n\r\n<h2>Cones<\/h2>\r\n\r\n<p>A cone is a cylinder, but with one of the circular sides collapsed into a single point. Just as with the pyramid, drawing a cone means drawing a cylinder and then replacing one side by a single point.<\/p>\r\n\r\n<p><img src=\"media\/DrawingCones.png\" \/><\/p>\r\n\r\n<h2>Cones Contour Lines<\/h2>\r\n\r\n<p>If we, again, regard the bottom of the cone as the <em>base<\/em>, the contour lines are ellipses parallel to the base. Make sure to slightly change the degree with every new ellipse<\/p>\r\n\r\n<p><img src=\"media\/DrawingContouredCones.png\" \/><\/p>\r\n\r\n<h2>Where do I find Pyramids and Cones?<\/h2>\r\n\r\n<p>Pyramids are often found next to cubes, as the nice pointy top makes things look finished and polished. For example, most houses have pyramid-like roofs.<\/p>\r\n\r\n<p>Cones are often found next to cylinders, for the same reason. For example, a cylindrical building (such as a tower) will have a cone as a roof.<\/p>\r\n\r\n<p>But more often than not, these shapes are found in the tiny details. You&rsquo;ll rarely find objects that are largely pyramids or cones, but you&rsquo;ll often find that the smaller shapes in a drawing are best approximated with these basic shapes.<\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>Because pyramids and cones can be directly created out of cubes and cylinders, I don&rsquo;t really have any new fundamental exercises to give you. Just try to transform a basic shape into a pyramid or cone once in a while when you do the other exercises.<\/p>\r\n\r\n<h3>Drawing Cities<\/h3>\r\n\r\n<p>Obviously, drawing a city scene is a fun way to practice cubes + pyramids and cylinders + cones. It doesn&rsquo;t have to be pretty, creative or detailed &ndash; just try to get lots of different buildings on the paper with proper perspective.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPyramidsConesCityExercise.png\" \/><\/p>\r\n","slur":"drawing-pyramids-cones","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"0?A Pyramid?A cube with one side collapsed into a single point@\r\n0?A Cone?A cylinder with one side collapsed into a single point@\r\n0?Base?The side opposite to the pointy end, used for establishing the contour lines\r\n"},
{"id":"344","title":"[Drawing] Intersections & Organic Forms","post":"<p>Before we go into the last phase of the drawing process &ndash; which is enrichment and detailing &ndash; I want to talk about how to actually use these basic shapes to get the pretty pictures you want. The shapes themselves are quite static and not usually how they are seen in the real world. Instead, every object is a combination of the basic shapes, with most of them modified or distorted. To understand how multiple basic shapes can be combined or transformed, it&rsquo;s important to practice with <em>intersections<\/em>.<\/p> \r\n\r\n<p>Simply put, we&rsquo;re going to examine what happens when we add or subtract basic shapes from each other. By doing so, we learn three things: how to draw basic shapes, how to understand their form in three dimensional space, and how to modify them to get what we want.<\/p>\r\n\r\n<p>To start off, draw a cube. Now, draw a sphere through it. These two basic shapes are now intersecting, each hiding a part of the other at several points. This means that we can draw lines that show when the cube turns into the sphere, and vice versa. This sounds hard, and it kind of is, but if you use contour lines and try to imagine these shapes you drew as if they actually had depth, you should be able to find out how the intersection flows.<\/p>\r\n\r\n<p><img src=\"media\/DrawingIntersectionsAdding.png\" \/><\/p>\r\n\r\n<p>Now that we know how the two shapes interact, we can subtract one from the other. We could cut a spherical hole in the cube, or take a part in the form of a cube out of the sphere. Because we know the construction of these basic shapes so well, it has suddenly become much easier to create complex forms, simply by subtracting basic shapes from each other.<\/p>\r\n\r\n<p><img src=\"media\/DrawingIntersectionsSubtracting.png\" \/><\/p>\r\n\r\n<p>This might still sound vague or complicated to you, and I&rsquo;m afraid there&rsquo;s no way around it. You&rsquo;ll need to practice your intersections as often as you can, in order to understand how to get 3D objects on a 2D paper. But hey, once you get the hang of it, the possibilities are endless! All I can do now is give you some examples of intersections. Also, don&rsquo;t forget to try intersections with more than two shapes, if you feel confident.<\/p>\r\n\r\n<p><img src=\"media\/DrawingIntersectionsExamples.png\" \/><\/p>\r\n\r\n<h2>Holes<\/h2>\r\n\r\n<p>A very simplified version of those subtractions, is punching holes in an object. If you want, you can try practicing these first. All you do is draw the shape of the hole (circle, square, triangle, whatever) in perspective on the object&rsquo;s surface. Then, you draw the same shape a bit into the object, as if you were actually drilling a hole. Remove the lines you shouldn&rsquo;t be able to see, and you got yourself a hole!<\/p>\r\n\r\n<p><img src=\"media\/DrawingIntersectionsHoles.png\" \/><\/p>\r\n\r\n<h2>Organic Forms<\/h2>\r\n\r\n<p>Besides static or rigid shapes, there are also forms that are fluid and flexible. A building will not bend when the wind blows against it, but a tree will. A ring won&rsquo;t change shape when you drop it, but a rubber band will. These organic forms are beautiful when executed the right way, but they&rsquo;re also the hardest to draw.<\/p>\r\n\r\n<p>I think the best way to get a sense of how these forms interact with the world around it, is by identifying the <em>forces<\/em> that act upon it. The most obvious one is of course gravity, but things such as wind or someone pushing against the object are also common. Identify the direction of the force, and the places where it hits the object, to know what parts you should move and in what way.<\/p>\r\n\r\n<p><img src=\"media\/DrawingOrganicForms.png\" \/><\/p>\r\n\r\n<p>Throughout this course I&rsquo;ve already used ellipses here and there to give something a solid and organic form, and you can see in the picture that it&rsquo;s a wise thing to do for anything organic. Ellipses give an object depth and thickness, but also show that the object is round and curved.<\/p>\r\n\r\n<p>Again, learn this skill all comes down to practice and observing the world around you. I think the simplest exercise is to draw random &ldquo;blobby shapes&rdquo; and dropping them on top of each other. This forces them to interact with each other in all sorts of ways. Keep in mind that the forms should retain their thickness, even when they are stretched and distorted a lot.<\/p>\r\n\r\n<p><img src=\"media\/DrawingOrganicBlobsExercise.png\" \/><\/p>\r\n","slur":"drawing-intersections-organic-forms","cat":"Design","subcat":"Drawing","video":"","diff":"5","quiz":"2?Add or subtract basic shapes from each other?Intersection lines@\r\n2?Construct organic forms?Ellipses functioning as contour lines@\r\n2?Figure out how an organic form will flow?Determining the forces that act upon it@\r\n2?Draw holes within objects?Drawing the shape of the gap a bit towards the inside of the object, and erasing the overlapping parts"},
{"id":"345","title":"[Drawing] Detailing & Enrichment","post":"<p>Congratulations on making it this far! Up until now you&rsquo;ve learned to draw smooth lines and curves, and how to turn them into shapes that resemble three-dimensional objects. When you&rsquo;re done with that, your drawing will still look unrealistic and probably a bit boring as well. Therefore, the last phase of any drawing should be used (in general) for the following three things:<\/p> \r\n\r\n<ul>\r\n\t<li>Perfecting every line and curve. Even the slightest of alterations can have a big impact, so go over everything once again and check if all lines are how you want them to be.<\/li>\r\n\t<li>Getting the overall perspective and proportions right. Not only every individual object must be good, the relationships between them also need to look realistic.<\/li>\r\n\t<li>Filling in the shapes. You can fill every shape with a single uniform colour, but using texture and shading on top of that often really makes a drawing stand out.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingDetailingEnrichment.png\" \/><\/p>\r\n\r\n<p>Next chapters will discuss all these topics. They are a bit longer and more theoretical than usual, but that&rsquo;s only because these are such big topics. I&rsquo;ve narrowed them down quite a bit, but I really want you to understand <em>why<\/em> something is a certain way, and not just <em>how<\/em> you draw something in specific cases.<\/p>\r\n\r\n<p>After that, the course will wrap up with some tips about imagination, creativity and the right mind-set for the drawing process. The conclusion will remind you of what you learned, and provide ideas and other courses to further improve your graphical skills!<\/p>\r\n","slur":"drawing-detailing-enrichment","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":""},
{"id":"346","title":"[Drawing] Proportions","post":"<p>Proportions determine a large part of your drawing, but are often what is wrong in beginner&rsquo;s drawings. For example, people see a human body and then try to draw it on paper, but the arms and legs are way too long or short. Or people forget that objects further away look much smaller. An eye trained to see proportions helps a great deal, but most of the time the solution is actually just (loosely) <em>measuring<\/em> things.<\/p> \r\n\r\n<p>Note that the tips and tricks laid out here are mostly useful when you&rsquo;re drawing from real life or something you can actually see. If you&rsquo;re drawing from imagination, however, I encourage you to use reference photographs, and apply these methods to those.<\/p>\r\n\r\n<h2>The Basic Unit<\/h2>\r\n\r\n<p>When measuring, we want to prevent ourselves from thinking in words like centimetres or inches. We want to use the visual side of our brain, instead of the logical side. Instead, we want to determine proportions <em>in relation to each other<\/em>. The first line we draw has to be an educated guess, but from that moment on we can bring every part of the drawing in relation to this first line. We like to call this the <strong>basic unit<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsBasicUnit.png\" \/><\/p>\r\n\r\n<p>To apply the method, find a medium-sized, prominent line within your drawing. Draw this line on the paper at (approximately) the right position, and at a size you choose yourself. Do keep in mind, however, that you don&rsquo;t pick a size too large or small &ndash; otherwise the rest of the drawing won&rsquo;t fit. From now on, this line is your basic unit, and you can use it as a reference for everything else that you draw.<\/p>\r\n\r\n<p>To do so, you need to know how often your basic unit fits into what you want to draw <em>in the real world<\/em> (not in your drawing). This ratio between the size of two lines in the real world is what we call a proportion, and it should stay the same in your drawing. If your basic unit is half the length of another line in the real world, it should be half the length of that other line in your drawing.<\/p>\r\n\r\n<h2>Pencil Measuring<\/h2>\r\n\r\n<p>To measure something in terms of the basic unit, we apply a method called <strong>pencil measuring<\/strong>. Pick up your pencil, and hold it in the direction of the line you want to draw. Stretch your arm and lock your elbow, and hold the pencil in front of you at eye level. Now you should be able to line up the pencil with what you want to draw, by placing the pencil point over the start of the line you want to draw. Then, use your thumb to mark the end of this line on the pencil, and there you have your measurement!<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsPencilMeasuring.png\" \/><\/p>\r\n\r\n<p>If you don&rsquo;t want to re-measure your basic unit over and over, it&rsquo;s wise to draw a line on some other piece of sketching paper that marks the length of the basic unit. That way it&rsquo;s easy to see the proportion of a new line; simply compare the measurement you marked on the pencil with the line on the sketching paper. Ultimately, the result of this process should be something like &lsquo;this line is two and a half times as long as my basic unit&rsquo;.<\/p>\r\n\r\n<h2>The Midpoint Method<\/h2>\r\n\r\n<p>Questions may arise now, such as:<\/p>\r\n\r\n<ul>\r\n\t<li><em>How do I choose a suitable placement and scale for my basic unit?<\/em><\/li>\r\n\t<li><em>How do I measure the right angles for my lines?<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Well, there&rsquo;s a solution for that: the<strong> midpoint method<\/strong>!<\/p>\r\n\r\n<p>Before you start a drawing, actually get yourself a ruler and measure the paper you&rsquo;re going to work on. Draw a horizontal line and vertical line through the centre. We&rsquo;ll call these your axes, as the horizontal line is like an x-axis, and the vertical line like an y-axis. (Now get rid of the ruler.)<\/p>\r\n\r\n<p>The point where these lines intersect, is the midpoint, and it&rsquo;s often not where you expect it. Objects in perspective often mess with our sense of balance, and place the midpoint somewhere else in our minds. If you have a dot on paper that clearly states the midpoint, you can use that as a good reference for where you should place objects in the centre of your view. Additionally, it&rsquo;s wise to choose a basic unit very close to it.<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsMidpointMethod.png\" \/><\/p>\r\n\r\n<p>The other advantage, is that you now have two axes with right (90 degree) angles. When you want to find the angle of a line, simply estimate it against the axis that&rsquo;s closest to it. Again, it helps to keep the pencil in front of your eyes (horizontally or vertically, whatever fits best) to clearly see the angle in relation to your main axes.<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsMeasuringAngles.png\" \/><\/p>\r\n\r\n<h2>Measuring Methods<\/h2>\r\n\r\n<p>Knowing these methods will solve most of your problems. To finish things, I&rsquo;ll give some last guidelines.<\/p>\r\n\r\n<h3>Foreshorten<\/h3>\r\n\r\n<p>The more you see the end view of something, the less you see of its sides. If you view a cube from perfect front view, you only see one face and no other sides at all. But if you view a cube at a slight angle, you&rsquo;ll see parts of lots of sides. Most objects are viewed in such foreshortened ways, which influence the proportions. The important thing is that you draw what you see, instead of what you think should be true. Measure the length of the cube&rsquo;s lines when in doubt, instead of thinking &lsquo;well it&rsquo;s a cube, so all sides should be the same length&rsquo;.<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsForeshortening.png\" \/><\/p>\r\n\r\n<h3>Measure Critically<\/h3>\r\n\r\n<p>Most of the methods I described are not really precise &ndash; they are estimations and guesses, but come close enough to be just right for your drawing. If, however, accuracy is essential, you should take more time to do multiple and more precise measurements.<\/p>\r\n\r\n<h3>Intensify<\/h3>\r\n\r\n<p>By actively drawing the objects in the wrong proportion, you can show your feelings towards that certain object, or change how much attention it gets. A visibly enlarged object seems to be more important, while a shrunk object seems shy and unimportant.<\/p>\r\n\r\n<h3>Plumb &amp; Level<\/h3>\r\n\r\n<p>A more general way to achieve the right proportions, is the <strong>Plumb and Level<\/strong> method. By holding your pencil either vertically or horizontally, you can find lines that align with other lines. Put another way, you can find pieces of your drawing that should end up sitting on the same imaginary line as another piece, making it easier to get your proportions right. For example, a man&rsquo;s thumb and big toe might line up (vertically), or both of his shoulders line up (horizontally).<\/p>\r\n\r\n<p>Not only does it help with placement and sizing of seemingly unrelated objects all over the drawing, but it also provides clues to the action of the pose. If, instead, a man&rsquo;s thumb and knee cap line up horizontally, you know he&rsquo;s not standing up straight.<\/p>\r\n\r\n<p><img src=\"media\/DrawingProportionsPlumbLevel.png\" \/><\/p>\r\n","slur":"drawing-proportions","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"1?Find your basic unit?Look for a medium-sized, easy to draw line@\r\n1?Measure a line's length?Use the pencil measuring method@\r\n1?Find your paper's midpoint?Use subdivision@\r\n1?Accurately estimate angles?Draw the main axes and compare to that@\r\n1?Perform Plumb & Level?Look for curves that align horizontally or vertically@\r\n1?Create the illusion of depth?Foreshorten to change your proportions"},
{"id":"347","title":"[Drawing] Light","post":"<p>Without light we&rsquo;d see, well, nothing. We wouldn&rsquo;t be able to distinguish between objects, or even get a general sense of our surroundings. The reason for this, is that light creates shadows, and shadows help us define the world around is. Therefore, to give your drawing more depth and realism, it&rsquo;s necessary to know where light is coming from and how it interacts with your objects. As we already saw with spheres at the beginning, shadows or highlights can show the curviness of an object without drawing the lines, but they can also be used to separate one object (or part of an object) from the other.<\/p> \r\n\r\n<p>When you look at a photograph of a single object, it&rsquo;s not hard to see where the shadows are. But, when things get more complicated, and you have to find the shadows yourself, it might be hard to draw everything correctly. To solve this problem, we need to understand (parts of) the theory behind lights and shadows. Do note though that it&rsquo;s actually very intuitive, and you shouldn&rsquo;t be thinking about it or &lsquo;calculating&rsquo; that much when working with shadows &ndash; with time, it comes quickly and naturally.<\/p>\r\n\r\n<h2>Light Sources<\/h2>\r\n\r\n<p>The first thing to do when starting with shading, is to establish your <strong>light source<\/strong>; the main light that illuminates your scene. Of course, there&rsquo;s often more than a single light, which means the process I&rsquo;m about to explain needs to be repeated for every source. What&rsquo;s important to remember, is that lights can only make things <em>lighter<\/em>. When the first light casts a certain shadow on the ground, the second light will never make that shadow darker. Instead, if the light is able to reach that spot, it will make the shadow lighter and\/or the shadow area smaller. This property of light makes it easy to combine multiple sources; all you need to do for every light is find which shadows should be made lighter or disappear entirely.<\/p>\r\n\r\n<p>Every light source has four properties that are of interest to us:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Position<\/strong>: The placement of the light in the 3D world.<\/li>\r\n\t<li><strong>Colour<\/strong>: The colour of the light. Sunlight, for example, is actually near white, while old light bulbs are more yellowy.<\/li>\r\n\t<li><strong>Strength<\/strong>: How strong the light is. Sunlight is very strong, while a dimmed light (obviously) isn&rsquo;t.<\/li>\r\n\t<li><strong>Type<\/strong>: The type of light. The most common type is a <em>round light <\/em>or <em>point light<\/em>, which means light is emitted in all directions. But, for example, a <em>spot light<\/em> has a certain direction and shape in which it emits light.<\/li>\r\n<\/ul>\r\n\r\n<p>It helps to mark the position of each light source on your paper with a large dot. Additionally, write down the properties of each light on a separate piece of paper, in case you forget.<\/p>\r\n\r\n<p><img src=\"media\/DrawingLightSources.png\" \/><\/p>\r\n\r\n<h2>The Four Types of Shading<\/h2>\r\n\r\n<p>Shadows are a direct consequence of light; where there&rsquo;s light, there&rsquo;s shadows. On the other hand, these shadows inherently reveal spots where light does hit the object and illuminates it. I will group both shadows and lights under the term <strong>shading<\/strong>. Shadows and highlights, however, can take on different shapes, position and colour. To know what to do, a distinction is made between four shading types:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Highlights<\/strong>: The place where a light hits an object directly has no shadow at all. This means that, compared with the rest of the drawing, it&rsquo;s a bright highlight. You can see that shadows aren&rsquo;t only dark and moody &ndash; they allow us to see the highlights as well.<\/li>\r\n\t<li><strong>Reflected Light<\/strong>: When light hits an object, it&rsquo;s reflected. Usually, this means that a small and soft highlight appears on nearby objects, but very reflective materials of course produce much brighter reflected lights. They are often forgotten, but are actually very important in establishing the relationships between different objects in space.<\/li>\r\n\t<li><strong>Crest Shadow <\/strong>(or <em>form shadow<\/em>): Shadow on an object itself that marks its shape(s) or form. These are gradual, such as the shadow on the sphere that marks its roundness.<\/li>\r\n\t<li><strong>Cast Shadow<\/strong>: Shadow cast by an object on other objects. When you place something between an object and the light source, that something blocks the light and therefore casts a shadow on the object. The most obvious example is the shadow people leave on the ground on a sunny day. But, these can also be smaller, such as when used to make strands of hair stand out in a ball of fur.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingFourShadingTypes.png\" \/><\/p>\r\n\r\n<p>The fact that light is reflected is actually the only reason we can see things. For instance, an orange absorbs all light waves, except for orange light waves &ndash; those are reflected towards your eyes. When shading your drawing, you&rsquo;ll probably have to deal with lots of reflected highlights, and keep in mind those have their own colour and strength too.<\/p>\r\n\r\n<p>Crest shadows are somewhat equivalent to soft edges. The soft edges I&rsquo;ve mentioned several times can only be seen because of the shadow they produce, and because they&rsquo;re soft, they produce smooth and gradual shadows.<\/p>\r\n\r\n<p>Cast shadows, on the other hand, can be either sharp or smooth. Why this is the case, and how to figure out placement and size of shadows, is discussed in next chapter.<\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>The only exercise I think is very important to do regularly, is shading the basic shapes. Draw any of the basic shapes (cube, sphere, cylinder, pyramid, cone), and go through all four shading types to add them. Just as basic shapes were the first step to creating complex forms, shading basic shapes is the first step to shading complex forms. You can start with rough shading, and later try adding colour or more subtlety\/complexity.<\/p>\r\n\r\n<p><img src=\"media\/DrawingLightShadingExercise.png\" \/><\/p>\r\n","slur":"drawing-light","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":"0?Highlights?The place where a light hits an object directly@\r\n0?Reflected Light?Soft highlights reflected off of surrounding objects@\r\n0?Crest Shadow?Shadow on an object itself that marks its form@\r\n0?Cast Shadow?Shadow cast by an object on other objects@\r\n0?Light Source?A point in space that emits light in a certain way@\r\n0?Light Type?How or in what shape a light source emits its light waves"},
{"id":"348","title":"[Drawing] Shading","post":"<p>Without further ado, let&rsquo;s get into the actual practice of shading your drawing! I will spend most time explaining methods to get precise shadows, but of course there&rsquo;s always the alternative to just estimate and go with your intuition. It&rsquo;s not necessary to formally establish the shadows for each and every object &ndash; for small objects it&rsquo;s fine to just go with the flow, and objects largely in the background or shadows of others also don&rsquo;t need much attention.<\/p> \r\n\r\n<h2>Shadow Lines<\/h2>\r\n\r\n<p>The easiest way to find out your shadows, is using <strong>shadow lines<\/strong>. They work like this:<\/p>\r\n\r\n<p>Starting from your light source, draw straight lines that barely touch the edges of the object. The area between these lines now represents the <em>cast shadow<\/em>, as those are the light waves obstructed by your object. Additionally, the points where these lines hit the edges mark the possible place of a <em>crest shadow<\/em>.<\/p>\r\n\r\n<p>Other crest shadows can&rsquo;t easily be found, as you&rsquo;ll need to know the 3D shape and texture of the object well. If you&rsquo;ve figured out the places of soft edges, all you need to do is shade the side opposite to the light.<\/p>\r\n\r\n<p><img src=\"media\/DrawingShadowLines.png\" \/><\/p>\r\n\r\n<p>It&rsquo;s important to remember that light waves will always move in a straight line forever, unless there&rsquo;s a good reason to change direction (such as reflection). Every type of light source can therefore be simulated using these straight lines. I think a good example of this is the fluorescent tube:<\/p>\r\n\r\n<p><img src=\"media\/DrawingShadowLinesTube.png\" \/><\/p>\r\n\r\n<p>NOTE: Instead of a rectangular tube, you could of course apply the same principle to a round light by drawing shadow lines from its sides. Shadow lines are everywhere!<\/p>\r\n\r\n<h2>Diffraction<\/h2>\r\n\r\n<p>One may now ask the question: <em>why are real-life cast shadows often soft and smooth?<\/em> And you&rsquo;d have a point, because our shadow lines clearly show that no light could reach the cast shadow part, which means it should be equally shaded. Well, it&rsquo;s because of another property of light, called <strong>diffraction<\/strong>.<\/p>\r\n\r\n<p>Diffraction is the ability of light waves to bend around obstacles or through openings. When an object is sufficiently smooth around the edges, its cast shadow will be smooth as well &ndash; a few light waves bend towards the cast shadow and make it soft.<\/p>\r\n\r\n<p><img src=\"media\/DrawingShadingDiffraction.png\" \/><\/p>\r\n\r\n<p>In drawing, you&rsquo;ll see that shadows often look most realistic when smooth. But, that also means it&rsquo;s not always the case! When light is strong and bright, cast shadows are hard and crisp. For example, if you draw a scene under moonlight the shadows will be smooth, but on a bright sunny day there will be much sharper shadows. I think the best way to learn to tell the difference is just by observing which is the case in your scene, every time you draw something.<\/p>\r\n\r\n<h2>Actual Shading Methods<\/h2>\r\n\r\n<p>Knowing all this, you might start to wonder: <em>what do I do once I know my shadows? Just fill them with solid black or grey?<\/em> Well, you could, but it&rsquo;s not always the solution.<\/p>\r\n\r\n<p>There are three main methods for adding shading,<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Crosshatching<\/strong>: Often used for light or uneven shadows. By continually crossing sets of 5-10 parallel lines over each other, you acquire darker and darker tones. Make sure to follow the contour lines of the object, otherwise it looks weird.<\/li>\r\n\t<li><strong>Continuous<\/strong>: Using circular motions, go over the whole area until all of it&rsquo;s filled with the same tone. Often used to acquire full shadows in big areas, but by staying at a certain spot longer, you can add a slight texture or smoothness in your shadows.<\/li>\r\n\t<li><strong>Flat<\/strong>: In flat shading, all shadow areas have hard edges, and are filled with the same (often relatively light) shadow tone. This type of shading is unrealistic, but looks nice, and is very popular in cartoon and other simple imagery.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingShadingMethods.png\" \/><\/p>\r\n\r\n<p>As you can see, creating gradual shadows is done by simply going over darker areas with your pencil more often. <em>But what about when my drawing&rsquo;s in colour?<\/em> Don&rsquo;t fret, next chapter will be all about drawings and paintings in colour!<\/p>\r\n\r\n<h2>Tips &amp; Tricks<\/h2>\r\n\r\n<p>And last but not least, I&rsquo;ll share some tricks to use on your shading to enrich your drawing.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Map Areas of Light &amp; Dark<\/strong>. On your first shading pass, map every shaded or highlighted area as if they were territories on a map. Initially assign definite borders to your shadows, and later soften and modify some of these borders.<\/li>\r\n\t<li><strong>Merge Shadow Shapes. <\/strong>If multiple shadow shapes with only slightly different brightness overlap, it&rsquo;s best to merge them together into one shadow shape. This way you make the drawing less complicated, while keeping a good structure. If necessary, viewers will fill in the tiny details themselves automatically.<\/li>\r\n\t<li><strong>Contrast and Compare Tones. <\/strong>Tones appear light or dark in relation to each other. In a drawing with only dark blue colours, one orange line will seem very bright. In a drawing with yellow lines everywhere, the orange line will seem to be darker. Always establish a colour palette, otherwise you&rsquo;ll run into unexpected very dark or very bright areas.<\/li>\r\n\t<li><strong>Design with Light.<\/strong> As stated earlier, shadows and highlights can be used to create patterns or textures in otherwise flat objects. It&rsquo;s impossible to draw every single strand of hair on someone&rsquo;s head, but you can add the most apparent shadows and highlights to show the texture of the hair.<\/li>\r\n\t<li><strong>Intensify mood.<\/strong> You can add a deeper and more emotional quality to your drawings by use of striking lighting or unusual cast shadows. Don&rsquo;t overdo it though &ndash; otherwise your drawing will be unrecognizable.<\/li>\r\n<\/ul>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>Continuing on the previous exercise, we&rsquo;re going to step up our game a little. Instead of drawing and shading a single object, draw lots of basic shapes overlapping. This way lots of extra shadows and reflected lights come into play, and you&rsquo;ll really have to practice with your shading. Use only one light source the first few tries, to keep things simple for yourself.<\/p>\r\n\r\n<p><img src=\"media\/DrawingShadedBasicShapesExercise.png\" \/><\/p>\r\n","slur":"drawing-shading","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":"0?Diffraction?The ability of light waves to curve around objects, softening the cast shadows@\r\n0?Crosshatching?Overlaying multiple sets of parallel lines to create shadows@\r\n0?Continuous Shading?Using elliptical strokes to create interesting shadow textures@\r\n0?Flat Shading?Using one solid colour to fill shadow areas@\r\n0?Shadow Lines?Lines marking the areas light is or isn't able to reach@\r\n0?Terminator?The halfway line of spherical objects that marks the transition to the shaded area@\r\n0?Half Shadow?Areas reached only partially or by weakened light waves "},
{"id":"349","title":"[Drawing] Colouring","post":"<p>Most drawings these days are in colour. This doesn&rsquo;t really change much of your workflow or the principles behind the drawing, but it does require learning some colour theory, and how it interacts with shading your drawing.<\/p> \r\n\r\n<p>I strongly suggest reading the <strong><em>Colour Theory<\/em><\/strong> course. If you already have lots of knowledge about colours, read on! I won&rsquo;t use a lot of that colour theory here, but I do use basic concepts you need to be familiar with.<\/p>\r\n\r\n<h2>Colour Shading<\/h2>\r\n\r\n<p>To shade using colours, a colour palette of 5 colours is usually established.&nbsp; In the centre of the palette, there&rsquo;s the <strong>base colour<\/strong>, which is the average or expected colour of the object. For example, an orange has base colour orange, while an apple (most of the time) has base colour red.<\/p>\r\n\r\n<p><img src=\"media\/DrawingShadingColourPalette.png\" \/><\/p>\r\n\r\n<p>To the left of this base colour, we use two shading tones. The lighter one is for soft edges or reflected shadows, while the darkest colour is used for the darkest parts. Shading tones are acquired by lowering the <em>brightness<\/em> and <em>saturation<\/em> of the base colour.<\/p>\r\n\r\n<p>To the right of this base colour, we use two highlighting tones. The lightest should be reserved for the actual spot where light hits an object, while the other should be used around it to make the transition to base colour smooth. Highlighting tones are acquired by raising the <em>brightness<\/em> and lowering the <em>saturation<\/em>.<\/p>\r\n\r\n<p>Additionally, sometimes the hue of shadow tones is shifted to cooler colours (such as blue or purple), and the hue of highlighting tones to warmer colours (such as red or orange).<\/p>\r\n\r\n<p>The big takeaway from this is that shadows are actually rarely solid black or grey, but also that the colour of the shadow on an object depends on its base colour. For example, a cast shadow from a green object onto a brown floor, is a dark brown colour. The shadow is a result of light not reaching some spots of the floor, not the object&rsquo;s colour somehow interacting with it.<\/p>\r\n\r\n<p>On the other hand, highlights <em>are<\/em> a result of light, which means that if you place a green and blue object next to each other, they will have spots of reflected light on them, coloured as a mixture of green and blue.<\/p>\r\n\r\n<h2>Overall Use of Colour<\/h2>\r\n\r\n<p>Essentially, everything needs to be shaded, which means establishing such a colour palette for each object would seem ideal. Most of the time, however, using lots of different colours turns your drawing into a mess, and isn&rsquo;t realistic at all.<\/p>\r\n\r\n<p>Instead, establish a 5-colour palette for your <em>entire drawing<\/em>. These can be completely unrelated colours, as long as they look good together. All the same, however, you&rsquo;ll need lighter and darker variations for lots of different objects, but the important thing is that we can now use those five colours we already have as a starting point.<\/p>\r\n\r\n<p>Even when on a computer, achieving good colours is still best done the old way: by mixing colours.<\/p>\r\n\r\n<p>If you want a darker version, add black to the colour. If you want a lighter version, add white to the colour. If multiple objects in your scene are interacting, mix their colours to get the right highlights and reflected lights.<\/p>\r\n\r\n<p><img src=\"media\/DrawingGeneralColourPalette.png\" \/><\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>Give yourself a start and end colour, and mix them to achieve a nice transition between them. Note that this can be done with any tools you like, such as colouring pencils, paint, or simulated using software on the computer.<\/p>\r\n\r\n<p><img src=\"media\/DrawingMixingPaint.gif\" \/><\/p>\r\n","slur":"drawing-colouring","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"1?Darken a colour?Add black to the colour@\r\n1?Lighten a colour?Add white to the colour@\r\n1?Mix colours?Draw both colours lightly on top of each other@\r\n1?Establish shadow and highlight colours?Reduce\/increase brightness, and reduce saturation"},
{"id":"350","title":"[Drawing] Perspective","post":"<p>So far you&rsquo;ve already drawn lots of things in perspective, and every time you drew a single object by using a set of vanishing points. If you want to draw more than one object, however, the perspective needs to be coherent. Two cubes right next to each other can&rsquo;t use completely different vanishing points, no matter the chosen perspective. Additionally, the vanishing points an object uses can&rsquo;t be too close to each other or at wrong angles, as this creates an unrealistic, distorted perspective.<\/p> \r\n\r\n<p>To make it easy to set up correct perspective for a complete drawing, a few rules have been invented.<\/p>\r\n\r\n<h2>Horizons<\/h2>\r\n\r\n<p>Let&rsquo;s say you&rsquo;re standing in the desert, with nothing but (flat) sand in front of you. How then, is it possible that you can&rsquo;t see the tree standing six kilometres in front of you? I mean, there&rsquo;s nothing standing in the way to block your sight, why do you only see sand?<\/p>\r\n\r\n<p>Well, that&rsquo;s because the earth isn&rsquo;t flat, but spherical. After about five kilometres, the surface of the earth has curved away and out of our sight. The place where this happens, is what we call the <strong>horizon<\/strong>; the line separating ground and sky. In most scenes though, there will be lots of objects standing in the way &ndash; such as trees, buildings or people &ndash; which make the horizon less clear. Nevertheless, it&rsquo;s still there, and it tells us something important about our view.<\/p>\r\n\r\n<p>NOTE: You <em>could<\/em> use a horizon that&rsquo;s not perfectly horizontal, but that&rsquo;s unnatural and often makes drawings unnecessarily complicated.<\/p>\r\n\r\n<p>The horizon is linked directly to the <strong>eye level<\/strong>. When you draw something, you&rsquo;re viewing the scene from a particular eye level, which simply means the place where your eyes are. A low eye level means you see things from below, while a high eye level means you watch things from above. To communicate the eye level used in your drawing, all you need is a well-placed horizon. Simply put, just remember this: a low eye level means a low horizon, and a high eye level means a high horizon.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPerspectiveHorizon.png\" \/><\/p>\r\n\r\n<h2>One, Two and Three Point Perspective<\/h2>\r\n\r\n<p>In theory, you could have as many vanishing points as you want, but one, two or three are usually the best way to go. All you need to do is set up your horizon and vanishing points before you start, and draw light &ldquo;guidelines&rdquo; from all of them to show yourself how lines should be angled.<\/p>\r\n\r\n<h3>One-Point Perspective<\/h3>\r\n\r\n<p>One vanishing point is used, which is placed somewhere on your horizon line. Useful for very open scenes, such as a railway or landscape. This determines what to do with angled lines, but what about perfectly horizontal and vertical lines? A new rule comes into play (which is also true for two-point perspective):<\/p>\r\n\r\n<p style=\"margin-left:18.0pt\"><em>Lines parallel or perpendicular to the horizon always stay the same<\/em><\/p>\r\n\r\n<p><img src=\"media\/DrawingPerspectiveOnePoint.png\" \/><\/p>\r\n\r\n<h3>Two-Point Perspective<\/h3>\r\n\r\n<p>Two vanishing points are used, both placed at a different point on the horizon line. Useful for when you look at the side or corner of an object.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPerspectiveTwoPoint.png\" \/><\/p>\r\n\r\n<h3>Three-Point Perspective<\/h3>\r\n\r\n<p>This is the same as two-point perspective, but with an extra vanishing point added somewhere above or below the horizon. Useful for when you view something from a very low or high eye level. The rule about vertical lines staying the same isn&rsquo;t applicable anymore; instead, they converge towards the third vanishing point.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPerspectiveThreePoint.png\" \/><\/p>\r\n\r\n<h2>An Important Note<\/h2>\r\n\r\n<p>You might have noticed that this way of creating perspective is ideal for cubes, as those have lots of parallel lines, but not really for any other shape. And you&rsquo;d be right. Some more advanced methods, such as four, five or six point perspective exist that turn your drawing into a sphere, but these still rely on the existence of parallel lines.<\/p>\r\n\r\n<p>Instead, I want you to remember that we put lots of basic shapes inside boxes to make it easier to draw them. If you can draw a cube in perspective, and you know how to use it as a guideline to draw anything else, you can draw anything in perspective!<\/p>\r\n\r\n<p>And last but not least: vanishing points can, and often will, be off-paper. In that case, simply draw arrows indicating the general placement of the vanishing point, and use those.<\/p>\r\n\r\n<h2>Exercises<\/h2>\r\n\r\n<p>The exercise is simple: draw something using one, two, or three-point perspective. Establish your horizon, establish your vanishing point(s), and draw random cubes that follow the guides you set out.<\/p>\r\n\r\n<p><img src=\"media\/DrawingPerspectiveExercise.png\" \/><\/p>\r\n","slur":"drawing-perspective","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":"0?Horizon?A straight line representing your eye level@\r\n0?Eye Level?The position and orientation through which you view the world in your drawing@\r\n0?One-Point Perspective?Perspective that uses a single vanishing point on the horizon@\r\n0?Two-Point Perspective?Perspective that uses two vanishing points on the horizon@\r\n0?Three-Point Perspective?Perspective that uses two vanishing points on the horizon, and one above or below@\r\n0?Converging Lines?Lines that are angled in such a way that they end in the same point"},
{"id":"351","title":"[Drawing] Texture","post":"<p>With all those perspective and shading skills under our belt, we can already make awesome drawings &ndash; but only of smooth solid objects! Nearly all things in the world have a visible texture, so what should we do with those?<\/p> \r\n\r\n<p>Well, just ignoring them would be the <em>last<\/em> thing to do. Instead, you need to find a way to simulate the textures, a way to create the visual illusion that the drawing has texture. I say visual illusion, because it&rsquo;s nearly impossible to perfectly copy a texture (and extremely time-consuming). What we need is to find certain types and patterns of strokes to simulate the texture we want.<\/p>\r\n\r\n<h2>Some Possible Methods<\/h2>\r\n\r\n<p>Unfortunately, there are no hard and fast rules for all textures; all I can do is give you general guidelines. Most of the time, using some reference material and performing a study on it allows you to get a feeling for how a certain texture should work out in a drawing &ndash; but more on that in later chapters.<\/p>\r\n\r\n<h3>Articulate &amp; Suggest<\/h3>\r\n\r\n<p>First, find out the general shapes of your texture. Try to get those on paper as perfectly as you can. Then, to fill in the rest of the texture, find a type of stroking that <em>suggests<\/em> the texture. It shouldn&rsquo;t be perfect, just enough to give the viewer the feeling that a certain texture is in place. By combining carefully drawn parts with loose parts, you can really give an object a sense of texture, without being too exact or sloppy.<\/p>\r\n\r\n<p><img src=\"media\/DrawingTextureSuggest.png\" \/><\/p>\r\n\r\n<p>This brings us to another point with textures, which is <strong>imperfection is key<\/strong>. In real-life, all objects have at least slightly different textures, and copying the exact same texture for all objects makes your drawing look very unnatural. Try to repeat the overall pattern of the texture, yet vary it (slightly) every time you do so.<\/p>\r\n\r\n<p>For lots of textures, the best way to suggest it is by drawing textured outlines instead of the regular, smooth line-work.<\/p>\r\n\r\n<h3>Sense the Stroke<\/h3>\r\n\r\n<p>If you have the object in front of you, or you have a very good imagination, it&rsquo;s of course always possible to just feel the texture of the object. Where does it have bumps? Where does it feel rough? At the end of this chapter I&rsquo;ll provide more concrete workflows for when you know what your texture is.<\/p>\r\n\r\n<h3>Contrast &amp; Unify<\/h3>\r\n\r\n<p>A texture is only as good as the ones around it. To make a texture stand out, contrast it with another one. For example, if everything in the drawing has furry textures it will probably look like a mess, but if you alternate between furry creatures and grassy landscape, the drawing will look really soft.<\/p>\r\n\r\n<p>Alternatively, to combine objects and strengthen relationships between them, use textural strokes going through both objects. Essentially, this applies the same texture to both objects as if it were one.<\/p>\r\n\r\n<h3>Texture in Perspective<\/h3>\r\n\r\n<p>One thing that people often forget with textures, is that they also change at different angles or distances. To make sure your textural strokes concur with the current perspective, it&rsquo;s a good idea to draw some perspective lines from your vanishing points through the texture, and align parts of the texture with them. If that&rsquo;s not really possible, or too calculated for you, simply try to get a feel for how your texture would wrap around the object, and how it would change if you view it from a distance.<\/p>\r\n\r\n<p><img src=\"media\/DrawingTexturePerspective.png\" \/><\/p>\r\n\r\n<h2>Texture Drawing in Practice<\/h2>\r\n\r\n<p>Here I&rsquo;d like to go over creating six very common types of textures. Not only can this help you directly (in case you needed this exact type of texture), but it also provides more insight into the world of texture drawing. I encourage you to practice drawing each of these textures at least once.<\/p>\r\n\r\n<p>(ONE GRAND IMAGE of all specific textures?)<\/p>\r\n\r\n<h3>Smooth<\/h3>\r\n\r\n<p>The main thing about smooth objects, is of course that the texture is smooth. This mostly means that texture is portrayed through shading, which should be gradual. Additionally, this means that it&rsquo;s impossible to have spots of sudden darkness or brightness &ndash; everything is smooth. In real life, such objects are scarce though.<\/p>\r\n\r\n<h3>Coarse<\/h3>\r\n\r\n<p>Coarse objects follow the same rules as smooth ones, but also have certain spots (&ldquo;dimples&rdquo;) of darkness\/brightness all over the texture, and perhaps random short lines here and there. Overall, coarse textures are darker, as less light is reflected toward your eyes.<\/p>\r\n\r\n<h3>Wood<\/h3>\r\n\r\n<p>With wood, we need to learn to make a distinction between <em>flat texture<\/em> and <em>spatial texture<\/em>. Flat texture is just lines that are on top of an object&rsquo;s surface. Spatial textures are actually small grooves and bumps that change the look and shading of the object. With wood, we have both!<\/p>\r\n\r\n<p>First draw some dark and light grain lines on your wood, and place random dots at different sizes over your texture. Make sure you don&rsquo;t overdo it, and don&rsquo;t place them too symmetrical. This is your flat texture<\/p>\r\n\r\n<p>Then, add shading to the largest grain lines; these lines have spatial texture, which means that they have small highlights at one side, and small shadows at the other.<\/p>\r\n\r\n<p>Then, last but not least, add shading <em>on top of the details<\/em> like you would with a smooth or coarse object (depending on your type of wood). On the computer, this can easily be done by putting it on a new layer and lowering the opacity. With your hand, you just need to add lighter and more careful shading in areas with details.<\/p>\r\n\r\n<h3>Fur<\/h3>\r\n\r\n<p>Fur is messy, and you should allow it to be that way. First give your object its base tone by crosshatching it entirely. Then, in darker areas, add shading by means of more and more crosshatching. In lighter areas, do the same but with a light colour. If you&rsquo;re not working on computer, you can add fur highlights by erasing random strokes of the texture.<\/p>\r\n\r\n<p>Fur is the only texture where shades and highlights almost always overlap; different hairs go in all directions, which means that different coloured strokes can all overlap. On top of that, the contour of the object is changed as well with this texture; instead of a straight contour line, draw random strokes over it sticking out at all places.<\/p>\r\n\r\n<h3>Stone<\/h3>\r\n\r\n<p>Stones are the same as a smooth\/coarse texture (again, depending on the type of stone), so start with a stony base colour and shade it as usual. Then, add <em>cracks<\/em> to the stone. These are quite thick, sharp and random lines (just as with the wood grain). But, even more so than with wood, these are spatial textures and need highlights and shadows to make them pop out. Additionally, you can add random dark and light dots to indicate even more bumpiness.<\/p>\r\n\r\n<h3>Reflective<\/h3>\r\n\r\n<p>Reflective shapes combine two textures; their own and the ones around them.<\/p>\r\n\r\n<p>First, draw what is being reflected on the object, using the same colours and shadows. Remember that reflective shapes don&rsquo;t magically add new shadows, they simply reflect back what they see. Also remember that there&rsquo;s a horizon out there that it should reflect, which means that a reflective shape never has parts that show nothing.<\/p>\r\n\r\n<p>Then, on top of that, shade the object as if it were smooth and add its own colour to the mix. Reflective coarse textures are also possible, but they heavily distort their reflections, which means you can go wild.<\/p>\r\n","slur":"drawing-texture","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":""},
{"id":"352","title":"[Drawing] Studies & References","post":"<p>I&rsquo;ve shown you how to construct anything out of basic shapes and forms. I&rsquo;ve shown you how to add realism and enrichment to your drawings. Nevertheless, I&rsquo;m guessing you still can&rsquo;t just draw something whenever you think of it. Somehow, imagining and picturing &lsquo;dragon&rsquo; in your head is different from actually getting it on the paper. Humans just can&rsquo;t memorize every single detail their eyes have ever seen, nor create an equally detailed and complex image from imagination.<\/p> \r\n\r\n<h2>Finding References<\/h2>\r\n\r\n<p>Some people think it&rsquo;s bad to use references and look at what other artists have done, but it&rsquo;s actually one of the first steps in any project. A big part of starting a drawing is, quite logically, finding your subject. You might see an interesting composition right as you look out of the window, but more often than not you&rsquo;ll need to gather some <em>references<\/em>. Those can be anything that helps or inspires you, such as photographs, other drawings, other objects, maybe even books or music.<\/p>\r\n\r\n<p>The most common practice, however, is drawing from photographs. Especially when working on the computer or drawing from imagination, I always start by looking for pictures that resemble what I want or that show certain parts that I&rsquo;m thinking of including. The obvious caveat here is that you&rsquo;re inclined to just trace the image, reducing your creativity and interpretation to a level near zero. While starting out as an artist, this can be a good way to get a feeling for the whole drawing process, but I strongly discourage this practice later on. Look at photographs for inspiration, to remind yourself what something looks like, or to solve some technical problems (with for example shading or perspective) &ndash; don&rsquo;t copy them directly.<\/p>\r\n\r\n<p><img src=\"media\/DrawingReferenceBoard.png\" \/><\/p>\r\n\r\n<h2>&ldquo;Steal like an Artist&rdquo;<\/h2>\r\n\r\n<p>An especially useful way to get your creative juices flowing, is to copy and emulate other artists, be it their general style or their actual drawings. There&rsquo;s a lot to learn from the &ldquo;masters&rdquo;, and it is far easier than having to come up with something all by yourself. Now, before you start with your &lsquo;but that is stealing!&rsquo; and &lsquo;where is the creativity in that?!&rsquo; &ndash; there&rsquo;s nothing wrong with this. Every thought that pops in your head has probably already been executed by somebody else, the idea is that you look at that and try to improve it and imbue it with your own style.<\/p>\r\n\r\n<h2>Performing Studies<\/h2>\r\n\r\n<p>To learn to look at references, and memorize what you learn, it&rsquo;s best to regularly perform something called a <em>study<\/em>. When you perform a study, you forget everything you (think you) know about something, and instead try to closely copy what you see. You try to see every line, curve, shape, or texture as it is with that particular object, and more importantly, you try to write down your findings, comments remarks.<\/p>\r\n\r\n<p>This way, you learn to <em>see<\/em> the world in a way that allows you to draw it, but you also have a way of storing and memorizing what you&rsquo;ve learned so far. Most objects have some general truths to them, whatever style they&rsquo;re drawn in, and it&rsquo;s good to build your knowledge on these matters. These can be simple yet extremely useful findings, such that hair always has pointy ends.<\/p>\r\n\r\n<p><img src=\"media\/DrawingReferenceStudy.png\" \/><\/p>\r\n\r\n<p>Another way of performing a study, is something called a <em>tiny study<\/em>. Look at a reference, and copy it but in a much smaller frame. This forces you to identify the main shapes, colours and composition in your reference.<\/p>\r\n\r\n<p><img src=\"media\/DrawingReferenceTinyStudy.png\" \/><\/p>\r\n\r\n<p>Whenever you don&rsquo;t know what to do anymore with your project, do a study or two. Next chapters will look at more ways to acquire the right mind-set that allows you to draw anything you think of, and don&rsquo;t get stuck in your project.<\/p>\r\n","slur":"drawing-studies-references","cat":"Design","subcat":"Drawing","video":"","diff":"3","quiz":""},
{"id":"353","title":"[Drawing] The Right Mind-set I","post":"<p>Many people think they can&rsquo;t draw. Or maybe they remember being awesome at drawing when they were young, but never draw anymore because they&rsquo;re afraid to disappoint themselves. But those people are wrong, and the biggest reason for this is the fact that people lose contact with their visual abilities as they grow older. In school, all focus is on learning languages and mathematics &ndash; not on designing or painting. In the business world, the biggest focus is on solving problems with numbers and writing articles or reports &ndash; not on the layout and visuals of, well, everything.<\/p> \r\n\r\n<p>The reason for this, is the domination of the logical side of our brain. (And, of course, partly to blame on the business culture, but nothing I can do about that.) People have a brain consisting of two halves, simply called the left side and the right side, which both perform different functions. The left side is about language, mathematics, constructing logical series of thoughts. The right side controls creativity, visuals, senses, imagination.<\/p>\r\n\r\n<p>You&rsquo;ll probably recognize the moment when you want to draw something, and hear some mind chatter saying &lsquo;No way you can draw this&rsquo;, or &lsquo;That eye looks ridiculous&rsquo;, or &lsquo;That body has all the wrong proportions. Just stop drawing already. Go calculate something, jeez.&rsquo; That annoying voice is the only thing standing in the way. The left side of the brain is the most used and exercised one, and therefore tries to control everything you do. When you want to express your artistic feelings, the left side comes around the corner to tell you it&rsquo;s a waste of time and there&rsquo;s only a slight chance of success.<\/p>\r\n\r\n<p>Of course, it&rsquo;s impossible to just shut down half of the brain, and equally impossible to mute it on command. Instead, what we&rsquo;ll try to do, is make it uninterested in judging the drawing, and that way allow your visual perception and mental imagery to do all the work. This way you&rsquo;ll learn to see things for what they really are: just a bunch of lines, curves, tones and shades that <em>magically<\/em> form a beautiful image once put together.<\/p>\r\n\r\n<h2>How do I know I&rsquo;m doing it right?<\/h2>\r\n\r\n<p>The shift from left brain mode to right brain mode happens unconsciously, but you can recognize you are (or have been) in visual mode by noticing one of the following things:<\/p>\r\n\r\n<ul>\r\n\t<li>You lost track of time. Without looking at the clock, you really can&rsquo;t make a good estimate of how long you&rsquo;ve been drawing.<\/li>\r\n\t<li>Your drawing feels like a puzzle. You want to draw the next line, the next shape, the next line, and so on until you have the whole picture transferred to the paper. You want to know what the end product will look like. As you&rsquo;re finishing, it feels like solving the most fun puzzle on earth.<\/li>\r\n\t<li>You&rsquo;re not being judgmental. You don&rsquo;t worry about wasting energy, or that a few lines might not be perfect, or that something might be out of proportion &ndash; you keep drawing until you find a way for everything to fit together nicely.<\/li>\r\n\t<li>You&rsquo;re thinking in comparisons. Instead of measuring things exactly, or assigning symbols to them, you compare every new thing with something you&rsquo;ve already drawn. You don&rsquo;t care what the real size of that door is, you only know how to draw the rest of the scene at a suitable scale.<\/li>\r\n\t<li>You see relationships you didn&rsquo;t see before. You see common shapes, common colours or shades, things that seem connected. This is what usually makes a drawing radically different from a photograph &ndash; the uniqueness of your perception translates to a creative and unique drawing.<\/li>\r\n<\/ul>\r\n","slur":"drawing-right-mindset-I","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":""},
{"id":"354","title":"[Drawing] The Right Mind-set II","post":"<p>To make matters clear, and those statements from last chapter more concrete, I&rsquo;ll provide you with a list of very useful guidelines.<\/p> \r\n\r\n<h2>Activating the Right Side<\/h2>\r\n\r\n<p>There are lots of small tips and tricks for engaging your visual senses, which are to be applied in no particular order or quantity.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Practical Dialogue. <\/strong>When you talk to yourself during drawing, don&rsquo;t name anything. Assigning names and identifying things is done by the left side of your brain, and you don&rsquo;t want that. Talk to yourself in the language of line and shape; <em>how long is this line compared to that one? How big is this ellipse compared to that curve? Is this shadow dark enough compared to my other shadows?<\/em> Don&rsquo;t ask yourself why things are the way they are, just draw them the way you see them.<\/li>\r\n\t<li><strong>Draw Blind. <\/strong>If you&rsquo;re drawing, and you find yourself unable to get a certain part on paper, draw blind for a small amount of time. This simply means that you keep your eyes on the <em>subject<\/em> while continuing to draw.<\/li>\r\n\t<li><strong>Don&rsquo;t Erase <\/strong>everything. No such thing as a perfect line exists. Once you start erasing things you&rsquo;re not satisfied with, you end up in a downward spiral that makes you doubt your whole drawing (skills). Sure, it often happens that you draw a line and think it looks too big or small or curvy compared to the rest, but instead of erasing it just redraw the correct line over it. In the end you can always decide to erase some blatant errors, but you can&rsquo;t bring back erased lines from the dead!<\/li>\r\n\t<li><strong>Choose Seeing over Knowing. <\/strong>Concentrate on your subject rather than on your drawing. As a child, most people memorize certain symbols for drawing certain things: a circle is an eye, a slightly curved line is a mouth, etcetera. Unless you were a child prodigy &ndash; in which case I don&rsquo;t understand why you&rsquo;re reading this &ndash; these symbols are what often make your drawings look childish. Draw exactly what you see, however unrealistic or improbable it may seem from your current angle or viewpoint.<\/li>\r\n\t<li><strong>Choose Seeing over Knowing (Again). <\/strong>Often times, what you see doesn&rsquo;t stroke with your knowledge about the object. Noticing this shuts down the visual senses and activates the logical one, making it nearly impossible for you to decide how to draw something. For example, we all know that the wall and ceiling of a house (generally) coincide with each other at a straight corner, but when you look at such a corner in your house and draw it, you&rsquo;ll notice that perspective radically changes this in the flat drawing. Go with what you see, not with what you think to be true.<\/li>\r\n\t<li><strong>Simplify Shapes. <\/strong>When in danger of being overwhelmed by the complex details of your subject, squinting your eyes will make them manageable. Also, closing one eye forces you to view the world without depth, making it easier to translate real-life objects to a 2D drawing on paper.<\/li>\r\n<\/ul>\r\n\r\n<p>You might be wondering now: <em>what&rsquo;s all this text about, if you&rsquo;re claiming I need to eliminate anything related to language?<\/em> Well, ironically, I found I couldn&rsquo;t really explain some of the concepts in the course by drawing a picture. By repeating these processes time and time again, they become habits, and you don&rsquo;t need to remind yourself to do them, eliminating the verbal aspect and leaving only the visual processes.<\/p>\r\n\r\n<p>One last (general) advice is to look at the world in as many new and different ways as possible. For example, to fire up your visual system you could look at subjects upside down, or place them in such strange light that you can&rsquo;t easily make out what is what. You can come up with all sorts of things to get your brain to look only at the shapes and contours, and the interplay between them, instead of trying to identify objects and patterns all the time.<\/p>\r\n","slur":"drawing-right-mindset-II","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":""},
{"id":"355","title":"[Drawing] Imagination & Creativity","post":"<p>Most of this course has been rules and guidelines which are generally best to follow, which means all your drawings might look quite alike. This chapter will try to help you add imaginative pieces to your drawing, and to be creative with your methods, shapes and compositions.<\/p> \r\n\r\n<p>Lots of people think &lsquo;nah, I&rsquo;m just not creative&rsquo; whenever they are presented with a task that requires even the slightest amount of creativity. While it is true that some people seem to have a knack for creativity and others don&rsquo;t, it&rsquo;s still the same process for every person and can be taught. The only difference between creative people and so-called non-creative people is that the first welcome and embrace their strange ideas, and are not afraid to &lsquo;waste time&rsquo; on experiments.<\/p>\r\n\r\n<p>To help you get a feeling for this, ask yourself the following questions before (or during) work on a drawing:<\/p>\r\n\r\n<ul>\r\n\t<li><em>Are there certain parts I find especially interesting?<\/em><\/li>\r\n\t<li><em>What is the overall mood I&rsquo;m trying to accomplish, and what style or arrangement helps with that?<\/em><\/li>\r\n\t<li><em>What are all the different ways I know to draw that object or texture?<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Usually, from this point you start searching your mind for old ideas you&rsquo;ve had once, and combining them with new ones. In this process thoughts will often pop into your head that require further investigation, and you should do so &ndash; doing a quick search on the internet or through your possessions usually reveals some kind of answer to the question, if you&rsquo;re open to it. Keep finding interesting and new things everywhere, until you have a clear picture of what and how you want your masterpiece to end up. Of course, you shouldn&rsquo;t make this decision fixed; as you draw, let other thoughts take over if you have a feeling they&rsquo;re better.<\/p>\r\n\r\n<p>To give an example, say I wanted to draw a warrior for my newest computer game. First question: <em>what is the style of the game\/warrior?<\/em> I decide on a realistic, yet simplified style. This means that I define a thick border around my warrior to make it easy to identify, yet draw every part to scale and add realistic shadows. Second question: <em>what parts should be included?<\/em> Well, in my mind a warrior is a tall handsome guy, who has a thick armour, a large shield and a glimmering sword. But that doesn&rsquo;t fit my comical style; instead, I decide on a small posture, a crooked sword, and messy hair sticking through the helmet everywhere. Third question: <em>what to do with the shield and other clothing?<\/em> I don&rsquo;t know, so I look up pictures of warriors and try to combine multiple elements to fit with my own drawing. If it still doesn&rsquo;t work, I just leave parts out or slightly change the shapes until it does feel right.<\/p>\r\n\r\n<p>This process goes on and on, and combines memories and feelings about objects with real-life references and maybe artwork other people have created. Imagination needs something to work with, but that something can be very small or strange, or maybe even completely unrelated.&nbsp;&nbsp;<\/p>\r\n\r\n<h2>Finding your Handwriting<\/h2>\r\n\r\n<p>Creativity and imagination comes from how you tackle certain parts of a drawing, which in turn depends on your own style. I&rsquo;ll call this your <strong>handwriting<\/strong> from now on. When you first start out, you probably don&rsquo;t know what you want or like to do, and that&rsquo;s natural: your style needs time to develop and grow. Over time, I promise, you&rsquo;ll start to find out what type of line you like in particular, what set of symbols look beautiful when arranged in a certain way, etcetera. The best way to do so, is by experimenting a lot.<\/p>\r\n\r\n<p>Nevertheless, two general types of handwriting must be developed and used by every draughtsman:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Free Handwriting: <\/strong>Loose, fast and intuitive. When you quickly want to sketch something, for example, you use this free handwriting. In a few swift strokes, try to capture the overall action of your subject rather than correct proportions or accurate details. Drawing freely often is a good way to get a large scene on paper very quickly, or to sketch the idea or feeling of what you want to achieve.<\/li>\r\n\t<li><strong>Control Handwriting: <\/strong>On the other end, there&rsquo;s very controlled drawing. Used when working on small areas, carefully and patiently refining the lines and rendering the tones of your subject. Controlled handwriting is evaluated and changed frequently, as to make sure every detail, proportion and shade is perfect.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DrawingDifferentHandwritings.png\" \/><\/p>\r\n\r\n<p>In general, any drawing is a combination of these two handwritings. Although they are both concerned with lines and shades in the same way, you&rsquo;ll find them to be very different as you apply them. You&rsquo;ll see that most drawings need some parts drawn freely (such as textures or gestures), and some parts drawn controlled, for the best effect. Controlled handwriting is similar for everyone, while free handwriting really showcases your personal style and taste.<\/p>\r\n\r\n<p>To help yourself to consciously make the difference, employ a different grip for each handwriting. For controlled handwriting, use the grip you&rsquo;re used to, with your fingers near the pencil point. For free handwriting, place your grip around halfway up the pencil, to keep it loose and swinging.<\/p>\r\n\r\n<h2>Experiment<\/h2>\r\n\r\n<p>Experimenting is one of the cornerstones of the drawing process. Whenever you&rsquo;re stuck, or just need a little extra something, the best idea is to just <em>experiment<\/em>. Try different tools, different paper, different grips, different symbols, different styles\/handwritings (for example, by copying the style of a painter you particularly like) &ndash; whatever you can think of.<\/p>\r\n\r\n<p>Think out of the box, and everything becomes an amazing tool. Your eraser can be used to create highlights on an object, or differently shaped lines. Your hand can be used to smudge\/wipe lines to achieve a gradual shading or texture effect. On the computer, lots of effects and layered blending can be applied. The possibilities are endless!<\/p>\r\n\r\n<p>Usually, trying something new will compose a new idea, shed new light on your subject, or accidentally create a new way of drawing you can use for your next project. If it doesn&rsquo;t, it&rsquo;s still not wasted time; you&rsquo;ve experimented, and now know what you don&rsquo;t like.<\/p>\r\n\r\n<h2>Tips &amp; Tricks<\/h2>\r\n\r\n<p>If this all seems vague to you, don&rsquo;t worry; I have included some methods you can (and probably should) use to let your imagination run wild.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Join Two Worlds.<\/strong> The creative process is the act of joining two unrelated worlds. In drawing, that means combining at least two different ideas, which may have only a remote connection to each other, on the same piece of paper.<\/li>\r\n\t<li><strong>Be Playful.<\/strong> Adopt a playful attitude towards your drawing and yourself; be loose, friendly and try to add a sense of humour. Don&rsquo;t worry about how your drawing will turn out, but get into the spirit of the moment. You don&rsquo;t have to know what the finished product should look like, or the exact process for getting there; just keep drawing every idea that pops into your head until at a certain point you look up and you feel satisfied. In other words: go with the flow.<\/li>\r\n\t<li><strong>Make the Familiar Strange.<\/strong> A good way to get into imaginative drawing, is making something familiar and commonplace feel strange or out of place. This could mean drawing something from an unusual or obscured view, combining unrelated elements, changing the relative sizes of the elements, distorting, rearranging, or symbolizing.<\/li>\r\n\t<li><strong>Draw in Sequence.<\/strong> Doing a series of drawings with small changes in between each one create a healthy environment for your imagination. Each drawing leads to further discoveries that can be applied to the next drawing, but you don&rsquo;t have to start from scratch every time.<\/li>\r\n\t<li><strong>Employ Diverse Sources.<\/strong> Visuals and non-visuals alike are rich sources of inspiration. Incorporate influences from art, photography, and television, as well as from poetry, literature, and music. Of course, don&rsquo;t copy work exactly or fill in every piece of the drawing with something already done by someone. If this seems difficult, try to incorporate the most powerful of sources: your own intimate and personal experiences.<\/li>\r\n\t<li><strong>Explore Themes.<\/strong> Over a (long) period of time, create drawings of similar settings, but with different style or theme. Paradoxically, when you narrow your focus this way, you widen the potential for discovery. You might find a style you really like or inspires you, or you might find a new combination of themes you haven&rsquo;t seen anywhere before.<\/li>\r\n<\/ul>\r\n","slur":"drawing-imagination-creativity","cat":"Design","subcat":"Drawing","video":"","diff":"2","quiz":""},
{"id":"356","title":"[Drawing] Conclusion: what now?","post":"<p>You&rsquo;ve learnt everything! Nah, I&rsquo;m just kidding. You&rsquo;ve learnt all the fundamentals of drawing, and probably a bit more than that, but I don&rsquo;t expect you to be a master painter now. As I said at the start, most of your drawing skills come from practice and actually trying to apply all these principles. Because this course is so general, however, I do encourage you to look into more specific styles or subjects now. If you want to draw cartoon strips, read a course wholly focused on cartoons. If you want to draw cats, read a course on that (or one on animals in general).<\/p> \r\n\r\n<p>Alternatively, if you just want to use your drawing skills as an aid in any visual design process, I encourage you to read the courses on <strong><em>design<\/em><\/strong>.<\/p>\r\n\r\n<p>Unfortunately, I haven&rsquo;t found the time to create such courses thus far. Remind me to update this chapter when I have done that.<\/p>\r\n\r\n<p>I wish you the best of luck for now, and practice, practice, practice! Your understanding of the world of drawing is superior to most of the people, but if you don&rsquo;t learn to apply this theory nobody will be impressed ;)<\/p>\r\n","slur":"drawing-conclusion","cat":"Design","subcat":"Drawing","video":"","diff":"4","quiz":""},
{"id":"357","title":"[Colour Theory] Usage within Design","post":"<p>This course has mentioned nearly everything that has to do with colour theory, but you might be left with the question: <em>what am I supposed to do with all this information?<\/em> Well, this chapter will talk about how to apply the principles in your next design project, and we will look at what functions colour can actually take on.<\/p>\r\n\r\n<h2>Colour Functionality<\/h2>\r\n\r\n<p>Colours can have <em>a lot<\/em> of functions. I must note, however, that colour shouldn&rsquo;t be your only way of creating graphical differentiation between elements to communicate meaning; a large part of the population has <em>colour-blindness<\/em>, and they would not be able to use your design if you relied solely on colour to establish your hierarchy.<\/p>\r\n\r\n<h3>Attracting Attention<\/h3>\r\n\r\n<p>First and foremost, colour can make design elements stand out or disappear. It can highlight elements, or intentionally hide them. We&rsquo;ve already seen how to do this; warm and saturated colours attract attention, while cool and muted palettes redirect attention elsewhere, but context and contrast plays an important role. Using colours with contrasting values tends to bring shapes into sharp focus, while combining colours that are close in value softens the distinction between elements.<\/p>\r\n\r\n<p>In other words, use warm colours for foreground elements, and cooler colours for background elements. Create contrast between them.<\/p>\r\n\r\n<p><img src=\"media\/ColourTheoryAttractAttention.png\" \/><\/p>\r\n\r\n<h3>Grouping<\/h3>\r\n\r\n<p>Secondly, colour groups elements. Elements with the same colour are perceived as related, while elements with drastically different colours are perceived as distinct. Light grey is always a safe colour to use for grouping elements without competing with other colours.<\/p>\r\n\r\n<p>One of the strongest methods of grouping is associating like shapes with like shapes; if a bunch of squares stands close to each other, we assume them to form a single group. Similarly, we immediately associate shapes by colour, but keep in mind this association is generally much <strong>stronger<\/strong>.<\/p>\r\n\r\n<img src=\"media\/ColourTheoryGrouping.png\" \/>\r\n\r\n<h3>Convey a Mood or Message<\/h3>\r\n\r\n<p>Thirdly, colour conveys a mood, attitude or message. It creates an emotional, psychological and even physical response to a lifeless design. It sets the mood and reinforces the message. For example, light colours produce happy and pleasant responses, whereas darker colours produce quieter effects. A natural colour palette conveys a message of being one with nature and caring for the environment, while a minimalistic grayscale palette conveys a message of simplicity and sleekness.<\/p>\r\n\r\n<h3>Describe Reality or other Information<\/h3>\r\n\r\n<p>Colour is also used to precisely mimic how something looks in the real world, or to codify artificial types of information. By assigning a colour to a category within a design, we can make the viewer associate that category with the colour, thus leading to coding specific information into a colour.<\/p>\r\n\r\n<h3>Enhance Aesthetics<\/h3>\r\n\r\n<p>And last but not least, colours can be used just because they are beautiful. They can create variety, give a feeling of depth, and just generally make a design more interesting and dynamic. It creates visual interest, even when the palette is subtle or even looks bad.<\/p>\r\n\r\n<h2>Backgrounds<\/h2>\r\n\r\n<p>This colour choice arguably has the most impact on your design, as it&rsquo;s the biggest element, yet it has to stay in the background and go by unnoticed.<\/p>\r\n\r\n<p>White is the dominant colour, especially for global or e-commerce websites, because people are used to reading from white pages. Slightly off-white or cream colours are also popular, and give a sense of nature or antiqueness.<\/p>\r\n\r\n<p>Dark backgrounds aren&rsquo;t popular, and mostly used for stylistic purposes or designs about things that take place in the night.<\/p>\r\n\r\n<p>Extremely bright backgrounds certainly make an impact, but more often than not a bad one. Therefore, reserve bright backgrounds to short parts, a magazine cover or a splash page.<\/p>\r\n","slur":"colour-theory-usage-application-design","cat":"Design","subcat":"Colour Theory","video":"","diff":"3","quiz":""},
{"id":"358","title":"Complete Typography Guide","post":"<p>Typography is perhaps the most important aspect of any design. Most information you&rsquo;re going to convey will be structured using our familiar alphabet, and most of a design&rsquo;s surface is going to be the body text. It&rsquo;s a sad fact, therefore, that it&rsquo;s often neglected. Lots of people pick their favourite parts of a design, and only decide on and implement the font(s) later on. Throughout this course, you will see that the font you choose has a huge impact on how you need to set the different parameters and elements within your design, and is something that can&rsquo;t be set easily or arbitrarily. This course will try to help you take your typography more seriously!<\/p>\r\n\r\n<p>There&rsquo;s a lot to discuss, so to keep things structured, I&rsquo;ll be moving from the smallest element towards the biggest. I will start at defining all sorts of things about individual <em>letters<\/em> (and some special characters), then move on to combining letters into <em>words<\/em>, then into <em>lines<\/em>, which create <em>text blocks<\/em>, and ultimately end up at how typography works combined with <em>other design elements<\/em>.<\/p>\r\n\r\n<p>Additionally, throughout the course there will be exercises or specific instructions to <em>not<\/em> make a certain mistake. I will simply announce these with the words <strong>type exercise<\/strong> and <strong>type error<\/strong>.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>What is Typography?<\/li>\r\n\t<li>Fundamental Terminology<\/li>\r\n\t<li>Typeface Classification<\/li>\r\n\t<li>Finding Fonts<\/li>\r\n\t<li>Matching Fonts<\/li>\r\n\t<li>Font Styles<\/li>\r\n\t<li>Special Characters I<\/li>\r\n\t<li>Special Characters II<\/li>\r\n\t<li>Kerning &amp; Tracking<\/li>\r\n\t<li>Leading &amp; Measure<\/li>\r\n\t<li>Alignment<\/li>\r\n\t<li>Paragraphs &amp; Pagination<\/li>\r\n\t<li>Hierarchy I<\/li>\r\n\t<li>Hierarchy II<\/li>\r\n\t<li>Grid<\/li>\r\n\t<li>Page<\/li>\r\n\t<li>Design Elements<\/li>\r\n\t<li>Editing &amp; Proofreading<\/li>\r\n\t<li>The Design Process<\/li>\r\n\t<li>Tips &amp; Tricks<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n","slur":"typography-complete-guide","cat":"Design","subcat":"Typography","video":"","diff":"1","quiz":""},
{"id":"359","title":"[Typography] What is Typography?","post":"<p>Broadly speaking, there are three important stages when working on your design&rsquo;s typography: <em>type matching<\/em>, <em>defining hierarchy<\/em>, and <em>refining<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyThreeStages.png\" \/><\/p>\r\n\r\n<p>In the first stage, you find typefaces that convey the message, mood and feeling you want. More importantly, you find multiple typefaces (or styles from the same family) that work well together in a design.<\/p>\r\n\r\n<p>In the second stage, you use the fonts you have to create, well, a hierarchy. You define which specific size, style, weight, placement, etcetera you will use for each level within the hierarchy. Maybe you use an extremely large, but light version of a font for headlines, and a regularly sized one for body text. And perhaps you decide to use blue italic text for comments, or red condensed text for emphasis.<\/p>\r\n\r\n<p>Then, in the third stage, you refine the parameters and properties of your typography (together with design elements around it) to make it fit within a specific design. This means slightly changing the amount of space, or size, or placement, or alignment of the text to make it fit perfectly &ndash; like a glove &ndash; within a certain part of the design.<\/p>\r\n\r\n<p>None of these stages is more important than the other. Even though refining may seem quick and easy to you, or matching typefaces may seem like a breeze, they should all be executed with the same amount of care and professionalism.<\/p>\r\n\r\n<p>To give a specific answer to this chapter&rsquo;s main question, <em>typography<\/em> is the act of using a set of symbols (our alphabet) to convey not only the information they describe, but also the mood and feeling of the content, to strengthen the relationships with other elements within the design, and to improve the aesthetics.<\/p>\r\n\r\n<p>Design, in general, should never rely on arbitrary or whimsical judgments. The words you choose to put in your design are equally important as <em>how<\/em> you put them into the design. Now, the rest of this course will teach you fundamental concepts and strategies to properly execute all these stages. At the end, when you&rsquo;ve become all excited about typography, I&rsquo;ll give some more tips and tricks and outline the whole design process. When it comes to the evolution and history of type, I won&rsquo;t discuss that; there&rsquo;s a gigantic amount of information regarding this topic, but it&rsquo;s not absolutely necessary to know.<\/p>\r\n","slur":"typography-what-is-it","cat":"Design","subcat":"Typography","video":"","diff":"1","quiz":""},
{"id":"360","title":"[Typography] Fundamental Terminology","post":"<p>A big part of learning how to work with, well, anything, is learning to name and describe all the different aspects. Once you know what something is called and what it looks like, you can find it everywhere and use it as part of your typesetting process. If you&rsquo;re going for a serious and formal look in a design, for example, you don&rsquo;t want to pick a typeface with typical characteristics representing playfulness informality. Or, if you&rsquo;re trying to match several fonts, you typically want to combine fonts with a nearly identical look for some of a letter&rsquo;s key aspects.<\/p>\r\n\r\n<h2>Fonts versus Typefaces<\/h2>\r\n\r\n<p>Although the terms are used interchangeably nowadays, and I often do so as well, I want to make the distinction here for clarity. A <em>typeface<\/em> (or sometimes <em>type family<\/em>) refers to a certain design, a certain style, a certain look. A <em>font<\/em> is one instance of such a typeface, a certain weight, size or variation on the overall theme of the typeface. A font is a single file on your computer, a typeface a large collection of font files within the same folder.<\/p>\r\n\r\n<p>In other words, a typeface is a family of similar fonts. Garamond, for example, is a typeface, while Garamond Bold, or Garamond Condensed, or ITC Garamond are fonts that belong to it. A font is a subset of characters of a typeface.<\/p>\r\n\r\n<p><img src=\"media\/TypographyTypefaceFont.png\" \/><\/p>\r\n\r\n<p>In general, multiple fonts from the same typeface go very well together, and it&rsquo;s encouraged to explore all the different font styles of the same typeface before reaching out and looking for another to add to your project. I hope I also made it clear that <em>type<\/em> and <em>typography<\/em> aren&rsquo;t the same; a typographer is a person who works with type to create a good design.<\/p>\r\n\r\n<h2>Uppercase, Lowercase &amp; Small Caps<\/h2>\r\n\r\n<p>Just to make sure, let&rsquo;s recap some basic terminology regarding type. <em>Lowercase<\/em> letters are the ones you encounter most often, and are what have created this sentence. <em>Uppercase<\/em> or <em>capital<\/em> letters are the ones you, for example, start your sentences with. They are bigger than lowercase, and usually have an altered form to make it look better and more distinct.<\/p>\r\n\r\n<p>Additionally, a compromise between the two exists, called <em>small caps<\/em>. They have the same form as capital letters, yet the same size as lowercase letters. This makes them ideal for fitting in between blocks of lowercase text.<\/p>\r\n\r\n<p><img src=\"media\/TypographyUpperLowercase.png\" \/><\/p>\r\n\r\n<p>Every font at least supports these three types of symbols. If small caps are not natively available, however, your computer will automatically simulate them by shrinking down uppercase letters. This rarely gives you the effect you want, so always opt for using fonts with specially designed small caps embedded within them.<\/p>\r\n\r\n<h2>Naming the Parts<\/h2>\r\n\r\n<p>I said I&rsquo;d start small, and what&rsquo;s smaller than the parts of a single letter? There are lots of common aspects to any letter, even when the style is radically different, and on top of that there are little characteristics that ornament and define a typeface.<\/p>\r\n\r\n<p>First, let&rsquo;s look at the size and placement of letters; how do designers make type look so clean and connected, instead of just a bunch of symbols? Well, there are a few important guidelines that most if not all letters adhere to.<\/p>\r\n\r\n<p><img src=\"media\/TypographyBasicTerminology.png\" \/><\/p>\r\n\r\n<p>The <strong>baseline<\/strong> is the line all letters &ldquo;sit on&rdquo;. There might be parts sticking out at the top and bottom, but you&rsquo;ll always be able to notice an overall baseline in a line of text.<\/p>\r\n\r\n<p>The <strong>x-height<\/strong> is simply the name for the height of the body of lowercase letters. It&rsquo;s named that way because it&rsquo;s equal to the height of a lowercase x. Most of the time, fonts strictly follow this x-height, but fonts with more ornamentation or large, sweeping curves often extend a slightly beyond it.<\/p>\r\n\r\n<p>The <strong>ascenders<\/strong> are the parts of some lowercase letters (such as &ldquo;b&rdquo; and &ldquo;d&rdquo;) that extend above the x-height. The <strong>descenders<\/strong> are the parts of some lowercase letters (such as &ldquo;p&rdquo; and &ldquo;q&rdquo;) that fall below the baseline. Most of the time, these also adhere to an <em>ascender line<\/em> and <em>descender line <\/em>evident across all letterforms within the typeface.<\/p>\r\n\r\n<p>The <strong>cap-height<\/strong> represents the height of an uppercase letter. It can be the same as the height of ascenders, but is often raised slightly higher. Capitals rarely have ascenders or varying heights, as it just looks messy.<\/p>\r\n\r\n<p>Additionally, we can look at specific parts of letters present in every typeface. These need no explanation; the following image will show what they look like.<\/p>\r\n\r\n<p><img src=\"media\/TypographyAdvancedTerminology.png\" \/><\/p>\r\n\r\n<p>I do have to mention that <em>modulation<\/em> and <em>counters<\/em> are very important when it comes to classifying typefaces, and identifying weak or bad spots within a typographic design.<\/p>\r\n\r\n<p><em>Modulated strokes<\/em> simply vary line width at curves, especially at spots where several curves intersect. Unmodulated strokes have a fixed width for every stroke. Modulated typefaces are often regarded as better, though this modulation can be very subtle. The reason for this is that the visual weight is more evenly spread across a letter, which greatly increases legibility. It&rsquo;s also for that reason that Comic Sans is universally hated by typographers.<\/p>\r\n","slur":"typograpy-fundamental-terminology","cat":"Design","subcat":"Typography","video":"","diff":"2","quiz":""},
{"id":"361","title":"[Typography] Typeface Classification","post":"<p>So soon in the course, we&rsquo;ve already hit a sensitive subject; how to classify all typefaces on earth &ndash; and that&rsquo;s <em>a lot<\/em> &ndash; into a simple, easy to understand system. It is for that reason that no single, universal system exists. Being able to classify typefaces when you see them, however, is such an important skill that I still want to go over the classification that seems to have been agreed on by most.<\/p>\r\n\r\n<p>Typefaces can be divided into the following groups: <em>serif<\/em>, <em>sans-serif<\/em>, <em>graphic<\/em>. The largest groups are the first two, which can then be further categorized by their style: <em>humanist<\/em>, <em>geometrical<\/em> or <em>transitional<\/em>.<\/p>\r\n\r\n<p>NOTE:<strong> Type Exercise:<\/strong> After reading this chapter, pick a few of your favourite fonts and try to classify them! Even better, try to pick two fonts from the same classification and see if you can make them work well together.<\/p>\r\n\r\n<h2>Humanist<\/h2>\r\n\r\n<p><img src=\"media\/TypographyHumanist.png\" \/><\/p>\r\n\r\n<p>Often also called <em>old style<\/em>, it has rounded features and modulated strokes. The vertical axis for all letters is slightly slanted. Terminals are pear shaped, and lowercase counters relatively small.<\/p>\r\n\r\n<p>These typefaces were among the earliest created, and are based upon efficiency. The forms of the letters are influenced by the human body and the nature of the pen tip.<\/p>\r\n\r\n<h2>Geometrical<\/h2>\r\n\r\n<p><img src=\"media\/TypographyGeometrical.png\" \/><\/p>\r\n\r\n<p>Also called <em>modern<\/em>, these typefaces create their letters out of basic geometrical shapes (such as triangle, square, circle), and often have perfectly round counters. The vertical axis is upright, and extra features (such as serifs) are hair thin. They have no modulation, or extreme modulation. Nearly every part of every letter is geometrically rationalized.<\/p>\r\n\r\n<p>Geometrical typefaces have also produced so-called <em>monospaced fonts<\/em> and <em>bitmap fonts<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyMonospaced.png\" \/><\/p>\r\n\r\n<p>Monospaced fonts use the exact same width and height for all characters, making it ideal for places where the text is dynamic or subject to change. For example, manuscripts are usually send to the editor\/publisher with monospaced font, and formatting happens later. Or, within video games or websites, dynamic counters often use monospaced numbers so that the width doesn&rsquo;t change all the time.<\/p>\r\n\r\n<p><img src=\"media\/TypographyBitmap.png\" \/><\/p>\r\n\r\n<p>Bitmap fonts have been created specifically for the computer, and are built out of raw pixels, from the bottom up. On a computer screen the difference or usability is small, but on less-capable screens (such as that of microwaves or other devices) it&rsquo;s the best option when it comes to practicality and legibility.<\/p>\r\n\r\n<h2>Transitional<\/h2>\r\n\r\n<p><img src=\"media\/TypographyTransitional.png\" \/><\/p>\r\n\r\n<p>Also called <em>realist<\/em>, it tries to find a balance between humanist and geometrical typefaces. The vertical axis is upright (or nearly so), the strokes heavily modulated, the serifs sharp and relatively visible. While not always the case, transitional typefaces often have a larger natural x-height.<\/p>\r\n\r\n<p>They are often regarded as ordinary or &ldquo;invisible&rdquo;, making them ideal if you want to place all focus on the text, but this can also result in boring design.<\/p>\r\n\r\n<h2>Serif<\/h2>\r\n\r\n<p><img src=\"media\/TypographySerifTypefaces.png\" \/><\/p>\r\n\r\n<p>Not surprisingly, serif typefaces have serifs on their letters. Those are nothing more than any sort of decoration at the end of a stroke. Instead of just randomly ending a stroke or chopping it off with a square ending, a serif adds some subtle ornamentation to every letter, also increasing legibility.<\/p>\r\n\r\n<p>In general, this makes them the best choice for when things are printed, displayed at a large size, or displayed on high-resolution screens.<\/p>\r\n\r\n<h2>Slab Serif<\/h2>\r\n\r\n<p><img src=\"media\/TypographySlabSerif.png\" \/><\/p>\r\n\r\n<p>Also called <em>Egyptian<\/em>, these typefaces are a special kind of serif. They have very little modulation or contrast in stroke width, and an upright vertical axis (when apparent). They also sport boxy serifs that are generally the same weight as the rest of the strokes within the letterform.<\/p>\r\n\r\n<h2>Sans-Serif<\/h2>\r\n\r\n<p><img src=\"media\/TypographySansSerifTypefaces.png\" \/><\/p>\r\n\r\n<p>As opposed to serif typefaces, sans-serif typefaces do <em>not<\/em> have these serifs, which makes them look drastically different. The stroke width is also more uniform and even, in general.<\/p>\r\n\r\n<p>Because of this, there&rsquo;s less &ldquo;clutter&rdquo; and the fonts look cleaner on screens or at small sizes. Those serifs actually add noise to the page, but that is actually a good thing; without a bit of noise, type looks cold and mechanical, but with it, it looks alive and breathing.<\/p>\r\n\r\n<h2>Graphic<\/h2>\r\n\r\n<p><img src=\"media\/TypographyGraphicTypefaces.png\" \/><\/p>\r\n\r\n<p>Graphic typefaces can come from a lot of different backgrounds or themes. In essence, though, we can distinguish three categories:<\/p>\r\n\r\n<ul>\r\n\t<li><em>Script<\/em>: These typefaces look like they have been hand-lettered, like someone is using his handwriting within the design. Should not be used too much, because of its reduced legibility. When displayed large, however, it can look stunning.<\/li>\r\n\t<li><em>Display<\/em>: These typefaces don&rsquo;t look like handwriting, yet display similar characteristics. They contain letterforms that are very useful for decorative purposes, such as within a special logo or a heading of one or two words, but not for long pieces of text.<\/li>\r\n\t<li><em>Symbol<\/em>: Everything that&rsquo;s left over. These can be typefaces including only symbols or icons (instead of letters), or letters written in a style that&rsquo;s unlike any of the others I&rsquo;ve mentioned.<\/li>\r\n<\/ul>\r\n\r\n<p>In general, graphic typefaces are more goofy, creative, unique, comical and better at attracting attention. More often than not, though, less is more.<\/p>\r\n","slur":"typography-typeface-classification","cat":"Design","subcat":"Typography","video":"","diff":"1","quiz":""},
{"id":"362","title":"[Typography] Finding Fonts","post":"<p>With all this knowledge about letterforms and styles under our belt, we can start picking the right fonts for our typographic projects. Even when you&rsquo;re only going to use different fonts from the same typeface, you still need to find the font that portrays the right mood and message within your design.<\/p>\r\n\r\n<p>Unfortunately, though, fonts don&rsquo;t come with a description &ldquo;reminds people of rock &lsquo;n roll&rdquo; or &ldquo;radiates with joy&rdquo;. The meaning of a font depends on its historical and cultural meaning, its visual forms and typesetting, and most importantly its context. Before you use a font, find out what it was initially made for, how it has evolved, and what feeling the forms evoke. For example, large sweeping curves usually create a free, natural, joyful feeling, while big blocky letters create a colder, formal, or more sad feeling. But not always.<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise:<\/strong> Pick a word, preferably an emotion or feeling, and make it look like what it means.<\/p>\r\n\r\n<h2>Professional Fonts<\/h2>\r\n\r\n<p>There&rsquo;s a difference between <em>professional fonts<\/em> and so-called <em>system fonts<\/em>. The latter is the set of fonts automatically installed on every computer, such as Arial and Helvetica, which are quite generic and neutral. Professional fonts, on the other hand, have been hand-crafted by typographers to include as beautiful and as many characters as possible. As you can pick up from my choice of words, professional fonts are the way to go.<\/p>\r\n\r\n<p>Professional, however, doesn&rsquo;t necessarily mean expensive or paid at all. Amazing fonts have been put online for free, and I recommend you start experimenting with those first, before spending all your capital on fonts. Paid fonts, however, will always be more unique, special and specific than anything else you might encounter. Paid fonts include all sorts of different styles and weights in a single typeface, as well as support for many special features and symbols that advanced typography demands.<\/p>\r\n\r\n<p>Therefore, I&rsquo;d like to define a <em>good font<\/em> as one that has letterforms that are distinct enough to be told apart, while not so individual that one has trouble reading complete words. In typography, everything&rsquo;s connected to everything, and individual elements can only be noticeable at the expense of the whole &ndash; a good font combats this.<\/p>\r\n\r\n<h2>Finding &amp; Acquiring Fonts<\/h2>\r\n\r\n<p>If you want to compare fonts, you need to know where to find them. There&rsquo;s dozens of websites selling (or freely distributing) fonts, as well as large packages of fonts installed by default or by other software. On your computer, there should be an application or program that loads up all your fonts. If you can&rsquo;t find it, though, you can always open a new Word file and look through the list of fonts at the top left.<\/p>\r\n\r\n<p>When it comes to downloading (and\/or buying) fonts from websites, you can&rsquo;t really go wrong. There are quite a few huge, trusted websites (e.g. myfonts.com) you can compare and look around, until you find that perfect font. Once downloaded, double-clicking on a font should automatically pop up a window that allows you to install it. From that moment on, you can use it in your projects!<\/p>\r\n\r\n<p>Over time, you&rsquo;ll be able to build your own library of typefaces. Don&rsquo;t rush this process, though &ndash; it&rsquo;s better to slowly build your library with typefaces you really like and work well for you, instead of immediately throwing in every free font you can find.<\/p>\r\n\r\n<h2>The Typeface Selection Process<\/h2>\r\n\r\n<p>Design is all about striking a balance between practicality and aesthetics. Your choice of typefaces must first and foremost be governed by the <em>content<\/em> of the message of text, then the intended audience and purpose, and only lastly by (technical) constraints.<\/p>\r\n\r\n<p>With that said, you can&rsquo;t start a typography without at least one typeface. I also suggest, however, that you don&rsquo;t start a typography with more than a single typeface. This starting typeface should be the one to use for the majority of the text (the <em>body text<\/em>), as that is the most important to get right, and not the headers or other fancy parts.<\/p>\r\n\r\n<p>The only reason, then, that you should ever add more typefaces is if you really need them. First explore the different weights and styles of the typeface you&rsquo;ve already chosen, and you&rsquo;ll notice you don&rsquo;t need so many other typefaces.<\/p>\r\n\r\n<p><strong>Type Error: <\/strong>In general, more than two or three typefaces is too much<\/p>\r\n\r\n<p>When you do bring in more typeface families, they should fulfil a function your basic family can&rsquo;t, while achieving visual balance with your main font. These extras are called <em>accessories<\/em>, and, for example, contain bolder and more attention-grabbing letters than the main font, which makes them ideal for headlines. I must warn you though, that some fonts look very nice when set large or small, but are quite ugly when displayed at another size. Next chapter will talk more about the matching of fonts.<\/p>\r\n\r\n<img src=\"media\/TypographyPickingTypefaces.png\" \/>\r\n","slur":"typography-finding-fonts","cat":"Design","subcat":"Typography","video":"","diff":"1","quiz":""},
{"id":"363","title":"[Typography] Matching Fonts","post":"<p>As stated in the previous chapter, there are several things to take into account when looking for fonts. The main concerns are: <em>legibility<\/em>, <em>economy<\/em>, <em>medium<\/em>, <em>history<\/em> and <em>message<\/em>. Type is made to be read, but also to be printed on a certain medium and convey a certain message. Additionally, you don&rsquo;t want type to take up more space than necessary, and you also don&rsquo;t want to create conflicting historical associations in your work.<\/p>\r\n\r\n<h2>Workhorses<\/h2>\r\n\r\n<p>I recommend you use a so-called <em>workhorse<\/em> as your first typeface. A real workhorse is a neutral and &ldquo;invisible&rdquo; font that brings focus to the content, to the body text that will be the largest part of most designs.<\/p>\r\n\r\n<p><img src=\"media\/TypographyWorkhorses.png\" \/><\/p>\r\n\r\n<p>A workhorse typically has the following properties:<\/p>\r\n\r\n<ul>\r\n\t<li>A good regular weight. It shouldn&rsquo;t be so light that it disappears, and not so heavy that letter shapes fill in.<\/li>\r\n\t<li>At least one bold and italic weight, with enough contrast to be noticed. These complement the regular weight.<\/li>\r\n\t<li>It is economical. It should be narrow or small enough to fit large amounts of text within the available space, but the letters shouldn&rsquo;t be compressed beyond recognition.<\/li>\r\n\t<li>It has good numerals. Confusing or misaligned figures are annoying, or maybe even dangerous, when immediate understanding of the numbers is required.<\/li>\r\n\t<li>It has a large array of symbols. We call these fonts <em>expert sets<\/em>, as they include characters only so-called typographic experts would think about using.<\/li>\r\n<\/ul>\r\n\r\n<p>NOTE: I don&rsquo;t think any graphic font has ever been able to have those properties, and I suggest you stick to serif or sans-serif typefaces for the workhorse part of the design.<\/p>\r\n\r\n<h2>Similarity &amp; Contrast<\/h2>\r\n\r\n<p>Fonts match well together if they are <em>similar<\/em> (they are harmonious and look a lot like each other) or <em>contrasted <\/em>(they are very unlike each other). Choosing a font combination with properties in between will look like a mess or a mistake, rather than a stylistic choice. Similar fonts are great for signalling a subtle change in the hierarchy, such as emphasizing or highlighting a word by setting it in <em>italics<\/em>. Contrasting fonts are great for important and large difference in hierarchy, such as a heading versus regular body text, or even a logo versus headings.<\/p>\r\n\r\n<p><img src=\"media\/TypographyTypefacesSimilarityContrast.png\" \/><\/p>\r\n\r\n<p>Strong similarities among fonts are, among others,<\/p>\r\n\r\n<ul>\r\n\t<li>Roughly the same character width.<\/li>\r\n\t<li>Categorized within the same classification<\/li>\r\n\t<li>The same <em>perceived<\/em> x-height. As stated earlier, some serif fonts swing above and below their x-height with curves and ornamentation, which means picking two fonts with the exact same x-height doesn&rsquo;t necessarily make them look the same size.<\/li>\r\n\t<li>An even texture. This means that the darkness\/lightness and the smoothness\/roughness of the letterforms are the same<\/li>\r\n\t<li>Roughly the same shape for the letter <em>n<\/em>. The parts of this letter occur often in the shapes of other letters, which is why comparing the curves of the<em> n<\/em> can tell you a great deal about whether fonts match visually.<\/li>\r\n<\/ul>\r\n\r\n<p>Obviously, by contrasting some of these properties instead of choosing them to be similar or identical, you can add more visual interest and balance to a design. The task is, as always, to not overdo this contrast, or you might still end up with an incoherent mess. One thing that doesn&rsquo;t lend itself to contrasting, though, is the <em>x-height<\/em> &ndash; try to keep it the same for different fonts (at the same point size).<\/p>\r\n\r\n<p>A popular combination that always seems to work well, is combining one serif and one sans-serif typeface. A third typeface, if needed at all, could then be one of graphic type. Additionally, typefaces created by the same typographer or in the same time period often go well together.<\/p>\r\n\r\n<h2>Media<\/h2>\r\n\r\n<p>Workhorses work across all media, while other typefaces generally don&rsquo;t. For example, Garamond is a beautiful serif font used very often in printed books, but on a screen it often looks awful or illegible (it&rsquo;s best replaced with the sturdier Georgia). Therefore, you should always pick the fonts that will look their best when put on the final medium.<\/p>\r\n\r\n<p>Furthermore, you shouldn&rsquo;t go against the intended use of a font. When using a digital adaptation of a letterpress face, choose fonts that are faithful&nbsp; to the spirit as well as letters of old designs. Choose faces that suit the paper you intend to print on, or choose paper that suits the faces you want to use (if you have that freedom). Consider the medium for which a font was originally designed, and don&rsquo;t stray too far from it.<\/p>\r\n\r\n<h2>Message<\/h2>\r\n\r\n<p>When you design the typography for a message, you will always add some interpretation to it. Even if you choose a &ldquo;neutral&rdquo; typeface, you&rsquo;ve made a choice telling your audience the message is neutral. Brands are a good example of this; they have to be authentic through typeface, and using a bland or overused typefaces carries that same message over to the brand.<\/p>\r\n\r\n<p>Some typefaces are only suitable for some specific occasions, while others are only suitable at a certain time. Typographic trends exist, but they are hard to predict. When trends are followed, the entertainment value is higher than with straightforward corporate stuff, but beware that your design might not stand the test of time.<\/p>\r\n\r\n<p>Most of it, though, has to do with history. Choose faces whose historical associations are in keeping with the text, and don&rsquo;t go against the intended use of a typeface. For example, if I showed you a few fonts, you&rsquo;d be immediately able to pick out the one that screams &ldquo;cowboy&rdquo; or &ldquo;flower power&rdquo; &ndash; using them in another context will most likely feel strange.<\/p>\r\n\r\n<h2>Fine-tuning<\/h2>\r\n\r\n<p>When you&rsquo;re still not satisfied with a font, you can of course always fine-tune it yourself. You can add your own characters, or modify some of the existing ones. This should, however, be done with great care. And, most importantly, if a font requires too much changes, just drop it and pick a different one. (For now, I haven&rsquo;t created a course on how to design your own fonts, yet. Sorry.)<\/p>\r\n","slur":"typography-matching-fonts","cat":"Design","subcat":"Typography","video":"","diff":"2","quiz":""},
{"id":"364","title":"[Typography] Font Styles","post":"<p>You&rsquo;ve seen me mention that different <em>weights<\/em> or <em>styles<\/em> of one typeface multiple times, and now I will explain exactly what that means. They are simply variations on the basic idea or structure of a type family, which you can use for signalling changes in the hierarchy and highlighting (or commenting) certain parts of the text.<\/p>\r\n\r\n<p><em>What variations could you possibly make while keeping the basic structure intact<\/em>? Well, you can make the type lighter or heavier, you can make it narrower or wider, you can make it blockier or rounder, or you can make it more upright or more slanted.<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise:<\/strong> After reading this chapter, try to create a typographic design with a clear hierarchy using only different font styles from the same typeface.<\/p>\r\n\r\n<h2>Heavy versus Light<\/h2>\r\n\r\n<p><img src=\"media\/TypographyStylesLightHeavy.png\" \/><\/p>\r\n\r\n<p>A font is called <em>heavy<\/em> if its strokes are thicker than the regular version. There are, of course, gradations. When a font is only marginally thicker, it&rsquo;s called <em>semibold<\/em>. When a font is quite a bit heavier, it&rsquo;s called <em>bold<\/em>. A font that is extremely heavy is called <em>black<\/em> or sometimes <em>extrabold<\/em>.<\/p>\r\n\r\n<p>On the other hand, a <em>light<\/em> font has thinner strokes than the regular version. Because the regular letters are actually quite thin already, fonts usually have at most a single light version.<\/p>\r\n\r\n<p>If there&rsquo;s even more heavy or light versions, however, they are often designated by numbers; <strong>100<\/strong> being the thinnest, <strong>900<\/strong> being the thickest. In this case, 400 or 500 is about regular size.<\/p>\r\n\r\n<p>Bold letters have decreased white space, which actually makes them seem smaller than lighter counterparts. This is often countered by making them slightly higher or broader; either way, the counters need to stay clear and open at all sizes.<\/p>\r\n\r\n<p>Light typefaces are best suited for those messages we want to look delicate and elegant. Use them to accentuate rhythm and lend emphasis to other parts of the design, or in pieces of text with a very small size.<\/p>\r\n\r\n<h2>Condensed versus Wide<\/h2>\r\n\r\n<p><img src=\"media\/TypographyStylesCondensedWide.png\" \/><\/p>\r\n\r\n<p>Instead of only changing strokes, it&rsquo;s also possible to change dimensions. A font is <em>condensed<\/em> if its letters are much higher than they are wide. A font is <em>wide<\/em> if the opposite is true.<\/p>\r\n\r\n<p>Again, gradations are possible, but not often. It&rsquo;s hard to condense or stretch a font without making it look ugly or unreadable, and only <em>expert sets<\/em> have such well-designed variations.<\/p>\r\n\r\n<p>Sensationalist newspapers or designs usually employ bold, condensed typefaces. This allows them to attract attention, whilst being economical with their available space.<\/p>\r\n\r\n<h2>Upright versus Slanted<\/h2>\r\n\r\n<p><img src=\"media\/TypographyStylesRomanSlanted.png\" \/><\/p>\r\n\r\n<p>The default form of letters is (nearly) upright, which we call <em>roman<\/em>. If the letters in a font are slanted, which means they have a much more diagonal stress, we call them <em>italic<\/em>. Italics are usually the best way to emphasize or highlight words, as they are less attention-grabbing than heavy typefaces, yet fit better within the flow of the text. In general, pick italic over bold.<\/p>\r\n\r\n<h2>Blocky versus Round<\/h2>\r\n\r\n<p><img src=\"media\/TypographyStylesBlockyRounded.png\" \/><\/p>\r\n\r\n<p>Though not as common, some typefaces have different styles that are more radically different. A blocky font has the curves and serifs of the original made more geometric and square. A rounded font has all parts of the letter made more round and curves exaggerated. Rounded fonts are therefore sometimes called <em>soft<\/em>.<\/p>\r\n\r\n<p>Traditionally, rounded forms seem more playful, happy and fun, while blocky forms are more serious, formal and cool.<\/p>\r\n\r\n<h2>Uppercase versus Lowercase<\/h2>\r\n\r\n<p><img src=\"media\/TypographyStylesCase.png\" \/><\/p>\r\n\r\n<p>Though technically not a style, the difference between using only uppercase or only lowercase letters is quite huge. In general, refrain from using uppercase letters only for sentences longer than a single lines. Do not be afraid to use them, though, as they can be great in headlines or highlighting. Nevertheless, within body text, it&rsquo;s best to use <em>small caps<\/em> instead of fully fledged capitals, as the latter often interrupts the flow too much. Small caps are also recommended for displaying roman numerals.<\/p>\r\n\r\n<h2>A Huge Word of Warning<\/h2>\r\n\r\n<p>The styles I described above, should be <em>separate font files<\/em>. On the computer, when you want a typeface bold or italic, it will look for the corresponding font file. If it can&rsquo;t find it, however, it will mechanically thicken or slant the letters following a standard algorithm. Don&rsquo;t let this happen to you.<\/p>\r\n\r\n<p><img src=\"media\/TypographyStylesFake.png\" \/><\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Never, ever, distort type or use fake variations.<\/p>\r\n\r\n<p>Instead, find a typeface that naturally supports all the variations you need. This means you shouldn&rsquo;t use fake bolds, fake italics, fake small caps, or fake condensed\/wide versions (by distorting the letters yourself).<\/p>\r\n\r\n<p>You could, if needed, make a letter bolder by adding an outline around it yourself. This can actually be used to great effect, as long as they don&rsquo;t intrude with the letterforms &ndash; instead, always place them outside of the letter. Because it&rsquo;s so easy to add bold variations to a typeface, there are some fonts that had their &ldquo;official&rdquo; bold version added later. Be wary of this, as this is still not the way to go.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> No, <u>underlined<\/u> is not a font style, and don&rsquo;t use it when you don&rsquo;t really have to.<\/p>\r\n\r\n<p>Placing text directly over images, or images directly over letters, is not recommended. I&rsquo;ll discuss some ways to eliminate this problem later in the course.<\/p>\r\n","slur":"typography-font-styles","cat":"Design","subcat":"Typography","video":"","diff":"2","quiz":""},
{"id":"365","title":"[Typography] Special Characters I","post":"<p>The first computer keyboards were made primarily for programming, which is why proper typographic characters are hard to find or use if you don&rsquo;t know about them. Additionally, good typographic practices concerning some punctuation and special characters aren&rsquo;t taught in school, which is why the information in this chapter is applicable to all branches or activities involving writing.<\/p>\r\n\r\n<p>What&rsquo;s important to remember, though, is that special characters serve mostly as a necessary notation, and should never reduce legibility or functionality. Therefore, remove unnecessary punctuation whenever you can, and only use it to increase aesthetic value if it doesn&rsquo;t compromise the clarity of the design.<\/p>\r\n\r\n<h2>Hyphens and Dashes<\/h2>\r\n\r\n<p><img src=\"media\/TypographyCharactersDashes.png\" \/><\/p>\r\n\r\n<p>There are three flavours: <em>hyphens<\/em>, <em>en dashes<\/em> and <em>em dashes<\/em>. The hyphen is the shortest, while the others are the width of the letter <em>n<\/em> and the letter <em>m<\/em>, respectively.<\/p>\r\n\r\n<ul>\r\n\t<li>The hyphen is used within a compound word, or when a word is broken up at the end of a sentence.<\/li>\r\n\t<li>Close-set en dashes are used to indicate a range of numbers, while en dashes with space around them can be used to make a comment or indicate a subordinate clause in a sentence, essentially taking over the function of the comma.<\/li>\r\n\t<li>Close-set em dashes can also be used as a replacement of the comma, while em dashes with space around them can introduce alternate speakers or quotes in a story.<\/li>\r\n<\/ul>\r\n\r\n<p>Which character you choose to use for the <em>minus<\/em> in mathematical notation is up to you, although it&rsquo;s generally recommended to use a wider dash for subtraction, than for negative numbers. If possible, find a font that has special symbols built-in for mathematical operations.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Don&rsquo;t use multiple hyphens after each other to simulate dashes.<\/p>\r\n\r\n<h2>Quotes<\/h2>\r\n\r\n<p><img src=\"media\/TypographyCharactersQuotes.png\" \/><\/p>\r\n\r\n<p>Again, there are different types to be aware of: <em>straight<\/em> and <em>curly quotes<\/em>, and <em>single<\/em> and <em>double <\/em>quotes.<\/p>\r\n\r\n<ul>\r\n\t<li>Use a single straight quote for <em>foot <\/em>and <em>inch<\/em> marks.<\/li>\r\n\t<li>Use opening and closing curly quotes for all other cases. When used as an apostrophe, make sure the quote points downward.<\/li>\r\n\t<li>With numerical plurals, omit the apostrophe<\/li>\r\n<\/ul>\r\n\r\n<p>In general, quotes obstruct the flow of the text and should be used sparingly. It is for that reason that you should default to using only single quotes when quotations are short or inline. However, when used for direct quotation of someone&rsquo;s speech or showing a writer doesn&rsquo;t buy into the meaning of a word, use double quotes.<\/p>\r\n\r\n<h2>Parentheses, Brackets &amp; Braces<\/h2>\r\n\r\n<p><img src=\"media\/TypographyCharactersParentheses.png\" \/><\/p>\r\n\r\n<p>Lots of fonts have these characters too thick, too thin, or too symmetrical. Try to use the best version of these characters you can find. Additionally, the spacing isn&rsquo;t always satisfying &ndash; there should not be too much space between the letters and the parentheses, nor too little.<\/p>\r\n\r\n<p>If the text within parentheses is italic (or otherwise styled), it&rsquo;s generally best to keep them upright and normal. That is, unless this causes letters to collide with the parentheses.<\/p>\r\n\r\n<p>As for their usage, parentheses are the most common, while brackets and braces are mostly for programming or scientific pieces.<\/p>\r\n\r\n<h2>Diacritics &amp; Symbols<\/h2>\r\n\r\n<p><img src=\"media\/TypographyCharactersDiacritics.png\" \/><\/p>\r\n\r\n<p>Diacritics, just as fake bolds, can be simulated by computers. As expected, it&rsquo;s recommended to choose a font with naturally supported diacritics instead. Either way, don&rsquo;t leave out diacritics, as lots of languages depend on them for their meaning. (For example, <em>papa<\/em> is father in Spanish, while <em>pap&aacute;<\/em> is a potato.)<\/p>\r\n\r\n<p>Typical other symbols that are poorly designed in (non-professional) fonts are parentheses, brackets, asterisk, pilcrow (paragraph mark), section sign, and the octothorp (hashtag). You can alter them yourself if you like, but it&rsquo;s much easier to choose a typeface that naturally supports these properly.<\/p>\r\n\r\n<h2>Ending Sentences<\/h2>\r\n\r\n<p>Ending sentences with a regular dot will suffice most of the time. You can explore, however, rewriting a sentence to become a question, as this makes it shorter and more active.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">&ldquo;<em>I will now try to explain why you shouldn&rsquo;t do A but B<\/em>&rdquo; can be rewritten to &ldquo;<em>Why should you do B instead of A?<\/em>&rdquo;<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Never, ever, use multiple exclamation or question marks after each other. In fact, avoid using exclamation marks if you can.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Never use two spaces after a period. It&rsquo;s unnecessary and disrupts the flow of the text.<\/p>\r\n\r\n<p>There&rsquo;s another common problem, which is: <em>should punctuation come before or after the dot?<\/em> In general, it doesn&rsquo;t really matter, as long as you&rsquo;re consistent with your choice. Putting the punctuation in front of the ending dot seems more logical, but positioning it after the dot is often more visually pleasing.<\/p>\r\n\r\n<p><img src=\"media\/TypographyCharactersEndingSentences.png\" \/><\/p>\r\n","slur":"typography-special-characters-I","cat":"Design","subcat":"Typography","video":"","diff":"2","quiz":""},
{"id":"366","title":"[Typography] Special Characters II","post":"<p>Continuing on last chapter, I will discuss a very important special character: <em>figures <\/em>or <em>numerals<\/em>. At the end, I will also include some simple left-over rules on special characters, which are nevertheless quite important to know!<\/p>\r\n\r\n<h2>Figures<\/h2>\r\n\r\n<p>Much like a proper font always has uppercase and lowercase variations of the exact same letter, good fonts should have multiple versions of the same numeral. Two styles are available: <em>lining<\/em> and <em>old style<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyFigures.png\" \/><\/p>\r\n\r\n<h3>Lining Figures<\/h3>\r\n\r\n<p>These are the figures usually linked up with the 0&ndash;9 keys on your keyboard. They are called this way, because the top and bottom ends of all numerals line up. In other words, these are the uppercase characters of the numerals &ndash; all of them have the same height as the cap height of the font. An alternative name is <em>titling figures<\/em>.<\/p>\r\n\r\n<p>Not surprisingly, these should be used in phrases with all caps.<\/p>\r\n\r\n<h3>Old Style Figures<\/h3>\r\n\r\n<p>As opposed to lining figures, these are designed to look like lowercase letters. They have descenders and ascenders, and in general fit in with the lowercase letters of the font.<\/p>\r\n\r\n<p>Not surprisingly (again), these figures should be used among lowercase text.<\/p>\r\n\r\n<h3>Tabular Figures<\/h3>\r\n\r\n<p>Both lining and old style figures can be either <em>tabular<\/em> or <em>proportional<\/em>. In the first case, every figure has the exact same width (like a monospaced font), while in the second case each figure is sized proportionately to its shape.<\/p>\r\n\r\n<p>As the name suggest, tabular figures are best to use in tables or spreadsheets, or any visualization of a large set of data, while proportional figures work best in most other cases.<\/p>\r\n\r\n<h2>Miscellaneous<\/h2>\r\n\r\n<p><img src=\"media\/TypographyCharactersMisc.png\" \/><\/p>\r\n\r\n<p>Don&rsquo;t use an ampersand (&amp;) in place of a simple <em>and<\/em>. Instead, reserve them for titles, headlines and proper names. In these cases, choose the best and most beautiful ampersand you can find.<\/p>\r\n\r\n<p>Don&rsquo;t use <em>TM <\/em>or <em>(c) <\/em>or anything like that for copyright and trademark symbols. Use the proper symbols, &copy; and &trade;.<\/p>\r\n\r\n<p>Instead of putting three dots after each other, use <em>ellipses<\/em>.<\/p>\r\n\r\n<p>Use the <em>virgule<\/em> (steep slash) with words and dates, and the <em>solidus<\/em> (more diagonal slash) with split-level fractions.<\/p>\r\n\r\n<p>Use a native dimension sign (a cross mark) instead of the lowercase letter <em>x<\/em> when dimensions are given.<\/p>\r\n\r\n<p>When people still did inscriptions, it was common to use a <em>midpoint<\/em> (a dot, but slightly higher) between pieces of text to separate them, instead of a space or other character. For short pieces of text, it is actually still very useful.<\/p>\r\n\r\n<p>And last but not least, if you&rsquo;re getting serious about typography, you might find it useful to remap your keyboard driver. Lots of useful and necessary symbols are buried far within the keyboard, and by setting your own (hot)keys you can make your life a lot easier.<\/p>\r\n","slur":"typography-special-characters-II","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"367","title":"[Typography] Kerning & Tracking","post":"<p>Now that we&rsquo;ve looked at all individual letterforms and special characters you have at your disposal, we can look at combining them into pairs of letters and ultimately words and sentences.<\/p>\r\n\r\n<h2>Kerning<\/h2>\r\n\r\n<p>Ironically, when letters are spaced out uniformly, their pattern isn&rsquo;t uniform enough. Some combinations of letters leave too much space between them, while others could actually do with a bit more space. The process of setting an alternative spacing between a specific combination of letters, is called <em>kerning<\/em>. Every good font has it, and you should use it.<\/p>\r\n\r\n<p><img src=\"media\/TypographyKerning.png\" \/><\/p>\r\n\r\n<p>The results of such a kerning process is saved in a kerning table, included within the font. This kerning table will most likely be enabled by default, but you can turn it off or go in and change some of the values if you want. Tinkering a bit with the default kerning values is probably only needed when text becomes extremely large, as that is when tiny spacing issues become most apparent.<\/p>\r\n\r\n<p>In general, fonts should have consistent and moderate kerning, or none at all.<\/p>\r\n\r\n<h2>Tracking<\/h2>\r\n\r\n<p>On top of kerning, you can set the amount of space between <em>every<\/em> pair of letters, which we call <em>tracking<\/em> or letter-spacing. By default, a letterform will be saved inside a font with a sliver of space around it, which we call the set width. This means a tracking value of 0 should just prevent your letters from touching each other.<\/p>\r\n\r\n<p><img src=\"media\/TypographyTracking.png\" \/><\/p>\r\n\r\n<p>By increasing the value, you add more room to breathe, but you also run the risk of letters becoming too individual and seemingly unrelated. It becomes difficult to comprehend words. The smaller the type, the more space is needed. Only big, robust headlines can support closely spaced letters<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> &ldquo;One who would letterspace lowercase, would steal sheep.&rdquo;<\/p>\r\n\r\n<p>Only use alternative tracking for uppercase and small caps, or really bold and thick titles that create conflicting letterforms. In this case, <strong>5%&ndash;12%<\/strong> letterspacing is optimal. Especially abbreviations and acronyms in the midst of normal text benefit from spaced small caps.<\/p>\r\n\r\n<p>Either way, make the shoe fit, not the foot. If you want to save space, don&rsquo;t apply negative tracking; use the proper (condensed, or lighter) style of the typeface.<\/p>\r\n\r\n<p>Last tip: don&rsquo;t add space within strings of initials, or any sequence of capitals separated by dots really.<\/p>\r\n\r\n<h2>Ligatures<\/h2>\r\n\r\n<p>In some cases of conflicting letterforms, there is no benefit to be gained from kerning. Too much space would need to be added between the letters, creating weird gaps in the text. In those cases, <em>ligatures <\/em>come to the rescue.<\/p>\r\n\r\n<p><img src=\"media\/TypographyLigatures.png\" \/><\/p>\r\n\r\n<p>A ligature is simply a combination of two letters created as a single symbol. It&rsquo;s a way of combining annoying colliding characters in an elegant way. One of the most common ligatures is when an <em>f<\/em> and <em>i <\/em>are combined. Without extra space, the dot would intersect with the top curve of the f, so the best solution is to create a special symbol for the two together. A good font has ligatures &ndash; use them (if they are not already automatically used by your software).<\/p>\r\n\r\n<p>If you want to avoid using ligatures, pick a font that doesn&rsquo;t need them altogether. Such fonts have their letters designed in such a way that they never collide, so there&rsquo;s often no need for ligatures (or even kerning and tracking). This does, however, often take its toll on the beauty and dynamics of the font.<\/p>\r\n","slur":"typography-kerning-tracking","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"368","title":"[Typography] Leading & Measure","post":"<p>Having talked about the space between letters, we can look at the horizontal space between words and vertical space between subsequent lines of text. Ultimately, this allows us to say some clever things about the dimensions of text blocks.<\/p>\r\n\r\n<h2>Measure<\/h2>\r\n\r\n<p>When we talk about the measure of text, we talk about the actual <em>line width<\/em>. This is influenced by, beside kerning and tracking, the <em>line length<\/em> (amount of characters on a single line) and the <em>word spacing<\/em> (white space between words). If the measure is too long, people lose track of where they are and don&rsquo;t have as many pauses when reading. If the measure is too short, lines and words feel unconnected and text blocks become way too long (vertically).<\/p>\r\n\r\n<p><img src=\"media\/TypographyMeasure.png\" \/><\/p>\r\n\r\n<p>In general, a line length of about <strong>45&ndash;75 characters<\/strong> is recommended, whereas a length of <strong>66 characters<\/strong> is often seen as ideal. If you have lots of horizontal space within the design, however, you could bump up the character count a bit towards a maximum of <strong>90 characters<\/strong>. If you&rsquo;re working with multiple columns, which is highly recommended, you can use optimal line lengths of <strong>40&ndash;50&nbsp; characters<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyWordSpacing.png\" \/><\/p>\r\n\r\n<p>All of these estimates are given for when you use the regular amount of word spacing. As a rule of thumb, many designers use the width of the lowercase letter <strong>i<\/strong> as the word spacing. This is, however, only useful for short pieces of text. In long text blocks, word spaces need to be larger, which also means that line length should be shorter to not make the measure too long. Additionally, bold fonts often need more word spacing.<\/p>\r\n\r\n<p>Therefore, another way to look at it, is that an optimal measure is about <strong>3&ndash;5 inches<\/strong>.<\/p>\r\n\r\n<p>The main issue with measure, is that letters need to be far enough apart to be distinct, but not so far they become unrelated. Word spaces need to identify individual words, but at the same time also group them together for logical sentences. Give your text room to breathe, but don&rsquo;t let it break into a bunch of individual words.<\/p>\r\n\r\n<h2>Leading<\/h2>\r\n\r\n<p>Now that we&rsquo;ve discussed the horizontal size of a line, we will look at the vertical size. This is called line height or <em>leading<\/em>. When the descenders of one line touch or collide with the ascenders of the next line, things get messy and uncomfortable. Therefore, the height of a line is usually not simply the maximum height of its letters, but also includes some extra white space.<\/p>\r\n\r\n<p><img src=\"media\/TypographyLeading.png\" \/><\/p>\r\n\r\n<p>In most layouts, leading is slightly greater than cap height. This means setting it to the type size plus <strong>1&ndash;4 points<\/strong>, or setting it to <strong>120%&ndash;150% <\/strong>of the regular body text size.<\/p>\r\n\r\n<p>Leading and measure, however, directly influence each other. The greater the width of a line, the greater the line height should be. If line height is larger than word spacing, it causes the reader to constantly jump to the next line on accident. Don&rsquo;t make the leading too large, though, as it causes the lines to read as separate paragraphs or standalone pieces of text.<\/p>\r\n\r\n<p>If you want to keep a reader&rsquo;s attention, make sure the text has an even and coherent texture. Again, columns can help you out here.<\/p>\r\n\r\n<h2>Combining our Knowledge<\/h2>\r\n\r\n<p>Essentially, we&rsquo;ve now learned to approach short and long texts differently.<\/p>\r\n\r\n<p>Long texts need to be comfortable, and once you found your rhythm, nothing must disturb you again. Design it so that the reader has a chance to settle in, but be generous enough with leading to prevent the eye from slipping to the next line before finishing the current line. The reader must be relaxed; the spacing parameters need to be consistent or at least rhythmic (adding and removing space in regular intervals). Long text blocks often require a neutral and inconspicuous typeface.<\/p>\r\n\r\n<p>Short texts are mostly for quick scanning and grabbing attention. Tracking can be tighter, word spaces and line height smaller. The font used should have a little verve, but not too much.&nbsp;<\/p>\r\n\r\n<h2>Hyphenation<\/h2>\r\n\r\n<p>One problem still remains, though, which is that we can&rsquo;t force lines to a certain length. Words can&rsquo;t be broken at random points, as it makes them illegible. For this, <em>hyphenation<\/em> was invented. You could choose to not break words, and create lines of varying width, but that often results in nothing but an unorganized design. By splitting words at syllables, and adding a hyphen to show they have been split up, text becomes more consistent and easier to read.<\/p>\r\n\r\n<p><img src=\"media\/TypographyHyphenation.png\" \/><\/p>\r\n\r\n<p>Here are some guidelines on hyphenation:<\/p>\r\n\r\n<ul>\r\n\t<li>Leave at least two characters behind, and take at least three forward.<\/li>\r\n\t<li>Avoid leaving only the last syllable of a hyphenated word, or any word shorter than four letters, as the last line of a paragraph. If at all possible, it&rsquo;s recommended to make the last line at least half the measure of the text block.<\/li>\r\n\t<li>Avoid more than three consecutive hyphenated lines<\/li>\r\n\t<li>Don&rsquo;t hyphenate (short) numerical and mathematical expressions. In fact, don&rsquo;t let them go over a line break at all.<\/li>\r\n\t<li>Avoid hyphenated breaks where text is interrupted by other design elements.<\/li>\r\n\t<li>Hyphenate proper names only as a last resort, unless they appear quite often in your text.<\/li>\r\n<\/ul>\r\n\r\n<h2>Monospaced Fonts<\/h2>\r\n\r\n<p>Proportionally spaced typefaces are preferred over monospaced. There are only three reasons to still use monospaced fonts: to imitate the historic and personal look of typewriters, to write plain emails, and most of all to write code. The same is true with bitmap fonts; use them only when the theme is computers or anything digital, or when it&rsquo;s necessary because of extremely low-resolution screens.<\/p>\r\n","slur":"typography-leading-measure","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"369","title":"[Typography] Alignment","post":"<p>Now that we know how to distribute the space within a text block to optimize readability and aesthetics, we can look at aligning the text for the same reasons. Design always benefits from strong lines, and that is no different with typography; it&rsquo;s generally wise to create as many even and straight edges within the design as possible.<\/p>\r\n\r\n<p>Typographic elements can be aligned <em>horizontally<\/em> or <em>vertically<\/em>. The most important is horizontal alignment, which has four different types: <em>flush left<\/em>, <em>flush right<\/em>, <em>centred<\/em> and <em>justified<\/em>.<\/p>\r\n\r\n<h2>Flush Left<\/h2>\r\n\r\n<p><img src=\"media\/TypographyAlignmentFlushLeft.png\" \/><\/p>\r\n\r\n<p>Flush left has a hard edge on the left, and a soft one on the right. This means that every sentence starts at the exact same position on the left, but ends at different positions on the right. It&rsquo;s the most popular form of alignment, and in a sense the most logical one for people reading left to right. The uneven edge at the right is called a <em>rag<\/em>, which is why we also call this alignment <em>ragged right<\/em>.<\/p>\r\n\r\n<p>The good thing is that it respects organic flow of the language and avoids uneven spacing between words. The bad thing is that it can be disgraced with a &ldquo;bad rag&rdquo; &ndash; an ugly wedge-like shape for the rag.<\/p>\r\n\r\n<h2>Flush Right<\/h2>\r\n\r\n<p><img src=\"media\/TypographyAlignmentFlushRight.png\" \/><\/p>\r\n\r\n<p>Flush right has a hard edge on the right, and a soft one on the left. This means it can also be called <em>ragged left<\/em>. It&rsquo;s a welcome departure from the familiar flush left, and ideal for captions, sidebars, and marginal notes, with the same benefits as flush left added to it. It can place related elements near each other without letting them interfere.<\/p>\r\n\r\n<p>The bad thing is that some readers might not be pleased by the flush right alignment, and large pieces of flush right can be hard to read for the untrained eye. Bad rags threaten this type of alignment as well, with the added problem that punctuation at the ends of lines can weaken the hard right edge. One solution to this problem is to let any punctuation hang in the margin.<\/p>\r\n\r\n<h2>Centred<\/h2>\r\n\r\n<p><img src=\"media\/TypographyAlignmentCentred.png\" \/><\/p>\r\n\r\n<p>Instead of pushing the start or end of lines to the left or right, one can align lines of text along the same main axis. Centred alignment means that all lines share the same centre, which means uneven lines cause a rag on both sides.<\/p>\r\n\r\n<p>It&rsquo;s formal an classical, bearing associations with history and tradition. It breaks a text out of its flow and creates an organic shape. The bad thing is that it&rsquo;s static and conventional. When used too much or carelessly, it looks dull and sad. I recommend never using centred alignment ever again, especially not for text longer than a single line, unless you really have to.<\/p>\r\n\r\n<h2>Justified<\/h2>\r\n\r\n<p><img src=\"media\/TypographyAlignmentJustified.png\" \/><\/p>\r\n\r\n<p>In justified alignment, both the left and right edges are hard. This creates a very clean, even and uniform shape, that&rsquo;s also extremely efficient, which is why it&rsquo;s the norm for newspapers and books.<\/p>\r\n\r\n<p>To force the lines into the same measure, however, word spacing is added or removed. This creates ugly gaps, which you never want. This can be avoided by making the line length long enough (in relation to the size of the type), as more words allows word spacing to be changed more subtly.<\/p>\r\n\r\n<p>The best solution, however, is hyphenation. With right and centre alignments, hyphenation can be considered a deadly sin. With flush left alignment, it&rsquo;s okay. With justified alignment, it&rsquo;s a blessing.<\/p>\r\n\r\n<p>The take away is: use flush right alignment more often, and choose flush left or justified for the rest of the text; there&rsquo;s no performance difference between the two. Centred alignment should be restricted to single lines or titles.<\/p>\r\n\r\n<h2>Vertical Alignment<\/h2>\r\n\r\n<p>Vertical alignment within regular text blocks is already taken care of by the fact that lines sit on a common baseline. There are times, however, when you want to stack multiple letters on top of each other or align a phrase to a vertical baseline. There are two ways to do this.<\/p>\r\n\r\n<p><img src=\"media\/TypographyVerticalAlignment.png\" \/><\/p>\r\n\r\n<p><em>Stacked Capitals<\/em>: Use capital, roman letters on top of each other. Centring this column helps even out the differences in width. Also, pick a font where the capital letter <strong>I <\/strong>is not too narrow.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Don&rsquo;t stack lowercase. It&rsquo;s awkward, because ascenders and descenders make vertical spacing uneven and unbalanced.<\/p>\r\n\r\n<p><em>Vertical Baselines<\/em>: Simply write the phrase like you normally would, and then rotate the whole element by 90 degrees. This preserves the natural affinity and texture of lowercase letters. It can run from top to bottom or bottom top, which is both fine.<\/p>\r\n","slur":"typography-alignment","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"370","title":"[Typography] Paragraphs & Pagination","post":"<p>Thus far we&rsquo;ve handled text as if it were bundled in huge so-called <em>text blocks<\/em>, based on the topic or function. While that is true, in general, for typographic projects, there&rsquo;s much more to structuring text than that. This chapter will look at the main ways of subdividing large typographic projects, which is breaking it down into paragraphs, and putting it on separate pages.<\/p>\r\n\r\n<h2>Paragraphs<\/h2>\r\n\r\n<p>Paragraphs are a literary convention, designed to divide content into smaller portions that are easier to take in. The places where a paragraph ends and begins should therefore be clear, but paragraphs should not be so distinct that the story within them breaks apart.<\/p>\r\n\r\n<p><img src=\"media\/TypographyParagraphs.png\" \/><\/p>\r\n\r\n<p>Traditionally, two common ways to mark the start of a paragraph exist. The first is to <em>indent<\/em> the first line by about <strong>1&ndash;4 <\/strong>times the <strong>point size<\/strong>. The second is to leave <em>vertical white space<\/em> of about <strong>4&ndash;10 points<\/strong> above the paragraph. You could do both to be certain that a new paragraph is picked up on, but it&rsquo;s generally recommended to stick with one.<\/p>\r\n\r\n<p>The first paragraph of any chapter or text block, however, should <em>never<\/em> be indented. The first paragraph already stands apart on its own, and indenting only adds confusion.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> &ldquo;The first word of the first line is <em>the<\/em> critical word of that particular body of text. Let it start flush, at least.&rdquo;<\/p>\r\n\r\n<p>A less common way to separate pieces of text &ndash; not necessarily restricted to paragraphs &ndash; is by the use of so-called <em>fleurons<\/em>. These are simple typographic ornaments or symbols that mark the beginning or resumption of a section.<\/p>\r\n\r\n<p>Whatever you do, don&rsquo;t use multiple spaces or other special characters in a row to achieve a certain effect. Adding a line break or starting a new text block reliably and controllably makes text start on a new line, adding lots of spaces after each other does not. Also, don&rsquo;t start more than two consecutive lines with the same word (although this is partly a writer&rsquo;s issue).<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise: <\/strong>Invent new ways to separate paragraphs!<\/p>\r\n\r\n<h2>Pagination<\/h2>\r\n\r\n<p>How you distribute your works on pages doesn&rsquo;t have much general rules, except for the fact that you want pages to be balanced and feel connected. Most pages are displayed side by side, and having a huge difference in the amount of content confuses the reader. You can balance this by moving single lines from one page to the other, and, of course, having a good overall typographic design.<\/p>\r\n\r\n<p>To make pages feel connected, and create more beautiful overall page aesthetics, it&rsquo;s often best to eliminate <em>widows<\/em> and <em>orphans<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyOrphansWidows.png\" \/><\/p>\r\n\r\n<p>A widow is when the last line of a paragraph appears at the top of the next page. To solve this, either move more lines to the next page, or rewrite the paragraph to be shorter.<\/p>\r\n\r\n<p>An orphan is when only the first line of a paragraph appears at the bottom of a page (and the rest of it at the top of the next page). To solve this, simply move this single line down to the next page.<\/p>\r\n\r\n<p>Whether you do something about these widows and orphans is up to you, though, as removing them can leave weird gaps of space.<\/p>\r\n\r\n<h2>Webpages<\/h2>\r\n\r\n<p>Webpages can&rsquo;t work with multiple pages. Instead, they are often dynamic, and heavily extend in width and height. Of course, one solution is to break your content into multiple pages yourself, and if your articles become extremely long it&rsquo;s actually recommended to do that. In those cases, the same rules apply as described above.<\/p>\r\n\r\n<p>In most cases, though, you will have to work with extremely large pages. It is for that reason that you should have a consistent and clear typographic design on the website, and a clear navigation and hierarchy, otherwise the user gets <em>lost in content<\/em>. More on that later.<\/p>\r\n\r\n<h2>Block Quotes<\/h2>\r\n\r\n<p>Before we move on to the bigger picture, I have one special text block to talk about here; quotations. I&rsquo;ll discuss three types: <em>inline quotations<\/em>, <em>block quotes<\/em>, <em>verse quotations<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/TypographyQuotations.png\" \/><\/p>\r\n\r\n<p>Inline quotations have only one rule: if a piece of text starts with a quotation, you should always include the initial quotation mark. The usage of quotes is discussed in the special characters chapter, while the notation for quotations is dependent on the style of the writer.<\/p>\r\n\r\n<p>Block quotes have more to them than that. A block quotation is used when citing at most three sentences from an external source. They should be formatted to make clear that the text is not the author&rsquo;s. Here are the rules:<\/p>\r\n\r\n<ul>\r\n\t<li>Add extra leading before and after block quotations.<\/li>\r\n\t<li>Indent them subtly, about <strong>0.5&ndash;1 inch<\/strong>.<\/li>\r\n\t<li>If you decide to add quotation marks at the ends, let them hang in the margin to not disturb the even edges.<\/li>\r\n\t<li>Subtly reduce font size and line height.<\/li>\r\n<\/ul>\r\n\r\n<p>Verse quotations have short lines, sometimes without much or any punctuation. It&rsquo;s best to indent them by quite a bit, or centre them (if they aren&rsquo;t too long).<\/p>\r\n","slur":"typography-paragraphs-pagination","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"371","title":"[Typography] Hierarchy I","post":"<p>I&rsquo;ve already mentioned emphasizing and hierarchy several times, but now is the moment we can finally take a good look at it. Hierarchy is one of the most important aspects of any typographic design; if we don&rsquo;t know where to start, if we don&rsquo;t know the importance of each piece of text, if we don&rsquo;t understand the message or information, the design has failed. Hierarchy is all about clarifying the level of importance of a certain text block, and establishing connections and relationships between different pieces of information. It can be established in many, many ways, and this chapter will look at some of the key concepts.<\/p>\r\n\r\n<h2>Contrast<\/h2>\r\n\r\n<p>Difference among elements is created with contrast. One or multiple visual <em>cues<\/em> must signal the user that a change in hierarchy is happening. There are a lot of ways to do this, but some of them aren&rsquo;t really part of typography, so I will only mention typographic contrasts here.<\/p>\r\n\r\n<p><img src=\"media\/TypographyContrastModes.png\" \/><\/p>\r\n\r\n<p>The general options for creating contrast are<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Size<\/strong>: The most obvious one, visually and structurally, which I will discuss thoroughly in the next sections.<\/li>\r\n\t<li><strong>Style<\/strong>: A change from one style to another, such as switching from regular text to boldface, is a great and common visual cue.<\/li>\r\n\t<li><strong>Alignment:<\/strong> Text blocks or phrases that are aligned differently automatically feel like they are acting together on a different level.<\/li>\r\n\t<li><strong>Direction<\/strong>: With this I refer to the general direction or dimensions of a text block. For example, body text might be put in a wide rectangular field, while a narrow column beside it might contain notes or remarks.<\/li>\r\n\t<li><strong>Colour:<\/strong> A change in colour can be very noticeable, or not at all, depending on the style and size of the text. Colour can also increase or decrease the importance of a piece of text, depending partly on the context. Read more about this in the <strong><em>COLOUR THEORY<\/em><\/strong> course.<\/li>\r\n\t<li><strong>Space<\/strong>: Indenting or adding more space around text blocks provides a way to set them off from the elements around it.<\/li>\r\n\t<li><strong>Placement:<\/strong> Readers expect headings to be at the top, for example, while text blocks pushed against the edges of the paper seem of lesser importance or an afterthought.<\/li>\r\n\t<li><strong>Texture:<\/strong> You can change the texture of a piece of text by choosing a different typeface altogether, or changing the case (as lowercase has more texture than uppercase). Whether this increases importance and attracts attention depends on the properties of this added typeface.<\/li>\r\n\t<li><strong>Form:<\/strong> The outer form of a text block (e.g. rectangular, circular, trapezoid, and so on) also provides a strong visual cue that differentiates between content. This is hard to achieve without compromising legibility, though.<\/li>\r\n<\/ul>\r\n\r\n<p>As you can see, there&rsquo;s a lot of cues, and they can be used in near infinite amount of combinations. It&rsquo;s therefore recommended to never use too many signals &ndash; more than three cues is usually too much. Multiple cues should only provide backup for each other; a single subtle shift should be enough to establish hierarchy for the focused reader.<\/p>\r\n\r\n<p>Because of this, it&rsquo;s recommended to change one parameter at a time when trying to establish your hierarchy. If you immediately assign three cues to every level of hierarchy, you&rsquo;ll clutter the foreground and waste time and space on something you don&rsquo;t need.<\/p>\r\n\r\n<h2>Common Structures<\/h2>\r\n\r\n<p>While you can design the hierarchy any way you want, there&rsquo;s a common structure that works well and everybody&rsquo;s familiar with. This structure is something along the lines of:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Title =&gt; Chapter =&gt; Heading =&gt; Subheading =&gt; Body Text =&gt; Notes =&gt; Structural Elements<\/p>\r\n\r\n<p><img src=\"media\/TypographyCommonHierarchy.png\" \/><\/p>\r\n\r\n<p>The title is the shortest, but also often the biggest and most obvious element on the page. When people see a page, they need to immediately be able to scan the title to see what it is or if it&rsquo;s what they were looking for.<\/p>\r\n\r\n<p>From there on you can have multiple levels of headings (depending on how your content is structured), which all need to be visually distinct from each other, yet make clear that they are a heading. Use as many headings as you need; no more and no fewer. If your content has only one header or maybe none at all, go with that and don&rsquo;t invent headers.<\/p>\r\n\r\n<p>Only then comes the body text, which is relatively small in font size and doesn&rsquo;t have much other contrast applied, as it makes the text (more often than not) hard to read. A separate level is also used for notes or asides that talk about the body text, but aren&rsquo;t important enough to be within the body text.<\/p>\r\n\r\n<p>Lastly, we have the structural or navigational elements, such as page numbers, or a phrase in the margin that states your current location within a book. These should never be in view as the user is reading, but if he needs to go somewhere else, they should be easy to find and understand.<\/p>\r\n\r\n<h2>Font Size<\/h2>\r\n\r\n<p>The best way to start with creating your hierarchy, is by determining the fonts and font sizes for each particular level. We&rsquo;ve already talked about matching fonts, to a maximum of about three, and never using a font you don&rsquo;t need. When it comes to font sizes, you usually require more variety and bigger contrasts between the different sizes.<\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Never use only one font size for a complete typographic design.<\/p>\r\n\r\n<p>Font size should be determined with a <em>scale<\/em>. Which scale you use is up to you, but you should never arbitrarily pick sizes. By using a scale, such as multiplying font size by <em>1.618<\/em> (golden ratio) for every higher level of the hierarchy, you establish a pattern and rhythm, while keeping an adequate amount of contrast (as too little difference in font size will make it seem like you made a mistake).<\/p>\r\n\r\n<p><img src=\"media\/TypographySizeHierarchy.png\" \/><\/p>\r\n\r\n<p>The best font size for body text in print is <strong>10&ndash;12 points<\/strong>, and for the web it&rsquo;s <strong>15&ndash;25 pixels<\/strong>.<\/p>\r\n\r\n<p><em>Why is the recommended size for web larger?<\/em> Because the web is different. We usually view webpages from a greater distance, on a bigger screen. Webpages are huge projects with extra (interactive and dynamic) things added to it and scrolling ability.<\/p>\r\n","slur":"typography-hierarchy-I","cat":"Design","subcat":"Typography","video":"","diff":"4","quiz":""},
{"id":"372","title":"[Typography] Hierarchy II","post":"<p>Last chapter introduced the common hierarchy used in most projects, and now we will look at a few of them more intensively.<\/p>\r\n\r\n<h2>Title Pages<\/h2>\r\n\r\n<p>The title page is the first thing most readers will see, and should stand out yet be simple and clear. When it comes to the title page of a complete work, you have a lot of freedom and should simply set it in a style that contributes to the overall design, and conveys the right message and tone. Additionally, there should be some space (empty pages) after the title page to set it apart from the rest of the work.<\/p>\r\n\r\n<p>For the same reason, multiple nearly-empty pages should be left at the end of a book to balance it out and not come to an abrupt stop. When adding preliminaries, which is always a fun thing to do, give them adequate space as well.<\/p>\r\n\r\n<p>When it comes to title pages for chapters or certain levels of the hierarchy, set them in a form that works together with the overall design. If headers stand out or contrast too much, it distracts from the all-important body text. Don&rsquo;t let the title page oppress the text, but make it a symbol of the importance and presence of the text.<\/p>\r\n\r\n<h2>Highlighting<\/h2>\r\n\r\n<p>When it comes to the body text, there&rsquo;s always very subtle changes in hierarchy to be made. Perhaps you want to emphasize a single word in a phrase, or a single phrase within a long piece of text. The visual cues for these changes should not be so subtle that you can&rsquo;t immediately spot them, but it&rsquo;s also no good when lots of visual cues add up inside a text block.<\/p>\r\n\r\n<p>Therefore, highlight no more than 10 percent of the text, as the effects of highlighting decrease as the amount increases. Use only a small number of techniques, but apply them rigorously and consistently.<\/p>\r\n\r\n<p><img src=\"media\/TypographyHighlighting.png\" \/><\/p>\r\n\r\n<p>Italics should be preferred, especially for longer phrases, as they fit with the flow of the text. Bolding is the next best option, as it is more detectable or legible. Underlining should be avoided, and reserved for hyperlinks on the web.<\/p>\r\n\r\n<p>Avoid using different typefaces as a highlighting technique, and also avoid making text blink. Adding animation to text can be a wonderful thing, but it should not be annoying, and there should be an option to turn it off.<\/p>\r\n\r\n<p>When it comes to colour, highlighting with very bright colours is actually not recommended. They attract too much attention; a shift in colour is already enough. Highlight using desaturated colours which are clearly distinct.<\/p>\r\n\r\n<p>Inversing elements works extremely well for text, and is underused in my opinion. It&rsquo;s effective at attracting attention, but adds considerable noise. It doesn&rsquo;t work that well with icons or shapes, though.<\/p>\r\n\r\n<h2>Notes<\/h2>\r\n\r\n<p>Notes can be anything; a remark about the body text, a complete paragraph with additional information, or a footnote\/reference. However, the traditional way of adding notes &ndash; at the bottom or top of the page &ndash; is actually the worst one. We&rsquo;re used to reading top to bottom, and notes interfere too much this way.<\/p>\r\n\r\n<p><img src=\"media\/TypographyNotesHeads.png\" \/><\/p>\r\n\r\n<p>A better way, is adding the notes in the margin, and perhaps adding footnotes and references as a long list at the end. If you are to use superscripts of any kind within the text, check their weight and spacing, as to not attract too much or too little attention towards them. In the notes themselves, though, always use full-size numbers. And, as always, be consistent.<\/p>\r\n\r\n<p>Another name for adding the notes in the margin is <em>shoulder <\/em>or <em>run-in heads<\/em>, which gives us another opportunity here: adding the heading or title of the current section in the margin works wonders as well.<\/p>\r\n\r\n<h2>Alternate Hierarchies<\/h2>\r\n\r\n<p>With the rise of the web, it&rsquo;s become common practice for people to use your work on many different devices. Additionally, visually impaired users might make use of a screen reader to read your work aloud to them.<\/p>\r\n\r\n<p>Therefore, the underlying structure of a design is perhaps more important than the final look. Even on the web, it&rsquo;s important to establish a proper hierarchy <em>before<\/em> making up any visual ornamentation or extras. If the underlying hierarchy works well, it can easily be adapted to different devices\/screen sizes or use cases, and it can be used by the widest possible range of users.<\/p>\r\n\r\n<p>For websites, this usually means a single, proper HTML structure and several CSS style sheets for different screen dimensions. For screen readers (and, well, readers in general) you should still caption your tables, add &ldquo;alt tags&rdquo; ( = descriptions) to images, place the navigation at the right spots, make it clear that it&rsquo;s the navigation, and provide a descriptive title for hyperlinks.<\/p>\r\n","slur":"typography-hierarchy-II","cat":"Design","subcat":"Typography","video":"","diff":"4","quiz":""},
{"id":"373","title":"[Typography] Grid","post":"<p>Having started at the smallest parts of typography, it&rsquo;s now time to look at the big picture; the overall design filling up the whole page (or any other medium you happen to be using). Because it can be quite a daunting task to fill lots of pages with lots of content, designers usually employ a <em>grid<\/em>.<\/p>\r\n\r\n<p>A grid is nothing more than a subdivision of the design area, following a regular pattern. This might seem like the typography will become too mechanical and &ldquo;perfect&rdquo;, but the infinite ways through which you can subdivide and fill in the grid prevent this from happening. The grid should not force you to design the page in a certain way, instead, you should use it as a tool that shows ideas for great placement and dimensions for blocks of text.<\/p>\r\n\r\n<h2>Single Column<\/h2>\r\n\r\n<p><img src=\"media\/TypographyGridSingleColumn.png\" \/><\/p>\r\n\r\n<p>The simplest possible grid is the <strong>single column<\/strong>. This column can be centred, leaving equal margins at all sides. This is highly economical, but also boring. As books and magazines have pages next to each other when opened, you should always design pages as <em>spreads <\/em>too. You can mirror these pages to balance them out, which also allows you to vary the sizes of the inner and outer margins. Asymmetric designs, however, can be very interesting if you manage to balance the pages with other contrasts.<\/p>\r\n\r\n<p>On the computer, software usually asks you about page dimensions and margin width at the start, encouraging you to design from the <em>outside in<\/em>. If you&rsquo;re looking for inspiration, however, it&rsquo;s better to design from the <em>inside out<\/em>: design the margins and column(s) as if the page was infinitely large, experiment with them, and only add those guidelines to all pages when you&rsquo;ve found your holy grail.<\/p>\r\n\r\n<h2>Multi-Column<\/h2>\r\n\r\n<p><img src=\"media\/TypographyGridMultiColumn.png\" \/><\/p>\r\n\r\n<p>There are many ways to create a <strong>multicolumn<\/strong> grid. By laying down horizontal and vertical grid lines using a certain pattern, you can create horizontal and vertical zones. Some of them can be filled with content, others should be left empty to keep the balance. The finer your grid, the more flexibility you have.<\/p>\r\n\r\n<p>A common application of the multicolumn grid is when text and images are to be displayed together. You could split them and put them into separate columns, or put the text in separate columns and let the images flow together with them. You could reserve a vertical area for captions and notes, while the body text &ldquo;hangs&rdquo; from a common horizontal line.<\/p>\r\n\r\n<p>How you create the grid, and how you use it, is your choice, but also determined largely by the content. Adding lots of different zones when there&rsquo;s nothing but body text to display, is overkill and unnecessary. If the contents, illustrations and amount of copy vary, however, a flexible grid is needed.<\/p>\r\n\r\n<h2>Modular<\/h2>\r\n\r\n<p><img src=\"media\/TypographyGridModular.png\" \/><\/p>\r\n\r\n<p>While regular grids simply draw horizontal and vertical lines, which automatically divide the page, modular grids work with <em>modules<\/em>. A module is nothing more than a rectangle that contains one type of content; there&rsquo;s no subdivision within it. By placing evenly spaced out modules of different sizes you create a varied and asymmetric grid, while automatically leaving the necessary space around elements. Overlaying multiple layers of modules can generate even more complex grids, but that often isn&rsquo;t necessary.<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise:<\/strong> Pick a simple modular grid and arrange the layout in as many ways as you can imagine. If you feel adventurous, include more variables (orientation, alignment, weight, size, colour, and so on).<\/p>\r\n\r\n<h2>Proportions<\/h2>\r\n\r\n<p>As always, it&rsquo;s best to work with a scale. In this case, that doesn&rsquo;t only mean keeping a fixed proportion for the distance between and size of text blocks, but also keeping that proportional relationship with the rest of the type. If your font size has to follow a certain scale, it&rsquo;s wise to start out with a grid following that same scale. Often, it happens to look amazing. If not, you can try some other scale or tinker with the original.<\/p>\r\n\r\n<p>This certainly doesn&rsquo;t mean, though, that you should stick to the rules always and ever. In fact, improvising and experimenting yields the best results. If you have a sudden feeling about something, try it out. First calculate the optimal settings for something, but discard them if it doesn&rsquo;t work out. The best grid is one that shows you what to do when you&rsquo;ve lost track; it hides itself to give attention to the content and aesthetics of the design, but it presents itself when structure is needed.<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise:<\/strong> Determine a small set of simple, fixed rules for yourself. Then, try to create a wide range of different visual solutions keeping yourself to those constraints.<\/p>\r\n","slur":"typography-grid","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"374","title":"[Typography] Page","post":"<p>Having a grid is great for dividing the page into different sections, but not everything works equally well. People are accustomed to a certain standard page layout and reading direction, and if you want long pieces of text to be easily read it&rsquo;s best to follow those guidelines. It&rsquo;s not that you can&rsquo;t go wild with extravagant grids, it&rsquo;s that you should reserve that for title pages and places that don&rsquo;t require long reading.<\/p>\r\n\r\n<h2>Page Dimensions<\/h2>\r\n\r\n<p>The outer dimensions of any typographic work play an important role. They define the shape of the grid, and frame the design in a very strong way. It&rsquo;s therefore recommended to not just pick a stock size or arbitrary shape for your design, but to choose page proportions that are satisfying and suitable to the message of the content.<\/p>\r\n\r\n<p>A large amount of content requires a larger page, or you&rsquo;ll be left with thousands of pages. A traditional layout requires a page that is longer than it is wide, while modern designs tend to have more horizontal shapes. A design with only square text blocks would do well with a perfectly square page. Take all of these factors into account when actively choosing your page dimensions.<\/p>\r\n\r\n<p>When it comes to books, size is crucial &ndash; stuff for serious reading should fit in our hands. Font size should be no smaller than 9 point, and no larger than 14 point. Typefaces with a very pronounced or very small x-height are not your best bet.<\/p>\r\n\r\n<h2>Margins<\/h2>\r\n\r\n<p>It&rsquo;s perfectly possible, however, that you don&rsquo;t know the exact size at which a design is going to be viewed. While you perhaps can&rsquo;t predict the maximum size (such as the size of a user&rsquo;s screen, or the size of the paper used for the final printing), you <em>do<\/em> fully control how much space you want to take up.<\/p>\r\n\r\n<p><img src=\"media\/TypographyPageMargins.png\" \/><\/p>\r\n\r\n<p>For this, we have the <em>margins<\/em>. Margins solve a multitude of problems;<\/p>\r\n\r\n<ul>\r\n\t<li>They set off text from the edges of the paper, making it more readable and giving the design more room to breathe<\/li>\r\n\t<li>They create a &ldquo;safe zone&rdquo;. If the final dimensions of the work turn out differently than expected, margins make sure none of the important information is cut off, and that the design is still intact.<\/li>\r\n\t<li>They create room for notes and other messages connected to the body text, but on a separate level in the hierarchy. This doesn&rsquo;t just mean remarks or references, this also includes things such as page numbers or displaying the current chapter you&rsquo;re reading at the top of every page.<\/li>\r\n\t<li>They balance and contrast the page by creating as much (near) empty spots as there are spots full of text or design elements.<\/li>\r\n<\/ul>\r\n\r\n<p>Actively include the margins as you design, from start to finish, and you will notice improvements in your typography. Be aware, though, that you don&rsquo;t clutter the design by putting too much in the margins. You don&rsquo;t need to fill every header, footer and aside with extra information; an interested reader knows what chapter or section he&rsquo;s at and doesn&rsquo;t need constant reminding.<\/p>\r\n\r\n<p>Additionally, you can choose to hang punctuation and ornamentation (such as quotes and drop caps) into the margin, to keep the edges of text blocks even. Sometimes it works very well, sometimes it doesn&rsquo;t, depending on the context.<\/p>\r\n\r\n<h2>Space<\/h2>\r\n\r\n<p>Besides adding space at the edges of the frame, there&rsquo;s also the necessary amount of space to add between text blocks. These so-called <em>gutters<\/em> are usually an automatic result of using a proper grid, but there&rsquo;s still some things to watch out for.<\/p>\r\n\r\n<p><img src=\"media\/TypographyPageSpace.png\" \/><\/p>\r\n\r\n<p>There are two main reasons a typographic design needs space: to set it off from other elements (to make it more readable), and to lead the user through the design. If everything&rsquo;s connected to everything, the reader doesn&rsquo;t know where to go. If you leave a lot of space between elements, you make clear that these are unrelated, while if you leave little space, elements suddenly become a group. Similarly, if you align elements along a common line in space, this line can be followed by the user.<\/p>\r\n\r\n<p>Because we read from top to bottom, text is still best set in columns that are clearly taller than they are wide, and as a result, space usually takes the form of columns as well. Columns provide a way to put a lot of information on a page, which is economical <em>and<\/em> increases comprehension of the information, while at the same time leaving ample room for space. Creating too much white space makes it impossible for the user to quickly find content or establish relationships between paragraphs, as there&rsquo;s seas of space between all elements.<\/p>\r\n\r\n<p>In short, use scales to set the proportions of your text blocks (and perhaps page dimensions), but create space freely and in abundance, first and foremost shaped as columns.<\/p>\r\n\r\n<h2>Gutenberg Diagram<\/h2>\r\n\r\n<p>The <em>Gutenberg Diagram<\/em> is an image that shows the general direction in which a reader&rsquo;s eyes scan or read a page. It&rsquo;s very useful in determining where you should place your most important content, so that it&rsquo;s the first thing users see. This diagram, however, is mostly true for design with information evenly distributed across the page. It can always be overruled if you add enough contrast or emphasis somewhere else. The diagram looks like this:<\/p>\r\n\r\n<p><img src=\"media\/TypographyGutenbergDiagram.png\" \/><\/p>\r\n\r\n<p>Western readers naturally start top left, and move across and down in a series of sweeps until they reach bottom right. Each of these sweeps begins along an axis of orientation &ndash; a horizontal line created by aligned elements &ndash; and proceeds in left-to-right direction.<\/p>\r\n\r\n<p>The fallow areas receive the least attention, unless visually emphasized. This tendency is called <em>reading gravity<\/em>, and designs that follow it often improve reading rhythm and comprehension.<\/p>\r\n","slur":"typography-page","cat":"Design","subcat":"Typography","video":"","diff":"4","quiz":""},
{"id":"375","title":"[Typography] Design Elements","post":"<p>This course has mainly talked about text blocks, which the majority of every typographic design consists of, but there are some other special design elements that require further investigation. I&rsquo;m talking about: <em>tables<\/em>, <em>lists<\/em>, <em>images<\/em>, and <em>forms<\/em>.<\/p>\r\n\r\n<h2>Tables<\/h2>\r\n\r\n<p>Tables (and Graphs) are like grids within grids. You might use a certain grid for the overall page design, but a table is too fine-grained to fit within that large grid. Instead, you have one of the hardest tasks imaginable: you need to make a large set of numbers or data interesting and understandable, while at the same time keeping the table consistent with the overall layout.<\/p>\r\n\r\n<p>Luckily, I have some guidelines for you:<\/p>\r\n\r\n<ul>\r\n\t<li>Always set all text horizontal.<\/li>\r\n\t<li>Letterforms that are too small or condensed may <em>not<\/em> be used to save space<\/li>\r\n\t<li>A minimum amount of &ldquo;furniture&rdquo; &ndash; such as rules, boxes, and dots &ndash; should be used. This allows for a maximum amount of information, and makes it easier to establish relationships between data.<\/li>\r\n\t<li>Rules, tint blocks, or other guides and dividers, if you deem it necessary to use them, should run in the reading direction. Vertically, in the case of lists, indices, or numerical tables; horizontally otherwise.<\/li>\r\n\t<li>A rule located at the edge of a table (either top\/bottom, or left\/right side) serves no function.<\/li>\r\n\t<li>Leave enough white space.<\/li>\r\n\t<li>As expected, use <em>tabular figures<\/em>, and align columns. For figures, flush right alignment or on the decimal is usually best.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/TypographyElementsTable.png\" \/><\/p>\r\n\r\n<p>NOTE: <strong>Type Error:<\/strong> Prevent <em>data prisons<\/em>; don&rsquo;t overemphasize the grid of the table, don&rsquo;t lock data inside a box with thick borders.<\/p>\r\n\r\n<p>NOTE: <strong>Type Exercise:<\/strong> Find a poorly designed chart or table from an old text-book, and redesign it.<\/p>\r\n\r\n<h2>Lists<\/h2>\r\n\r\n<p>Lists are meant to stand out from the rest of the text, and sum up lots of items in a short and quick manner. For this, using the standard bullet (unordered lists) or numbers (ordered lists) are still the best way to go. Alternatives to the bullet are squares or arrows, as long as you keep them small &ndash; they should be big enough to be noticeable, but no bigger.<\/p>\r\n\r\n<p>Lists, by default, are indented from the left in most software. Some people recommend hanging the bullets in the margin instead, but that should only be done if you have other means to make the list stand out from the rest of the body text. Additionally, don&rsquo;t leave too much space between list items, or they will be perceived as separate paragraphs, instead of items from a list. And lastly, avoid over-punctuating your lists; they should be short and sweet.<\/p>\r\n\r\n<p><img src=\"media\/TypographyElementsLists.png\" \/><\/p>\r\n\r\n<h2>Images<\/h2>\r\n\r\n<p>Images have already (partly) been discussed, but here&rsquo;s a list of the rules again:<\/p>\r\n\r\n<ul>\r\n\t<li>Avoid placing text over images; let text and images stand in their own right.<\/li>\r\n\t<li>If you can&rsquo;t or don&rsquo;t want to do so, make sure the text remains legible, and the image discernible.<\/li>\r\n\t<li>To keep text legible, you can lower the contrast of the image (by placing a coloured, partly transparent box over it), or set off the text by putting it on top such a transparent box.<\/li>\r\n\t<li>To keep the image visible, make it lighter\/darker to create more contrast with the text, or use a gradient. This gradient starts at the place where the text block is positioned, but disappears at places where no text is present.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/TypographyElementsImage.png\" \/><\/p>\r\n\r\n<p>Either way, avoid <em>textured type<\/em> &ndash; putting&nbsp; an image on top of text &ndash; as much as you can.<\/p>\r\n\r\n<h2>Forms<\/h2>\r\n\r\n<p>The idea behind forms is that they ask a user for input, and expect the user to put exactly the right information at the right spit. To accomplish this, people tend to put boxes and vertical lines around everything. Don&rsquo;t. Remove them, and use space to separate elements on the page. Use horizontal lines to accentuate areas of the page; rather <em>above<\/em> a heading to signal a new section, than underneath it (as is the default for most people).<\/p>\r\n\r\n<p><img src=\"media\/TypographyElementsForm.png\" \/><\/p>\r\n\r\n<h2>Websites<\/h2>\r\n\r\n<p>It used to be common practice to misuse tables on the web to create layouts that adapt to different screen sizes. Nowadays, luckily, most people know how bad that is. Not only does it add extra overload and unnecessary problems to a site, it also corrupts the structure; browsers expect what&rsquo;s inside a table to be data, not a complete website. In the same sense, websites made entirely in Flash should be eliminated. Of course, Flash has some advantages such as animation or making a game out of your website, but most of this has been taken over by CSS and JavaScript (and other web libraries). If you do create a Flash website, make sure the text inside it is easily accessible somewhere.<\/p>\r\n\r\n<p>Webpages also require more contrast, and columns of smaller line-width than usual; more than 70 characters becomes tiring. Screens are becoming good enough to use serif fonts for the body copy, but mixing it with sans serif still remains the wise choice.<\/p>\r\n\r\n<p>Colour is free on the web, so use it. Instead of full white or black, however, it&rsquo;s often better to use light or dark greys. Colour is a good way to increase the contrast without meddling with other typographic choices, but should not be your only visual cue.<\/p>\r\n\r\n<p>And last of all, <em>symbol fonts<\/em> are very effective. By linking information to a symbol, you make a design more interesting, while at the same time conveying lots of information in little space. It also works across different languages and cultures.<\/p>\r\n","slur":"typography-design-elements","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"376","title":"[Typography] Editing & Proofreading","post":"<p>The last stage of the design process is checking and rechecking everything; both design decisions as well as the actual textual content. You shouldn&rsquo;t find major problems in this stage (if you do, go back to the start), but instead fix grammatical, spelling and punctuation errors. There&rsquo;s not really a performance difference between accurately reading text in print (<em>hard copy<\/em>) or on a screen (<em>soft copy<\/em>), so whatever process you choose is up to you.<\/p>\r\n\r\n<p>Before we begin: the term <em>proofreading<\/em> comes from the fact that, before final printing begins, multiple test copies called <em>proofs<\/em> are made. This is, of course, only applicable to when something has a final form; websites, for example, are dynamic and ever-changing, and will probably need constant updating.<\/p>\r\n\r\n<h2>General Advice<\/h2>\r\n\r\n<ul>\r\n\t<li>Let other people check your text; they will spot errors and mistakes much easier.<\/li>\r\n\t<li>Don&rsquo;t over-format your text. As you&rsquo;re writing, you shouldn&rsquo;t think about the typography, but only the text itself. This is especially true for authors, as the final design of their books is usually not chosen by themselves, and depends on the length and structure of the final text.<\/li>\r\n\t<li>Don&rsquo;t wait for proofs to examine the text. Read the content, and whenever you spot an error and think you&rsquo;ve found an inconsistency, immediately change it or at least keep a list of possible errors at all times.<\/li>\r\n\t<li>As you proofread and edit a text, don&rsquo;t obfuscate the original text, and don&rsquo;t just put down a red cross mark. Let the original text stay visible, and state what exactly is wrong.<\/li>\r\n<\/ul>\r\n\r\n<h2>Soft Copy<\/h2>\r\n\r\n<p>Editing soft copy is quick, as you can immediately change things within the editor. On the other hand, however, you must scrupulously remove all the edits before final production begins. You&rsquo;re also more limited in your choices for editing; you can&rsquo;t write on the page as you can with hard copy.<\/p>\r\n\r\n<p>Typographic styles (such as <em>italic<\/em>, <strong>bold<\/strong> or <span style=\"font-variant:small-caps;\">small caps<\/span> can be changed directly, just as converting hyphens to dashes, or <em>dumb quotes<\/em> (straight quotes) to <em>smart quotes<\/em> (curly quotes). When it comes to changes in the text itself, though, the editor needs to communicate with the author. The following notation is common:<\/p>\r\n\r\n<ul>\r\n\t<li>Words to be removed are <s>struck out<\/s><\/li>\r\n\t<li>Words to be added or substituted are <u>underlined<\/u>, <span style=\"background-color:yellow\">highlighted<\/span>, or <span style=\"color:red\">coloured<\/span>.<\/li>\r\n\t<li>Comments to the author are [set within brackets]<\/li>\r\n\t<li>When it comes to punctuation, strike out the entire word instead of just the punctuation, as underlining punctuation is messy.<\/li>\r\n<\/ul>\r\n\r\n<h2>Hard Copy<\/h2>\r\n\r\n<p>The image below shows easy ways to show what&rsquo;s wrong within the text, as well as marks to add in the margin to make clear what exactly should be done.<\/p>\r\n\r\n<p><img src=\"media\/TypographyEditingHardCopy.png\" \/><\/p>\r\n","slur":"typography-editing-proofreading","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"377","title":"[Typography] The Design Process","post":"<p>This course has discussed the design process from start to finish; from a blank page and lots of text, to a finished typographic design. We&rsquo;ve looked at everything in great detail, which might make you lose sight on the bigger picture. In this chapter I want to lay out a step-by-step plan for designs, to sum up everything that has been discussed. Of course, you&rsquo;re not required to strictly follow the plan and can do steps in a different order or to a different extent whenever you feel like it.<\/p>\r\n\r\n<h2>The Plan<\/h2>\r\n\r\n<ol>\r\n\t<li><strong>Look to the Past:<\/strong> Look at existing typographic designs and fonts that you like. If you can find out what is so good about a design, or why it is able to stand the test of time, you can transfer those elements to your own design. Don&rsquo;t directly copy other people&rsquo;s work; but be inspired, and always look at the history of typefaces and layouts for ideas.<\/li>\r\n\t<li><strong>Body Text: <\/strong>Most of your project will be body text. Start with it, and most other elements will fall into place. Body text requires a careful look at the <em>font<\/em>, <em>point size<\/em>,<em> measure<\/em>, and <em>leading<\/em>.<\/li>\r\n\t<li><strong>Create Hierarchy: <\/strong>Establish the hierarchy of your design. If you&rsquo;re stuck, it&rsquo;s often wise to start with a general distinction between <em>foreground<\/em> and <em>background<\/em>. The foreground contains the most important elements that need attention (such as body text), while the background contains everything else that doesn&rsquo;t require immediate attention (it&rsquo;s not necessarily empty). First try to establish hierarchy with only one typeface and a limited amount of tools, only include more typefaces or visual cues if all else fails. If you do so, at least make sure the <em>x-heights<\/em> align.<\/li>\r\n\t<li><strong>Use (White) Space: <\/strong>Let the white space flow through the design. Leave large amounts of blank space to bring more attention to the really important parts. Don&rsquo;t clutter the page, don&rsquo;t make things too large or spread out. Work outward from the (body) text, not inward from the page edges. Use grids, margins and gutters to your advantage.<\/li>\r\n\t<li><strong>Connect the Elements: <\/strong>Every element within the design should be there for a reason; it needs to have a relationship with the rest. Show this relationship in the way you typeset every element, and don&rsquo;t let anything hang loose. An incoherent design is never good.<\/li>\r\n\t<li><strong>Be Consistent:<\/strong> Elements with a different meaning should always look different. Elements that are very similar should always look (nearly) the same. Whatever style you choose to apply, be consistent and don&rsquo;t arbitrarily switch between styles. If you&rsquo;ve decided on a set of style rules for the body text, transfer the majority of those to other text blocks.<\/li>\r\n\t<li><strong>Keep it Simple: <\/strong>Don&rsquo;t use more than three fonts, don&rsquo;t use more than five colours in a palette, don&rsquo;t place information on every page that could just as well have been stated only once. Highlighting nearly every word destroys the effect of highlighting, while making everything big, bold and beautiful destroys the effects of contrast and balance. Before you add anything, think about whether it&rsquo;s really necessary.<\/li>\r\n\t<li><strong>Make Small Adjustments:<\/strong> Placing the bulk of the matter is easy with some knowledge about typography and usage of a grid. The secret to success, however, is in the fine-tuning. Don&rsquo;t make changes in steps that are too large; you might miss the sweet spot. In most cases, the difference between not enough and too much is naught.<\/li>\r\n\t<li><strong>Experiment: <\/strong>Logical and calculated decisions can kickstart your design and help you when you&rsquo;re stuck. You can never completely predict how something will look, though, and experimenting will add just that little bit extra to any design. Maybe you find an amazing new way to separate paragraphs, maybe you find the perfect but weird solution to a problem you were having. Don&rsquo;t be afraid to try things out; you can always undo it.<\/li>\r\n<\/ol>\r\n","slur":"typography-design-process","cat":"Design","subcat":"Typography","video":"","diff":"3","quiz":""},
{"id":"378","title":"[Typography] Tips & Tricks","post":"<p>I tried my best, but some advice just couldn&rsquo;t be placed anywhere without seeming out of place or making things unnecessarily complicated. This chapter will provide you with a list of leftover guidelines, rules and tips.<\/p>\r\n\r\n<ul>\r\n\t<li>Garamond is one of the best fonts for usage in print. For web, however, one of the best (neutral) serif alternatives is Georgia.<\/li>\r\n\t<li>Type cannot be disconnected from material nor language. Some languages require different symbols, or the more frequent use of certain letters or diacritics, and you must account for that. On the other hand, for example, if the type is going to be carved into wood, a different font should be used than when it&rsquo;s simply displayed on screen.<\/li>\r\n\t<li>Dark text on a light background needs to be thicker. Light text on a dark background needs to be thinner. Therefore, when a text is back-lit or &ldquo;glowing&rdquo;, such as is the case with airport signs, the type needs to be thinner to stay legible.<\/li>\r\n\t<li>Avoid confusion about characters. When picking a font, pick one where each character has clear, distinct features. An example is the huge similarity between the lowercase letter L and I.<\/li>\r\n\t<li>Since the invention of printing (15<sup>th<\/sup> century), the alphabet (and some typographic practices) haven&rsquo;t changed much. It&rsquo;s therefore reasonable to expect it won&rsquo;t change much in the future; so look to the past for inspiration.<\/li>\r\n\t<li>We read best what we read most. People have been told that roman fonts are the most legible, but if every book would have been set in proper italics, that would be fine as well. This is even true with badly designed typography. Therefore, sometimes, it&rsquo;s best to break the rules to account for user behaviour or expectations.<\/li>\r\n\t<li>When testing a font, the word <em>Handgloves<\/em> contains enough information about a font and its letterforms for you to decide if you want to use it.<\/li>\r\n\t<li>Some words just naturally sound better or look nicer than others, and some are just scarier or more boring. Keep in mind the meaning and natural form of words; facts or numbers may need some extra emphasis to come across, while already strong words may need less emphasis to keep the balance.<\/li>\r\n\t<li>Dark emotions call for a black typeface with sharp edges; pleasant feelings are best evoked by informal, light characters. Or not. Context matters a lot.<\/li>\r\n\t<li>For printed text, 9 to 12 point body text is optimal. Smaller sizes are acceptable for captions and notes. Larger type should be reserved for low-resolution displays or more senior audiences.<\/li>\r\n\t<li>Dark text on a light background, or vice versa, still works best. Coloured text on coloured backgrounds must be executed with caution. Performance is optimal when the contrast levels exceed 70 percent, which is another reason to avoid heavily textured backgrounds.<\/li>\r\n\t<li>Whatever typographic genius you come up with, don&rsquo;t let it turn into a gimmick. When one master design is used to fit all sizes and content, subtleties are lost. &ldquo;Jack of all trades, master of none.&rdquo;<\/li>\r\n\t<li>Be aware of the situation people will read your design in. A how-to manual or cookbook are read in situations that are often less than ideal. Text along the highway will have to be read from great distance and with great speed (without compromising driver safety, of course).<\/li>\r\n\t<li>When going for an advertisement, or something like it, use no more than eight elements, and arrange it in a predictable layout. You don&rsquo;t want your ad to be ignored, or read without people realizing it&rsquo;s an ad.<\/li>\r\n\t<li>Make the bulk of the matter fit, and only then go back to the exceptions or extremes and work them out one by one. If you don&rsquo;t work this way, your design will only handle a few exceptions well, but fail overall.<\/li>\r\n\t<li>Sometimes, however, design needs to fail. By doing something odd or unusual, you direct attention towards the text which might otherwise be missed.<\/li>\r\n\t<li>When looking for inspiration, lots of typographers use their own handwriting.<\/li>\r\n\t<li>There is no such thing as bad type. There&rsquo;s only type suited for particular purposes, and perhaps not for others.<\/li>\r\n\t<li>In a single surface packed with well-organized information is often better than multiple pages with gigantic amounts of white space. Typography is just as urban life; density invites intimate exchange among people and ideas.<\/li>\r\n\t<li>Combining a very traditional layout with a not-so-traditional (though not too silly) typeface often has a wonderfully surprising effect.<\/li>\r\n\t<li>Sans serif x-heights tend to be larger in relationships to their cap heights than serifs. This means sans serif typefaces can often be read at very small sizes, as opposed to serif typefaces.<\/li>\r\n\t<li>Read the text before designing it, and use typography to honour this content. In general, typography needs to do the following things: invite the reader into the text, reveal the meaning and message, clarify the structure and order, link it with the other design elements, and create an energetic response.<\/li>\r\n\t<li>Check the license of fonts. Some fonts may not be used on the web, some may only be used in non-commercial projects, some may only be used by a restricted amount of users, and so on. Not all fonts you find for free are actually free.<\/li>\r\n\t<li>Typography should be very <em>ordinary<\/em>, so that attention is drawn to the quality of the composition. No aspect should stand out; leading, measure, letterforms, space, everything should harmoniously work together.<\/li>\r\n\t<li>Be aware of typographic expectations. Fresh produce always seems to want a handwritten sort of message, while high-tech applications seem to demand a cool, technocratic look. Warm and cuddly products work well with a soft serif, while grainy whole foods are often represented by a handmade, rough typeface, and serious business want to relive the era of copperplate engraving.<\/li>\r\n\t<li>Good typography has a rhythm, just like music.<\/li>\r\n<\/ul>\r\n\r\n<h2>Digital Typography<\/h2>\r\n\r\n<img src=\"media\/TypographyDigitalHinting.png\" \/>\r\n\r\n<p>I want to remind you here that the typographic principles I&rsquo;ve discussed, and that have governed print for the last decennia, work across all types of media &ndash; even screen. The only thing to be aware of, is that screens consist of pixels, which means the letters you see are actually tiny square blocks put together to give you the illusion of smooth curves. Certain algorithms, such as <em>hinting<\/em> and <em>anti-aliasing<\/em>, are often automatically performed on text displayed on screen. You actually don&rsquo;t have much control over this &ndash; in some rare cases you can choose to turn them off, but it&rsquo;s best to leave them on, as they make the curves of fonts appear smooth. Be aware, though, that for this reason type on screen may differ from the final print or different screen resolutions. Design for both low- and high end technology, and follow the work to the printer.<\/p>\r\n","slur":"typography-tips-tricks","cat":"Design","subcat":"Typography","video":"","diff":"4","quiz":""},
{"id":"379","title":"[Typography] Conclusion: what now?","post":"<p>I hope you enjoyed this course, and that it gave insight into the magical world of typography, although it turns out to be not so complex or arbitrary after all. With the tools and ideas I&rsquo;ve given to you, I hope you&rsquo;re able to start your next design confidently and pick the most awesome fonts and parameters.<\/p>\r\n\r\n<p>As to the question <em>what should I do now?<\/em> I can only say: experiment and start designing! There&rsquo;s no advanced typography or specific secrets to uncover here, it&rsquo;s up to you now to apply the principles for a good cause. Have fun!<\/p>\r\n","slur":"typography-conclusion","cat":"Design","subcat":"Typography","video":"","diff":"4","quiz":""},
{"id":"380","title":"The Guide to SASS","post":"<p>With CSS you can already do amazing things, but some crucial features are missing. Have you ever typed the same values for something ten times in a row, and wished you could have just saved it once in a variable? Have you ever wished you could take an existing value and dynamically add 10 pixels to it? Well, all of that (and more) can be done with <strong>SASS<\/strong>.<\/p>\r\n\r\n<p>SASS stands for <em>Syntactically Awesome Style Sheets<\/em>, and it&rsquo;s a so-called<em> CSS pre-processor<\/em>. This simply means that you can write something in SASS-syntax, and then <em>compile <\/em>or output the file to regular CSS. This way, you can use very powerful variables and extra functions that SASS provides while you&rsquo;re editing the stylesheet &ndash; simplifying your life. Additionally, you can choose how to compile the stylesheet to save space and bandwidth.<\/p>\r\n\r\n<p><img src=\"media\/SASSWorkflowOverview.png\" \/><\/p>\r\n\r\n<p>So, unless you&rsquo;re a beginner and don&rsquo;t know anything about CSS yet, there&rsquo;s no reason <em>not<\/em> to learn SASS! It will make your life easier. And more fun. I promise. I really do.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Installation<\/li>\r\n\t<li>Compiling<\/li>\r\n\t<li>Variables<\/li>\r\n\t<li>Mixins<\/li>\r\n\t<li>Operators<\/li>\r\n\t<li>Import &amp; Extend<\/li>\r\n\t<li>Nesting<\/li>\r\n\t<li>Functions<\/li>\r\n\t<li>Control Flow<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"guide-to-sass","cat":"Website","subcat":"SASS","video":"","diff":"1","quiz":""},
{"id":"381","title":"[SASS] Installation","post":"<p>To be able to use SASS, unlike CSS, we need to install it on the computer. Don&rsquo;t worry; the package is very small and easy to install. The installation, however, works via something called <em>gems<\/em>, which is a cool feature of the <em>Ruby<\/em> language. So, what do we do? We install Ruby, then we install SASS.<\/p>\r\n\r\n<h2>Installing Ruby<\/h2>\r\n\r\n<p>How the Ruby installation works depends on your operating system.<\/p>\r\n\r\n<h3>Linux<\/h3>\r\n\r\n<p>Linux installs Ruby (and lots of other things) through package management systems. The Ruby website has an excellent page explaining how to do so for every Linux system; <a href=\"https:\/\/www.ruby-lang.org\/en\/documentation\/installation\/#package-management-systems\">Ruby Installation<\/a><\/p>\r\n\r\n<h3>Mac<\/h3>\r\n\r\n<p>Yay, Ruby is installed on Macintosh computers by default! You can skip to the next step.<\/p>\r\n\r\n<h3>Windows<\/h3>\r\n\r\n<p>For Windows, you need to download the <a href=\"http:\/\/rubyinstaller.org\">Ruby Installer<\/a>, and then simply run it and perform a few clicks.<\/p>\r\n\r\n<p>Make sure the option <em>Add Ruby executables to your PATH<\/em> is checked.<\/p>\r\n\r\n<h3>Check if it Worked<\/h3>\r\n\r\n<p>To really make sure installation was successful, open the command line tool on your system. This is (probably) <em>Command Prompt<\/em> for Windows, <em>Terminal<\/em> for Mac, and <em>Bash<\/em> for Linux. Then type<\/p>\r\n\r\n<pre data-lang=\"ruby\">ruby &ndash;v<\/pre>\r\n\r\n<p>And it should return your current Ruby version.<\/p>\r\n\r\n<h2>Installing Sass<\/h2>\r\n\r\n<p>Now, with Ruby installed, getting SASS is quick and the same line across all systems. Again, in your command line tool, type<\/p>\r\n\r\n<pre data-lang=\"ruby\">gem install sass<\/pre>\r\n\r\n<p>It should show you the steps it&rsquo;s taking (downloading, installing, parsing, &hellip;) and say something like &ldquo;<em>1 gem installed<\/em>&rdquo; when finished. If it fails, you will need to use<\/p>\r\n\r\n<pre data-lang=\"ruby\">sudo gem install sass<\/pre>\r\n\r\n<p>All this does is access the command line as an administrator of your system, which gives you more rights for installing and modifying the system. That&rsquo;s it! You can check if installation was successful by typing<\/p>\r\n\r\n<pre data-lang=\"ruby\">sass -v<\/pre>\r\n\r\n<p>Again, it should return he the current version of SASS.<\/p>\r\n","slur":"sass-installation","cat":"Website","subcat":"SASS","video":"","diff":"1","quiz":""},
{"id":"382","title":"[SASS] Compiling","post":"<p>Just as CSS, you can write SASS code in any regular text editor. (You can also write it in fancy expensive text editors, don&rsquo;t worry.) What&rsquo;s really important to understand, are two things:&nbsp; the <em>file formats<\/em> and <em>how to compile<\/em>.<\/p>\r\n\r\n<h2>File Formats<\/h2>\r\n\r\n<p>In the early days of SASS, files &ndash; not surprisingly &ndash; carried the extension <code>.sass<\/code>. While cool, it had to change when the language changed a lot and became bigger and better.<\/p>\r\n\r\n<p>Nowadays, files that contain SASS code carry the extension <code>.scss<\/code><\/p>\r\n\r\n<p>So, all you need to do is create a text file, and change the extension. You can do this in the default text editor of your system, or you can use a text editor made specifically for CSS and all its brothers and sisters. (There are more pre-processing languages, but they are smaller and more specific than SASS.)<\/p>\r\n\r\n<h2>Compiling<\/h2>\r\n\r\n<p>Compilation can be done through the command line tool, or by using software.<\/p>\r\n\r\n<h3>Command Line<\/h3>\r\n\r\n<p>If you only want to compile a file once, use:<\/p>\r\n\r\n<pre data-lang=\"ruby\">sass inputfile.scss outputfile.css<\/pre>\r\n\r\n<p>But, as it so often happens, you&rsquo;re probably making continuous small changes to the stylesheet and want some files to compile automatically. For that, we can <em>watch<\/em> a file or folder for changes, and if a file is saved with changes, our computer will automatically compile it.<\/p>\r\n\r\n<p>To watch a single file, use<\/p>\r\n\r\n<pre data-lang=\"ruby\">sass --watch inputfile.scss:outputfile.css<\/pre>\r\n\r\n<p>To watch all the files within a folder, use<\/p>\r\n\r\n<pre data-lang=\"ruby\">sass --watch inputfolder:outputfolder<\/pre>\r\n\r\n<p>NOTE: You need to keep the command line tool open to keep watching. It will probably tell you that.<\/p>\r\n\r\n<p>If you&rsquo;re unfamiliar with the command line tool, this might be hard to understand. In the code above, I assume you&rsquo;ve navigated your command line tool to the directory that contains your SASS files or folders.<\/p>\r\n\r\n<p>If you haven&rsquo;t, or don&rsquo;t know how to do that, you can use <em>absolute paths<\/em>, such as<\/p>\r\n\r\n<pre data-lang=\"ruby\">C:\\Users\\yourusername\\somefolder\\somesassfile.scss<\/pre>\r\n\r\n<h3>Software<\/h3>\r\n\r\n<p>I personally like the free and open source <a href=\"http:\/\/koala-app.com\">Koala<\/a>, but the paid <a href=\"http:\/\/incident57.com\/codekit\/\">CodeKit<\/a> and <a href=\"http:\/\/compass.handlino.com\">Compass.app<\/a> are also popular and contain more features. Compiling with software usually amounts to selecting the file, and clicking <em>compile<\/em> somewhere.<\/p>\r\n\r\n<h2>Compilation Options<\/h2>\r\n\r\n<p>There are four styles to use for compilation: <em>expanded<\/em>, <em>nested<\/em>,<em> compact<\/em>, and <em>compressed<\/em>. The second one is selected by default. To override the current compilation settings on a file, use<\/p>\r\n\r\n<pre data-lang=\"ruby\">\r\nsass --update somefile.scss --style expanded\r\nsass --update somefile.scss --style nested\r\nsass --update somefile.scss --style compact\r\nsass --update somefile.scss --style compressed<\/pre>\r\n\r\n<p>These compilation styles go from large to small. The expanded style gives all properties and selectors their own lines and indents them properly, while the compressed style places everything immediately behind each other. The first one&rsquo;s easier to read, understand and work with, while the last one&rsquo;s small and fastest to load.<\/p>\r\n\r\n<img src=\"media\/SASSCompilationOptions.png\" \/>\r\n\r\n<p>So, I suggest you use one of the first two when developing, testing, and checking if everything works as expected. I suggest you use one of the last two when deploying to an actual live website.<\/p>\r\n","slur":"sass-compiling","cat":"Website","subcat":"SASS","video":"","diff":"2","quiz":""},
{"id":"383","title":"[SASS] Variables","post":"<p>Perhaps the greatest advantage of using SASS, is being able to use <em>variables<\/em>. Instead of copying or retyping similar or exactly the same bits of code, we can save it inside a variable name once, and use that. To declare a variable, use the following dollar syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">$some-variable-name: <em>value<\/em>;<\/code>\r\n\r\n<p>A variable can be one of six different types:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>String<\/strong>: Any piece of text. Usually enclosed within quotes, but not necessary.<\/li>\r\n\t<li><strong>Number<\/strong>: Any number (with and without unit).<\/li>\r\n\t<li><strong>Colour<\/strong>: Any colour.<\/li>\r\n\t<li><strong>Boolean<\/strong>: Either <em>true<\/em> or <em>false.<\/em><\/li>\r\n\t<li><strong>List<\/strong>: A list of properties of varying types. This can be a spaced list, or one with commas.<\/li>\r\n\t<li><strong>Maps<\/strong>: A mapping of values to other values.<\/li>\r\n\t<li><strong>Null<\/strong><\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"scss\">\r\n$a-cool-string: \"Juan is a cool guy\";\r\n$a-number: 350;\r\n$some-colour: #FFAA22;\r\n$boolean: true;\r\n$a-fancy-list: 5px solid grey;\r\n$an-intricate-map: (text: green, header: red, remark: grey);\r\n$null-variable: null;\r\n<\/pre>\r\n\r\n<p>NOTE: As you can see, maps are created with a syntax that is quite peculiar for CSS. The general form is <code>(key1: value1, key2: value2, &hellip;)<\/code>. Nevertheless, maps can be extremely useful sometimes.<\/p>\r\n\r\n<p>When you use a variable, it just inserts the literal value of that variable into the CSS code. This makes it very easy and intuitive to use, and allows for great flexibility. I suggest you put anything that is likely to be used more than once inside a variable.<\/p>\r\n\r\n<p>I also suggest giving the variables descriptive names, and working with scales. For example, <code>$font-stack-body<\/code> and <code>$font-stack-headers<\/code>, is better than <code>$font-stack-one<\/code> and <code>$font-stack-two<\/code><\/p>\r\n\r\n<p>The naming convention is to place dashes between words, just as regular CSS does with its properties. This is, however, not necessary if you prefer your own methods.<\/p>\r\n\r\n<h2>Variables in Selectors<\/h2>\r\n\r\n<p>Variables are typically used to insert a value somewhere, but we can also use them in selectors or property names. To do so, we need to wrap the variable name inside the <em>interpolation syntax<\/em>. Sounds difficult, but it simply looks like<\/p>\r\n\r\n<code class=\"longsyntax\">#{$some-variable-name}<\/code>\r\n\r\n<pre data-lang=\"scss\">\r\np.#{someclassname} {\r\n\tfont-size: $paragraph-size;\r\n\tcolor: $paragraph-colour;\r\n}\r\n<\/pre>\r\n","slur":"sass-variables","cat":"Website","subcat":"SASS","video":"","diff":"2","quiz":""},
{"id":"384","title":"[SASS] Mixins","post":"<p>We&rsquo;ve seen how to store values and lists of values, but what if we want to store a bunch of declarations? That&rsquo;s when we use <em>mixins<\/em>.<\/p>\r\n\r\n<p>To create a mixin, we need to make up a name and determine the variables it will use. Then, we use the following syntax<\/p>\r\n\r\n<code class=\"longsyntax\">@mixin some-function-name(variable<sub>1<\/sub>, &hellip;, variable<sub>n<\/sub>) {\r\n\t<em>declarations<\/em>\r\n}<\/code>\r\n\r\n<p>Now we&rsquo;ve created our mixin, but how do we use it? For this, we need to <em>include<\/em> it somewhere with the following syntax<\/p>\r\n\r\n<code class=\"longsyntax\">@include some-function-name(value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>);<\/code>\r\n\r\n<pre data-lang=\"scss\">\r\n@mixin set-border-radius($radius) {\r\n\tborder-top-left-radius:$radius;\r\n\tborder-top-right-radius:$radius;\r\n\tborder-bottom-left-radius:$radius;\r\n}\r\n\r\n\/\/Now paragraphs have border radius of 10px on all corners, except bottom right\r\np {\r\n\t@include set-border-radius(10px);\r\n}\r\n<\/pre>\r\n\r\n<p>As you can see, not only can you easily copy the same set of declarations around, you can also change the parameters every time you include it. If you know you&rsquo;re going to use the same parameters every time, you can of course ditch the variables and just use fixed values within the mixin.<\/p>\r\n\r\n<p>Mixins are especially useful when working with vendor-prefixes. Instead of retyping the same property for all browsers, just put it inside a mixin.<\/p>\r\n","slur":"sass-mixins","cat":"Website","subcat":"SASS","video":"","diff":"3","quiz":""},
{"id":"385","title":"[SASS] Operators","post":"<p>Now that we know how to save values and declarations, wouldn&rsquo;t it be nice if we could make those values dynamic? For example, instead of setting something to a fixed number, we could let SASS calculate the number (based on other variables) when it compiles.<\/p>\r\n\r\n<p>To do so, we can use the standard math operators: <code>+<\/code>, <code>-<\/code>, <code>*<\/code>, <code>\/<\/code>, <code>%<\/code><\/p>\r\n\r\n<p>We can use numerical variables, as well as regular numbers, to perform those mathematical operations.&nbsp; What&rsquo;s also important to notice, is that SASS can convert between several different units. If you use a number without unit, it will automatically take on the value of the other units. If you multiply the value by percentages, it will turn into a percentage.<\/p>\r\n\r\n<p>Additionally, we can concatenate strings with the plus symbol, and add colours together. Adding colours goes piecewise; it adds the Red, Green, and Blue channel separately.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\nh2 {\r\n\tfont-size:$font-size-h1 \/ 1.618px;\r\n\tcolor: #FFAA22 + #0055DD; \/\/#FFFFFF\r\n}\r\n\r\n#main {\r\n\twidth: 800px \/ 1200px * 100%; \/\/66.667%\r\n}\r\n\r\n#sidebar {\r\n\twidth: 400px \/ 1200px * 100%; \/\/33.333%\r\n}\r\n<\/pre>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>Besides the default multiline CSS comments (created with <code>\/* *\/<\/code>), SASS also supports single line comments. These are created with the standard double slash, <code>\/\/<\/code>, and are removed from the file when compiled.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n\/* I AM \r\n   A\r\n   MULTILINE\r\n   COMMENT \r\n*\/\r\n\r\n\/\/ I'm a single line comment\r\n<\/pre>\r\n\r\n<h2>Shorthand Properties<\/h2>\r\n\r\n<p>Within CSS, some shorthand properties exist that already use the slash. When SASS encounters two fixed values with a slash between them (and no space), it will assume you want to use the shorthand property and doesn&rsquo;t apply division. In all other cases, such as with variables, SASS performs division.<\/p>\r\n\r\n<p>So, if you want to divide fixed values, leave spaces around the slash. But, if you want to use the shorthand property with variables, use the interpolation syntax.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\nfont-size: 12px\/18px; \/\/Interpreted by regular CSS as 12px font size, 18px line height\r\nfont-size: 12px \/ 18px; \/\/Calculated by SASS\r\nfont-size: $some-var\/$another-var; \/\/Calculated by SASS\r\nfont-size: #{$some-var}\/#{$another-var}; \/\/Shorthand again\r\n<\/pre>\r\n\r\n<h2>Parentheses<\/h2>\r\n\r\n<p>Lastly, you can force SASS to perform division, and to group numbers together, by placing parentheses around it. Additionally, this can be used to make sure a negation operator is associated with the corresponding number.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\nfont-size: 20px - (5px + 5px); \/\/10px\r\nfont-size: 20px (-5px) + 5px; \/\/Error\r\nfont-size: 20px - 5px + 5px; \/\/20px\r\n<\/pre>\r\n","slur":"sass-operators","cat":"Website","subcat":"SASS","video":"","diff":"3","quiz":""},
{"id":"386","title":"[SASS] Nesting","post":"<p>One of the reasons HTML is so simple and easy to use, is its clear nesting structure &ndash; which CSS unfortunately lacks. Again, SASS comes to the rescue!<\/p>\r\n\r\n<p>We can nest selectors inside other selectors, simply by placing them within each other. This way we can create styles for different elements within the same parent element, without having to retype the path to the parent every time.<\/p>\r\n\r\n<code class=\"longsyntax\">selector {\r\n\totherselector {\r\n\t\t<em>styles<\/em>\r\n\t}\r\n\r\n\tanotherselector {\r\n\t\t<em>styles<\/em>\r\n\t}\r\n\r\n\t<em>general styles<\/em>\r\n}<\/code>\r\n\r\n<pre data-lang=\"scss\">\r\n#nav {\r\n\ta {\r\n\t\tbackground-color: lightblue;\r\n\t}\r\n\r\n\tbackground-color: blue;\r\n}\r\n\r\n\/*** OUTPUTS TO ***\/\r\n#nav {\r\n\tbackground-color: blue;\r\n}\r\n\r\n#nav a {\r\n\tbackground-color: lightblue;\r\n}\r\n<\/pre>\r\n\r\n<p>Be aware, though, that overly nested rules create overqualified CSS, unnecessarily increasing file size and complexity. If you don&rsquo;t necessarily need to specify something in a selector, by all means, leave it out. Keep things simple, keep things short.<\/p>\r\n\r\n<h2>Parents<\/h2>\r\n\r\n<p>Sometimes when you&rsquo;re nested, you want to access your parent. For example, if you want to add pseudo-elements or pseudo-classes. This is done with the <code>&amp;<\/code> symbol.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n#nav {\r\n\t\/\/Executed when user hovers over #nav element\r\n\t&:hover {\r\n\t\tbackground-color: lightblue;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<h2>Media Queries<\/h2>\r\n\r\n<p>Media queries work exactly like in regular CSS, but with SASS you can also nest them inside other selectors. This way, you can put media queries close to the element they belong to, and make them more specific.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n#nav {\r\n\twidth:600px;\r\n\tmargin:auto;\r\n\r\n\t\/\/Special styles for #nav for certain maximum screen size\r\n\t@media screen and (max-width:600px) {\r\n\t\twidth:100%;\r\n\t\tmargin:0;\r\n\t}\r\n}\r\n<\/pre>\r\n","slur":"sass-nesting","cat":"Website","subcat":"SASS","video":"","diff":"3","quiz":""},
{"id":"387","title":"[SASS] Import & Extend","post":"<p>With mixins, we&rsquo;ve seen how to save a set of declarations in a function with parameters. However, if you don&rsquo;t require parameters, there&rsquo;s an easier way. You can copy <em>all<\/em> the declarations from inside another selector to somewhere else by using<\/p>\r\n\r\n<code class=\"longsyntax\">@extend selector;<\/code>\r\n\r\n<pre data-lang=\"scss\">\r\n.specialParagraphs {\r\n\tcolor:brown;\r\n\tfont-size:10px;\r\n}\r\n\r\n.specialLinks {\r\n\t@extend .specialParagraphs;\r\n\r\n\ttext-decoration:none;\r\n\tborder-bottom:2px solid brown;\r\n}\r\n\r\n\/*** OUTPUTS TO ***\/\r\n.specialParagraphs {\r\n\tcolor:brown;\r\n\tfont-size:10px;\r\n}\r\n\r\n.specialLinks {\r\n\tcolor:brown;\r\n\tfont-size:10px;\r\n\ttext-decoration:none;\r\n\tborder-bottom:2px solid brown;\r\n}\r\n<\/pre>\r\n\r\n<p>Note, though that this selector needs to be <em>single element<\/em> (perhaps with pseudo-class or pseudo-element added to it). More complex selectors won&rsquo;t work.<\/p>\r\n\r\n<p>Additionally, SASS provides an extra type of selector called the <em>placeholder selector<\/em>. It looks like a regular <em>class<\/em> or <em>id<\/em> selector, except that the <code>#<\/code> or <code>.<\/code> is replaced by a <code>%<\/code>. These placeholder selectors will be ignored and not rendered, <em>unless<\/em> they are extended somewhere. This allows you to create styles that you know will only be extended in some stylesheets, and never used directly in your HTML &ndash; which saves space and avoids naming collisions.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n%specialParagraphs {\r\n\tcolor:brown;\r\n\tfont-size:10px;\r\n}\r\n\r\n.specialLinks {\r\n\t@extend %specialParagraphs;\r\n\r\n\ttext-decoration:none;\r\n\tborder-bottom:2px solid brown;\r\n}\r\n\r\n\/*** OUTPUTS TO ***\/\r\n.specialLinks {\r\n\tcolor:brown;\r\n\tfont-size:10px;\r\n\ttext-decoration:none;\r\n\tborder-bottom:2px solid brown;\r\n}\r\n<\/pre>\r\n\r\n<h2>Importing<\/h2>\r\n\r\n<p>And lastly, we can modularize our CSS even more by splitting it into multiple files. SASS allows us to place snippets of code inside separate files, and then import those into multiple other big files.<\/p>\r\n\r\n<p>Such a snippet is called a <em>partial<\/em>, and requires the filename to start with an underscore (e.g., <code>_partial.scss<\/code>).<\/p>\r\n\r\n<p>To import the snippet, we use<\/p>\r\n\r\n<code class=\"longsyntax\">@import &rsquo;partial&rsquo;;<\/code>\r\n\r\n<p>The underscore and extension can be left behind; SASS knows what you mean and will figure it out.<\/p>\r\n\r\n<p>CSS already has a native import option, but it has one large drawback; CSS creates another HTTP request for every import. Therefore, it increases server load and page load time. SASS, on the other hand, can put everything in a single file as it compiles. Yay!<\/p>\r\n\r\n<p>NOTE: The special file naming and importing syntax in SASS is, therefore, used to bypass the native importing function.<\/p>\r\n","slur":"sass-import-extend-partials","cat":"Website","subcat":"SASS","video":"","diff":"3","quiz":""},
{"id":"388","title":"[SASS] Functions","post":"<p>When we created mixins, we already learnt how to create our own <em>functions<\/em>. By simply choosing a name and filling in the variables, we could insert lots of rules in lots of places. Fortunately, our life can become&nbsp;even easier &ndash; we don&rsquo;t even need to create some of the mixins, as SASS has a huge amount of&nbsp;<em>built-in functions<\/em>!<\/p>\r\n\r\n<p>There are way too much of them to cover here, and you probably won&rsquo;t ever need most of them, but some of them are too useful to pass up. You can find a list of all functions in the <a href=\"http:\/\/sass-lang.com\/documentation\/Sass\/Script\/Functions.html\">SASS Documentation<\/a><\/p>\r\n\r\n<p>As usual, functions are executed with the following syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">some-function-name(value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>)<\/code>\r\n\r\n<p>Alternatively, if you don&rsquo;t like to remember the order of the parameters, you can pass the values by keyword:<\/p>\r\n\r\n<code class=\"longsyntax\">some-function-name(param: val, &hellip;, param: val)<\/code>\r\n\r\n<p>Here&rsquo;s an example using some of the colour functions, useful for dynamic colour palettes.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n$main-colour: #995511;\r\n\r\nbody {\r\n\tbackground: darken($main-colour, 80%);\r\n}\r\n\r\nh1, h2 {\r\n\tcolor: lighten($main-colour, 40%);\r\n}\r\n\r\np {\r\n\tcolor: $main-colour;\r\n}\r\n\r\n.logo {\r\n\tbackground: saturate($main-colour, 20%)\r\n}\r\n\r\n.metadata {\r\n\tcolor: desaturate($main-colour, 40%);\r\n}\r\n<\/pre>\r\n\r\n<h2>Returning<\/h2>\r\n\r\n<p>Like any proper programming language, you can also create your own functions that don't create any rules, but instead return a value (after some complicated calculations). To do so, use the following syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">@function some-function-name(variable<sub>1<\/sub>, &hellip;, variable<sub>n<\/sub>) {\r\n\t<em>stuff<\/em>\r\n\r\n\t@return <em>value<\/em>;\r\n}\r\n<\/code>\r\n\r\n<p>As expected, you can use multiple return statements to return different values based on certain conditions. And, once such a statement is executed, the compiler immediately stops going through the function and continues compiling the rest of the stylesheet.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n@function mix-text-colour($colour-one, $colour-two) {\r\n  $new-colour: $colour-one + $colour-two;\r\n  @return $new-colour;\r\n}\r\n\r\np {\r\n\tcolor: mix-text-colour(green, blue);\r\n}\r\n<\/pre>\r\n","slur":"sass-functions","cat":"Website","subcat":"SASS","video":"","diff":"3","quiz":""},
{"id":"389","title":"[SASS] Control Flow","post":"<p>This chapter&rsquo;s title is just a fancy name for controlling how the stylesheet is compiled. More specifically, it&rsquo;s about controlling which parts are ultimately going to be rendered, and how often. The program determines this based on certain conditions and expressions you provide. If you&rsquo;ve done any sort of programming work, you should be familiar with these.<\/p>\r\n\r\n<p>I&rsquo;ll give you a quick overview about <em>if-else<\/em> and <em>loops<\/em>. If you want to know more, I suggest you check out the <em>JavaScript <\/em>course. It uses the same principles, and if you&rsquo;re learning advanced CSS stuff, you&rsquo;ll probably also like (and need) JavaScript.<\/p>\r\n\r\n<h2>If-Else<\/h2>\r\n\r\n<p>To create a simple <strong>if-else<\/strong> statement, that adds one value if the condition is true, and another if it&rsquo;s false or null, use<\/p>\r\n\r\n<code class=\"longsyntax\">if(condition, <em>value if true<\/em>, <em>value if false<\/em>)<\/code>\r\n\r\n<pre data-lang=\"scss\">\r\np {\r\n  color: if(lightness($background-color) > 50, #000, #fff); \/\/Set text colour dark\/light based on background colour\r\n}\r\n<\/pre>\r\n\r\n<p>To create more complex statements that add a certain set of styles based on multiple conditions, we use<\/p>\r\n\r\n<code class=\"longsyntax\">\r\n@if condition {\r\n\t<em>styles<\/em>\r\n} @else if condition {\r\n\t<em>styles<\/em>\r\n} @else {\r\n\t<em>styles<\/em>\r\n}\r\n<\/code>\r\n\r\n<p>Of course you can use as many <code>@else if<\/code> statements as you like, which means you can also omit them entirely.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\np {\r\n  @if (lightness($background-color) > 50) {\r\n    color: #000000; \/\/ Light background, make text colour dark\r\n  } @else {\r\n    color: #ffffff; \/\/ Dark background, make text colour light\r\n  }\r\n}\r\n<\/pre>\r\n\r\n<h2>Loops<\/h2>\r\n\r\n<p>To repeat a set of styles, without having to retype it yourself, we can use a loop. To create a <strong>for loop<\/strong>, use one of these two syntaxes:<\/p>\r\n\r\n<code class=\"longsyntax\">@for $var from <em>&lt;start&gt;<\/em> through <em>&lt;end&gt;<\/em>\r\n@for $var from <em>&lt;start&gt;<\/em> to <em>&lt;end&gt;<\/em><\/code>\r\n\r\n<p>Note that the first syntax <em>includes<\/em> the <code>&lt;end&gt;<\/code> value, while the second syntax doesn&rsquo;t.<\/p>\r\n\r\n<pre data-lang=\"scss\">\r\n\/\/Set first nine children to gradually darker background colours\r\np {\r\n\t@for $i from 1 to 10 {\r\n\t\t&:nth-child($i) {\r\n\t\t\tbackground-color: darken($main-colour, ($i*5)%);\r\n\t\t}\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>To create a <strong>for each loop<\/strong> through a list or map, use<\/p>\r\n\r\n<code class=\"longsyntax\">@each $var in <em>&lt;list or map&gt;<\/em><\/code>\r\n\r\n<pre data-lang=\"scss\">\r\n$map = (cat1: \"Panda\", cat2: \"Jaguar\", cat3: \"Koala\", cat4: \"Bushdog\");\r\n\r\n\/\/Sets elements with classes cat1, cat2, cat3, cat4 to their respective animal\r\n@each $cat, $name in $map {\r\n\t.#{$cat}::after {\r\n\t\tcontent: $name;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>To create a <strong>while loop<\/strong>, which keeps looping as long as a condition is true, use<\/p>\r\n\r\n<code class=\"longsyntax\">@while condition<\/code>\r\n\r\n<p>Note that this is rarely necessary, and also make sure you don&rsquo;t create infinite loops. Check if there&rsquo;s always a way for the condition to return false and exit the loop.<\/p>\r\n\r\n<h2>Debugging<\/h2>\r\n\r\n<p>Last, but certainly not least, it can be very useful to debug your SASS code in case there&rsquo;s an error. If something doesn&rsquo;t go as planned, but you don&rsquo;t know why, it&rsquo;s helpful to debug. This means letting the compiler spit out the values of certain variables or functions or whatever, while it&rsquo;s compiling. This way you can check if everything actually is going like it should be.<\/p>\r\n\r\n<p>To print out a value to the standard error stream &ndash; which is the command line tool if you use that, or part of the software if you use that &ndash; we use<\/p>\r\n\r\n<code class=\"longsyntax\">@debug <em>expression<\/em><\/code>\r\n\r\n<pre data-lang=\"scss\">\r\n$some-variable: 20px;\r\n$some-other-variable: 30px;\r\n@debug $some-variable + $some-other-variable; \/\/Should print 50px\r\n<\/pre>\r\n","slur":"sass-control-flow","cat":"Website","subcat":"SASS","video":"","diff":"4","quiz":""},
{"id":"390","title":"Fundamental Design Principles","post":"<p>Design has always been a large part of our lives. Whatever product you make, you want it to be as beautiful and simple to use as possible. Even stories need a form of visual design &ndash; good typography &ndash; when they are to be successfully published as books. Because design is always present in any and every project, I think everybody should know and understand the basic principles underpinning what makes a good design.<\/p>\r\n\r\n<h2>The Two Fields<\/h2>\r\n\r\n<p>There is, however, an important distinction to be made between two fields of design: <strong>graphic design<\/strong> and <strong>usability<\/strong>. The first field looks at how a product looks and feels, be it a photograph or webpage or an actual real-world object. The second looks at how a product works, sells and interacts with its users. These two fields are closely related, and creating well-designed products will always be a combination of applying principles from both fields. To make a design usable, everything has to be laid out in a clear and simple manner. To make a design look good, every part and process needs to be at the right place and executed in the right way. Furthermore, for a product to be embraced by society, it needs to sell and be fun and memorable. The two fields influence each other all the time.<\/p>\r\n\r\n<p><img src=\"media\/DesignVersusUsability.png\" \/><\/p>\r\n\r\n<p>This course will only look at the first one: <em>graphic design<\/em>. We will look at what techniques you should use to structure your information and convey a message, as well as the actual methods you should use to create the visual shapes belonging to these techniques. In other words: the course starts with a description of the basic building blocks of visual design, and then continues with explaining how they relate to each other to create good design.<\/p>\r\n\r\n<p>Because visual design is such as huge topic, though, some parts (<strong><em>colour theory<\/em><\/strong> and <strong><em>typography<\/em><\/strong>) have received their own separate course. I highly recommend reading those as well, as they raise your design skills to a more advanced level. You can read them at any time you want, and I won&rsquo;t include them in this course&rsquo;s table of contents, but I suggest you read them very early in your design learning process.<\/p>\r\n\r\n<h2>The Two Main Purposes<\/h2>\r\n\r\n<p>Throughout the course, you&rsquo;ll notice that there nearly every design wants to meet one of two main purposes, which are<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Aesthetics:<\/strong> You want a design to convey a sense of beauty. It needs to leave a positive impression, make somebody feel positive emotions, make people happier and impressed by looking at the design.<\/li>\r\n\t<li><strong>Functionality: <\/strong>You want a design to convey information of any kind. People need to be able to understand things from a quick glance at your design, and they need to learn about your product, company, mission, or story by looking at the design.<\/li>\r\n<\/ul>\r\n\r\n<p>The best designs of course want to mix these two purposes, but you&rsquo;ll notice that they are not easily combined. Some elements of a design increase beauty but decrease usability, while other elements are very practical and efficient but don&rsquo;t look so good. Keep this distinction in mind, and decide which of the purposes is most important for your design before you begin.<\/p>\r\n\r\n<p>Good luck becoming a designer!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>What is Graphic Design?<\/li>\r\n\t<li>Point<\/li>\r\n\t<li>Line<\/li>\r\n\t<li>Shape<\/li>\r\n\t<li>Form<\/li>\r\n\t<li>Light<\/li>\r\n\t<li>Scale<\/li>\r\n\t<li>Texture<\/li>\r\n\t<li>Pattern<\/li>\r\n\t<li>Mass<\/li>\r\n\t<li>Hierarchy<\/li>\r\n\t<li>Gestalt Principles of Perception<\/li>\r\n\t<li>Figure-Ground<\/li>\r\n\t<li>Layering<\/li>\r\n\t<li>Grid<\/li>\r\n\t<li>Contrast<\/li>\r\n\t<li>Alignment<\/li>\r\n\t<li>Proximity<\/li>\r\n\t<li>Repetition<\/li>\r\n\t<li>Balance<\/li>\r\n\t<li>Proportions<\/li>\r\n\t<li>Space<\/li>\r\n\t<li>Symmetry<\/li>\r\n\t<li>Tension &amp; Motion<\/li>\r\n\t<li>Framing<\/li>\r\n\t<li>Abstraction<\/li>\r\n\t<li>Composition<\/li>\r\n\t<li>The Design Process<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"fundamental-design-principles","cat":"Design","subcat":"Graphic Design","video":"","diff":"1","quiz":""},
{"id":"391","title":"[Design] What is Graphic Design?","post":"<p>Every design has the same starting point. No matter what you&rsquo;re doing, you need to have a <em>purpose<\/em> for your design. Whether you&rsquo;re designing assets for a game, or designing a software&rsquo;s interface, or creating expressive paintings &ndash; you&rsquo;ll always have a purpose your design should fulfil.<\/p>\r\n\r\n<p>Most of the time, this purpose will be a message you want to send. Even when you&rsquo;re just drawing a fantasy character for a game, you want that particular design to send a certain message. For example, the hero of the game should send messages related to that; strong, heroic, the perfect leader, muscular, and so on. As opposed to a minor background character, which should recede in the composition and make itself look small.<\/p>\r\n\r\n<p>Similarly, as I&rsquo;m writing this course, I am thinking about the best way to present the information I want you to understand &ndash; should I use images? What sections and subsections should I use? What colours should I use on the website for this course? How long should I make chapters?<\/p>\r\n\r\n<p>Visual design is all about collecting your content and finding the message you want to send, and then using visuals to send that message using this content you have.<\/p>\r\n\r\n<p>I do want to stress once more that fifty percent of visual design, is a direct result of usability design. Usually, if you focus on making your product as simple, effective and efficient as possible, its visuals will automatically present themselves to you and take shape. Only part of the purpose of visual design is enriching and &ldquo;beautifying&rdquo; designs, the other part is the important structuring and messaging of information.<\/p>\r\n\r\n<p>Before we continue, let me just remind you that this course isn&rsquo;t about <strong><em>drawing<\/em><\/strong> (which has its own course), mostly because you&rsquo;d be missing the point of visual design. Drawing is about learning to represent cubes, spheres, trees, elephants, whatever by drawing lines with your pencil. Design is about putting abstract ideas or information into a visually engaging format.<\/p>\r\n\r\n<h2>The 3 Basic Components<\/h2>\r\n\r\n<p>Visual design consists of three basic components:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Visual Elements:<\/strong> The actual visual marks made on the page. Examples are dots, lines, and squares.<\/li>\r\n\t<li><strong>Visual Properties:<\/strong> The properties of those visual marks, which we can alter to change their meaning and effect. Examples are colour, texture, and proportions.<\/li>\r\n\t<li><strong>Visual Principles:<\/strong> Principles, rules and guidelines about how best to combine the other two components. Examples are alignment, proximity, and balance.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignThreeComponents.png\" \/><\/p>\r\n\r\n<p>This course follows the order in which I presented these components, as every new component builds on the previous one(s). By splitting the whole field into such basic units, I hope to make it easily accessible to anyone, and to keep it as broad and general as possible. After this course, you can pick your software or materials, and perhaps specialize in some aspects of design, and you should be able to do so quickly because you&rsquo;ve learnt these fundamentals of design.<\/p>\r\n\r\n<p>NOTE: Of course, on this website I can only show you two-dimensional (computer) designs and not let you touch and look around actual three-dimensional objects, but all the same principles and guidelines still apply to those!<\/p>\r\n\r\n<h2>Tools &amp; Software<\/h2>\r\n\r\n<p>This course tries to be as general as possible, which means you can use your own tools and\/or software to apply the principles. The most popular products, however, are from the family of Adobe products:<\/p>\r\n\r\n<ul>\r\n\t<li>Illustrator: Software that allows you to easily create simple, clean illustrations on the computer.<\/li>\r\n\t<li>InDesign: The title says it all. This software was made to design all sorts of things.<\/li>\r\n\t<li>Photoshop: Perhaps the most popular software on earth, it&rsquo;s a good choice if you plan on using a lot of photographs and imagery in your design. If not, I think it&rsquo;s too difficult and expensive to start with.<\/li>\r\n<\/ul>\r\n","slur":"what-is-graphic-design","cat":"Design","subcat":"Graphic Design","video":"","diff":"1","quiz":""},
{"id":"392","title":"[Design] Point","post":"<p>The smallest possible visual element you can put in a design, is a <em>point<\/em>. In the mathematical or abstract sense, a point indicates a precise location, but can&rsquo;t be seen or felt. It&rsquo;s a pair of (x,y) coordinates without area or mass. It&rsquo;s also the smallest unit of measurement &ndash; one point is equal to 1\/72 of an inch, and we use it to describe font size and the thickness of paper stock.<\/p>\r\n\r\n<p>Graphically, however, it must take on some sort of shape. Even though a point is the smallest <em>possible<\/em> element, it doesn&rsquo;t necessarily have to be tiniest thing in a design. Usually, points take form as dots or small circles, but any element within a design that stands alone with a recognizable centre is also a point. For example, in a field of text every letter may be considered a point, or the centre of a closed square may be considered a point.<\/p>\r\n\r\n<p><img src=\"media\/DesignPoint.png\" \/><\/p>\r\n\r\n<p>Because of these characteristics, points &ndash; when standing on their own &ndash; are the best way to indicate single data points or individual and independent information.<\/p>\r\n\r\n<p>The real power of points, however, appears when you use a large group of points to create something bigger. A series of points creates a line. A mass of points can create shape, form, texture, tone, and pattern.<\/p>\r\n\r\n<p><img src=\"media\/DesignMultiplyingPoints.png\" \/><\/p>\r\n\r\n<p>Points don&rsquo;t have a direction; they simultaneously radiate inward and outward. Points are therefore, by themselves, perceived as static and balanced. If you want your design to be calm, relaxed and harmonious, points are the way to go. If you want a more interesting or exciting design, opt for other elements.<\/p>\r\n\r\n<p>A good example of this stasis is the fact that in typography, the point is a period &ndash; the definitive end of a line. The point stops movement.<\/p>\r\n","slur":"graphic-design-point","cat":"Design","subcat":"Graphic Design","video":"","diff":"1","quiz":""},
{"id":"393","title":"[Design] Line","post":"<p>In a mathematical sense, a line is an infinite series of points next to each other. In the case of design, however, many more variations count as lines. A line can be the path between a start and end point. A line can curve, change thickness, and even have gaps.<\/p>\r\n\r\n<p>Geometrically, this means that lines have length, but no breadth. A line is the path created by a moving point.<\/p>\r\n\r\n<p><img src=\"media\/DesignLinesOverview.png\" \/><\/p>\r\n\r\n<h2>Individual Lines<\/h2>\r\n\r\n<p>Lines, on their own, can fulfil many functions. The most important are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Connect<\/strong>: When a line is smooth and easy, the eye follows it subconsciously. We can group multiple elements together by drawing smooth and natural lines between them.<\/li>\r\n\t<li><strong>Separate<\/strong>: On the other hand, when a line is rough and irregular, it impedes movement. By adding rough lines (or line that go against the general direction) between multiple elements we can show there is no connection. This way, lines create boundaries and edges between multiple shapes.<\/li>\r\n\t<li><strong>Direct<\/strong>: Because lines are automatically followed by viewers, they are the easiest way to direct attention to something or establish an order in which a design should be observed.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignLinesFunctionality.png\" \/><\/p>\r\n\r\n<p>Additionally, each line brings a certain amount of energy and emotion with it, whether you want it or not. The feeling lines convey is mostly dependant on <em>direction<\/em>, <em>thickness<\/em> and <em>path<\/em>.<\/p>\r\n\r\n<h2>Direction<\/h2>\r\n\r\n<p><strong>Horizontal Lines<\/strong> are stable, calm, and serene. They rest on the paper, balanced.<\/p>\r\n\r\n<p><strong>Vertical Lines<\/strong> are more exciting, active, and powerful. They are defying the earth&rsquo;s gravity, and imply energy or reaching towards heights or heavens.<\/p>\r\n\r\n<p><strong>Diagonal Lines<\/strong> are even more dynamic, and imply motion or tension. Because of this, they also give a feeling of depth.<\/p>\r\n\r\n<p>As you can see, as opposed to static points, lines are inherently dynamic gestures.<\/p>\r\n\r\n<p><img src=\"media\/DesignLinesDirection.png\" \/><\/p>\r\n\r\n<h2>Thickness<\/h2>\r\n\r\n<p><strong>Thin Lines<\/strong> are soft and restrained. They are subtle and seem to recede in the distance.<\/p>\r\n\r\n<p><strong>Bold Lines<\/strong> communicate strength and power. They grab attention and seem to come forward in space.<\/p>\r\n\r\n<p>Lines with <strong>varying thickness<\/strong> (such as drawn with a brush) convey more fluid and undisciplined messages, as opposed to perfect or mechanical lines that convey precision and disciplined messages.<\/p>\r\n\r\n<p><img src=\"media\/DesignLinesThickness.png\" \/><\/p>\r\n\r\n<h2>Path<\/h2>\r\n\r\n<p><strong>Straight Lines<\/strong> are mechanical, formal and cold. They are simple, effective and efficient, but have more negative or unnatural feelings associated with them.<\/p>\r\n\r\n<p><strong>Curvilinear Lines<\/strong> are natural, approachable and comforting. They are harder to incorporate without creating total chaos, but you get more warmth and likeability in return.<\/p>\r\n\r\n<p>Path is the most important factor in determining the quality and character of a line.<\/p>\r\n\r\n<p><img src=\"media\/DesignLinesPath.png\" \/><\/p>\r\n\r\n<h2>Combining Lines<\/h2>\r\n\r\n<p>On top of their own functions and properties, lines are the fundamental element of visual geometry. Without it, the triangle, square and circle wouldn&rsquo;t exist. When lines multiply, they can describe planes, shapes, volumes, and textures.<\/p>\r\n\r\n<p>Because of this quality, lines also serve as the edges of objects, as the contours of elements, and can leave positive marks or negative gaps.<\/p>\r\n\r\n<p><img src=\"media\/DesignMultiplyingLines.png\" \/><\/p>\r\n\r\n<h2>Implying Lines<\/h2>\r\n\r\n<p>Lines are perhaps at their strongest when they&rsquo;re invisible. By aligning and shaping elements in a certain way, we <em>imply<\/em> a line, which not only creates unity and cohesion, but also engages the viewer with the design and makes them more interested. Because things line up, it&rsquo;s easier to find relationships between elements and understand the groups of information. On the other hand, the viewer has to explore and find these implied lines himself, making the design come to life. For example, in typography, characters group into lines of text, and columns align into text blocks. You can clearly see the lines, even though they aren&rsquo;t explicitly drawn.<\/p>\r\n\r\n<p><img src=\"media\/DesignLinesImplied.png\" \/><\/p>\r\n\r\n<p>This is a very important topic, and will be elaborated on further in later chapters.<\/p>\r\n","slur":"graphic-design-line","cat":"Design","subcat":"Graphic Design","video":"","diff":"1","quiz":""},
{"id":"394","title":"[Design] Shape","post":"<p>When we give a straight line not only length, but also breadth, we get the simplest of all shapes: a rectangle. But that&rsquo;s a bit boring, so it might be wise to extend our definition of shape to: <em>a shape is any area enclosed by lines<\/em>. A square is the result of four lines closing off an area, while circles are the result of one large, sweeping curve closing itself. Again, these lines don&rsquo;t necessarily need to be drawn, but can also be implied.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesDefinition.png\" \/><\/p>\r\n\r\n<p>Whereas a point had zero dimensions, and a line had one (length), shapes have two: <em>width<\/em> and <em>height<\/em>. Similarly, whereas the line had one important property we could change to alter its character (line quality), we now have two properties to change: <em>line<\/em> and <em>fill<\/em>. Other words for line are <em>stroke<\/em>, <em>outline<\/em> or <em>border<\/em>.<\/p>\r\n\r\n<p>For example, shapes can be transparent but have a solid border, or they can be filled with texture but have no visible outline. This means that shapes can be much more complex and attention-grabbing than lines or points, but it also means they have similar characteristics; flat and horizontal shapes are stable, while vertical and diagonal shapes are more active. Triangles point towards something and imply motion, while circles are static and peaceful.<\/p>\r\n\r\n<p>In general, a line and fill that don&rsquo;t go together well will never result in good design.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesFillStroke.png\" \/><\/p>\r\n\r\n<p>While our definition of shape is already quite broad, you should try to understand it in an even broader sense. In typography, for example, a field of text is also a plane (built from points and lines). Even though letters are very complex lines, and enclose complex shapes themselves, they &ndash; combined together &ndash; form a single texture that fills a shape.<\/p>\r\n\r\n<h2>Basic Shapes<\/h2>\r\n\r\n<p>All the shapes you&rsquo;ll ever create, will be created out of certain basic shapes, which are the <strong>triangle<\/strong>, <strong>square<\/strong> and <strong>circle<\/strong>. No matter how complex, any shape can be derived from those in some way or another. I&rsquo;ll therefore only look in depth at the properties of the basic shapes, which you can then easily transfer to any composition. Another advantage that comes from looking at shapes this way, is that you learn to simplify complex shapes, and simpler is always better in the world of design.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesBasic.png\" \/><\/p>\r\n\r\n<h2>Three Types of Shapes<\/h2>\r\n\r\n<p>In general, a shape is either <em>geometrical<\/em>, <em>organic <\/em>or <em>random<\/em>. To which group they belong determines their inherent message and feeling. A soft, curvilinear shape may appear warm and welcoming, whereas a sharp, angular shape may appear cold and threatening.<\/p>\r\n\r\n<h3>Geometrical<\/h3>\r\n\r\n<p>Based on mathematical formulas. Their contours are always regularized, angular, or hard edges. We are most familiar with these shapes because they are the first shapes we tend to encounter when we are small children.<\/p>\r\n\r\n<p>Straight lines and angular corners create rectilinear, geometric shapes. Circles, squares, triangles, and rectangles are geometric shapes that are crisp and mathematically precise with straight lines and consistent profiles. As you can see, circles and ellipses are also geometric shapes, because they are symmetric and defined by a formula (but we do call them <em>soft<\/em> geometric shapes).<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesGeometric.png\" \/><\/p>\r\n\r\n<h3>Organic<\/h3>\r\n\r\n<p>Created or derived from nature and living organisms. These shapes are used more freely than geometric shapes, and are usually irregular and soft. A natural or organic shape <em>can<\/em> be regular, but that doesn&rsquo;t happen too often. Too much irregularity, on the other hand, tends to convert designs into total chaos quite quickly.<\/p>\r\n\r\n<p>Curvilinear lines typically create these amorphous, organic shapes. As you might have noticed, the three &ldquo;basic shapes&rdquo; from which you can built any shape are all part of the geometric group, so shouldn&rsquo;t every possible shape be in that group? Well, sure you can create a flower or squirrel from only basic shapes, but that would take <em>a lot<\/em> of time and effort. Starting out with rounded shapes that support the feeling of a design is much easier.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesOrganic.png\" \/><\/p>\r\n\r\n<h3>Random<\/h3>\r\n\r\n<p>Created from invention or imagination, no sense of order, resemblance, or relationship to the other categories of shape. They will borrow subtle characteristics from both categories, but whether these random shapes work out and what feeling they convey is up to you to determine. Random shapes are often heavily abstracted shapes, used for icons, branding or stylizations.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesRandom.png\" \/><\/p>\r\n\r\n<h2>Positive &amp; Negative Shapes<\/h2>\r\n\r\n<p>We&rsquo;ve thus far only looked at adding a shape to the composition, but there&rsquo;s an important process we need to be aware of. Whenever we add a shape, we actually add two shapes! When we place a rectangle in the centre of a page, all the empty space around it (with no shapes in it) is also a shape. Every time you add something to the composition, you create more and more complex empty spaces. The shapes you add yourself are what we call <em>positive shapes<\/em>, and the empty shapes that come with it are called <em>negative shapes<\/em>. The negative shape around an element is just as important as the positive shape of the element itself.<\/p>\r\n\r\n<p><img src=\"media\/DesignPositiveNegativeShapes.png\" \/><\/p>\r\n\r\n<p>A better word for negative shape is simply <em>space<\/em>, as the very definition of that word is &ldquo;that which has nothing in it&rdquo;. This not exactly true for our negative shapes, as it often contains the background or elements that just don&rsquo;t attract much attention. But, because our eye (at first glance) perceives the negative space as empty, space is a good word to use.<\/p>\r\n\r\n<p>Why then, should we be interested in these spaces? More explanation will come later, but the main idea is that there are often more negative shapes in a composition than positive ones, and it&rsquo;s just as important to make those look good. To some extent, this is accomplished automatically: organic circles will create soft and curved negative shapes, while geometrical squares create angular negative shapes. Nevertheless, consider negative shapes in your design and use them to your advantage by actively employing them as a design element.<\/p>\r\n\r\n<p><img src=\"media\/DesignShapesNegativeSpace.png\" \/><\/p>\r\n","slur":"graphic-design-shapes","cat":"Design","subcat":"Graphic Design","video":"","diff":"2","quiz":""},
{"id":"395","title":"[Design] Form","post":"<p>Stepping up our game, we arrive at the biggest elements with as much as three dimensions. Whereas a shape has a two-dimensional character, form is three-dimensional, having width, height and depth. However, because we can&rsquo;t draw 3D shapes on paper or on the computer, form is merely a collection of shapes creating the illusion that an object has <em>mass<\/em> or <em>volume<\/em>. Form is what happens when multiple shapes come together in an elegant way to create a bigger element with more dimensions.<\/p>\r\n\r\n<p>Creating this illusion of three-dimensional space is a very important aspect of any design, as it creates a sense of depth, realism and naturalness. Adding that third dimension makes some elements seem to pop out of your design, and some to recede. Adding depth adds a texture and dynamic quality to a design, even though the page is still flat.<\/p>\r\n\r\n<p><img src=\"media\/DesignFormOverview.png\" \/><\/p>\r\n\r\n<h2>Types of Forms<\/h2>\r\n\r\n<p>Forms can be real or illusory. Real form contains actual volume or physical weight, and are three-dimensional objects such as sculpture, architecture, and packaging. Illusory two-dimensional forms are perceptual, and give the illusion of three-dimensional space through several graphic conventions. Because this is a course on graphic design displayed on a web page, I will focus on the latter.<\/p>\r\n\r\n<h2>Basic Forms<\/h2>\r\n\r\n<p>Just as we used basic shapes, we can use basic forms to establish any form. These basic forms are direct extensions of the basic shapes; squares becomes cubes, circles become spheres, triangles become pyramids.<\/p>\r\n\r\n<p><img src=\"media\/DesignFormBasic.png\" \/><\/p>\r\n\r\n<h2>Projections<\/h2>\r\n\r\n<p>When we convert a complex three-dimensional form into two-dimensional shapes, we say we <strong>project<\/strong> it onto a flat surface. There are multiple types of projections available to do so:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Isometric: <\/strong>Easiest of projection methods where three visible surfaces of a form have equal emphasis. All axes are simultaneously rotated away 30 degrees from the picture plane and kept at the same angle, all lines are equally foreshortened, and the angle between lines is consistent.<\/li>\r\n\t<li><strong>Axonometric: <\/strong>An axonometric (<em>plan oblique<\/em>) projection is a projection of a form viewed from a skewed direction, to reveal more than one of its sides in the same picture plane. To achieve this, axes are rotated 45 degrees.<\/li>\r\n\t<li><strong>Linear Perspective: <\/strong>Realistic perspective, but also the hardest to do. It simulates optical distortions, making near objects appear large as far objects become small. The angle at which objects recede reflects the position of the viewer. Parallel lines converge in the distance or at the horizon.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignFormProjections.png\" \/><\/p>\r\n\r\n<p>(If you really want to fully understand linear perspective, I suggest you read the corresponding chapters from the <strong><em>drawing course<\/em><\/strong>.)<\/p>\r\n\r\n<p>In contrast to linear perspective, isometric and axonometric projections depict volume without making elements recede into space; the result is often more abstract and impersonal. Additionally, all vertical lines remain vertical and all parallel lines remain parallel &ndash; which isn&rsquo;t realistic, but people still understand the spatial meaning.<\/p>\r\n\r\n<h2>Principles of Depth<\/h2>\r\n\r\n<p>Aside from those projections, there are other visual cues that signal the viewer that depth of three dimensions are present in a design. These can &ndash; and should &ndash; be combined with projections, but can also be used outside of them. For example, you can make a bunch or circles seem to have depth simply by adding shadow behind them, in which case you don&rsquo;t need to project anything.<\/p>\r\n\r\n<p>The visual cues suggesting three-dimensional objects are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Overlapping:<\/strong> The object that is being overlapped seems farther away than the object that is overlapping it.<\/li>\r\n\t<li><strong>Size:<\/strong> Smaller objects are perceived to be farther away.<\/li>\r\n\t<li><strong>Height:<\/strong> The object higher up the page is perceived to be farther away.<\/li>\r\n\t<li><strong>Texture:<\/strong> When a surface texture varies in density, areas of greater density are perceived to be farther away than areas of lesser density.<\/li>\r\n\t<li><strong>Shading:<\/strong> Shaded areas are perceived farthest away from the light source, and light areas as closest.<\/li>\r\n\t<li><strong>Atmospheric Perspective:<\/strong> Objects that are bluer and blurrier are perceived to be farther away. Alternatively, if some components of the design are extremely close to the viewer and not the main point of attention, you can blur them to make the design easier to look at.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignFormVisualCues.png\" \/><\/p>\r\n\r\n<p>Of all these cues, <em>overlapping<\/em>, <em>size<\/em>, and <em>shading<\/em> are by far the most important. In the real world, the surfaces of a form curving or facing away from the light appear darker than surfaces facing towards it. This effect suggest the rounding of a two-dimensional shape into a three-dimensional form.<\/p>\r\n\r\n<p>Although shading seems like a difficult and elaborate process, light and shadow can be expressed in lots of different and simple ways, which will add a lot to any design. Therefore, next chapter will be about the first property we can alter on our design elements, which is <em>Light<\/em>.<\/p>\r\n","slur":"graphic-design-form","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"396","title":"[Design] Light","post":"<p>Without light, we would see nothing. When we look at something, there&rsquo;ll always be some light that is acting on it, and the kind of lightning heavily influences the look, mood, and interpretation of a design. Because we&rsquo;re so used to always having one or multiple sources of light, a design is aesthetically pleasing when it doesn&rsquo;t contradict the rules of light, but instead uses them to establish hierarchy and order. On top of that, light automatically creates the illusion of depth, and helps with one of the most important principles of design: <em>contrast<\/em>.<\/p>\r\n\r\n<h2>Types of Light<\/h2>\r\n\r\n<p>As you start with your design piece, you&rsquo;ll need to establish the light source(s) working on it. Arbitrarily applying lighting to every element is never a good idea, as it would create inconsistencies and confuse your audience about the setting and environment of the design. Every light source has a few properties you need to figure out: <strong>position<\/strong>, <strong>strength<\/strong> and <strong>colour<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DesignLightProperties.png\" \/><\/p>\r\n\r\n<p>The <em>position<\/em> is the placement in the three-dimensional world. The light can be above all elements, in between them, behind, in front &ndash; whatever you want. Objects with top-down lighting look natural and friendly, while objects with bottom-up lighting look unnatural and scary. In general, it&rsquo;s also preferred to have a light source shining from an angle, instead of straight down at objects.<\/p>\r\n\r\n<p>The <em>strength<\/em> is the amount in which the light influences its surroundings. A weak light (such as a light bulb) only affects the elements nearest to it, and only adds a little bit of contrast. A strong light (such as the sun) affects all elements in the exact same way, and is very apparent. A weak light creates shadows and highlights with very soft edges, while a strong light creates hard edges.<\/p>\r\n\r\n<p>The <em>colour<\/em> of the light is, obviously, what colour light waves the light emits. The sun shines with yellow\/white light, which is good, as it shows every object in its true colours. But, for example, a blue light sets a much grimmer or darker mood, while a red light creates the sensation of warmth and sunset.<\/p>\r\n\r\n<h2>Visual Cues for Light<\/h2>\r\n\r\n<p>How then, do we create these illusions of light in our designs? Well, just as with the illusion of three-dimensional form, there are certain visual cues we can employ.<\/p>\r\n\r\n<p>Light shows itself through <strong>highlights<\/strong> (where light hits the object directly) and <strong>shadows <\/strong>(places the light can&rsquo;t reach). No matter what colour an object is, its highlights will have a higher brightness, and its shadows a lower brightness than usual. We call the amount an element is in the light or shades its <strong>value<\/strong>.<\/p>\r\n\r\n<p>The most apparent shadow of any object is its <em>cast shadow<\/em>, which is a shadow cast on surrounding elements. Technically, this means that it isn&rsquo;t part of the element anymore, as the actual value difference happens on the other affected elements. I think it&rsquo;s important to realize this property of light, as it binds elements together and can create unexpected shapes.<\/p>\r\n\r\n<p>The <em>highlight<\/em> on objects is often smaller and less obvious, but it still excites strong feelings of power, brilliance, fluorescence, and amplitude.<\/p>\r\n\r\n<p><img src=\"media\/DesignLightHighlightsShadows.png\" \/><\/p>\r\n\r\n<p>The general rule is that elements of higher value draw attention or add emphasis. By adding a smooth transition between the light and dark parts of an element (a <em>gradient<\/em>), we invite the viewer&rsquo;s eye to then follow that path, helping us direct the viewer around the design.<\/p>\r\n\r\n<h2>Transparency<\/h2>\r\n\r\n<p>The other important visual cue is <em>transparency<\/em>, sometimes called <em>opacity<\/em> or <em>alpha<\/em>. When an element is transparent, we can see through it (to some degree). When an element is opaque, which most elements in the real world are, we can&rsquo;t see through it at all.<\/p>\r\n\r\n<p>The important thing to notice is that an element can only be transparent if there&rsquo;s light acting on it! When a transparent object overlays another object, the light waves that return to our eyes are a mix of the colours and textures of both objects. Therefore, more transparency creates a stronger sense of lighting.<\/p>\r\n\r\n<p>You must be careful, however, not to overdo it. Most objects in the real world aren&rsquo;t transparent (I mean, can you name anything transparent besides glass?), and ignoring that fact in your designs could turn it into a big, artificial mess.<\/p>\r\n\r\n<p><img src=\"media\/DesignLightTransparency.png\" \/><\/p>\r\n\r\n<p>Nevertheless, transparency is a good method for adding multiple layers of complexity to a design, and overlapping shapes while still being able to see both of them. It&rsquo;s effective in creating depth, without sacrificing visual data.<\/p>\r\n\r\n<p>On the other hand, this means that transparency is rarely suited for the purpose of clarity, but instead used to create dense, layered imagery. Transparency connects the two (or more) objects that mix, and automatically combine or contrast them. Our brain simultaneously perceives both objects at different spatial locations &ndash; sometimes one seems in front of the other, sometimes it&rsquo;s the other way around. This adds to the visual intrigue of a design, but is a bad idea for efficient or simple designs.<\/p>\r\n","slur":"graphic-design-light","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"397","title":"[Design] Scale","post":"<p>At first, I wanted to call this chapter <em>size<\/em>, but then I realised that wouldn&rsquo;t be entirely correct. Following <em>light<\/em>, how large or small an element is determines most of its message. However, size is fixed, but <em>scale<\/em> is relative. When you put a gigantic square on the canvas, it still feels relatively small when you put even larger squares next to it. The exact size you eventually give elements should be a result of the relationships between elements, which means you should think of elements as being scaled larger or smaller with respect to other elements in the composition.<\/p>\r\n\r\n<p>Another distinction has to be made, however, between scale and proportions. While this chapter looks only at the size of one design element, proportions look at the differences or ratios between the scale of <em>all<\/em> the elements on the page, including negative space or white space. The two concepts are directly linked, and you&rsquo;ll see many more principles applied in the <em>Proportions<\/em> chapter, but I just wanted to already mention some key concepts here to get you started.<\/p>\r\n\r\n<p><img src=\"media\/DesignScaleVersusSize.png\" \/><\/p>\r\n\r\n<h2>The Meaning of Scale<\/h2>\r\n\r\n<p>A design whose elements all have a similar size generally feels dull and static, lacking in contrast and hierarchy. To improve our designs, we want to use scale to convey a sense of depth and movement, and draw attention to our focus points.<\/p>\r\n\r\n<p>Large elements seem to pop off the page and convey a surprising sense of scale. Smaller elements tend to recede and seem further away. This creates a sense of depth, but bigger elements don&rsquo;t always have to draw attention. A small element surrounded by a vast amount of space is equally effective.<\/p>\r\n\r\n<p><img src=\"media\/DesignScaleEmphasizing.png\" \/><\/p>\r\n\r\n<p>Besides creating depth, scales inherently create a hierarchy and rank among elements. When other variables are kept constant, the largest elements will seem first in rank and most important, and the smallest last and least important.<\/p>\r\n\r\n<p><img src=\"media\/DesignScaleHierarchy.png\" \/><\/p>\r\n\r\n<p>Scale is also a property of elements you can change over time. By gradually making an element bigger and bigger, you can make it seem like its moving towards you. Conversely, by making it smaller and smaller, it seems to move out of sight. Even when applied subtly, this is a very effective way for making designs more dynamic.<\/p>\r\n\r\n<p>Because scale is so dynamic, it can be used to direct the viewer&rsquo;s eye towards certain elements. By gradually changing the scale of elements, you imply a line running through the elements, pointing towards something else.<\/p>\r\n\r\n<p><img src=\"media\/DesignScaleProgression.png\" \/><\/p>\r\n\r\n<h2>Objective versus Subjective Scale<\/h2>\r\n\r\n<p>The reason scale is so dependent on context, is that we automatically make comparisons whenever we receive sensory input. In order to understand new things, we compare it to things we already know or have already seen. This can be other elements of the design, but will at first glance most likely be personal memories of the viewer.<\/p>\r\n\r\n<p>We differentiate two types of scale:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Objective:<\/strong> The actual, literal size of an element expressed in some globally accepted unit. When relation to an object&rsquo;s size in real life is important &ndash; such as with maps or architectural plans &ndash; objective scaling is necessary. One needs to measure the lengths of lines in the real world, and use a fixed ratio to convert that to a line within the design.<\/li>\r\n\t<li><strong>Subjective:<\/strong> Refers to a person&rsquo;s impression of the object. For humans, a house may seem incredibly large. For ants, humans are huge. When working with objects viewers might be familiar with, keep into account how they may feel about the relationship in scale. Depicting a woman and a house next to each other as if they were equally big may work in abstract cases (such as icons), but not when you&rsquo;re trying to be more realistic or concrete.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignScaleObjectiveSubjective.png\" \/><\/p>\r\n\r\n<p>A direct consequence of this, is that scaling something disproportionately leaves the viewer confused and uncomfortable. Within objects in the real world, there&rsquo;s a relationship between their width, height, and depth. On the paper, this results in a fixed relationship between width and height. A guitar viewed from the front, for example, is far wider than it is high, which means depicting it differently looks odd and unnatural.<\/p>\r\n\r\n<p><img src=\"media\/DesignScaleKeepProportions.png\" \/><\/p>\r\n","slur":"graphic-design-scale","cat":"Design","subcat":"Graphic Design","video":"","diff":"2","quiz":""},
{"id":"398","title":"[Design] Texture","post":"<p>Up until now we&rsquo;ve only seen shapes filled with one flat colour, but that is soon to change. Whether you like it or not, almost nothing in the real world is just a single flat, evenly coloured surface. Every object has a certain <em>texture<\/em>, a certain look and feel created by the bumps and grooves in its surface. The material of which objects are made, as well as the process through which it was made, are the reason you&rsquo;ll rarely find two identical objects, even when they have the same form. For example, a ball of glass will look very different from a ball used to play soccer.<\/p>\r\n\r\n<p><img src=\"media\/DesignTextureOverview.png\" \/><\/p>\r\n\r\n<p>Not only do textures increase the richness, beauty and interestingness of a design, they also make it feel more realistic, natural, and comfortable. Even sharp textures in a design (perhaps used to convey a sense of violence or danger) are deemed better than no texture at all. This doesn&rsquo;t mean, however, that you should start applying as much special textures as you can to all elements. As always, <em>contrast<\/em> between areas of texture and no texture (or other textures) is the best way to go. Instead, I want to talk you through all the different types of textures and what feelings they evoke.<\/p>\r\n\r\n<h2>Three Types of Texture<\/h2>\r\n\r\n<p>In general, we can put a texture into one of these three categories.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Physical<\/strong> (or literal): Actual tactile variation on an object&rsquo;s surface. Examples are wood, sand, fur, or canvas. It&rsquo;s three dimensional, which means it can be felt, and the look of the texture is determined by how light acts on it. Rough surfaces reflect light very differently than smooth surfaces, glossy material looks different than matte, fabric can be nubby or fine.<\/li>\r\n\t<li><strong>Visual<\/strong>: The illusion of real-life texture, created by our familiar points, lines, and shapes. It can&rsquo;t actually be felt, but it looks as if it were real and tactile, and as if it has depth.<\/li>\r\n\t<li><strong>Abstract<\/strong> (or implied): Texture that doesn&rsquo;t resemble any material from the real world. This doesn&rsquo;t mean that it&rsquo;s random or ugly; it simply means that it&rsquo;s not something you&rsquo;d just find lying around as you stroll through the park. For example, a field of text is an interesting texture as well, just as a bunch of circles overlapping.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignTextureTypes.png\" \/><\/p>\r\n\r\n<p>As you can see, to fill an element with texture, you simply need to combine all the basic elements we&rsquo;ve already seen in an elegant way. You can base your textures on real life materials, or abstracted versions of it, or invent them yourself.<\/p>\r\n\r\n<p>The most important thing to notice is that, if you&rsquo;re working on digital design, you&rsquo;ll always start with flat shapes and no texture, whereas in product design every material you&rsquo;ll use has a default texture attached to it. This means that different mediums ask for a different approach towards textures; with one you&rsquo;ll have to be careful about the textures that come with your materials, and try to minimize their conflicts, while the other requires you to actively think <em>would this benefit from a texture?<\/em><\/p>\r\n\r\n<h2>Feeling the Texture<\/h2>\r\n\r\n<p>Texture can be used to establish a mood, or convey a sense of physical presence. Every texture adds richness and detail to any composition, but its impact and power depend on the surrounding textures. Textures add overall surface quality, as well as reward the eye when viewed up close.<\/p>\r\n\r\n<p>Rough textures are visually active and kinetic. Smooth textures are passive and calm. Other characteristics of textures depend on the characteristics of the elements involved (lines and shapes), as well as the material that is being used or visually replicated. Wood always has a comfy and natural feeling to it, while metal is harsher and colder. Typography, perhaps, has the most interesting and varied texture of all &ndash; if, and only if, you apply it well.<\/p>\r\n\r\n<p><img src=\"media\/DesignTextureFeelings.png\" \/><\/p>\r\n\r\n<p>You could look at texture as being descriptive adjectives in visual communication. Appropriate and meaningful texture can give the simplest visual element resonance and a spark of life. Effective use of texture can connect a variety of emotions and messages to simple shapes.<\/p>\r\n\r\n<h2>Creating Texture<\/h2>\r\n\r\n<p>Of course, there isn&rsquo;t one golden method to create every texture. Some textures have a high degree of contrast and are built from relatively large elements; others are low contrast and have a fine, delicate grain created from lots and lots of small elements.<\/p>\r\n\r\n<p>A good texture is one with a familiar and recognizable pattern, but enough variation to not make it look too artificial, formal or cold. Confusion is bad, but &ldquo;perfect regularity&rdquo; &ndash; continual, relentless repetition &ndash; is even more horrifying. Life needs a mixture, a balance between regularity and chaos.<\/p>\r\n\r\n<p>Therefore, the best way to create a texture is by building it from the ground up, overlapping layers and layers of the same set of elements.<\/p>\r\n\r\n<p>Because of that, creating physical textures is a result of, for example, adding multiple brushstrokes on top of each other, or putting several layers of the same material on top of each other in different ways. Non-physical textures can be created by establishing a basic, recurring shape or line, and copying multiple times, slightly adjusting it in scale, rotation and placement every time. Of course, there&rsquo;s also always the option of using images as textures, although it might be hard to incorporate them well into a design.<\/p>\r\n\r\n<p><img src=\"media\/DesignTextureCreation.png\" \/><\/p>\r\n\r\n<p>Depending on where your light is coming from, you can use darker and lighter tones of an object&rsquo;s colour to signal grooves and bumps in the surface. While this process often takes some time, the result will &ndash; more often than not &ndash; be a surprisingly realistic texture.<\/p>\r\n\r\n<p>And lastly, because text is such an interesting texture, a popular method for creating texture (among designers, anyway) is by solely using text. The legibility isn&rsquo;t necessarily important; the visual texture it creates is.<\/p>\r\n\r\n<p><img src=\"media\/DesignTextureTypography.png\" \/><\/p>\r\n","slur":"graphic-design-texture","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"399","title":"[Design] Pattern","post":"<p>Perhaps the simplest, yet most effective form of texture is a <em>pattern<\/em>. Because it&rsquo;s so powerful and found nearly everywhere in design, I&rsquo;ve dedicated a whole chapter to it.<\/p>\r\n\r\n<p>A pattern, just as a texture, is achieved when points, lines, and shapes combine into something that subverts the identity of the separate elements in favour of a larger texture. In other words, the individual elements become unnoticeable and give away the attention to the larger texture that appears.<\/p>\r\n\r\n<p>What&rsquo;s different about patterns, is that they are <em>perfect<\/em>. Instead of adding subtle variations or changing the colours here and there, a pattern is a consistent, undisrupted collection of repeated elements. Because of this, a pattern &ndash; even though it may consist of maybe hundreds of smaller elements &ndash; can be seen as one individual design element within a composition.<\/p>\r\n\r\n<p><img src=\"media\/DesignPatternOverview.png\" \/><\/p>\r\n\r\n<h2>Repetition<\/h2>\r\n\r\n<p>Humans are always subconsciously seeking for patterns. Patterns are noticed and interpreted quickly, which means they can attract attention and create interesting visuals. On the other hand, repetition of a simple basic pattern is predictable and boring, and can make elements automatically recede into the background.<\/p>\r\n\r\n<p>Either way, every pattern is the result of <strong>repetition<\/strong>; actually, it&rsquo;s the result of two kinds of repetition. The fundamental element of the pattern is repeated in a consistent and fixed way, without variation or change. This fundamental element, on the other hand, is created by picking a small set of basic design elements, and copying them while making (slight) adjustments every time, creating endless variations and complexity.<\/p>\r\n\r\n<p>There are five common properties you could change to get a new configuration for every new copy: <em>placement<\/em>, <em>rotation<\/em>, <em>size<\/em>, <em>colour<\/em>, and <em>shape<\/em>. The last two are a bit trickier, and you&rsquo;ll need to make sure you don&rsquo;t change too much, or the contrast within one fundamental piece of the pattern is too big and makes it fall apart.<\/p>\r\n\r\n<p><img src=\"media\/DesignPatternFundamentalElement.png\" \/><\/p>\r\n\r\n<p>Obviously, you shouldn&rsquo;t just randomly start repeating everything. Every pattern follows some repetitive principle, be it a <em>grid<\/em>, (computer-generated) <em>algorithm<\/em>, or <em>physical rhythm<\/em> found in nature.<\/p>\r\n\r\n<p>For example, in real-life flora we can find lots of <em>fractals<\/em>. The idea behind them is simple: every step, you copy an existing element two times, place them at the end of the previous element, and reduce their size by a fixed ratio. The results are often pretty pictures.<\/p>\r\n\r\n<p><img src=\"media\/DesignPatternFractals.png\" \/><\/p>\r\n\r\n<p>Note, though, that modifications aren&rsquo;t absolutely necessary. Lots of patterns are actually better when copies aren&rsquo;t altered, because they are simpler. Nevertheless, when you <em>do<\/em> make modifications, make sure it&rsquo;s <em>always<\/em> in an organized and structural manner, or the pattern becomes a chaotic texture.<\/p>\r\n\r\n<h2>What Makes a Good Pattern<\/h2>\r\n\r\n<p>You should see patterns as minimalist textures. When overtly decorative surfaces don&rsquo;t suit your design&rsquo;s purpose or make the whole composition too chaotic and complex, they are often better replaced with much simpler patterns.<\/p>\r\n\r\n<p>Interesting pattern designs often result from a mix of regular and irregular forces, as well as abstract and concrete or recognizable imagery. A pattern should have a strong relationship to geometry, as it&rsquo;s a repetition of fundamental elements in a predictable and organized manner. Due to this underlying structure, patterns are always synthetic, man-made, and mechanical &ndash; never organic.<\/p>\r\n\r\n<p>Nevertheless, it&rsquo;s actually recommended to <em>draw ideas<\/em> from organic textures. Some common patterns to explore are: arabesques, branching, circulation, helixes, lattices, meanders, nests, spheres, spirals, symmetry, volutes and waves.<\/p>\r\n\r\n<p><img src=\"media\/DesignPatternOrganic.png\" \/><\/p>\r\n\r\n<p>Patterns are best when they are as simple as possible. When patterns become too complex, they create the illusion of complete randomness. If you really want your pattern to be complex, structure can be recovered by tiling the pattern using seamless tiles.<\/p>\r\n\r\n<p><img src=\"media\/DesignPatternSeamless.png\" \/><\/p>\r\n\r\n<p>In the rest of this course, patterns will be referred to as <strong>motifs<\/strong>, just as a motif is a recurring element or object in books and stories.<\/p>\r\n","slur":"graphic-design-pattern","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"400","title":"[Design] Mass","post":"<p>We have so far looked at the most important properties of elements we can change to improve a design, and we&rsquo;ve also seen that <em>depth<\/em> is a very important factor. Only depth, however, doesn&rsquo;t necessarily mean anything; we could create a nice three-dimensional sphere, but if it has no <em>mass<\/em>, it still feels lifeless, flat, and unimportant. A solid form weighs heavier &ndash; literally as well as metaphorically &ndash; in a design than a see-through or air-filled one. A two-dimensional shape is perceived as a paper-thin element with no mass, while a three-dimensional form automatically receives more mass.<\/p>\r\n\r\n<p>The principle of mass is a bit of a vague one at the beginning, but perhaps also the most important, as it encompasses all previously mentioned principles &ndash; so bear with me.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassOverview.png\" \/><\/p>\r\n\r\n<h2>Force<\/h2>\r\n\r\n<p>Something with a bigger mass, has a bigger force acting on it. In physics, force is calculated as <em>mass<\/em> times <em>acceleration<\/em>, and that relationship right there is just as important in design.<\/p>\r\n\r\n<p>Something with a solid or heavy mass will draw your attention to it, but also makes you feel more uncomfortable and restless. The forces acting on it are too strong to allow your eyes to rest or focus. On the other hand, something with a light mass will recede more into the background, but is easier and more comfortable to look at for a while. Big media with less content seems lighter in mass, while small elements with too much content seem heavier.<\/p>\r\n\r\n<p>For example, a body of text is much easier to read when the line height is bigger, which means there&rsquo;s much more white space between subsequent lines. If you want to attract attention or establish a starting point for reading the text, however, you usually employ big and bold headlines within a small amount of space.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassForces.png\" \/><\/p>\r\n\r\n<p>There are several forces we encounter in nature on a day to day basis, which we subconsciously read into designs as well. The strongest and most obvious one is <strong>gravity<\/strong>, accompanied by <strong>motion<\/strong> and <strong>tension<\/strong>. Of course, there&rsquo;s many more forces, such as electromagnetic and friction, but all of those aren&rsquo;t really directly applicable to graphic design. (Although, one could study &ldquo;friction&rdquo; as a negative force when it comes to User Experience design. The more friction between design and user, the less likely somebody is to like and\/or use that design.)<\/p>\r\n\r\n<h2>Gravity<\/h2>\r\n\r\n<p>Even though it&rsquo;s essentially the same force, for our design purpose we can distinguish between two types of gravity: the gravity of the earth that pulls objects towards the ground, and the fact that every physical body attracts all bodies around it. Because most objects in our world are really small, we don&rsquo;t actively notice the second type, but we can see its effect on a larger scale; for example, the sun attracts all the planets around it, forcing them to circle around her.<\/p>\r\n\r\n<h3>Downward Gravity<\/h3>\r\n\r\n<p>The force we see in action every day, is the gravity that pulls us and everything around us to the ground. We&rsquo;re used to it, and we expect things with reasonably large mass to quickly drop to the ground. In order to give your design elements more depth and realism, you should keep this illusion of mass in place.<\/p>\r\n\r\n<p>As a result, the bottom half of a picture feels heavier, sadder, or more threatened and constrained; objects placed in the bottom half feel more &ldquo;grounded&rdquo;.<\/p>\r\n\r\n<p>On the contrary, the upper half of a picture is a place of freedom, happiness, and triumph; objects placed in the top half often feel more &ldquo;spiritual&rdquo;. An object placed higher up on the page has &ldquo;greater pictorial weight&rdquo;; our attention is drawn to the object more, or it feels more important, because it is perceived to have a high mass.<\/p>\r\n\r\n<p>Think of it this way: there&rsquo;s a reason the nasty fine print is always at the bottom of a page.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassDownwardGravity.png\" \/><\/p>\r\n\r\n<p>Again, the idea comes from physics. When an object is held up in the air, it receives extra potential energy proportional to its mass, whilst standing on the ground makes the object static, seemingly without mass.<\/p>\r\n\r\n<p>Consider this example of a bunch of dots, with one placed higher on the page. Doesn&rsquo;t it seem like that dot is jumping, doesn&rsquo;t it attract your attention? Of course, there are other design principles at play as well, but we somehow automatically assume the other dots are at some sort of ground level, and that the other is defying gravity. When we turn it around, though, the effect feels much weaker.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassJumpingDots.png\" \/><\/p>\r\n\r\n<h3>Spherical Gravity<\/h3>\r\n\r\n<p>Spherical gravity simply means that objects attract elements in a circle around it towards its centre point. Objects with more mass &ndash; which are usually just extremely large elements &ndash; display a stronger gravitational effect, and seem to pull elements in their neighbourhood towards themselves, essentially grouping multiple elements together. Elements of lighter mass don&rsquo;t portray this effect, unless its compensated by a large distance between itself and its surrounding elements.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassSphericalGravity.png\" \/><\/p>\r\n\r\n<p>The most obvious case is the fact that the centre of a page is automatically the focus point (if no other elements reposition this focus point). There&rsquo;s a reason we say things are the &ldquo;centre of attention&rdquo;. This effect can actually work against you, if you want your viewers to see more of the design than just its centre. It&rsquo;s your job, therefore, to be aware of this effect and redirect the viewer&rsquo;s eyes towards other elements on the page.&shy;<\/p>\r\n\r\n<h2>Motion &amp; Tension<\/h2>\r\n\r\n<p>By creating the illusion of motion, we can direct a viewer&rsquo;s eyes around a piece and make it more dynamic. We&rsquo;ve already seen lots of ways to do so, and will see many more, but I just wanted to point out the relationship with mass here. A heavier object takes more force to move. When using motion within your piece, make sure you apply the principle to elements with light pictorial weight &ndash; otherwise it just asks too much of the user&rsquo;s attention or energy.<\/p>\r\n\r\n<p>Similarly, tension will be discussed in further detail later, but it&rsquo;s essentially the invisible force connecting two elements &ndash; or, rather, connecting the space or elements between them. Two similar and heavy elements spaced apart will create tension on the direct line between them, pointing your eyes towards that line and actually drawing attention away from themselves. Elements of light weight don&rsquo;t have the same effect.<\/p>\r\n\r\n<p><img src=\"media\/DesignMassMotionTension.png\" \/><\/p>\r\n","slur":"graphic-design-mass","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"401","title":"[Design] Hierarchy","post":"<p>Now that we&rsquo;ve discussed the fundamental visual elements, and each of their properties, we can move on to the bigger picture: placing all the elements together within the same design, without turning it into complete chaos. Expressing order is the central task of the graphic designer. Without it, graphic communication is flat, boring and difficult to navigate.<\/p>\r\n\r\n<p>The keyword to making any design good, is <em>hierarchy<\/em>. To reduce chaos, we need to (visibly) put things into groups and establish relationships between every pair of elements on the page. And as we create those relationships, we create a hierarchy; what is the most important element in the design? What is the least important element in design? How do we make every headline important, and in doing so attract attention towards the piece of text below it?<\/p>\r\n\r\n<p><img src=\"media\/DesignHierarchyOverview.png\" \/><\/p>\r\n\r\n<p>Because this is the all-important age-old question within design, one chapter isn&rsquo;t enough to explain it. From now on, all chapters will explain one very important design principle. You&rsquo;ll notice that these principles are all based on one thing: how the human brain works and eyes observe. These principles are the result of a basic understanding about how people perceive certain visual stimuli, and you should think about design that way as well; what can I do to make people interpret a flat picture or design as more than just that, and how do I make them interpret it the way I intended?<\/p>\r\n\r\n<p>Remember that design isn&rsquo;t (necessarily) art; the first and foremost function of design is to communicate the same message to every user, its secondary function is to make it visually appealing or interesting. Usually, if you work on getting your hierarchy right, the visual elements will automatically fall into place.<\/p>\r\n\r\n<p><img src=\"media\/DesignHierarchyPyramids.png\" \/><\/p>\r\n\r\n<h2>Tools of Hierarchy<\/h2>\r\n\r\n<p>All the tools you need for hierarchy, is everything we&rsquo;ve already discussed! To create structure, you can use: points, lines, position, orientation, size, colour, typography, texture, patterns, mass, and shape. Hierarchy employs these clear marks of separation to signal a change from one level to another.<\/p>\r\n\r\n<p>For example, if you have an equal amount of square elements and round elements in the design, the squares will automatically be grouped together in the viewer&rsquo;s mind, and will be the first to attract attention because of their sharp outlines.<\/p>\r\n\r\n<p>Good, small examples for studying hierarchy are <em>table of contents<\/em>. A poorly designed table of contents uses conflicting or contradictory alignments, redundant numbering systems, and an overall graphical clutter. Analyse table of contents to get a good grip on hierarchy. (But, as this is more of a typography issue, check the <em>Typography<\/em> course for those kinds of things!)<\/p>\r\n\r\n<p>One thing to pay attention to is <strong>dimensional hierarchy<\/strong>. When your design is three-dimensional, you have the added challenge of legibility across and around curved planes. Three-dimensional objects are bathed in light and shadow, and you need to take those into account in your hierarchy as well.<\/p>\r\n\r\n<p><img src=\"media\/DesignHierarchyThreeDimensional.png\" \/><\/p>\r\n","slur":"graphic-design-hierarchy","cat":"Design","subcat":"Graphic Design","video":"","diff":"2","quiz":""},
{"id":"402","title":"[Design] Gestalt Principles of Perception","post":"<p>The first step for creating hierarchy, is grouping. Grouping serves to both combine and separate. As a process of combining, grouping transforms elements into larger elements. As a process of separating, grouping serves to break down large and complex objects into smaller, simpler ones.<\/p>\r\n\r\n<p>Once elements are grouped, we can use principles to assign a ranking that shows how important groups are in relation to each other. This chapter will talk about all the ways to group elements, which were formulated as part of a study on the psychology of perception, and which are called the <em>principles of Gestalt<\/em>.<\/p>\r\n\r\n<p>There are eight of them: <em>proximity<\/em>, <em>similarity<\/em>, <em>closure<\/em>, <em>symmetry<\/em>, <em>common fate<\/em>, <em>continuity<\/em>, <em>good gestalt<\/em> and <em>past experience<\/em>. (The first six, however, are the most important.)<\/p>\r\n\r\n<p>NOTE: Most of these principles are elaborated on later in the course, because they are just too important to quickly glance over.<\/p>\r\n\r\n<h2>Proximity<\/h2>\r\n\r\n<p>Elements close to each other are perceived as related and grouped. Elements far apart are perceived as dissimilar and unrelated.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltProximity.png\" \/><\/p>\r\n\r\n<h2>Similarity<\/h2>\r\n\r\n<p>Similar elements are automatically perceived as a group. In order for this to work, of course, there need to be different elements within the design. It&rsquo;s also not necessary for elements to be identical; by rotating or slightly changing an element, there still appears to be a connection with the other similar elements, as long as the change is not too big. Similarity will generally overpower the other Gestalt principles.<\/p>\r\n\r\n<p>Two strategies for applying similarity in a design, which are also related to proximity, are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Common Regions:<\/strong> Formed when edges come together and bound a visual area, grouping the elements within it. Useful for grouping text elements and clusters of control elements.<\/li>\r\n\t<li><strong>Connecting Lines: <\/strong>When an explicit line joins elements, grouping the connected elements. Useful for grouping individual elements and implying sequence.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignGestaltSimilarity.png\" \/><\/p>\r\n\r\n<h2>Closure<\/h2>\r\n\r\n<p>Incomplete objects (with holes or gaps) are automatically completed by the viewer&rsquo;s eye. This means that the mind automatically groups several elements with space between them into one big element. For this to work, of course, the object can&rsquo;t be destroyed too much.<\/p>\r\n\r\n<p>Closure is strongest when elements approach simple and recognizable patterns, such as geometric forms, and are located near one another. This principle enables designers to reduce complexity and the number of elements needed. Not completing some of your lines also increases interest &ndash; viewers subconsciously participate with the design.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltClosure.png\" \/><\/p>\r\n\r\n<h2>Symmetry<\/h2>\r\n\r\n<p>The mind automatically perceives objects as symmetrical and forming around a centre point. Not only is it perceptually pleasing to make elements symmetrical, when multiple elements seem to be symmetrical around the same centre point, the mind will automatically group them together.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltSymmetry.png\" \/><\/p>\r\n\r\n<h2>Common Fate<\/h2>\r\n\r\n<p>Elements moving in the same direction are perceived to be more related than elements moving in different directions or stationary elements. This refers to elements that imply motion, as well as elements that actually move (like a video or animation)<\/p>\r\n\r\n<p>The effect is strongest when motion occurs in exactly the same amount of time and velocity, and in the exact same direction. Moving objects will be perceived as foreground, and stationary objects as background.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltCommonFate.png\" \/><\/p>\r\n\r\n<h2>Continuity<\/h2>\r\n\r\n<p>When multiple elements come together and sections are mixed, we still perceive them as separate elements, <em>if<\/em> they are formed along a straight line or smooth curve. When parts of elements intersect, good continuation leads the eye to continue along the visible elements. As the angle becomes more acute, the elements will be perceived as less related. In other words, our brain assumes shapes to continue the way they usually do when we can&rsquo;t actually see it.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltContinuity.png\" \/><\/p>\r\n\r\n<h2>Good Gestalt<\/h2>\r\n\r\n<p>Elements tend to be grouped together if they form a pattern that is regular, simple, and orderly. When presented with a set of elements that can be interpreted in multiple ways, people will interpret it in the simplest way. (Fewer rather than more elements, symmetrical rather than asymmetrical, and so on.)<\/p>\r\n\r\n<p>Minimize the number of elements in a design to reduce extra cognitive effort needed from viewer. Favour symmetrical composition when efficiency is priority, and asymmetrical compositions when interestingness is priority.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltGoodFigure.png\" \/><\/p>\r\n\r\n<h2>Past Experience<\/h2>\r\n\r\n<p>Past experiences help group or separate elements. We know from experience that a word consists of multiple letters, even though one could interpret it as one large symbol when looking from a distance. Change the way people group or separate elements in your design by giving them a certain experience at the start, or relying on what you assume to be common knowledge.<\/p>\r\n\r\n<p><img src=\"media\/DesignGestaltPastExperience.png\" \/><\/p>\r\n","slur":"graphic-design-gestalt-principles-perception","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"403","title":"[Design] Figure-Ground","post":"<p>The first step towards ranking the elements in our design, is establishing the <em>figure-ground<\/em> relationship. I&rsquo;ve referred to the distinction between foreground and background several times already, and the term figure-ground is essentially just design language for the same thing.<\/p>\r\n\r\n<p>We all know that the <em>foreground<\/em> is what attracts attention and contains the actual content of the design, while the <em>background<\/em> is the space around the foreground that supports it without getting noticed. This means that the largest part of any design will actually be background, which is why it deserves some further investigation.<\/p>\r\n\r\n<p>For example, designs with white or light backgrounds feel safer to us than those with dark backgrounds, because we can see well during the day and only poorly at night. (Of course, there are exceptions.) On the other hand, white maximizes the effort of our colour receptors, while black enables the eyes to rest.<\/p>\r\n\r\n<p>By determining what should be fore- or background, and choosing the graphical style and setup that belongs with them, you&rsquo;ve already made a big first step towards any great design. From now on, the foreground will be called <strong>figure<\/strong>, and the background simply <strong>ground<\/strong>.<\/p>\r\n\r\n<h2>Figure versus Ground<\/h2>\r\n\r\n<p>Figures are positive shapes, active, and objects of focus. Ground is negative space, passive, and the rest of the perceptual field.<\/p>\r\n\r\n<p>Figures seem to move forward and have a clear position in space, ground recedes and has no clear location. There&rsquo;s only one ground, but there can be multiple figures.<\/p>\r\n\r\n<p>Figures have a definite shape and borders, ground is shapeless and continues behind the figures and beyond the edges of the design.<\/p>\r\n\r\n<p>Elements above the horizon line are more likely to be perceived as figures, while elements below the horizon line are more likely perceived as ground. (Which is quite logical, as the ground comes underneath the sky in the real world. Well, at least as long as you&rsquo;re not tilting your head.)<\/p>\r\n\r\n<p>It&rsquo;s best to use figures for key elements that you want the viewer to be able to recall. Especially familiar, figurative, and representational objects are easy to see and identify as figure.<\/p>\r\n\r\n<p><img src=\"media\/DesignFigureGround.png\" \/><\/p>\r\n\r\n<h2>The Relationship<\/h2>\r\n\r\n<p>There are three basic types of figure-ground relationships:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Simple: <\/strong>An independent figure is placed on top of the space that represents its ground. The ground can be shallow or have depth. The figure is clearly visible and separate from the ground.<\/li>\r\n\t<li><strong>Reversible: <\/strong>Figures functions as ground, while ground functions as figure. This graphic inversion takes place because of the shapes that appear within the ground. It&rsquo;s a dynamic way to make neutral empty space more active and engaging in a composition, because positive and negative elements attract our attention equally and alternately.<\/li>\r\n\t<li><strong>Ambiguous:<\/strong> Graphic relationship between figure and ground is unclear or undetectable. Pairs of objects share the same edge or profile.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignFigureGroundRelationships.png\" \/><\/p>\r\n\r\n<p>It&rsquo;s important to notice that they are fully dependant on each other. The figure determines the ground, and vice versa.<\/p>\r\n\r\n<h2>Stability<\/h2>\r\n\r\n<p>We say a figure-ground relationship is <strong>stable<\/strong>, if it&rsquo;s clear what the figure is. We&rsquo;re only focused on the figure, and never the ground. The figure receives more attention and immediacy than the ground. In such cases, the focus point is clear and perceptual confusion is minimized, but it&rsquo;s also potentially boring and static.<\/p>\r\n\r\n<p>When a figure-ground relationship is <strong>unstable<\/strong>, the figure and ground are ambiguous or reversible. The design can be interpreted in different ways, and tension is created. In such cases, the design is interesting, energetic, and powerful &ndash; but, it can also be confusing.<\/p>\r\n\r\n<p>A good design, therefore, seeks balance between figure and ground. Creating some ambiguity or reversible effects to add visual energy and surprise, while at the same time keeping most of the relationship simple. The design becomes active and animated, while still focusing attention.<\/p>\r\n\r\n<p><img src=\"media\/DesignFigureGroundStability.png\" \/><\/p>\r\n","slur":"graphic-design-figure-ground","cat":"Design","subcat":"Graphic Design","video":"","diff":"2","quiz":""},
{"id":"404","title":"[Design] Layering","post":"<p>Once the figure-ground relationship has been established, it&rsquo;s time to establish the general hierarchy between smaller groups of elements. The best way to do so, is to use <em>layers<\/em>.<\/p>\r\n\r\n<h2>What are Layers?<\/h2>\r\n\r\n<p>Layers are simultaneous, overlapping components of an image or sequence. Any design is build up out of multiple layers, and those layers have always been embedded in the process of mechanical reproduction.<\/p>\r\n\r\n<p>A layer contains elements that are visually or logically connected. For example, a layer could hold all the headlines of a page, or it could hold all the elements at the bottom of a three-dimensional design. Layers can be obvious and serve as a graphical element within your design, but most of the time they will just be a useful tool to get structure information for yourself and get where you want.<\/p>\r\n\r\n<p><img src=\"media\/DesignLayeringOverview.png\" \/><\/p>\r\n\r\n<h2>Types of Layers<\/h2>\r\n\r\n<p>Two general types of layers exist: <strong>physical<\/strong> and <strong>virtual<\/strong>. <em>Physical<\/em> layers can be felt, and are a result of building up material in a design (such as cutting and pasting). <em>Virtual<\/em> layers are structural layers, including the layer systems seen in design software (such as Photoshop).<\/p>\r\n\r\n<p>Additionally, layers can be <em>linear<\/em> or <em>non-linear<\/em>. Linear layers have a clear beginning, middle, and end. They are useful for leading or guiding a viewer through a design, telling a narrative. Non-linear layers are useful for reinforcing relationships between layers.<\/p>\r\n\r\n<h3>Linear Layers<\/h3>\r\n\r\n<p>Within the realm of linear layers, these kinds of layers are commonly used:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Sequential: <\/strong>The simplest layering structure available. Layers are put next to, after, or on top of each other based on their place in the sequence. The layer representing the start of the story is shown first, and the one concluding the story last.<\/li>\r\n\t<li><strong>Temporal<\/strong>: When working with a sequence of simultaneous events &ndash; such as in film or music scores &ndash; it&rsquo;s best to create multiple parallel layers. Any other type of (layering) system will most likely only confuse your audience.<\/li>\r\n<\/ul>\r\n\r\n<h3>Non-Linear Layers<\/h3>\r\n\r\n<p>Within the realm of non-linear layers, four more specific types exist:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Grouping<\/strong>: Layers that aren&rsquo;t necessarily visible, but in general group elements together. For example, you could decide to cut elements that represent the same thing out of the same material, or you could decide to put elements about the same topic within the same layer in your software. They&rsquo;re sometimes called <em>hierarchical layers<\/em>, and used &ndash; not surprisingly &ndash; when information has superordinate and subordinate relationships with each other.<\/li>\r\n\t<li><strong>Typographic<\/strong>: It&rsquo;s often wise to put textual elements that belong together in the same layer. This could be the case if they&rsquo;re part of the same narrative, or if they all have the same rank of importance.<\/li>\r\n\t<li><strong>Data<\/strong>: When conveying data or information, multiple overlays are often used. By putting these on different layers you allow users to read levels independently, as well as perceive the connections between the levels. Make sure, though, that those layers are distinct yet follow the same general design style.<\/li>\r\n\t<li><strong>Web<\/strong>: When information is a network with many different kinds of relationships with itself, revealed by associative linkages to other layers.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignLayeringTypes.png\" \/><\/p>\r\n\r\n<p>Sometimes, it&rsquo;s also helpful to make a different distinction; between <em>two-dimensional<\/em> and <em>three-dimensional<\/em> layers. The first type refers to separating information such that only one layer can be viewed at a time, while the second allows multiple layers to be viewed at any given time (usually through overlapping or transparency). Three-dimensional layers are the most common, and the previous examples already showed what they look like.<\/p>\r\n\r\n<p><img src=\"media\/DesignLayeringTwoDimensional.png\" \/><\/p>\r\n\r\n<h2>Using Layers<\/h2>\r\n\r\n<p>In summary, use layers to structure the information and message you want to send with your design. Then, try to determine if these layers have visual importance you can utilize as well. Either way, keep a well-organized layer structure in mind during every step of the design process. Especially on the computer, dividing your project into useful layers will make your work a lot easier and more efficient.<\/p>\r\n","slur":"graphic-design-layering","cat":"Design","subcat":"Graphic Design","video":"","diff":"2","quiz":""},
{"id":"405","title":"[Design] Grid","post":"<p>Grids are the basis of every design. Before I introduce any principles to you, I want to show you how behind every great design is a grid, and how you can create and utilize these yourself. I must say, however, that grids aren&rsquo;t <em>mandatory<\/em> in any way; if you find that a grid is not working for you, abandon it and try something else. Grids exist only to aid and accelerate the design process.<\/p>\r\n\r\n<p><img src=\"media\/DesignGridsOverview.png\" \/><\/p>\r\n\r\n<h2>Why Grids?<\/h2>\r\n\r\n<p>We&rsquo;ve already seen that people like patterns and logical structure a lot. A grid is the ultimate tool to achieving such pleasing and understandable designs, while at the same time giving you lots of room for creativity and variation. A well-constructed grid encourages designers to vary scale and placement of elements, without relying solely on arbitrary or whimsical judgments.<\/p>\r\n\r\n<p>A grid provides a starting point, converting a blank canvas into a structured field. By dividing space into numerous equal units, the edges of the composition become just as important as the centre. Grids encourage designers to create open and dynamic compositions without turning it into a complete mess.<\/p>\r\n\r\n<h2>Types of Grids<\/h2>\r\n\r\n<p>So far I&rsquo;ve assumed you&rsquo;re familiar with grids being horizontal and vertical lines dividing a composition into smaller and smaller squares. While this is perhaps the simplest and most popular use, there are lots of different types of grids, which all provide the same benefits in their own way.<\/p>\r\n\r\n<p>These five types are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Regular: <\/strong>The type of grid everybody is familiar with; straight horizontal and vertical lines positioned at regular intervals.<\/li>\r\n\t<li><strong>Angled: <\/strong>A variation on the regular grid, where horizontal and\/or vertical lines are angled instead of straight. A simple but powerful variation on the basic grid. Works best if the angle is bigger than 30 degrees.<\/li>\r\n\t<li><strong>Circular<\/strong>: Bigger and bigger circles around the centre, accompanied by diagonal lines running through that same centre. Actually quite easy to work with, if you&rsquo;re going for a dynamic and organic design.<\/li>\r\n\t<li><strong>Organic<\/strong>: Instead of straight horizontal and vertical lines, the lines are curvilinear. Tricky to get right.<\/li>\r\n\t<li><strong>Irregular: <\/strong>Instead of placing lines or curves at regular intervals, they are placed irregularly. Very tricky to get right.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignGridsTypes.png\" \/><\/p>\r\n\r\n<p>Of course, you can use even more grids within the global grid, which are called <em>local grids<\/em>. This is, again, helpful to keep complex designs simple and structured. That, however, will only be the case if those local grids fit well together with the global grid. For example, if you used a regular, rectangular grid for the whole composition, and an irregular local grid on every element, things would still look like they were arbitrarily placed. Local grids are awesome, but watch out you don&rsquo;t take it too far.<\/p>\r\n\r\n<p><img src=\"media\/DesignGridsLocal.png\" \/><\/p>\r\n\r\n<h2>Visibility<\/h2>\r\n\r\n<p>A grid can work quietly in the background, or it can be obvious or clearly visible in a design. In the first case, the grid still influences a lot of the design decision and overall feeling of the composition, but people can&rsquo;t really point out the grid you used from looking at your design. In the second case, the grid becomes an active element within a design, and the visual properties assigned to the grid play an even bigger role.<\/p>\r\n\r\n<p>When a grid works quietly in the background, it provides more flexibility and more opportunities to break out of the grid and do special things. When the grid is clearly visible &ndash; which could be by actually drawing it into the composition, or showing parts of it through other elements &ndash; you&rsquo;ll need to adhere to it much more. Neither way is better than the other &ndash; it&rsquo;s a stylistic choice.<\/p>\r\n\r\n<p><img src=\"media\/DesignGridsVisibility.png\" \/><\/p>\r\n\r\n<h2>Using Grids<\/h2>\r\n\r\n<p>The type of grid you choose to use should naturally come forth from the meaning or narrative of the design. If your style is modern and formal, for example, it would be unwise to choose an organic grid.<\/p>\r\n\r\n<p>The lines and intersections that result from the grid should be used for the <em>position<\/em> and <em>scale<\/em> of elements. The lines can be used for the edges of shapes, actually visible lines within the composition, or simply aligning elements. The intersections are usually great places to position or centre elements.<\/p>\r\n\r\n<p>On top of that, grids help you create active and asymmetric compositions, for you can visually balance the elements by counting how many space they take up in the grid. In doing so, grids also provide an opportunity for you to leave more areas open or empty, rather than filling up the whole page.<\/p>\r\n\r\n<p><img src=\"media\/DesignGridsUsageExample.png\" \/><\/p>\r\n\r\n<p>Either way, a designer uses a grid actively and not passively. It&rsquo;s often helpful to let the grid suggest the shapes and placements, instead of doing what&rsquo;s fixed inside your head. Newspapers, for example, use the same grid on every page but with slight variations on the size and position of tiles, as required by the different lengths of articles. Similarly, webpages are dynamic and can extend infinitely vertically, which means the grid used for layout is mainly concerned with horizontal placement and allows the rest to vary.<\/p>\r\n\r\n<p>Lastly, you might be wondering: <em>how do grids help with design that&rsquo;s not printed or on a page?<\/em> Well, a three-dimensional design still has a surface you can use a grid for. And, if the design consists of multiple three-dimensional objects, you can use a grid on the floor to determine how they should be placed.<\/p>\r\n","slur":"graphic-design-grid","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"406","title":"[Design] Contrast","post":"<p>Contrast allows our eyes to see; without it, everything would be the same, and we wouldn&rsquo;t be able to distinguish different objects or elements in a design. Our eyes <em>like<\/em> contrast, which means it&rsquo;s not only necessary for structure and clarity, but it also enhances the aesthetics of a design.<\/p>\r\n\r\n<h2>The Purpose of Contrast<\/h2>\r\n\r\n<p>Therefore, the purpose of contrast is two-fold. First of all, it creates an interesting and appealing design. Secondly, it allows the viewer to instantly recognize the organization and structure of the information within the design. By giving elements near each other completely opposite properties, the eye becomes interested in this design, and it shows that those two elements are certainly not the same and represent a different level within the hierarchy.<\/p>\r\n\r\n<p>By placing a single, small black square somewhere on a uniformly white page, for example, we immediately establish a focal point and make the page more interesting through contrast. By placing something red next to something green (its complementary colour), it becomes even &ldquo;redder&rdquo; and more vibrant. A curve becomes even curvier when it&rsquo;s next to something orthogonal and straight.<\/p>\r\n\r\n<p><img src=\"media\/DesignContrastOverview.png\" \/><\/p>\r\n\r\n<h2>How to Create Contrast<\/h2>\r\n\r\n<p>If you are putting two elements on the page that are not the same, they cannot be <em>similar <\/em>&ndash; for contrast to be effective, they must be very different. This is achieved by exaggerating the visual difference of one or multiple properties of both elements. These properties can be anything we&rsquo;ve already discussed; size, colour, shape, texture, typeface, orientation, and so on.<\/p>\r\n\r\n<p><img src=\"media\/DesignContrastTypes.png\" \/><\/p>\r\n\r\n<p>The juxtapositions between elements, however, can also be expressed in a more general way; smooth versus rough, geometric versus organic, organized versus chaotic, static versus kinetic. This way, by contrasting more properties, the effect becomes more apparent and immediate.<\/p>\r\n\r\n<p>On the other hand, instead of using contrast to make elements distinct, it can also be used on elements that have some type of relationship to each other or belong together. As long as you use Gestalt grouping or other principles to show the positive relationship, the contrast will enhance this effect instead of working against it.<\/p>\r\n\r\n<p><img src=\"media\/DesignContrastWithGestalt.png\" \/><\/p>\r\n\r\n<h2>Pitfalls to Avoid<\/h2>\r\n\r\n<p>The contrasting elements should never serve to confuse the reader or to create a focus that is not supposed to be one. Contrast can be too light, which seems more like a mistake than a choice. Contrast can also be too heavy, which overwhelms the viewer.<\/p>\r\n\r\n<p>Don&rsquo;t be a coward, be brave! If you&rsquo;re going to contrast, do it with strength. Avoid contrasting a sort-of-heavy line with a sort-of-heavier line. Avoid contrasting black text with brown headlines. Don&rsquo;t be afraid to make words very large or very small; to speak loudly or speak in a whisper. Don&rsquo;t be afraid to make your graphics very bold or very minimal, as long as the result complements or reinforces your design or message. If the items are not exactly the same, make them <em>very<\/em> different.<\/p>\r\n\r\n<p><img src=\"media\/DesignContrastBoldBrave.png\" \/><\/p>\r\n\r\n<p>Contrast can exist on many obvious and subtle levels in a composition. Not all contrast has to be equally exaggerated, nor does contrast have to use only one property. The human eye can simultaneously detect contrasts in scale, value, shape, direction, and surface &ndash; as long as they&rsquo;re large enough.<\/p>\r\n\r\n<h2>In Summary<\/h2>\r\n\r\n<p>Contrast creates emphasis, importance, weight, or dominance for an element of a composition. A composition lacking contrast may result in visual monotony, neutrality, and even confusion.<\/p>\r\n\r\n<p>Contrasting relationships can be further articulated by combining elements to achieve variety and unity. The ultimate challenge is to create a composition made up of disparate elements that work together as one orchestrated whole.<\/p>\r\n","slur":"graphic-design-contrast","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"407","title":"[Design] Alignment","post":"<p>Following contrast, alignment is the strongest principle. It does the same as contrast, but reversed and more general. Elements that are aligned seem to belong together, even when such an alignment spans across the whole width of a design, and across many elements. Instead of contrasting properties, we&rsquo;re trying to establish hierarchy and increase aesthetics by making elements share a common alignment.<\/p>\r\n\r\n<h2>The Purpose of Alignment<\/h2>\r\n\r\n<p>The main purpose of alignment is to bring order to chaos. As a result, because humans like order, alignment makes a piece of design more visually interesting. Elements that share the same alignment are immediately recognized as having something in common, while elements on a different alignment path are recognized as belonging to distinct groups. By using several common alignment paths, we create <em>unity<\/em> within a design, leading to cohesiveness and a feeling that all elements in the design are related to each other in some way or another. You don&rsquo;t want your design to feel like it&rsquo;s three different designs mashed together.<\/p>\r\n\r\n<p><img src=\"media\/DesignAlignmentOverview.png\" \/><\/p>\r\n\r\n<h2>How to Create Alignment<\/h2>\r\n\r\n<p>There are two types: <strong>edge alignment<\/strong> and <strong>area alignment<\/strong>.<\/p>\r\n\r\n<ul>\r\n\t<li><em>Edge Alignment<\/em> requires elements to be placed such that their edges line up along common rows or columns. Alignment along diagonals is also possible, as long as the angle is more than 30 degrees, otherwise it&rsquo;s too subtle. It might be necessary, though, to highlight diagonal alignment in some other ways as well.<\/li>\r\n\t<li><em>Area Alignment <\/em>requires elements to be placed such that their centres line up along common rows or columns. When elements have different or complex shapes and can&rsquo;t be aligned by edges, area alignment is the best alternative.<\/li>\r\n<\/ul>\r\n\r\n<p>Even though I only mentioned straight horizontal, vertical and diagonal lines, alignment can be applied just as well to organic curves. In the <em>Grid<\/em> chapter we saw that we could create circular and organic grids as well, which means your alignments can follow the same pattern <em>if<\/em> you&rsquo;ve chosen to use such a grid for your design. If you chose, for example, a regular grid, it&rsquo;s best to stick with horizontal and vertical alignments.<\/p>\r\n\r\n<p><img src=\"media\/DesignAlignmentTypes.png\" \/><\/p>\r\n\r\n<p>Be conscious of where you place elements; nothing should be placed on the page arbitrarily. Always find something else on the page to align with, even if those elements are far away from each other. When elements can&rsquo;t be close to each other, alignment makes them <em>appear <\/em>connected, related, or unified with the other information, simply by their placement.<\/p>\r\n\r\n<h2>Pitfalls to Avoid<\/h2>\r\n\r\n<p>In general, prefer edge alignment over area alignment. Use the strongest alignment you can get, which means left, right (or justified), and not centred, unless you&rsquo;re going for a formal or dull design. Area alignment results in ragged edges and sometimes seemingly displaced elements, so use it with care. It is often a <em>strong<\/em> alignment &ndash; combined with the proper typefaces and other elements &ndash; that gives a design its sophisticated, formal, fun or serious look.<\/p>\r\n\r\n<p><img src=\"media\/DesignAlignmentRags.png\" \/><\/p>\r\n\r\n<p>There is, in theory, no such thing as too many alignments; no matter how wild and chaotic piece may initially appear, if it&rsquo;s well-designed, you can always find the alignments within. I must say, however, that simplicity is still always better. If you can reduce the amount of alignments to only a few, if you can align one element to multiple already existent paths, do it!<\/p>\r\n\r\n<p><img src=\"media\/DesignAlignmentSimplicity.png\" \/><\/p>\r\n\r\n<h2>In Summary<\/h2>\r\n\r\n<p>Every element should have some visual connection with another element on the page, and alignment is the easiest and strongest way to do so. Choose your alignments consciously and with care, and use it to lead your viewer through a design via the implied lines. Good alignment should go by without viewer&rsquo;s notice, bad alignment is immediately noticed and only good for creating tension or making one specific thing stand out.<\/p>\r\n","slur":"graphic-design-alignment","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"408","title":"[Design] Proximity","post":"<p>Together with alignment, proximity is the second strongest design principle. Simply put, elements that are close together are perceived to be more related than elements that are farther apart. Your eyes only have a limited field of view, and will automatically connect the elements it can easily see, and interpret elements outside or in the corners of their view as disparate.<\/p>\r\n\r\n<h2>The Purpose of Proximity<\/h2>\r\n\r\n<p>Unlike the previous two principles, there&rsquo;s only one purpose to proximity. It groups elements together and organizes, but it doesn&rsquo;t necessarily improve the aesthetics or interestingness of a design. That&rsquo;s the reason why, even though it&rsquo;s very powerful, I&rsquo;ve listed it as the third principle. Proximity reduces complexity, and reinforces relationships. Conversely, lack of proximity results in the perception of several disparate chunks, and reinforces differences among elements.<\/p>\r\n\r\n<p>On top of that, proximity can be used to direct the viewer&rsquo;s eye and create points of interest. As explained earlier, groups of elements with close proximity can be seen as a single element with a heavy mass, which attracts attention, but also quickly gives that attention away to something with a lighter mass.<\/p>\r\n\r\n<p><img src=\"media\/DesignProximityOverview.png\" \/><\/p>\r\n\r\n<h2>How to Use Proximity<\/h2>\r\n\r\n<p>Think about what elements belong together, and place those near each other. Similarly, think about what elements certainly don&rsquo;t belong together, and place those far apart.<\/p>\r\n\r\n<p>It helps to squint your eyes slightly, and count the number of visual elements on the page by counting the number of times your eye stops. If there are more than three to five items on the page &ndash; of course, it depends on the size and structure of the design piece &ndash; see which of those separate elements can be grouped together into closer proximity to become one visual unit.<\/p>\r\n\r\n<p>Proximity can also be interpreted in a more general, thematic way. For example, connecting or overlapping elements are commonly interpreted as sharing one or more common attributes, whereas proximal but non-contacting elements are interpreted as related, but independent.<\/p>\r\n\r\n<p><img src=\"media\/DesignProximityMeaning.png\" \/><\/p>\r\n\r\n<h2>Pitfalls to Avoid<\/h2>\r\n\r\n<p>Avoid too many separate elements on a page. Avoid leaving equal amounts of white space between elements, unless those single elements represent a subgroup by themselves (which means it&rsquo;s the only element on a certain level of the hierarchy).<\/p>\r\n\r\n<p>Avoid even a split second of confusion over whether a headline, subhead, caption, graphic, or whatever, belongs with its related material; actively create this relationship with close proximity. Ensure labels and supporting information are near the elements they describe, use direct labelling on graphs instead of legends.<\/p>\r\n\r\n<p>On the other hand, don&rsquo;t (accidentally) create relationships between elements that don&rsquo;t belong together! If they are unrelated or ambiguously related, move them (relatively) far apart from each other.<\/p>\r\n\r\n<p>And lastly, don&rsquo;t stick things in the corners <em>and<\/em> in the middle.<\/p>\r\n\r\n<h2>In Summary<\/h2>\r\n\r\n<p>When several items are in close proximity to each other, they become on visual unit rather than several separate units. Items relating to each other should be grouped together. If the information is organized, it is more likely to be read and more likely to be remembered. As a by-product of organizing the communication, you can also create more organized and appealing white space.<\/p>\r\n","slur":"graphic-design-proximity","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"409","title":"[Design] Repetition","post":"<p>We&rsquo;ve already seen the importance of repetition with regard to a single element or single group of elements, such as with patterns and alignment, but now we can take it one step further. Repetition within a design could also just be called <em>being consistent<\/em>, and in general refers to the fact that designs should be simple and consist of only a few elements that are repeated across the page(s) in many different ways.<\/p>\r\n\r\n<h2>The Purpose of Repetition<\/h2>\r\n\r\n<p>The purpose of repetition is, again, to bring order to chaos. It unifies and strengthens a piece by connecting what would otherwise be separate parts. Repetition is useful on small or single-page designs, but absolutely critical in big or multi-page designs. On top of that, it can create visual interest; if a viewer sees &ndash; at a glance &ndash; the same odd shape appear once or twice, he will probably look for more instances and see what connects them or what they mean.<\/p>\r\n\r\n<p><img src=\"media\/DesignRepetitionOverview.png\" \/><\/p>\r\n\r\n<p>Repetition gives people a sense of security, and reduces confusion. It also makes a piece come to life; which is why it&rsquo;s also often called <em>rhythm<\/em>. For example, magazines and websites have the same basic layout with repeated elements &ndash; such as the header, footer, colours, and typographic choices &ndash; which is adapted to the content that has to fit on any particular page.<\/p>\r\n\r\n<h2>How to Create Repetition<\/h2>\r\n\r\n<p>Constancy is something everybody already does, to some degree. It&rsquo;s easier than the alternative, because it&rsquo;s easier to re-use the same basic building blocks instead of inventing new ones for every design element. To get the most out of repetition, however, you&rsquo;ll need to push those consistencies even further.<\/p>\r\n\r\n<p>First look at the elements you&rsquo;re already repeating. See if you can make them an active part of the composition by making them more prominent. Then, check with the elements whose sole purpose is repetition; lists, tables, and so on. When you&rsquo;re done finding <em>existing<\/em> and necessary repetitions, and strengthened them, start trying to <em>create<\/em> new repetitions to make the design clearer and more interesting.<\/p>\r\n\r\n<p><img src=\"media\/DesignRepetitionExample.png\" \/><\/p>\r\n\r\n<p>Of course, repetition should come naturally when you&rsquo;re working off of a grid, which is why I highly recommend doing so. Grids are, in themselves, a pattern made from repetition, and placing elements along the lines or at the intersections will allow you to see other places these exact elements would fit perfectly.<\/p>\r\n\r\n<h2>Pitfalls to Avoid<\/h2>\r\n\r\n<p>Avoid repeating elements so much that it becomes annoying or overwhelming. Be aware of the value of contrast; unless the repeated elements are the most important part of your design, you don&rsquo;t want them to stand out too much, but instead blend in with the rest of the design.<\/p>\r\n\r\n<p>Also, &ldquo;perfect&rdquo; regularity &ndash; continual, relentless repetition &ndash; is even more horrifying than confusion. Life needs a balance between regularity and chaos, between pattern and variation.<\/p>\r\n\r\n<p><img src=\"media\/DesignRepetitionVariation.png\" \/><\/p>\r\n\r\n<p>NOTE: When it comes to repetition, just remember &ldquo;Less is more, but less is usually at least a few.&rdquo; If that makes sense to you.<\/p>\r\n\r\n<h2>In Summary<\/h2>\r\n\r\n<p>Repetition creates hierarchy efficiently throughout large design projects. Following patterns while styling creates consistency, as long as you don&rsquo;t overdo it and leave lots of room for creativity and variation. Try to keep your designs as simple as possible, without losing visual interest.<\/p>\r\n","slur":"graphic-design-repetition","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"410","title":"[Design] Balance","post":"<p>The last of the five big principles is actually more of an umbrella principle; <em>balance<\/em> talks about achieving balance between the previous four principles. And it even goes beyond that, as balance is something that should be achieved in all areas of a design, from colour schemes, to texture, to shape. Balance simply means that no area of the design overpowers other areas &ndash; or, at least, not so much that you can&rsquo;t see the other areas anymore.<\/p>\r\n\r\n<h2>The Purpose of Balance<\/h2>\r\n\r\n<p>The purpose of balance is to create a design that feels stable, coherent, and lively. People have a strong sense of weight and balance, as seen in the <em>Mass<\/em> chapter, and will immediately notice it when something feels off. When a design is not balanced, attention is pulled away from its message and people will be focused on other things instead, or on only one particular aspect of the design.<\/p>\r\n\r\n<p><img src=\"media\/DesignBalanceOverview.png\" \/><\/p>\r\n\r\n<h2>How to Achieve Balance<\/h2>\r\n\r\n<p>Balance is achieved by properly applying all the principles. By applying a principle not too little and not too much, balance is automatically created. By placing not too little nor too many elements on the page, balance ensues.<\/p>\r\n\r\n<p>Symmetry is inherently stable, and perhaps the strongest form of balance, but asymmetric designs can be balanced as well if you manage to contrast other aspects of the design. As mentioned in the <em>Figure-Ground<\/em> chapter, when figure and ground are balanced, the slight ambiguity between background and foreground adds surprise and visual interestingness.<\/p>\r\n\r\n<p><img src=\"media\/DesignBalanceExamples.png\" \/><\/p>\r\n\r\n<p>Of course, this is quite a subjective principle, and it will require some experience and a lot of trying out to find what works and what doesn&rsquo;t. The best way to achieve balance is just <em>try your best<\/em>, and then ask friends or colleagues what they think.<\/p>\r\n\r\n<p>One thing to notice though, is that all principles automatically present themselves when using a grid. If you&rsquo;re stuck or don&rsquo;t know what to do, go back to your grid and literally count the size of elements, count the distance between elements, check the alignments and non-alignments between elements, and try to balance it all.<\/p>\r\n\r\n<h2>Pitfalls to Avoid<\/h2>\r\n\r\n<p>There aren&rsquo;t really any pitfalls when it comes to balance. You either have it, or you don&rsquo;t. If you don&rsquo;t, you need to add or remove some elements or properties to achieve it, based on your own observations.<\/p>\r\n\r\n<p>The only thing you need to look out for is that your designs are not balanced in exactly the same way. If you balance everything by symmetry, your design will look formal, static, or even like it&rsquo;s quickly been generated by a computer. Beauty arises from the mix of things; seek rhythms punctuated with change and variation.<\/p>\r\n\r\n<h2>In Summary<\/h2>\r\n\r\n<p>Balance elements so every part has an equal mass. Don&rsquo;t put too much of one thing in the design, don&rsquo;t put too much of the design in one corner &ndash; contrast and balance everything. Balance a heavy area with an area of white space or light mass. Balance a warm, intense colour with a cool, relaxing colour. Balance a complex shape with simple shapes. The list goes on and on, and the possibilities for balance are endless!<\/p>\r\n","slur":"graphic-design-balance","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"411","title":"[Design] Proportions","post":"<p>Proportion is a way of expressing how the size or magnitude of one thing relates to that of another thing. This could be the length of a line in relation to the length of another line, or the scale of a square in relation to another square, or the height of a circle in relation to the height of a square.<\/p>\r\n\r\n<p>As you can see, these proportional relationships exist within an element itself, and between all elements on the page. Using a proportional scale helps with choosing the size of any element within the design, as well as creating more visually balanced designs. Every element automatically has a certain proportional relationship with regard to another element, whether you want it or not, so it&rsquo;s your job to make sure this relationship makes sense.<\/p>\r\n\r\n<p>Proportions are usually expressed in a mathematical sense, as a ratio between the lengths or sizes of elements. If we say the proportion between two lines is &ldquo;<em>1:2<\/em>&rdquo;, we mean that one line is exactly twice as long as the other (and the other way around, one line is exactly half as long as the other).<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsOverview.png\" \/><\/p>\r\n\r\n<h2>The Golden Ratio<\/h2>\r\n\r\n<p>Most people have heard of this ratio, as if it were some magical thing you should always adhere too. While the Golden Ratio <em>is<\/em> a beautiful proportion, which can be found all over classical architecture and paintings, it&rsquo;s not the best ratio for every design. If it&rsquo;s not at the expense of other design objectives, explore the golden ratio, otherwise, try to find a better suited proportion.<\/p>\r\n\r\n<p>So, what is this Golden Ratio? The golden ratio is the ratio between two segments such that the smaller is to the larger, as the larger is to the sum of both. In mathematical terms that becomes a proportion of <strong>1:1.618<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsGoldenRatio.png\" \/><\/p>\r\n\r\n<p>The golden ratio pops up everywhere in nature, not only in the length of lines, but also the size of curves, number of leafs, seed patterns in centre of sunflowers, and so on. It is for that reason that we often perceive it as natural and comfortable. Additionally, we feel it&rsquo;s balanced, because of its property that it preserves ratio (smaller to larger is same as larger to sum of both).<\/p>\r\n\r\n<h2>The Root 2 Proportion<\/h2>\r\n\r\n<p>The root 2 proportion is called that way because it refers to the fact that if you divide a square of equal width and height into half diagonally, that diagonal line would have proportion root 2. In mathematical terms, the proportion is <strong>1:1.414<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsRoot2.png\" \/><\/p>\r\n\r\n<p>This proportion, therefore, has the property that it maintains its ratio when divided in half. Forever. Again, this means more balance in your design, as smaller and bigger elements will keep exactly the same ratio. Not surprisingly, this proportion is used for standard paper sizes (A0, A1, A2, A3, A4, &hellip;)<\/p>\r\n\r\n<h2>The 2:3 Proportion<\/h2>\r\n\r\n<p>The 2:3 proportion is a result of the human fascination with things that come in threes. Similar to the <em>rule of three<\/em> in writing, it suggests anything that comes in triples is more visually pleasing. In mathematical terms, the proportion is <strong>1:1.667<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsTwoThirds.png\" \/><\/p>\r\n\r\n<p>This proportion has the property that, anytime you have three of something &ndash; no matter how you divide them &ndash; the proportion stays 2:3. As long as you rigorously stick to this proportion, this property makes it balanced as well.<\/p>\r\n\r\n<h2>The 3:4 Proportion<\/h2>\r\n\r\n<p>Lastly, the 3:4 proportion is a more workable alternative to the 2:3. It still uses that magical number three, but combines it with the four, which allows things to be easily put into squares and grids. In mathematical terms, the proportion is <strong>1:1.334<\/strong>.<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsThreeFourth.png\" \/><\/p>\r\n\r\n<p>The biggest reason for using this proportion is that it&rsquo;s easily divisible into multiple combinations, making it flexible to work with when constructing grids. Otherwise, this proportion is less balanced and seems to be less visually appealing than the other.<\/p>\r\n\r\n<h2>How to Apply Proportions<\/h2>\r\n\r\n<p>There is no single best proportion. Pick the proportional scale you think is best for your specific design. While we&rsquo;re at it, you also don&rsquo;t have to follow the scale exactly. By skipping multiple steps, you create a <em>varied scale<\/em>, which adds to the contrast and dynamics of your design.<\/p>\r\n\r\n<p><img src=\"media\/DesignProportionsVariedScale.png\" \/><\/p>\r\n\r\n<p>When it comes to actually applying proportions, it&rsquo;s a simple matter of performing some very simple and quick calculations, every time. When you place a new element on the page, check with the size of another element, and multiply or divide it by the ratio of your proportional scale.<\/p>\r\n\r\n<p>For example, say you were using the golden ratio for your typography. Your biggest headline is 62pt, and you&rsquo;re satisfied with that. Then, your second biggest headline could be 62 \/ 1.618 = 38pt big. Furthermore, your body text could be 62 \/ 1.618 \/ 1.618 \/ 1.618 = 14pt big. It&rsquo;s fast and simple, but it should provide you with a balanced and good-looking design.<\/p>\r\n\r\n<h2>A Last Note<\/h2>\r\n\r\n<p>One last thing to be aware of, is that the outer dimensions of the medium you use for your design are very important as well. If your design is going to be put on a standard A4 paper, you&rsquo;ll already have the proportions of that paper you need to take into account. It&rsquo;s often best to work with the proportions your medium gives you, but working against it can create interesting visuals if you&rsquo;re up for the challenge. The other way around, if you have an amazing design but don&rsquo;t know what size of paper to put it on, let the proportions decide!<\/p>\r\n","slur":"graphic-design-proportions","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"412","title":"[Design] Space","post":"<p>I intentionally left out any remarks about space in the previous chapter. People often forget the importance of space, and I want to dedicate an entire chapter to the subtleties involved with the concept.<\/p>\r\n\r\n<h2>Horror Vacui<\/h2>\r\n\r\n<p>The Latin phrase <em>horror vacui<\/em> translates to <em>fear of emptiness<\/em>, and it&rsquo;s the tendency &ndash; instilled into every human being &ndash; to fill all the space we have available. Somehow, we favour filling blank spaces with objects and elements over leaving them empty; we often fill our living rooms with lots of stuff, without knowing exactly why we feel the need to do so. We can see this principle in action with budget stores, who fill their entire show window with products and &ldquo;sale&rdquo; signs, as opposed to expensive, specialized stores that are for the most part empty and employ minimalistic text. People associate an overcrowded design with restlessness and cheapness, and find it overwhelming and difficult to focus on.<\/p>\r\n\r\n<p><img src=\"media\/DesignSpaceOverview.png\" \/><\/p>\r\n\r\n<p>Essentially, the main take away here is that, if you want your design to look good and promote associations of high value, employ more white space! Dare to leave more empty room, and instead of building on top of your design time and time again, spend some time figuring out what you can <em>remove<\/em>.<\/p>\r\n\r\n<h2>Types of Space<\/h2>\r\n\r\n<p>Space can actually mean two things; space as in emptiness or an area with no elements in a design, or space as another name for the three-dimensional world (with depth). The second meaning has already been discussed thoroughly in the <em>Form<\/em> chapter, so this chapter will focus on the first meaning.<\/p>\r\n\r\n<p>We can identify three general types of space:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Physical Space:<\/strong> In a three-dimensional design, actual empty space between objects. Of course, there&rsquo;s always <em>air<\/em> between objects, but nothing else.<\/li>\r\n\t<li><strong>Visual Space:<\/strong> In a two-dimensional design or surface, space between elements where no other element has been placed. Of course, you have to see <em>something<\/em>, and that would be the (back)ground.<\/li>\r\n\t<li><strong>Pictorial Space:<\/strong> When designs need to represent an actual physical space, such as maps or building plans for a house, we call it pictorial space. In this case it actually encompasses both meanings of space; we represent a space in the three-dimensional real world with carefully chosen areas of (relative) emptiness in a design.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignSpaceTypes.png\" \/><\/p>\r\n\r\n<p>In all cases, though, the principles about space hold up. In all cases, as well, you&rsquo;ll always have a background for the empty space. This background could be a white wall, or a complex pattern, or a gradient, or a window &ndash; as long as this background is meant to be ground, and not figure within the composition, the concept of space holds up.<\/p>\r\n\r\n<h2>Properties of Space<\/h2>\r\n\r\n<p>Space has a direct relationship with time. When there&rsquo;s space between you and a certain threat, there&rsquo;s time to react to it (or just become scared). When there&rsquo;s space in front of you, you can spend time moving forward. As you can see, space can imply <strong>tension<\/strong> and <strong>motion<\/strong>; the same forces we saw earlier in the <em>Mass <\/em>chapter.<\/p>\r\n\r\n<p>Lots of space isolates a figure. It makes the element alone and free, but also vulnerable, creating tension between itself and whatever other elements are in the design. Overlapping objects violate the space of another, creating tension, but they are also joined together into a single unit.<\/p>\r\n\r\n<p><img src=\"media\/DesignSpaceTension.png\" \/><\/p>\r\n\r\n<p>On the other hand, only a sliver of space is scary as well, as the element can&rsquo;t move. Space allows for movement and brings life to a design; placing elements near each other with progressively smaller or bigger amounts of space implies an element is moving forward\/backward in space, or accelerating\/decelerating.<\/p>\r\n\r\n<p><img src=\"media\/DesignSpaceMotion.png\" \/><\/p>\r\n\r\n<p>Remember, that space can&rsquo;t be placed on a page like elements &ndash; it&rsquo;s a secondary effect of adding the figures, which means it can be unpredictable what happens. Using a grid certainly helps with leaving enough space of the right shape, and using the principles and properties I&rsquo;ve outlined should help you even more with using space effectively. When positive and negative space are equal, spatial depth is lacking and a more visually static composition is the result. With space as an active design element, it should come to life.<\/p>\r\n","slur":"graphic-design-space","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"413","title":"[Design] Symmetry","post":"<p>The strongest principle of graphic design is <em>balance<\/em>, which means that the strongest visual property of any element or design is <em>symmetry<\/em>. On the other hand, there&rsquo;s balance achieved through other properties &ndash; such as colour or weight &ndash; which we call <em>asymmetry<\/em>. Both have their advantages and disadvantages, and I&rsquo;ll try to help you choose which one to use for your project in this chapter.<\/p>\r\n\r\n<p>I have to remind you, though, that symmetry or asymmetry can be at many places; it can be within an element, between multiple elements or areas of a design, or across a complete design.<\/p>\r\n\r\n<h2>Symmetry<\/h2>\r\n\r\n<p>Symmetry can be found everywhere in nature, and is inherently balanced and harmonious. Symmetric objects are easy to see and identify, because they are simpler to understand, and are automatically perceived as groups (as seen with the <em>Gestalt principles<\/em>). They are typically seen as figure, and not ground, which allows them to get more attention and be more memorable. Symmetry of (positive) shapes also has the additional effect that the negative space is symmetric as well.<\/p>\r\n\r\n<p>This makes them seem like the ideal candidate for every design, but symmetrical designs are also often static, stationary, formal, or even dull.<\/p>\r\n\r\n<p><img src=\"media\/DesignSymmetryOverview.png\" \/><\/p>\r\n\r\n<h2>Types of Symmetry<\/h2>\r\n\r\n<p>Three types of symmetry can be distinguished:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Reflection:<\/strong> Mirroring an element along a <em>mirror line<\/em>. This could be a central axis, essentially flipping the element, or it could be a line somewhere else. This mirror line can best be horizontal or vertical, but diagonal mirror lines are not unheard of.<\/li>\r\n\t<li><strong>Rotation:<\/strong> Rotating elements around a common centre point. Again, this can be the centre of the element itself, or some point way outside of it. Any angle and frequency can be used, but regular intervals and a medium angle often work best. Small angles would seem like you made a mistake, while irregular intervals kind of destroys the symmetry.<\/li>\r\n\t<li><strong>Translation:<\/strong> Locating an equivalent element at another position within the design; a symmetry occurs between two elements, but it&rsquo;s not a reflection, because both elements are oriented the same way.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignSymmetryTypes.png\" \/><\/p>\r\n\r\n<p>Reflection along a diagonal line and rotation are perhaps the most adventurous and playful, while regular reflection or translation is a little more formal and ordinary.<\/p>\r\n\r\n<p>Symmetry is an especially helpful tool in creating patterns. By copying one or two elements, yet performing a symmetry on them, beautiful patterns automatically start to emerge.<\/p>\r\n\r\n<h2>Asymmetry<\/h2>\r\n\r\n<p>Theoretically, asymmetry is everything that&rsquo;s not symmetry. But, that means total chaos and cluttered design is also included in the definition, which is never what we want. Instead, we want to focus on asymmetrical balance (<em>informal balance<\/em>), the opposite of symmetry. Instead of balancing elements with the same element, only reflected\/rotated\/translated, we balance elements with other things. This could be anything; balancing a colour with its complementary colour, balancing an area of heavy weight with areas containing lots of space, balancing lots of sharp shapes with soft, organic shapes, and so on.<\/p>\r\n\r\n<p>Asymmetry fixes all the bad things about symmetry, as it&rsquo;s inherently active, informal, dynamic, and organic. It&rsquo;s a non-systematic and more creative way to achieve balance. Now asymmetry seems like the best thing to do with any design, but there&rsquo;s a big disadvantage: it&rsquo;s much more complex and difficult to achieve. When an asymmetrical composition is disturbingly <em>off<\/em> balance, the result is automatically jarring and disorienting. That&rsquo;s why it&rsquo;s recommended to start with a little symmetry (such as a grid), and then try to transform parts of the design to asymmetry.<\/p>\r\n\r\n<p><img src=\"media\/DesignSymmetryAsymmetry.png\" \/><\/p>\r\n\r\n<p>Think of it this way: nature mostly consists of symmetry, but there&rsquo;s also something going on called &ldquo;handedness&rdquo;. We, humans, have symmetrical bodies, yet strongly prefer using one hand over the other. Symmetry makes everyone a little beautiful, handedness makes everyone a little special and unique.<\/p>\r\n\r\n<h2>Types of Asymmetry<\/h2>\r\n\r\n<p>There aren&rsquo;t really any clear-cut types of asymmetry you can employ. The whole idea is that you find your most important, big, dominant element, and then balance or contrast it with lots of smaller, lighter elements.<\/p>\r\n\r\n<p>The process is best visualized as a literal balance scale. Place your focal point or biggest part of the design on one end, and see what amount and what type of elements you need on the other end to balance it out. You could assign a high value to a red element, for example, and low values to blue and purple ones (as they are cooler colours). Similarly, you could assign higher values to sharp shapes than to organic shapes, as the first attracts attention more. Again, contrast is key here.<\/p>\r\n\r\n<p><img src=\"media\/DesignSymmetryBalancingScales.png\" \/><\/p>\r\n\r\n<p>To make the concept more clear, I want to introduce a very effective and popular compositional principle that relies on asymmetry; the <strong>rule of thirds<\/strong>.<\/p>\r\n\r\n<p>By dividing an area into 9 equal blocks, by drawing three horizontal and three vertical lines, you essentially get 4 intersections around the centre. If you place your dominant element on one of these intersections, you can balance it out by placing contrasting elements (<em>counterpoints<\/em>) at the opposite intersection.<\/p>\r\n\r\n<p><img src=\"media\/DesignSymmetryRuleOfThirds.png\" \/><\/p>\r\n\r\n<p>Of course, this only works if your dominant element isn&rsquo;t too big or strong; if that&rsquo;s the case, centre it and go for more symmetry.<\/p>\r\n","slur":"graphic-design-symmetry","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"414","title":"[Design] Tension & Motion","post":"<p>These principles, <em>tension<\/em> and <em>motion<\/em>, have popped up time and time again throughout this course. They aren&rsquo;t a necessary principle or element for a design to work, but they are often what makes a design dynamic and makes us feel like it comes to life. A design could do very well without any implementation of these principles, but I suggest you try to incorporate at least some of it in every design. Additionally, by knowing how they work, you&rsquo;re less likely to accidentally use them in the wrong way.<\/p>\r\n\r\n<h2>Tension<\/h2>\r\n\r\n<p>Perfect tension occurs when two (or more) elements attract each other equally. They pull on each other, contrast each other, or balance each other with equal power. The end result is that none of the elements moves, shifts or changes, but instead creates tension. Because of this, tension is usually a direct result from applying all the principles mentioned earlier, especially contrast.<\/p>\r\n\r\n<p>The difference between tension and just stationary elements, is that tension attracts attention and is a form of imbalance, as the focus point is constantly shifting between the elements in tension. Therefore, if everything is tensed up within a design, it&rsquo;s not balanced and will probably feel uncomfortable; tension needs to be balanced with places of rest, stability and calm.<\/p>\r\n\r\n<p>Remember that tension can be bad thing and a good thing. When you&rsquo;re scared, you&rsquo;re tense, but when you&rsquo;re full of joy or energy, there&rsquo;s also tension in your body. The context &ndash; i.e. the other elements within a design &ndash; determine what mood the tension conveys.<\/p>\r\n\r\n<h2>Creating Tension<\/h2>\r\n\r\n<p>In this section, I want to give you some more specific guidelines and how tension can be realized, in addition to the principles you&rsquo;ve already learned.<\/p>\r\n\r\n<ul>\r\n\t<li>Bad alignment causes tension. An element that is not in line with the others, actively breaks that line and causes contrast or conflict.<\/li>\r\n\t<li>The edges and the centre of a design are the points of greatest attraction, and elements near it will compete for this attention. The closer something is to the edge or centre, the greater the tension.<\/li>\r\n\t<li>When the figure-ground relationship in a design is ambiguous, tension is created as shapes and forms tend to be foreground one second, and background the next.<\/li>\r\n\t<li>Diagonal shapes, especially multiple diagonal lines that do not all move in the same direction, cause tension. It feels like elements of the design are collapsing or falling over.<\/li>\r\n\t<li>Asymmetrical compositions automatically cause some tension, although it depends on how far you go with the asymmetry.<\/li>\r\n\t<li>Elements extremely far apart or extremely close cause similar levels of tension. The only difference is that elements in close proximity are seen as related or even grouped as a single unit, while elements far apart are naturally regarded as distinct.<\/li>\r\n\t<li>Varying the space between elements creates a dynamic interest, but also tension. Equal and regular spacing creates visual static and uniformity.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignTensionExamples.png\" \/><\/p>\r\n\r\n<p>Our lives are filled with opposites, and therefore tension. Making those opposites come together and have a conversation with each other, so to speak, makes design much more engaging and meaningful.<\/p>\r\n\r\n<h2>Motion<\/h2>\r\n\r\n<p>Motion occurs when two (or more) elements <em>don&rsquo;t <\/em>attract each other equally. One is stronger, heavier, and more important than the other. This force causes the other elements to move toward it. Looking at it this way, we need to view elements in a broad sense; the edge of the paper is a design element, and the different properties of an element can imply motion by themselves as well.<\/p>\r\n\r\n<p>Because actual motion isn&rsquo;t really possible in graphic design &ndash; as all we&rsquo;re seeing is static images or products &ndash; you need to find ways to provide the illusion or feeling of motion. The main purpose of implying motion, then, is to direct the viewer&rsquo;s eyes where you want them to go, and to keep them moving around the design instead of wandering off or focusing on only one aspect.<\/p>\r\n\r\n<p>If you&rsquo;re working with product design, motion of course can also mean actual motion and movable pieces, in which case the same principles hold true; make it clear that something moves and how it moves, and make people inclined to try it out and play with it.<\/p>\r\n\r\n<h2>Creating Motion<\/h2>\r\n\r\n<p>The closest and most effective thing we have to imply motion is repetition or <em>rhythm<\/em>. By repeating certain elements, yet (progressively) changing some things, we can give the illusion that those changes are actual motion happening in real time. Think of it as music; repeating a fixed set of alterations creates the &ldquo;tempo&rdquo; or &ldquo;beat&rdquo; of the design. Every element becomes a note, and the white space the silence. The properties of the element determine the kind of note; a high element is a high note, a heavy element is a low, bass-like note, and so on.<\/p>\r\n\r\n<p>You can apply this any way you like. For example, if you see a line of rectangles with progressively larger amounts of space between them, you&rsquo;re inclined to follow it and get the feeling a single rectangle is moving along the paper. If you repeat a set of circles, and one of them has a different vertical placement, it seems as though that circle is jumping.<\/p>\r\n\r\n<p>Lines are critical to implying motion. Multiple diagonal lines going in the same direction show motion and direct the viewer&rsquo;s eye towards whatever it is they&rsquo;re pointing towards. The same is true for a pointed, triangular shape. Rectilinear lines appear static, while sinuous lines appear to flow.<\/p>\r\n\r\n<p><img src=\"media\/DesignMotionExamples.png\" \/><\/p>\r\n\r\n<p>All in all, structured variety is the keyword. Let properties and elements flow on a fixed scale to give a feeling of rhythm and constant motion, but make sure you don&rsquo;t overdo it and make the design piece too energetic and chaotic. Variety in a single beat can come from making things progressively larger or smaller, but irregular, asymmetric, or exaggerated beats can be applied just as well.<\/p>\r\n","slur":"graphic-design-tension-motion","cat":"Design","subcat":"Graphic Design","video":"","diff":"4","quiz":""},
{"id":"415","title":"[Design] Framing","post":"<p>In the chapter on proportions I already said that the proportions of the paper or material you&rsquo;re using, the so-called <em>frame<\/em> of the design, plays an important role as well. This chapter looks at that specific frame, but also at another powerful type of framing; within the design itself.<\/p>\r\n\r\n<h2>What is a Frame?<\/h2>\r\n\r\n<p>Framing an element is a way to emphasize or deemphasize it. When emphasizing, a frame makes its contents stand apart from its surroundings. This can be done in numerous ways, such as putting a visible border around it, or using contrast and tension between the element and its surrounding elements (by, for example, leaving a lot or very little space around the element).<\/p>\r\n\r\n<p>When deemphasizing, the frame is subtle and makes its contents blend in with the rest of the design. This, again, can be done in numerous ways, such as removing any border or leaving a regular amount of white space around the element.<\/p>\r\n\r\n<p><img src=\"media\/DesignFramingEmphasis.png\" \/><\/p>\r\n\r\n<p>Either way, every element has a frame, and what you decide to do with it is perhaps the most important factor in determining how much attention the element gets. A strong frame around an element makes it clear for the viewer this is where their attention should be. In turn, this means you shouldn&rsquo;t use too many strong frames, or the design becomes convoluted and chaotic. On the other hand, no frames at all &ndash; more often than not &ndash; create an unclear hierarchy.<\/p>\r\n\r\n<h2>Common Frames<\/h2>\r\n\r\n<p>In most designs, at least some of the following frames are present:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Cropping: <\/strong>Essentially, cropping is the process of cutting an image or design into different and smaller proportions. By cutting off some of the original image, you can close in on detail and create interesting negative space. It can also suggest motion.<\/li>\r\n\t<li><strong>Margins: <\/strong>The margin is the area of white space between the edge of a paper and its contents. A wide margin places attention on the whole content, a narrow margin can make it seem like the content is bigger than it actually is; like it&rsquo;s bursting its seams. Margins also provide space for extra small and informational elements.<\/li>\r\n\t<li><strong>Bleeds: <\/strong>We say an image or design bleeds when it runs off the edges of the page. A bleeding image makes it seem like it&rsquo;s bigger and closer to you than it actually is, but it also creates lots of asymmetry and removes space for other elements.<\/li>\r\n\t<li><strong>Image &amp; Text: <\/strong>Images and text have such a complicated texture that they are often framed to make them clearly stand apart from their surroundings as one individual object. Additionally, putting text on top of an image poses a challenge, and the best way to solve it is putting a box around the text or reducing the contrast within the image.<\/li>\r\n\t<li><strong>Border:<\/strong> An actual, visible border can be put around elements. Borders define elements that lack an obvious edge, and can strongly emphasize anything. Borders are nothing more than lines, although some are simple and subtle lines, and some are complex and also meant as decorative elements. Sharp borders set elements apart, while soft borders let them blend in.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignFramingTypes.png\" \/><\/p>\r\n\r\n<h2>Natural Frames<\/h2>\r\n\r\n<p>Lots of elements and types of design have a natural, inherit frame that neither strongly emphasizes or deemphasizes an element &ndash; it&rsquo;s just a neutral frame.<\/p>\r\n\r\n<p>For example, the edges of a simple, white piece of paper are natural frames. Putting a border against those edges often makes a design feel small, constrained and contained &ndash; it&rsquo;s like we&rsquo;re looking at the design through a small window. Similarly, basic elements such as lines, squares, and circles have their own simple contour that is easily recognizable and automatically frames them.<\/p>\r\n\r\n<p>On the other hand, works of art are often framed within very obvious and explicit frames, in order to set them off from its surroundings or background. Because paintings are often displayed together with lots of other paintings, and hung upon a wall of certain colour, it needs to have a frame to make clear where it starts and ends.<\/p>\r\n\r\n<p><img src=\"media\/DesignFramingContext.png\" \/><\/p>\r\n\r\n<p>Be aware of the surroundings of an element or complete design, and also be aware of an element&rsquo;s natural borders. Framing small things makes them stand out, while framing large things can actually make them feel smaller and more contained. This is not only true in two-dimensional design; if you were to put a wall in front of a design, with a window in it through which you could view the whole design, it would still feel a lot smaller, even though you can see everything you&rsquo;d see without the wall in front of it.<\/p>\r\n\r\n<p>A frame can be a merely functional, as well as aesthetic element within a composition. Use framing well, and know that every element inherently has a frame &ndash; it&rsquo;s your job to emphasize or deemphasize it.<\/p>\r\n","slur":"graphic-design-framing","cat":"Design","subcat":"Graphic Design","video":"","diff":"4","quiz":""},
{"id":"416","title":"[Design] Abstraction","post":"<p>A big part of design is abstracting the infinitely complex real world, and trying to capture the good parts on paper or within a small product. Most elements within a design represent something bigger and more advanced that people are familiar with, and it&rsquo;s your job as a designer to make this relationship obvious and quick to make. The most prominent example of this is of course the <em>icon<\/em> or <em>symbol<\/em>; a simple picture that should represent something, whether viewed at small or large sizes. But there are many other cases you will have to find a way to simplify something into an understandable graphical element, yet still allow people to see or feel the relationship.<\/p>\r\n\r\n<h2>Levels of Abstraction<\/h2>\r\n\r\n<p>Everything in a design is abstracted in some way, but the degree to which this happens differs. In other words, an element&rsquo;s (and design&rsquo;s) level of abstraction ranges from low to high. A low level of abstraction means a very objective but also full and overwhelming design, while a high level of abstraction means a very subjective but also simple and memorable design.<\/p>\r\n\r\n<p>At the lowest level of abstraction is the photographic image. It captures something exactly as it is in real life, in all its complexity and diversity. Displaying an image is very objective, as you haven&rsquo;t removed things from the picture, or turned the objects into symbols.<\/p>\r\n\r\n<p>At a medium level of abstraction is recognizable form based on reality, expressed using signs and symbols. Letters, numbers, and words are in this level, as they are something we as a society have made up, and agreed to possess a certain meaning.<\/p>\r\n\r\n<p>At the highest level of abstraction are (some) pictograms and icons. They don&rsquo;t need to bear any resemblance to actual things, and are usually made up by the designer and subsequently linked with a certain word, principle, or action.<\/p>\r\n\r\n<p><img src=\"media\/DesignAbstractionLevels.png\" \/><\/p>\r\n\r\n<p>By deconstructing your message into a lot of abstract entities you increase the likelihood that people will like, remember and recognize your design. Nevertheless, it also reduces realism and increases subjectivity, as you decide completely what to include and how to display it to your audience. Abstracted designs have a greater chance to be liked by some, yet hated by others, based on preference. Abstraction helps express opinions and things other than information, but make sure your design doesn&rsquo;t turn too much into a piece of art.<\/p>\r\n\r\n<h2>Icons and Symbols<\/h2>\r\n\r\n<p>Within the realm of icons and symbols, there&rsquo;s also some distinctions to be made. It&rsquo;s highly recommended to learn to create good icons and use them everywhere you can, in two-dimensional as well as three-dimensional design. For example, everybody knows how to find the <em>off-button<\/em> on any device, based on an extremely simple made up icon created out of two lines.<\/p>\r\n\r\n<p>We identify four types of iconic representation:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Similar: <\/strong>Visually identical or highly similar to an action, object, or concept. Most effective for simple actions or concepts, less effective when complexity increases.<\/li>\r\n\t<li><strong>Example: <\/strong>Uses images of things that exemplify or are commonly associated with an action, object, or concept. Particularly effective for complex matters.<\/li>\r\n\t<li><strong>Symbolic: <\/strong>Uses images that represent an action, concept, or object at a higher level of abstraction. Effective when things involve well-established and easily recognizable objects.<\/li>\r\n\t<li><strong>Arbitrary: <\/strong>Uses images that bear little resemblance &ndash; the relationship has to be learned by the user. Should only be used when developing unique new cross-platform, cross-cultural or industry standards that will be used for long periods of time.<\/li>\r\n<\/ul>\r\n\r\n<p>Generally, icons should be labelled at one point within the design (at least), and share the same visual motif.<\/p>\r\n\r\n<p><img src=\"media\/DesignAbstractionTypes.png\" \/><\/p>\r\n","slur":"graphic-design-abstraction","cat":"Design","subcat":"Graphic Design","video":"","diff":"3","quiz":""},
{"id":"417","title":"[Design] Composition","post":"<p>In case you haven&rsquo;t noticed, we&rsquo;ve been moving from the smallest possible pieces towards the biggest throughout this course. We start with basic elements (point, line, shape), then continued with principles applicable to lots of elements and the whole design, and now we&rsquo;re at the chapter that&rsquo;s about everything design is: <em>composition<\/em>. Good graphic design is about creating an interesting and informational composition. This means that you already know quite a lot about how to do that, and this chapter might seem unnecessary, but I wanted to use it to show specific uses and applications of everything you&rsquo;ve learned. This should help you jumpstart your designs and give a better understanding of everything you&rsquo;ve seen.<\/p>\r\n\r\n<h2>What Exactly is Composition?<\/h2>\r\n\r\n<p>Composition is everything, literally. Composition is <em>which<\/em> elements you place within a design, and <em>how<\/em> you place them; it&rsquo;s the total package. It&rsquo;s about how elements are arranged throughout the design, but also about which elements to choose and which not. On top of everything you&rsquo;ve already learned, I want to leave you with three tips: how to <em>avoid unintended visual illusions<\/em>, how to create an <em>overall interesting design<\/em>, and <em>common composition types<\/em>.<\/p>\r\n\r\n<h2>Avoid Unintentional Visual Illusions<\/h2>\r\n\r\n<p>One thing you definitely want to avoid, is using a framing that creates unwanted visual illusions. These so-called <strong>tangents<\/strong> occur when picture elements just touch, but do not overlap. This can create bizarre illustrations where things seem to be connected or on top of each other, while they are actually far away from each other.<\/p>\r\n\r\n<p>Additionally, avoid cutting off objects at small or narrow places. If somebody&rsquo;s hand is cropped out of the picture, you&rsquo;ll only see a person&rsquo;s arm and think the poor soul has lost his hand. If you frame the picture in such a way that, for example, also part of the arm is cropped out, it won&rsquo;t seem to be that way.<\/p>\r\n\r\n<p><img src=\"media\/DesignCompositionTangents.png\" \/><\/p>\r\n\r\n<h2>Use Interesting Contrasts<\/h2>\r\n\r\n<p>By embracing opposing ideas in a single picture, you can establish creative tension. A few ideas are:<\/p>\r\n\r\n<ul>\r\n\t<li>Repetition and Variation<\/li>\r\n\t<li>Simplicity and Complexity<\/li>\r\n\t<li>Clarity and Ambiguity<\/li>\r\n\t<li>Balance and Imbalance<\/li>\r\n\t<li>Brightness and Darkness<\/li>\r\n\t<li>Sharpness and Softness<\/li>\r\n\t<li>Active and Passive (Shapes)<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignCompositionStraddles.png\" \/><\/p>\r\n\r\n<h2>Common Compositions<\/h2>\r\n\r\n<p>To finish off this chapter, and ultimately the whole course, I want to leave you with five ideas for your next composition. As I said before, these are just guidelines, and there&rsquo;s no specific right or wrong here.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Centre Biased<\/strong>: The centre is the focal point. Pieces around it direct focus towards the centre by (invisible) perspective lines.<\/li>\r\n\t<li><strong>Background, Midground, Foreground<\/strong>: These three levels of distance complement each other.<\/li>\r\n\t<li><strong>Focal Point &ndash; Contrast<\/strong>: Create an (artificial) focus point by heavily contrasting it with the rest of the drawing.<\/li>\r\n\t<li><strong>Focal Point &ndash; &ldquo;Camera&rdquo; Blur<\/strong>: Blur everything you don&rsquo;t want the focus to be on. On the computer it&rsquo;s easy, in real life you&rsquo;ll need to work with gradients and smudging.<\/li>\r\n\t<li><strong>Using Asymmetry<\/strong>: Rotating stuff, displacing them, using non-symmetric shapes &ndash; all sorts of things that can create a sense of discomfort, danger, or exciting\/thrilling things happening in the drawing.<\/li>\r\n\t<li><strong>Rule of Odds:<\/strong> Create a focal point by framing an element with an even number of surrounding elements. The odd number of elements makes it interesting and asymmetric, while the even number of background elements create symmetry.<\/li>\r\n\t<li><strong>Rule of Space: <\/strong>By leaving white space in a certain direction, you encourage the viewer&rsquo;s eye to move in that direction, implying motion towards a focal point.<\/li>\r\n<\/ul>\r\n\r\n<p><img src=\"media\/DesignCompositionExamples.png\" \/><\/p>\r\n","slur":"graphic-design-composition","cat":"Design","subcat":"Graphic Design","video":"","diff":"4","quiz":""},
{"id":"418","title":"[Design] The Design Process","post":"<p>In this course we have, thus far, only intensively discussed one topic at a time. The only questions remaining now read: <em>where do I start? What steps do I take and in what order?<\/em><\/p>\r\n\r\n<p>Well, this is essentially completely up to you, and it depends on the project what is easiest to start with, and whether certain stages of the process overlap. There are, however, some general steps that need to be taken, that are commonly pursued (in the same fixed order).<\/p>\r\n\r\n<p>These steps are: <em>brainstorm<\/em>, <em>create hierarchy<\/em>, <em>formstorm<\/em>, <em>prototype, apply principles<\/em>,<em> finish<\/em>.<\/p>\r\n\r\n<p><img src=\"media\/DesignProcess.png\" \/><\/p>\r\n\r\n<h2>Brainstorm<\/h2>\r\n\r\n<p>In this stage you research the topic, collect all information and determine your message and minimal requirements. For example, say you need to design a poster to recommend a certain new product that helps you write a book. Then the first thing you do is research everything that has to do with books and stories, to find visual symbols that people relate to good stories or perhaps to find what people struggle with the most when they try to write their own book.<\/p>\r\n\r\n<p>Afterwards, when you&rsquo;ve collected lots of data, you look at the requirements your client (implicitly) gives you. Perhaps they want certain colours to be used, or they have certain graphic elements all over their website they want to bring back, or they only want posters in a certain paper format.<\/p>\r\n\r\n<h2>Create Hierarchy<\/h2>\r\n\r\n<p>When you have everything you want to tell your audience, you need to structure it. You&rsquo;ll need to divide it into groups and determine levels of importance. The most important thing to get right is of course the focus point; once you&rsquo;ve established it, you can create a hierarchy of all other elements simply by checking their (subordinate) relationship to the focus point. How you&rsquo;re going to visually display that hierarchy is not of importance at this step; you&rsquo;ve learned numerous ways to do so, and they can all be applied.<\/p>\r\n\r\n<h2>Formstorm<\/h2>\r\n\r\n<p>With your information structured, you&rsquo;re ready to start thinking about visual forms. This can be done from two different points of view.<\/p>\r\n\r\n<p>Firstly, you could look at all techniques you know for grouping and establishing hierarchy, and try them out one by one. Just go through all of them and apply them the best way you can with the data and restrictions you have. Don&rsquo;t be judgmental now &ndash; try a lot, even when you think you got it or you think something will never work out.<\/p>\r\n\r\n<p>Secondly, you could forget those principles and think out of the box. Search for visuals related to what you&rsquo;re doing and see if you find out why they work so well, or if you can copy some parts of them in your design. Research action verbs related to your topic and data, and try to find visual elements solely based on that verb.<\/p>\r\n\r\n<h2>Prototype<\/h2>\r\n\r\n<p>Once you&rsquo;ve established a basic idea of what forms and shapes you want, and how you want to create the composition, you can put it all together and start prototyping. This simply means that you take all your ideas, and see if you can put them together, and perhaps change some things here and there to fit all elements. An idea can seem awesome on its own, but it&rsquo;s all the elements together that will have to make up the final design. This means it&rsquo;s okay to change an original idea or remove elements completely, <em>if<\/em> they really don&rsquo;t do your design any good.<\/p>\r\n\r\n<p>This process should actually be executed at the same time as the next stage; they are intertwined, and go hand in hand.<\/p>\r\n\r\n<h2>Apply Principles<\/h2>\r\n\r\n<p>Apply the principles you&rsquo;ve learned, and let them decide optimal placement and properties for an element. Especially adhering to strong alignment, repetition and contrast will give you good starting points for creating the final composition.<\/p>\r\n\r\n<p>NOTE: Remember, if everything is big and bold, nothing is big and bold! Apply the principles, but take a step back and do some prototyping before it goes out of hand.<\/p>\r\n\r\n<h2>Finish<\/h2>\r\n\r\n<p>Once you have a prototype, it&rsquo;s time to refine it into one final design. If you have multiple prototypes, you&rsquo;ll have to choose between them before starting with this stage &ndash; adding finishing touches to all of them won&rsquo;t help your decision and will take lots of time.<\/p>\r\n\r\n<p>These finishing touches can be anything; small changes in placement or size, addition of extra (explanatory) text, subtle changes in colour, removing or adding one or two small elements. Especially important is that you revisit the design multiple times after taking a break for at least a day, and also try to look at it from different positions and angles. When you&rsquo;re caught up in designing something, you often forget that everybody else won&rsquo;t look at it and feel about it the same way as you, the creator, do.<\/p>\r\n\r\n<p>If you have to make large decisions now, you&rsquo;ve messed up in some earlier stage and should go back to the beginning.<\/p>\r\n","slur":"graphic-design-process","cat":"Design","subcat":"Graphic Design","video":"","diff":"4","quiz":""},
{"id":"419","title":"[Design] Conclusion: what now?","post":"<p>I don&rsquo;t think any more can be said about graphic design, in general. From this point, you should do two things; start designing and practicing with the tools I gave you, and look at specializations. The first one helps these tools become second nature to you, while the second will give you advanced, specific design knowledge. For example, you could look further into logo design, or learn absolutely everything there is to know about typography, or the colour red, if you want to be that specialized.<\/p>\r\n\r\n<p>If you&rsquo;re ever stuck, here are some design exercises to do:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Restricted Library:<\/strong> Set yourself some strong and some subtle restrictions, such as a fixed grid or limited colour palette, and see what you can do with them. Simply take a piece of text or an illustration, and make an awesome design out of it, within the restrictions you set yourself.<\/li>\r\n\t<li><strong>Dailies: <\/strong>Create a simple design every day, for a relatively long period of time. Start with a simple idea, such as &ldquo;keep a journal&rdquo; and design the text you write (or things you draw). Then, every subsequent day, change the parameters or restrictions a little, and create another simple design. These should not be time consuming &ndash; instead, they will teach you how to design something unique very quickly, even when your inspiration well is dry.<\/li>\r\n\t<li><strong>Persona Portraits: <\/strong>Develop a fictitious persona, however complex you want it to be. A name, appearance, and character traits should do. Then, design something about that character, through the lens of the character. For example, the person could be very scared of squirrels &ndash; use your knowledge of line and shape and design principles to show this fear.<\/li>\r\n<\/ul>\r\n\r\n<p>As I said at the start of the course, there&rsquo;s another large part of design: <em>usability<\/em> or sometimes called <em>user experience<\/em>. This course has only been about graphical design, which is only one (small) part of designing anything. I recommend you follow the <strong><em>usability<\/em> <\/strong>course as well, to get the full picture and understand more about what lies at the basis of any good design.<\/p>\r\n\r\n<p>I hope to have been of service to you, and keep designing!<\/p>\r\n","slur":"graphic-design-conclusion","cat":"Design","subcat":"Graphic Design","video":"","diff":"4","quiz":""},
{"id":"420","title":"The Complete PHP Guide","post":"<p>PHP never expected to become this big, but nowadays the language is present in nearly every top 10 list of programming languages. Anybody who wants to create dynamic websites (or <em>web apps<\/em>) will at some point require some of PHP&rsquo;s magic. After you&rsquo;ve learned the ins and outs of HTML and CSS, and perhaps JavaScript, it&rsquo;s usually time to learn about PHP. Fortunately, the language is easy to learn.<\/p>\r\n\r\n<p>Whereas HTML stood for HyperText Markup Language, <strong>PHP<\/strong> is a recursive acronym for <em>PHP: Hypertext Preprocessor<\/em>. As the name suggests, it is executed before the HTML is loaded &ndash; it pre-processes the HTML.<\/p>\r\n\r\n<p>This means that it&rsquo;s executed on the <em>server<\/em>, and not within the user&rsquo;s browser. Such a language is called a <em>server-side language<\/em>, and has the obvious advantage that it can interact with data on the server. The typical use case for PHP is, therefore, to load data from a server, or upload data to it. This data can be blog posts, files, user login information, comments &ndash; anything you want.<\/p>\r\n\r\n<img src=\"media\/PHPOverview.png\" \/>\r\n\r\n<p>However simple or complex, however large or small, PHP will probably be able to do the job for you. This guide will teach you the core fundamentals of the language in a way that&rsquo;s as general as possible, so that you can apply it to anything, not just specific examples. Nevertheless, PHP can&rsquo;t do it all on its own, and you&rsquo;ll probably need to learn about <em>SQL<\/em> as well at some point. This is not a bad thing; SQL is another language that is crucial to the world wide web, and it helps a lot if you can use it.<\/p>\r\n\r\n<p>Ultimately, when you&rsquo;ve become all excited and want to know more, you can keep reading and move towards the <strong><em>Advanced PHP Tutorial<\/em><\/strong>. It&rsquo;s up to you how far you take it. (But I hope you take it very far; the more you know, the better and more secure your code.) Either way, have fun!<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Installation<\/li>\r\n\t<li>Syntax<\/li>\r\n\t<li>A Powerful Echo<\/li>\r\n\t<li>Data Types<\/li>\r\n\t<li>Variables I<\/li>\r\n\t<li>Variables II<\/li>\r\n\t<li>Numbers &amp; Operators<\/li>\r\n\t<li>Strings I<\/li>\r\n\t<li>Strings II<\/li>\r\n\t<li>Conditionals<\/li>\r\n\t<li>Control Flow I<\/li>\r\n\t<li>Arrays I<\/li>\r\n\t<li>Arrays II<\/li>\r\n\t<li>Loops<\/li>\r\n\t<li>Control Flow II<\/li>\r\n\t<li>Functions<\/li>\r\n\t<li>Scope<\/li>\r\n\t<li>Objects I<\/li>\r\n\t<li>Objects II<\/li>\r\n\t<li>Superglobals<\/li>\r\n\t<li>Forms &amp; Dynamic Pages<\/li>\r\n\t<li>Files I<\/li>\r\n\t<li>Files II<\/li>\r\n\t<li>Cookies &amp; Sessions<\/li>\r\n\t<li>Databases (MySQL)<\/li>\r\n\t<li>Error Handling &amp; Debugging<\/li>\r\n\t<li>Best Practices<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n","slur":"complete-php-guide","cat":"Website","subcat":"PHP","video":"","diff":"1","quiz":""},
{"id":"421","title":"[PHP] Installation","post":"<p>Computers don&rsquo;t automatically come with code that runs PHP, as computers aren&rsquo;t servers. Therefore, to test your PHP, you can:<\/p>\r\n\r\n<ul>\r\n\t<li>Use a free or paid hosting plan that has PHP installed, where you host your website on their servers. Almost all hosting has PHP pre-installed, so no need for you to worry about it.<\/li>\r\n\t<li>Turn your own computer into a small server-like environment. This can be done by downloading and installing a small piece of software, or by doing a manual installation yourself. Fortunately, PHP is completely free.<\/li>\r\n<\/ul>\r\n\r\n<p>I myself, for example, use both. I host this website on a server so that you can all access it, but when I write and test new code I use software to host the website on my own computer. Not only is this kind of local testing quicker, it&rsquo;s also cheaper and reduces the load on my website&rsquo;s server.<\/p>\r\n\r\n<p>If you&rsquo;re just a novice at PHP, doing a manual installation is unnecessarily complicated, which is why I recommend using software. (On the other hand, if you&rsquo;re already a PHP wizard, manual installation have some advantages for you. For information about that, visit the official <a href=\"http:\/\/php.net\/manual\/en\/install.php\">PHP Install Manual<\/a><\/p>\r\n\r\n<h2>Using Software<\/h2>\r\n\r\n<p>The most popular software, which is also available on all three platforms (Windows, Mac, Linux), is <a href=\"https:\/\/www.apachefriends.org\/index.html\">XAMPP<\/a><\/p>\r\n\r\n<p>Once you&rsquo;ve downloaded it, install it. There&rsquo;s no harm in installing all components, but you only really need <em>Apache<\/em>, <em>PHP<\/em> and <em>MySQL<\/em> for this course. The default path (<code>C:\\xampp<\/code>) is fine.<\/p>\r\n\r\n<h2>How do I start\/stop the Server?<\/h2>\r\n\r\n<p>Once installed, you can find the software like any other on your system, and fire it up. The interface might be intimidating, but to <strong>start the server<\/strong>, simply click <em>Start<\/em> on the Apache module. Similarly, to <strong>stop the server<\/strong>, click <em>Stop<\/em>.<\/p>\r\n\r\n<h2>Where do I place my files?<\/h2>\r\n\r\n<p>By default, the software will create the folder <code>C:\\xampp\\htdocs<\/code>. This is where you should place all the files from your website, or at least all the files you want to test. You can simply remember it by the fact that <em>htdocs<\/em> stands for <em>html documents<\/em>.<\/p>\r\n\r\n<h2>How do I view my files?<\/h2>\r\n\r\n<p>Just like every other website, you can visit the website on your own server by typing a URL in the browser bar. Because it&rsquo;s a local server that nobody else has access to, you can do so by typing <code>localhost<\/code> or <code>127.0.0.1<\/code><\/p>\r\n\r\n<p>Visit it, and you should see a welcome message from XAMPP, which means it was successfully installed. If you see an error, installation was unsuccessful, or the service is not running.<\/p>\r\n\r\n<h2>Let&rsquo;s do a Quick Test<\/h2>\r\n\r\n<p>To test if PHP is actually working, let&rsquo;s quickly create our first PHP file. PHP files are essentially no different from HTML, CSS or JavaScript files &ndash; you can create and edit them with any text editor of your choice. The only difference is that PHP files &ndash; not surprisingly &ndash; carry the extension <code>.php<\/code>.<\/p>\r\n\r\n<p>So, fire up your favourite text editor, or the default editor on your operating system (which is probably <em>Notepad<\/em> for Windows, and <em>Text Editor<\/em> for Mac). Create a new file, and type<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n&lt;?php\r\n\techo \"Hello World!\";\r\n?&gt;\r\n<\/pre>\r\n\r\n<p>What does this mean? It simply starts a PHP block, and prints the phrase <em>Hello World!<\/em> to the page. Save the file as <code>test.php<\/code>, and to check if everything works as expected, access it by visiting <code>localhost\/test.php<\/code>.<\/p>\r\n\r\n<p>If it does, congratulations! You&rsquo;ve written your first bit of PHP, and you even have a local test environment working perfectly.<\/p>\r\n\r\n<p>If it doesn&rsquo;t, there&rsquo;s a good chance you accidentally unchecked PHP on installation. If you made any type error, XAMPP will automatically throw an error message to let you know what went wrong so you can fix it. Or, you might have forgotten to place the file in the right directory.<\/p>\r\n","slur":"php-installation","cat":"Website","subcat":"PHP","video":"","diff":"1","quiz":""},
{"id":"422","title":"[PHP] Syntax","post":"<p>Like any proper programming language, PHP has a fundamental syntax that is at the basis of <em>everything<\/em>. This chapter will tell you all about it.<\/p>\r\n\r\n<h2>Integration with HTML<\/h2>\r\n\r\n<p>As you saw in last chapter, PHP files are simple text files that don&rsquo;t need to be compiled. You can simply write some code within the file, and load it up in the browser to see how it works. This is great, because it allows us to very quickly make changes and update our website. But, websites are always created out of HTML, CSS and JavaScript &ndash; what role does PHP play?<\/p>\r\n\r\n<p>Well, it pre-processes the file, which means it inserts HTML into the file <em>before<\/em> it is being sent back to the browser, and rendered. This means that you could let PHP perform something like <code>echo \"&lt;h1&gt;A Heading!&lt;\/h1&gt;\"<\/code>, and suddenly you have an extra heading on the page.<\/p>\r\n\r\n<p>Even better: it doesn&rsquo;t stop there. You can let PHP decide whether a certain part of an HTML page is displayed, you can use it to add or remove CSS rules from a page based on certain conditions, you can use it to dynamically add JavaScript code &ndash; anything is possible!<\/p>\r\n\r\n<h2>The PHP Block<\/h2>\r\n\r\n<p>For the browser to know when we&rsquo;re typing PHP code, and when we&rsquo;re using regular HTML, we need a clear and concise way to tell the browser when a block of PHP code starts and ends. For this, we have the PHP opening and closing tag:<\/p>\r\n\r\n<code class=\"longsyntax\">&lt;?php\r\n&#x9;<em>any php code here<\/em>\r\n?&gt;<\/code>\r\n\r\n<p>This means that a file with the extension <code>.php<\/code>, is simply a regular <strong>.html<\/strong> file but with the added possibility of using PHP blocks. This also means that we can do crazy things with the page using only PHP, such as remove certain parts entirely, as the next example will illustrate.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n&#x3C;?php\r\n&#x9;\/\/Because 2 is not equal to 5, the following HTML will not display\r\n&#x9;if(2 === 5) {\r\n?&#x3E;\r\n&#x3C;p&#x3E;This is a nice paragraph!&#x3C;\/p&#x3E;\r\n\r\n&#x3C;?php \r\n&#x9;\/\/Instead, PHP will insert this heading into the page\r\n&#x9;} else {\r\n&#x9;&#x9;echo &#x22;&#x3C;h1&#x3E;BUT THIS IS A HEADING!&#x3C;\/h1&#x3E;&#x22;;\r\n&#x9;}\r\n?&#x3E;\r\n<\/pre>\r\n\r\n<h2>Statements &amp; Blocks<\/h2>\r\n\r\n<p>Anything you write, will either be a <strong>statement<\/strong> or a <strong>block<\/strong>.<\/p>\r\n\r\n<ul>\r\n\t<li>A <em>statement<\/em> is a line of code that is to be carried out by the server. These include things such as printing a certain line, or performing some math.<\/li>\r\n\t<li>A <em>block<\/em> is a set of statements with lines of code that open and close the block. These include things such as blocks that should be repeated several times, or blocks that should only be executed if a certain condition is true.<\/li>\r\n<\/ul>\r\n\r\n<p>A statement always uses the following general syntax. Note the semicolon that closes off the statement.<\/p>\r\n\r\n<code class=\"longsyntax\">somestatement;<\/code>\r\n\r\n<p>A block always uses this general syntax.<\/p>\r\n\r\n<code class=\"longsyntax\">someblockopening {\r\n&#x9;lots of statements\r\n}<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/BLOCK: If a user is logged in\r\nif($userIsLoggedIn) {\r\n\t\/\/STATEMENT: Display a welcome message\r\n\techo \"Welcome, \" . $username;\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: You <em>could<\/em> leave out the last closing tag or semicolon of a PHP code block, because it will automatically be interpreted as the end of the last statement. But, it&rsquo;s bad practice, and I advise against it.<\/p>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>Just like HTML (and CSS, and JavaScript), PHP has the possibility of adding comments within the file. These comments are not executed or parsed by the server, and are merely there for you to remind yourself why you did something or how some part of your code works. As always, the syntax for comments is the only thing in the language that is distinct from the statement or block syntax.<\/p>\r\n\r\n<p>To create comments that span a <em>single line<\/em>, use one of the following two syntaxes<\/p>\r\n\r\n<code class=\"longsyntax\">\/\/ this is a comment\r\n# this is a comment<\/code>\r\n\r\n<p>To create comments that span <em>multiple lines<\/em>, use<\/p>\r\n\r\n<code class=\"longsyntax\">\/* this\r\n   is\r\n   a\r\n   comment *\/<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/* LONG EXPLANATION:\r\n * The following code does blabla \r\n * and some more blabla\r\n * and finally returns blablabla\r\n *\/\r\n\r\n\/\/This is a quick remark, and therefore a single-line comment\r\n<\/pre>\r\n\r\n<p>NOTE: PHP discards HTML comments. So, if you created an HTML comment with the regular <code>&lt;-- --&gt;<\/code> syntax, and placed a PHP block inside it, it would still execute.<\/p>\r\n","slur":"php-syntax","cat":"Website","subcat":"PHP","video":"","diff":"1","quiz":""},
{"id":"423","title":"[PHP] A Powerful Echo","post":"<p>Because PHP runs on a server, you can&rsquo;t easily check what it&rsquo;s doing from the browser or developer tools. Therefore, when working with PHP, there will be lots of times when your code could execute perfectly fine, but you wouldn&rsquo;t know &ndash; and, times when your code is completely wrong, but it doesn&rsquo;t throw any errors.<\/p>\r\n\r\n<p>To see what&rsquo;s going on, and to directly insert the results of your PHP code into an HTML page, we have two methods: <strong>echo<\/strong> and <strong>print<\/strong>.<\/p>\r\n\r\n<h2>Echo<\/h2>\r\n\r\n<p>You&rsquo;ve already seen the syntax for echo statements, which is simply<\/p>\r\n\r\n<code class=\"longsyntax\">echo expression, &hellip;, expression;<\/code>\r\n\r\n<p>As you can see, you can choose to echo only one thing, or a multitude of things (as long as they are separated by commas). These expressions can be anything &ndash; that&rsquo;s what the rest of this course is all about.<\/p>\r\n\r\n<p>If you&rsquo;re only echo-ing one expression, you can use the alternative <em>parenthesis syntax<\/em>:<\/p>\r\n\r\n<code class=\"longsyntax\">echo(expression);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\necho &#x22;&#x3C;p&#x3E;This is a paragraph that has been dynamically inserted by PHP. How great!&#x3C;\/p&#x3E;&#x22;;\r\n<\/pre>\r\n\r\n<h2>Print<\/h2>\r\n\r\n<p>The print statement does the same as echo statements, but with these differences:<\/p>\r\n\r\n<ul>\r\n\t<li>It only accepts a single expression.<\/li>\r\n\t<li>It&rsquo;s marginally slower than <strong>echo<\/strong>.<\/li>\r\n\t<li>It returns the value <strong>1<\/strong>.<\/li>\r\n<\/ul>\r\n\r\n<p>Again, it has two equivalent syntaxes:<\/p>\r\n\r\n<code class=\"longsyntax\">print(expression);\r\nprint expression;<\/code>\r\n\r\n<p>The fact that this function returns value one, simply means that the result of using it is an expression itself (unlike echo statements). This means that you can chain multiple <code>print<\/code> statements, or use them within any complex structure, whilst the <code>echo<\/code> keyword can only be at the start of a line.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nprint 5*5*5;  \/\/Displays 5*5*5 = 125 on the page\r\nprint(5*5*5); \/\/Does exactly the same.\r\n<\/pre>\r\n\r\n<h2>Why Two Syntaxes?<\/h2>\r\n\r\n<p>Because both of these methods are fundamental and crucial to the PHP language. Without them, you wouldn&rsquo;t be able to do anything (and that&rsquo;s no exaggeration). Almost all other functions in PHP, no matter how many parameters they accept, require the parentheses.<\/p>\r\n\r\n<p>To differentiate between those different kinds of functions, we call fundamental functions with those two syntaxes <strong>language constructs<\/strong>. Language constructs are more than functions; they are the building blocks of the language.<\/p>\r\n\r\n<h2>Functions? Parameters? What?<\/h2>\r\n\r\n<p>As you can see, <em>functions<\/em> play a large role in any programming language. Functions are nothing more than blocks (consisting of lots of statements) with a name, so that you can call it from anywhere within the program.<\/p>\r\n\r\n<p>Nearly every statement you will write, will be a call to some function. Lots of these functions are built-in, and allow you to do crucial things such as get the length of a piece of text, connect to a database, or perform complex math operations. (You can also create functions yourself.)<\/p>\r\n\r\n<p>But, those functions usually require some values to work &ndash; values which you must provide. For example, to get the length of a piece of text, we need to know which piece of text we want the function to work on. The values a function accepts are called <em>parameters<\/em>. The actual values you give it in a certain instance are called <em>arguments<\/em>. When a function gives you back a value, such as the length of a piece of text, we say that it <em>returns<\/em> that value.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\necho strlen(\"PANDA\");\r\n\/* The word above, strlen(), is a function that determines the length of a piece of text\r\n * It accepts one parameter, which is the piece of text we want to examine\r\n * In this case, we give it the argument \"PANDA\"\r\n * Then, it returns the length of the word \"PANDA\", which is 5.\r\n * This value, 5, is displayed in the browser by echo\r\n*\/\r\n<\/pre>\r\n\r\n<p>Don&rsquo;t worry, functions and the like will be discussed in great detail later in the course, I just wanted to get some terminology out of the way.<\/p>\r\n","slur":"php-a-powerful-echo","cat":"Website","subcat":"PHP","video":"","diff":"2","quiz":""},
{"id":"424","title":"[PHP] Data Types","post":"<p>When programming, everything you do is simply <em>doing stuff with data<\/em>. This might sound scary, but hear me out. The purpose of any program is to present information to the user, or upload information from the user to the server. You could, for example, calculate the costs of buying everything inside a shopping cart, or dynamically create an HTML navigation from pieces of data, or load all the text from a blog post.<\/p>\r\n\r\n<p>Therefore, everything your script will work with has to be data of some kind, which is why PHP has several basic <em>data types<\/em>. The eight types I will discuss here are called <strong>primitives<\/strong>.<\/p>\r\n\r\n<p>Within the primitives category, there&rsquo;s another distinction made between <em>scalar types<\/em>, <em>compound types<\/em> and <em>special types<\/em>.<\/p>\r\n\r\n<h2>Scalar Types<\/h2>\r\n\r\n<p>Scalar types contain data with only one value; they are the fundamental building blocks of the programming language. There&rsquo;s nothing smaller than this.<\/p>\r\n\r\n<h3>Integer<\/h3>\r\n\r\n<p>An integer is a whole number (positive or negative). It can be entered just like you&rsquo;d expect: by typing the actual number. Alternatively, you can enter the number in <em>hexadecimal<\/em>, <em>octal<\/em>, or <em>binary<\/em> format.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n1234; \/\/ Decimal number\r\n-123; \/\/ Negative number\r\n0123; \/\/ Octal number \r\n0x1A; \/\/ Hexadecimal number \r\n0b11111111; \/\/ Binary number \r\n<\/pre>\r\n\r\n<p>Of course, integers can&rsquo;t get infinitely large, so there&rsquo;s a maximum value. This is platform-dependant, but usually around two billion. Once you go beyond that, PHP will convert the value to a float.<\/p>\r\n\r\n<h3>Float<\/h3>\r\n\r\n<p>A floating point number (or <em>double<\/em>) is any real number, including integers, but also fractions and anything else you can imagine. There are two ways to write them; the <em>regular notation<\/em> (with the decimal point), and <em>scientific notation<\/em>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n1.234; \/\/Regular floating point\r\n1.2e3; \/\/Scientific notation for 1200\r\n7E-2;  \/\/Scientific notation for 0.07 \r\n<\/pre>\r\n\r\n<p>Floating numbers have a maximum as well, which lies around <code>1.8e308<\/code> (which is a very, very big number).<\/p>\r\n\r\n<p>Also keep in mind, that computers work with a base 2 system, which means that numbers that look nice in our base 10 system (such as <strong>0.1<\/strong> or <strong>0.55<\/strong>), will have very tiny rounding errors when you start working with them. Usually, this won&rsquo;t be a problem, as long as you never exactly compare two floating numbers.<\/p>\r\n\r\n<h3>Boolean<\/h3>\r\n\r\n<p>A Boolean is the simplest type of them all. It has only two values: <code>true<\/code> or <code>false<\/code>. Both are case-insensitive. You can use it like an on-off switch; if a certain condition is true, execute this piece of code, if it&rsquo;s false instead, execute this other piece.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\ntrue\r\nfalse\r\n<\/pre>\r\n\r\n<h3>String<\/h3>\r\n\r\n<p>A string is a sequence of characters, usually used for pieces of text. Strings can get as large as more than two billion characters. There are four ways to create a string: <em>single quotes<\/em>, <em>double quotes<\/em>, <em>heredoc<\/em> and <em>nowdoc<\/em>.<\/p>\r\n\r\n<h4>Single Quotes vs Double Quotes<\/h4>\r\n\r\n<p>Placing a piece of text between single (<code>' '<\/code>) or double (<code>\" \"<\/code>) quotes turns it into a string. Don&rsquo;t mix them up, though, or you will meet many errors.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n'This is a cool string';\r\n\"This is a cool string as well\";\r\n\r\n\"This is a cool string';\r\n\/\/ERROR, single quotes can't close off double quotes\r\n<\/pre>\r\n\r\n<h4>Heredoc vs Nowdoc<\/h4>\r\n\r\n<p>For very long pieces of text, spanning multiple lines, the other two syntaxes come in handy. Instead of quotes, you can choose the delimiters yourself!<\/p>\r\n\r\n<p>The heredoc syntax looks like this<\/p>\r\n\r\n<code class=\"longsyntax\">&lt;&lt;&lt;DELIMITER\r\nsome\r\nlong\r\nstring\r\nDELIMITER;\r\n<\/code>\r\n\r\n<p>The nowdoc syntax like this<\/p>\r\n\r\n<code class=\"longsyntax\">&lt;&lt;&lt;'DELIMITER'\r\nsome\r\nlong\r\nstring\r\nDELIMITER;\r\n<\/code>\r\n\r\n<p>The difference is that the second syntax does <em>not<\/em> parse the string. If you were to add variables or expressions within the string (which you&rsquo;ll learn about soon), they would not be parsed, but simply displayed as text instead.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$panda = &#x27;be&#x27;;\r\n\r\n&#x3C;&#x3C;&#x3C;PANDA\r\nTo\r\nbe\r\nor\r\nnot\r\nto\r\n$panda\r\nPANDA;\r\n\/\/Prints: To be or not to be\r\n\r\n&#x3C;&#x3C;&#x3C;&#x27;PANDA&#x27;\r\nTo\r\nbe\r\nor\r\nnot\r\nto\r\n$panda\r\nPANDA;\r\n\/\/Prints: To be or not to $panda\r\n<\/pre>\r\n\r\n<p>NOTE: It&rsquo;s very important that the <em>heredoc<\/em> and <em>nowdoc<\/em> closing delimiter does <strong>not<\/strong> have any other characters on its line &ndash; not even spaces or indentation.<\/p>\r\n\r\n<h2>Compound Types<\/h2>\r\n\r\n<p>Compound types are essentially a collection of scalar types. I&rsquo;ll explain these more in-depth in their respective chapters.<\/p>\r\n\r\n<h3>Array<\/h3>\r\n\r\n<p>An array is a list of values (of different data types). You could, for example, store all the pages a user has visited as strings in an array.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$grocery_list = [\"Bread\", \"Milk\", \"Sugar\", \"Honey\", \"Cornflakes\", \"Bicycle\", \"iPad\", \"Ferrari\"];\r\n<\/pre>\r\n\r\n<h3>Object<\/h3>\r\n\r\n<p>An object is an expansion on the array. Instead of only containing values, it can also have functions you can execute. Whereas an array is just a list, an object is used for things that actually represent objects. For example, you could create a single new object for every item a user has in his\/her shopping cart, and let that object hold all the information about that item.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This is just to give you a general idea, you don't need to understand it now\r\n$new_user = new User(); \/\/Create a new user object\r\n$new_user->log_in();    \/\/Call a function on the object\r\n<\/pre>\r\n\r\n<h2>Special Types<\/h2>\r\n\r\n<p>Special types are, well, special exceptions.<\/p>\r\n\r\n<h3>NULL<\/h3>\r\n\r\n<p>Sometimes you&rsquo;re going to work with data that doesn&rsquo;t have a determined data type (yet), or data that has been removed. For these cases, we say the data is of type null. The only value for this data type, is <code>null<\/code>. (Which is case-insensitive, just as with Booleans.)<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nnull;\r\n<\/pre>\r\n\r\n<h3>Resource<\/h3>\r\n\r\n<p>A resource is a reference to an external resource. They can only be created by a small list of special functions. Because there&rsquo;s a <em>huge<\/em> amount of different resources you could access and work with in PHP, I won&rsquo;t mention them all in this course. I will discuss only the most important ones: functions that access a database to get some data from it, or upload data to it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/For example, the following code connects to a database and returns a resource\r\nmysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"my_db\");\r\n<\/pre>\r\n","slur":"php-data-types","cat":"Website","subcat":"PHP","video":"","diff":"2","quiz":""},
{"id":"425","title":"[PHP] Variables I","post":"<p>Alright, so we&rsquo;ve seen all the types of data PHP can handle. But, computers can&rsquo;t just have data flying around &ndash; it needs to be (temporarily) saved somewhere, under a certain name. More importantly, by saving data under a name, we can find it and use it at other places in the code, together with other data. For this, we have <em>variables<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">A variable is a container for storing data<\/p>\r\n\r\n<p>For example, we could perform a complex calculation, and then put the result inside a variable named &ldquo;result&rdquo;. And then, at some other point in the program, we could use this result again (in another calculation or statement) by calling it by its name. Variables are <em>super-duper useful<\/em>, and you&rsquo;ll be working with them a lot, which is why I will devote two chapters to them.<\/p>\r\n\r\n<h2>Defining Variables<\/h2>\r\n\r\n<p>In PHP, variables aren&rsquo;t necessarily created. A variable exists from the moment you assign a value to it. To define a variable, we use the <em>dollar syntax<\/em> (<strong>$<\/strong>) and <em>assignment operator<\/em> (<strong>=<\/strong>):<\/p>\r\n\r\n<code class=\"longsyntax\">$some_variable_name = value;<\/code>\r\n\r\n<p>This means that, unlike some other programming languages, a variable&rsquo;s data type is not fixed. Any time you want, you can assign a new value to a variable (using the same syntax), even if that value is of completely different data type. Yes, PHP is that flexible.<\/p>\r\n\r\n<h2>Using Variables<\/h2>\r\n\r\n<p>To use a variable &ndash; which means accessing its value &ndash; simply call it by its name. And, don&rsquo;t forget to put the dollar sign in front.<\/p>\r\n\r\n<code class=\"longsyntax\">$some_variable_name<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$save_result = 5*5*5;\r\necho $save_result; \/\/Prints 125 in the browser\r\n\r\n$username = \"Juan\";\r\necho \"Welcome, \" . $username; \/\/Prints: Welcome, Juan\r\n<\/pre>\r\n\r\n<p>NOTE: If you haven&rsquo;t assigned a value to the variable you&rsquo;re calling, the value will be <code>null<\/code>. You will also probably get a notice or warning by PHP that the variable is undefined.<\/p>\r\n\r\n<h2>Naming Variables<\/h2>\r\n\r\n<p>Now, I might have given the impression that you could name variables any way you like, but that&rsquo;s not true. Some rules have been established to make sure PHP reads the code correctly as a variable (and not as a number, or string, or anything else). A variable name<\/p>\r\n\r\n<ul>\r\n\t<li>Must start with a letter (lowercase or uppercase) or underscore ( <strong>_<\/strong> )<\/li>\r\n\t<li>May never start with a number<\/li>\r\n\t<li>Can only contain alpha-numeric characters (that is, letters and figures) and underscores<\/li>\r\n<\/ul>\r\n\r\n<p>It&rsquo;s good practice to use descriptive names for your variables. It&rsquo;s better to use long variable names that describe exactly what data they hold, instead of short and indecipherable names.<\/p>\r\n\r\n<p>Additionally, PHP variables are usually written in <strong>snake_case<\/strong>. This means that you only use lowercase characters, and that you separate words by underscores. <em>Why?<\/em> Because all of PHP&rsquo;s built-in functionality also follows this syntax. (For example, the function <code>is_string(<em>par<\/em>)<\/code> checks if its parameter has data type string.)<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This will give an error\r\n$3tips = \"1) Never buy a snake. 2) Don't burn down your home 3) Don't go to bed without your teddy bear\";\r\n\r\n\/\/This is fine\r\n$tips = \"...\";\r\n$_3tips = \"...\";\r\n$tips_for_you = \"...\";\r\n<\/pre>\r\n\r\n<h2>References<\/h2>\r\n\r\n<p>In case you hadn&rsquo;t figured it out already, we can assign any value to a variable, so we can also assign the value from another variable! For example, if you create variable <code>$A<\/code> that holds a string, you could say <code>$B = $A<\/code>, and now variable <code>$B<\/code> has the exact same string as value.<\/p>\r\n\r\n<p>When you do this, PHP copies the value from one variable to another. With large values, though, this can add a huge amount of extra load for the server. This can be solved with <strong>references<\/strong>.<\/p>\r\n\r\n<p>A reference simply points two variables at each other. They take on the same value, and if one of them changes, the other changes with it. A reference is created by putting an <em>ampersand<\/em> ( <code>&amp;<\/code> ) in front of the variable value:<\/p>\r\n\r\n<code class=\"longsyntax\">$somevar = &amp;$othervar;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$some_value = true;\r\n$other_value = &$some_value;\r\n\r\n$other_value = false;\r\n\/\/Now both $some_value and $other_value are false.\r\n<\/pre>\r\n\r\n<h2>Dynamic Variables<\/h2>\r\n\r\n<p>PHP has even more variable magic in store for us. Not only can we change the value of a variable, we can also change the variable name (and keep the value)! Variables like this are, quite logically, called <strong>variable variables<\/strong>.<\/p>\r\n\r\n<p><em>How does PHP know we want it to use the other variable&rsquo;s value, instead of the other variable&rsquo;s name?<\/em> Well, we can force PHP to evaluate an expression by placing it between curly braces ( <code>{ }<\/code> ). In doing so, the syntax for creating variable variables becomes<\/p>\r\n\r\n<code class=\"longsyntax\">${$someothervar}= value;<\/code>\r\n\r\n<p>This isn&rsquo;t restricted to other variables; we could place whole computations between those curly braces to be used as the variable name. If you know you&rsquo;re only going to reference a variable, however, you can use the following shorthand syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">$$someothervar = value;<\/code>\r\n\r\n<p>This isn&rsquo;t even restricted to two dollar signs; you can place as many dollar signs after each other as you want, each referencing another variable (as illustrated in the example). Endless possibilities!<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$a = \"panda\";\r\n$panda = \"awesome\";\r\n$awesome = \"LEGO!\";\r\n\r\necho $$$a; \/\/Prints LEGO!\r\n\r\n$panda1 = \"awesome\";\r\n$panda2 = \"awesomer\";\r\n$panda3 = \"awesomest\";\r\n\r\necho ${\"panda\" . (6\/2)}; \/\/Prints awesomest \r\n<\/pre>\r\n\r\n<h2>Case Sensitivity<\/h2>\r\n\r\n<p>When I discussed the data types, I mentioned for several types that case doesn&rsquo;t matter. <code>TRUE<\/code>, <code>True<\/code> and <code>true<\/code> are all the same thing. This is true as well for all other built-in PHP functionality (although it&rsquo;s highly recommended to stick to the <em>snake case<\/em>).<\/p>\r\n\r\n<p>This is <strong>not<\/strong> true, however, for variables. If you declare a variable, you can only reference it by typing the exact same name. Thus, for example, <code>$somevar<\/code> and <code>$someVar<\/code> are not the same. Lots of errors are the result of people carelessly changing the case of their variables &ndash; don&rsquo;t be that person, stick to the same syntax!<\/p>\r\n\r\n<p>NOTE: Any other user-defined things you&rsquo;ll learn about later, such as classes, are also case sensitive.<\/p>\r\n\r\n<h2>Deleting Variables<\/h2>\r\n\r\n<p>Last but not least, how would you go about deleting a variable you don&rsquo;t need anymore? There are two ways, but you should use the first one:<\/p>\r\n\r\n<ul>\r\n\t<li>Set a variable to value <code>null<\/code><\/li>\r\n\t<li>Call <code>unset($variable)<\/code><\/li>\r\n<\/ul>\r\n\r\n<p>The second doesn&rsquo;t just set a variable to null again, it actually completely removes the variable from the program. Usually, this is a much heavier process to execute, and you don&rsquo;t really need it.<\/p>\r\n\r\n<p>Once you use a variable that is not set, however, PHP will throw all sorts of errors and hell breaks loose. Therefore, in some cases where you&rsquo;re unsure, it&rsquo;s useful to check whether a variable is set or not. This is done with<\/p>\r\n\r\n<code class=\"longsyntax\">isset($var);<\/code>\r\n\r\n<p>NOTE: When a variable is set to null, it&rsquo;s also set. A variable is only not set if it has no defined value.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If the username is set, which it is in this case, welcome the user\r\n$username = \"Ginty\";\r\n\r\nif(isset($username)) {\r\n\techo \"Welcome, \" . $username;\r\n}\r\n\r\n\/\/Now we remove the variable, and the code will NOT welcome the user a second time\r\nunset($username);\r\n\r\nif(isset($username)) {\r\n\techo \"Welcome, \" . $username;\r\n}\r\n<\/pre>\r\n","slur":"php-variables-I","cat":"Website","subcat":"PHP","video":"","diff":"2","quiz":""},
{"id":"426","title":"[PHP] Variables II","post":"<p>Now that you know how to create any variable you can dream of, and assign it any value you can dream of, there&rsquo;s one huge problem left: <em>incompatible data types<\/em>. It&rsquo;s nice that we have all these different data types, but because they are different, we can&rsquo;t easily mix them together. How can you add an integer to a string? How can you divide a Boolean by a float? How can you compare an array of different values with another array of different values?<\/p>\r\n\r\n<p>This chapter will talk about how PHP automatically converts data types to make them compatible, and what you can do to change or aid this process.<\/p>\r\n\r\n<h2>Type Juggling<\/h2>\r\n\r\n<p>PHP is a nice guy. When you give him several data of different type, he will try to convert them so they match together, and he won&rsquo;t even tell you the bother he went through. The result is that you can mindlessly mash together variables of differing data type without errors, but the results can be unexpected. This is called <em>type juggling<\/em>.<\/p>\r\n\r\n<p>If you put together two types, they will both be converted to the data type with highest importance. The order of type importance is:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\"><em>Null =&gt; Boolean =&gt; String =&gt; Integer =&gt; Float<\/em><\/p>\r\n\r\n<p>So, for example,<\/p>\r\n\r\n<ul>\r\n\t<li>Executing <code>0.5 + 1<\/code> will result in a float of value <code>1.5<\/code>.<\/li>\r\n\t<li>Executing <code>3 + \"7 dwarfs\"<\/code> will result in an integer with value <code>10<\/code>.<\/li>\r\n\t<li>The integer value of <code>null<\/code>, <code>false<\/code> and <code>&ldquo;&rdquo;<\/code> (empty string) is <code>0<\/code>.<\/li>\r\n\t<li>The integer value of <code>true<\/code> is <code>1<\/code>.<\/li>\r\n<\/ul>\r\n\r\n<p><em>What about arrays, objects and resources?<\/em> Well, because there&rsquo;s many different ways to combine two of them, there&rsquo;s no predefined behaviour. How do you add an array to an array? Add all values separately, or simply append the other array to the back? Putting together values of these data types will result in an error, unfortunately.<\/p>\r\n\r\n<p>NOTE: Either way, remember that type juggling only converts a variable to a certain data type <em>in that specific expression<\/em>. The data type of the variable itself will remain untouched.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$variable_uno = 15;\r\n$variable_duo = true; \r\n\r\n\/\/Integer has highest importance, so true is converted to 1\r\n\/\/And the following statement will print 16\r\necho $variable_uno + $variable_duo;\r\n<\/pre>\r\n\r\n<h2>Type Casting<\/h2>\r\n\r\n<p>There&rsquo;s two problems with type juggling: we have no control over how it converts the values, and the conversion isn&rsquo;t permanent. Luckily, we can force PHP to convert a variable to a certain type with <em>type casting<\/em>. Two alternative syntaxes exist:<\/p>\r\n\r\n<code class=\"longsyntax\">$variable = (type) value;\r\nsettype($variable, \"type\");<\/code>\r\n\r\n<p>They do exactly the same &ndash; you can use what you like best. These type keywords are available:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Keyword(s)<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>int<\/code>, <code>integer<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>bool<\/code>, <code>boolean<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to Boolean<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>float<\/code>, <code>double<\/code>, <code>real<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to float<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>string<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to string<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to array<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>object<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to object<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>unset<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts to null<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>binary<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Casts a string to binary string<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$username = \"Ginty\";\r\n\r\n\/\/The username has now become an integer with value 0\r\n$username = (int) $username; \r\n\r\n\/\/The username has now become a boolean with value false\r\nsettype($username, \"bool\");\r\n<\/pre>\r\n\r\n<h2>Debugging Variables<\/h2>\r\n\r\n<p>Now, we&rsquo;re in a bit of a quandary here. If we were to <code>echo<\/code> a variable, we would see its converted value. With all this type juggling and wizarding, how could we ever know the type of a variable?<\/p>\r\n\r\n<p>Well, to retrieve the type of a variable (as a string), use<\/p>\r\n\r\n<code class=\"longsyntax\">gettype($var);<\/code>\r\n\r\n<p>Lots of times, however, you simply want to check if a variable is of a certain type. For example, if the user inputs a string, do this, but if not, do that. For this, we have a collection of so-called <em>is_type<\/em> functions, which returns true if a variable is indeed of type <em>type<\/em>, and false otherwise.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_int()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is an integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_float()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is a float<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_numeric()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is an integer or float<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_bool()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is a Boolean<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_string()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is a string<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_scalar()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is a scalar (integer \/ float \/ string \/ Boolean)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_array()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is an array<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_object()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is an object<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_resource()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is a resource<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_null()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is null<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_callable()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Checks if variable is callable (which means it&rsquo;s a function &ndash; more on that later).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$username = \"Ginty\";\r\n\r\necho gettype($username); \/\/Prints \"string\"\r\n\r\n$is_username_valid = is_string($username); \/\/Returns true, so yes the username is valid!\r\n<\/pre>\r\n\r\n<h2>A Programmer's Echo<\/h2>\r\n\r\n<p>But, there&rsquo;s one last problem here. (Last one, I promise.) Because it&rsquo;s impossible to convert an array or object, we can&rsquo;t even use <code>echo<\/code> to see its value. It would just give us an error. It would, therefore, be nice if we had some functions that would print our variables in a more readable, programmer-friendly way.<\/p>\r\n\r\n<p>Fortunately, PHP has just the thing for you. To print any variable in a readable way, use<\/p>\r\n\r\n<code class=\"longsyntax\">print_r($var)<\/code>\r\n\r\n<p>If you want to take it one step further, and print all the information about a variable (type, contents, size, etcetera), use one of the following two<\/p>\r\n\r\n<code class=\"longsyntax\">var_dump($var);\r\nvar_export($var, true);<\/code>\r\n\r\n<p>NOTE: The difference is that the second function outputs information about the variable as valid PHP code. So, you could save that information inside a new variable and do something with it if you want.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$player = \"Ginty\";\r\n$items = [\"Potion\", \"Sword\", \"Gun\", \"Smartphone\"];\r\n$player_has_a_sword = true;\r\n\r\nvar_dump($player); \/\/Prints string(5) \"Ginty\"\r\n\r\n\/\/It also helps display variables that can't be converted to meaningful strings\r\nvar_dump($player_has_a_sword); \/\/Prints bool(true)\r\n\r\nprint_r($items); \r\n\/* Prints the array in readable format;\r\n\tArray\r\n\t(\r\n    \t&#x9;[0] => Potion\r\n    \t&#x9;[1] => Sword\r\n    \t&#x9;[2] => Gun\r\n    \t&#x9;[3] => Smartphone\r\n\t)\r\n*\/\r\n<\/pre>\r\n\r\n","slur":"php-variables-II","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"427","title":"[PHP] Numbers & Operators","post":"<p>Now that we know how to create lots of different variables of lots of different types, it&rsquo;s time to actually start doing something with them. Computers are, at their core, number crunching machines, performing complex math the whole time. Math, however simple or complex, will always play a big part in your programs as well, which is we need an easy and quick way to perform those math operations. Not surprisingly, for this we can use <strong>operators<\/strong>.<\/p>\r\n\r\n<p>NOTE: Some other data types have very important operators as well, which I will discuss when their chapter arrives. Also, the syntax used for type casting also used <em>casting operators<\/em>.<\/p>\r\n\r\n<h2>Arithmetic Operators<\/h2>\r\n\r\n<p>The four basic arithmetic operators you&rsquo;ve known all your life are available, plus a few more.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Addition<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subtraction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Multiplication<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\/<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Division<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Modulus*<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>**<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Exponentiation<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$a = 1 + 2 - 2; \/\/$a is 1\r\n$b = 2 * 2 \/ 4; \/\/$b is 1\r\n$c = 2**4       \/\/$c is 2^4 = 2*2*2*2 = 16\r\n<\/pre>\r\n\r\n<h2>Incrementing\/Decrementing<\/h2>\r\n\r\n<p>Adding exactly one to a number, or subtracting one from it, is such a common operation that it has its own operators. Be sure to notice, however, that placing this operator before or after the variable makes a huge difference.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>$x++<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Adds 1 to $x, then returns $x.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>$x--<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subtracts 1 from $x, then returns $x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>++$x<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns $x, then adds 1 to $x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>--$x<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns $x, then subtracts 1 from $x<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$a = 0;\r\n$b = $a++; \/\/$b is 1, $a is 1\r\n$b = ++$a; \/\/$b is 1, $a is 2\r\n<\/pre>\r\n\r\n<h2>Assignment Operators<\/h2>\r\n\r\n<p>Not so long ago I told you: &ldquo;computers can&rsquo;t have loose data flying around&rdquo;. Similar to how we store temporary results in our head when performing mental arithmetic, computers always need to store the results of a certain computation somewhere. In real life, people could say things like <em>1 + 1 = 2<\/em> or <em>1 * 2 * 3 = 6<\/em>. Not in the computer world.<\/p>\r\n\r\n<p>Every statement where you assign a value, you <strong>must<\/strong> have a variable on the left hand side, and all the values and operators on the right hand side. So, every time you want to update a variable, you simply assign its old value <em>plus<\/em> some additional computations.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$a = 5;\r\n$a = $a + 5; \/\/$a is 10\r\n$a + 5; \/\/ERROR.\r\n<\/pre>\r\n\r\n<p>NOTE: For those that don&rsquo;t know: we&rsquo;ve seen in the beginning that we can use the <em>assignment operator<\/em> ( <code>=<\/code> ) to assign a value to a variable; everything on the left of that operator is called the <em>left hand side<\/em>, and everything on the right the <em>right hand side<\/em>. Also, every value or variable around an operator is called an <em>operand<\/em>.<\/p>\r\n\r\n<p>This seems tedious and verbose, so you&rsquo;ll be happy to hear there&rsquo;s a much shorter and easier way to write these assignments.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Shorthand<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Full<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x += y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x + y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x -= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x - y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x *= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x * y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\/=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x \/= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x \/ y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x %= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x % y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>**=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x **= y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>x = x**y<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>I think this is a very important concept to understand completely, as you&rsquo;ll need it very often, and it works the exact same way in all programming languages. You just need to remind yourself that you can&rsquo;t have loose data &ndash; everything needs to be saved into a variable. (Or put into a function.)<\/p>\r\n\r\n<p>NOTE: Knowing this, we can see that the <code>++<\/code> and <code>--<\/code> operators are just shortcuts for <code>+= 1<\/code> and <code>-= 1<\/code>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$a = 10; \r\n$a += 5; \/\/$a is 15\r\n$a *= 2; \/\/$a is 30\r\n<\/pre>\r\n\r\n<h2>Not a Number<\/h2>\r\n\r\n<p>What would happen if we were to (accidentally) use these operators with other data types than floats or integers? In most cases, it would just throw an error. There are three special cases though:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Booleans<\/strong>: the value <code>true<\/code> resolves to the integer 1, while <code>false<\/code> resolves to 0.<\/li>\r\n\t<li><strong>Strings<\/strong>: When converting strings to integers, PHP expects the number to be at the start of the string. It tries to make the number as large as possible. So, if a string doesn&rsquo;t contain a number at the start, it will always resolve to <code>0<\/code>.<\/li>\r\n\t<li><strong>Special Floats<\/strong>: There are some floating point numbers that can be written down or calculated with PHP, but can&rsquo;t be written exactly as a number. (Sounds weird, I know.) We call these <em>not a number<\/em>.<\/li>\r\n<\/ul>\r\n\r\n<p>Among those special floats are infinity ( <code>INF<\/code> ) and values that can&rsquo;t be calculated (such as <code>sqrt(-1.0)<\/code>, the square root of minus one). To check if a float is special, and therefore not a number we can perform calculations with, we use<\/p>\r\n\r\n<code class=\"longsyntax\">is_nan($float);<\/code>\r\n\r\n<p>To merely check whether a value is infinite or not, which also means we can't really do anything with it, use<\/p>\r\n\r\n<code class=\"longsyntax\">is_infinite($float);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\necho \"7 dwarves\" + \"1 snow white\";   \/\/Prints 8\r\necho \"Dwarves, 7\" + \"Snow white, 1\"; \/\/Prints 0\r\n\r\n$a = is_nan(true);       \/\/$a is false\r\n$a = is_nan(acos(1.1));  \/\/$a is true\r\n<\/pre>\r\n\r\n<h2>Operator Precedence<\/h2>\r\n\r\n<p>The precedence of operators is just like you&rsquo;re used to.<\/p>\r\n\r\n<ul>\r\n\t<li>The <code>**<\/code> operator is evaluated first<\/li>\r\n\t<li>The <code>*<\/code>, <code>\/<\/code> and <code>%<\/code> are evaluated second<\/li>\r\n\t<li>The <code>+<\/code> and <code>&ndash;<\/code> are evaluated third<\/li>\r\n<\/ul>\r\n\r\n<p>If you want to change this order, by grouping certain terms together, you can use the familiar parentheses ( <code>( )<\/code> ).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\necho 5 + 5 * 3;   \/\/Prints 5 + 15 = 20\r\necho (5 + 5) * 3; \/\/Prints 10 * 3 = 30\r\n<\/pre>\r\n\r\n<h2>*Modulus<\/h2>\r\n\r\n<p>The <em>modulus<\/em> of x and y is simply the remainder after dividing x by y. For example:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">16 % 6 = 4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (because 16 \/ 6 = 2 with remainder 4)<br \/>\r\n18 % 3 = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (because 18 = 3 * 6, so there&rsquo;s no remainder)<br \/>\r\n&nbsp; 4 % 3 = 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (because 4 \/ 3 = 1 with remainder 1)<\/p>\r\n","slur":"php-numbers-operators","cat":"Website","subcat":"PHP","video":"","diff":"2","quiz":""},
{"id":"428","title":"[PHP] Strings I","post":"<p>Now that we&rsquo;ve discussed what to do with floats and integers, it&rsquo;s time to move on to the next scalar type: <em>strings<\/em>. PHP heavily relies on pieces of text being downloaded from servers, or uploaded to them. The famous <code>echo<\/code> statement can in the end only insert strings into the HTML page. That&rsquo;s why there&rsquo;s a lot of ways to alter, modify, and play with strings &ndash; and this chapter will tell you all about them.<\/p>\r\n\r\n<h2>Variable Expansion<\/h2>\r\n\r\n<p>You would expect that if you were to write a variable within a string, it would simply print the variable&rsquo;s name instead of its value. With the <em>single-quoted<\/em> and <em>nowdoc<\/em> syntax that is the case &ndash; but, the <em>double-quoted<\/em> and <em>heredoc<\/em> syntax can do something special. When you write a variable, it will <em>expand <\/em>it and display its value instead.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$username = \"Panda\";\r\n\r\necho 'Last log in: $username at 2PM'; \/\/Prints: Last log in: $username at 2PM\r\necho \"Last log in: $username at 2PM\"; \/\/Prints: Last log in: Panda at 2PM\r\n<\/pre>\r\n\r\n<h2>Escape Characters<\/h2>\r\n\r\n<p>Both the single-quoted and double-quoted syntax have a problem; what should I do if I want to add an actual quote as a character? If you would just type the quote character, PHP would think the string ended and the results wouldn&rsquo;t be pretty. We can solve this by <strong>escaping<\/strong> the characters &ndash; which simply means that we add a <strong>backslash<\/strong> ( <code>\\<\/code> ) in front of it.<\/p>\r\n\r\n<p>Single-quoted strings support only one escape sequence: <code>\\'<\/code> (to use single quotes in your text)<\/p>\r\n\r\n<p>Double-quoted strings support a bunch of escape sequence:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Sequence<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Meaning<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\n<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Newline (goes to start of a new line)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\r<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Carriage return (goes to end of newline, and moves back until it finds first character stop)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\t<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Horizontal tab<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\v<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Vertical tab<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\e<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Escape<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\f<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Form feed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\\\<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Backslash<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\$<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Dollar sign<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\\\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Double quote<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This prints a warning that the variable $password is undefined\r\necho \"Your password has been saved in the $password variable\";\r\n\r\n\/\/This prints the sentence as you intended it\r\necho \"Your password has been saved in the \\$password variable\";\r\n\r\n\/\/This throws an error\r\necho 'The meeting is scheduled at 2 o'clock';\r\n\r\n\/\/This prints what you want\r\necho 'The meeting is scheduled at 2 o\\'clock';\r\n<\/pre>\r\n\r\n<p>NOTE: Most of these only show themselves when you start working with HTML forms and input. Also, because the newline character differs across operating systems, it&rsquo;s a custom on the internet to use <code>\\r\\n<\/code> for newlines. Just to be safe.<\/p>\r\n\r\n<h2>String Operators<\/h2>\r\n\r\n<p>We&rsquo;ve seen that PHP converts strings to numbers (in a rather rude way) when we try to add them together using the mathematical operators. So, how should we combine strings? Well, we use another operator for &ldquo;string addition&rdquo;, which is called the <strong>concatenation operator<\/strong> ( <code>.<\/code> ).<\/p>\r\n\r\n<code class=\"longsyntax\">$combinedstring = $string1 . $string2;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\necho \"Welcome, \" + \"my friend!\"; \/\/Prints 0, as both strings as interpreted as integers\r\n\r\necho \"Welcome, \" . \"my friend!\"; \/\/Prints: Welcome, my friend!\r\n<\/pre>\r\n\r\n<h2>Operator Precedence<\/h2>\r\n\r\n<p>Just as with the math operators, the concatenation operator has its own rank of importance. It has the same precedence as the <code>+<\/code> and <code>&ndash;<\/code> operator, which is great most of the time, but can lead to some nasty errors (see the example).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\necho \"Total Costs: \\$\" + 50 + \" USD\"; \/\/Prints: 50\r\necho \"Total Costs: \\$\" + 50 . \" USD\"; \/\/Prints: 50 USD\r\necho \"Total Costs: \\$\" . 50 . \" USD\"; \/\/Prints: Total Costs: $50 USD\r\n<\/pre>\r\n\r\n<h2>Accessing Characters<\/h2>\r\n\r\n<p>Before I bestow upon you a large amount of useful string functions, I have one last special string syntax to explain. If you want to access a single <em>character<\/em> of string, you can do so with<\/p>\r\n\r\n<code class=\"longsyntax\">$string[index];<\/code>\r\n\r\n<p>Here, the <em>index<\/em> is the position of the character within the string. Computers start counting at 0, so the first character will have index 0, the second character index 1, and so on. (This counting system is important to never ever forget, as it can save you a lot of trouble.)<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$tweet = \"@pandaqi You really do like pandas, don't you?\";\r\n\r\n\/\/If the first letter of the tweet is an at-sign\r\n\/\/and the second letter is NOT an empty space...\r\nif($tweet[0] == \"@\" && $tweet[1] != \" \") {\r\n\t\/\/Classify the tweet as a response to somebody\r\n\techo \"The tweet is a response!\";\r\n\t...\r\n}\r\n<\/pre>\r\n","slur":"php-strings-I","cat":"Website","subcat":"PHP","video":"","diff":"2","quiz":""},
{"id":"429","title":"[PHP] Strings II","post":"<p>I think a practical example is in order here &ndash; all this theoretical talk about numbers and strings might start to feel a bit useless at the moment, and the last thing I want you to do is quit learning!<\/p>\r\n\r\n<p>On this website, there&rsquo;s lots of things going on. When you access a page, it takes the URL (which is a string), and chops it up into little pieces. Based on those, it finds the article that belongs with it, and loads that post (which is one huge string) from the database. I don&rsquo;t like writing large bits of HTML to insert code examples, images, or other special things &ndash; so I use a much easier system. I simply invented my own special tags (such as <code>[more]<\/code> or <code>#LINKHERE#<\/code>), and I replace those tags by their complex HTML counterparts, to create a page that is dynamically created when you load it! It saves me work, it saves you work.<\/p>\r\n\r\n<p>This, is the power of strings. We can extract all sorts of information from them, and without them, PHP and the world wide web would probably not exist. This chapter will discuss the most fundamental functions you can call on strings to make them dance.<\/p>\r\n\r\n<h2>Changing Case<\/h2>\r\n\r\n<p>Let&rsquo;s start simple. Sometimes you have a string where the letters are lowercase, where they should be uppercase (or vice versa). To change case, we have these functions:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>lcfirst(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes the first character of the string lowercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ucfirst(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes the first character of the string uppercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>strtolower(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes all characters of the string lowercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>strtoupper(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes all characters of the string uppercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$mail_goodbye = \"kiND reGArdS, PANDaqi\";\r\n\r\n\/\/Let's fix this ugly sentence by making it all lowercase,\r\n\/\/and the first letter uppercase\r\necho ucfirst(strtolower($mail_goodbye));\r\n<\/pre>\r\n\r\n<p>NOTE: As you can see, function names in PHP are quite self-descriptive. Sometimes this is a good thing, sometimes this makes function names unnecessarily complicated and type-error prone.<\/p>\r\n\r\n<h2>Searching<\/h2>\r\n\r\n<p>We can search strings to check whether they contain certain substrings (and their position or amount of occurrences). For example, if we wanted to check if users entered a valid email address, we could check whether the string contains the &ldquo;@&rdquo; character.<\/p>\r\n\r\n<p>NOTE: All of these functions will, if they can&rsquo;t find what you&rsquo;re looking for, or something else goes wrong, return the value <code>false<\/code>.<\/p>\r\n\r\n<p>To search for the first occurrence of a substring, use one of these functions:<\/p>\r\n\r\n<code class=\"longsyntax\">strstr(<em>$haystack<\/em>, <em>$needle<\/em> [, <em>$before_needle<\/em>]);\r\nstristr(<em>$haystack<\/em>, <em>$needle<\/em> [, <em>$before_needle<\/em>]);<\/code>\r\n\r\n<p>This searches the string <em>$haystack<\/em> for the substring <em>$needle<\/em>, and returns everything that comes after it. The <em>$before_needle<\/em> parameter is optional. If you set it to true, the function will instead return everything that comes <em>before<\/em> the substring.<\/p>\r\n\r\n<p>The difference between the first and second function is that little <code>i<\/code> in the middle. It means that the second function performs a case-insensitive search. Most functions have this variation, and I will point them out.<\/p>\r\n\r\n<p>NOTE: I&rsquo;ll be using this way of describing syntax for the rest of the course, as the PHP manual (and most other programming manuals) do so as well.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$user_email = \"thatawesomeguy@gmail.com\";\r\n\r\necho strstr($user_email, \"@\");       \/\/Prints @gmail.com\r\necho strstr($user_email, \"@\", true); \/\/Prints thatawesomeguy\r\n\r\n$x = stristr($user_email, \"girl\");   \/\/$x is false (thatawesomeguy is not thatawesomegirl)\r\n<\/pre>\r\n\r\n<p>To search for the position of a substring, use one of these functions:<\/p>\r\n\r\n<code class=\"longsyntax\">strpos(<em>$haystack<\/em>, <em>$needle<\/em> [, <em>$offset<\/em>]);\r\nstrrpos(<em>$haystack<\/em>, <em>$needle<\/em> [, <em>$offset<\/em>]);\r\nstrripos(<em>$haystack<\/em>, <em>$needle<\/em> [, <em>$offset<\/em>]);<\/code>\r\n\r\n<p>This returns the index of the substring <em>$needle<\/em> in string <em>$haystack<\/em>. The optional <em>$offset<\/em> is an integer that determines from what index it starts looking; normally it starts at the first letter (index 0), but you can set it to start searching later.<\/p>\r\n\r\n<p>The function <code>strpos<\/code> returns the first occurrence, <code>strrpos<\/code> the last occurrence (note the second &lsquo;r&rsquo;), and <code>strripos<\/code> does so case-insensitively.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$user_emails = \"thatawesomegirl@gmail.com | thatawesomeguy@gmail.com\";\r\n\r\necho strpos($user_emails, \"@\");  \/\/Prints 15\r\necho strrpos($user_emails, \"@\"); \/\/Prints 42\r\n<\/pre>\r\n\r\n<h2>Substrings<\/h2>\r\n\r\n<p>If you don&rsquo;t know the substring you&rsquo;re looking for, but you <em>do<\/em> know at what index it should be, use<\/p>\r\n\r\n<code class=\"longsyntax\">substr(<em>$haystack<\/em>, <em>$start<\/em> [, <em>$length<\/em>]);<\/code>\r\n\r\n<p>It returns the string starting from index <em>$start<\/em> until the end of the string. If you set <em>$length<\/em>, it will only return that amount of characters.<\/p>\r\n\r\n<p>If you use a negative integer for <em>$start<\/em>, it will start that amount of characters from the <em>end<\/em> of the string (the same is the case for <em>$length<\/em>).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$video_url = \"http:\/\/youtube.com\/watch?v=BH-wP2TDUBQ\";\r\n\r\n\/\/For example, if all the videos we reference on our website are \r\n\/\/from youtube, all we need is to store the ID (BH-wP2TDUBQ).\r\n\r\n\/\/Two identical ways to do so are:\r\n$video_id = substr($video_url, -11);\r\n$video_id = substr($video_url, 27);\r\n<\/pre>\r\n\r\n<p>You can also just count how many times a substring occurs in a string. For this, use<\/p>\r\n\r\n<code class=\"longsyntax\">substr_count(<em>$haystack<\/em>, <em>$needle<\/em>, [<em>$offset<\/em>, <em>$length<\/em>]);<\/code>\r\n\r\n<p>The <em>$length<\/em> parameter specifies how many characters to check after the <em>$offset<\/em> index. If omitted, the length is the same as the length of the whole string, which means it searches through the whole string and counts all the occurrences.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$achievements = \"Got 1000 subscribers | Got 1000 views on a single day | Chose an awesome password | Invited 5 friends to the website\";\r\n\r\n\/\/To know the total amount of achievements this user has, simply count the amount of seperators\r\necho substr_count($achievements, \" | \") + 1;\r\n<\/pre>\r\n\r\n<h2>Cutting<\/h2>\r\n\r\n<p>Now that we can find certain substrings within strings, it would be nice if we could cut them out of there, or at least divide the string into multiple substrings. For example, after having checked that the <code>@<\/code> character is present in a string, we would like to select the domain name to see if it is valid. We don&rsquo;t want <em>panda@panda<\/em> to resolve as a valid email address, but we do want <em>panda@gmail.com<\/em> to be seen as valid.<\/p>\r\n\r\n<p>Let&rsquo;s start simple. To remove useless whitespace from a string use<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>trim(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Trim whitespace from both beginning and end<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ltrim(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Trim whitespace only from the beginning (&ldquo;from the left&rdquo;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>rtrim(<em>$str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Trim whitespace only from the end (&ldquo;from the right&rdquo;)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Oh no, somebody accidentally added spaces in front of their \r\n\/\/answer for our very, very important price quiz\r\n$quiz_answer = \"  RED  \";\r\n\r\n\/\/Fixed it.\r\necho trim($quiz_answer); \/\/Prints RED\r\n<\/pre>\r\n\r\n<p>To cut a string into many substrings, you can split it into an array. For example, you could have a long string of data separated by a certain character, and then use that character to retrieve every individual piece again. For this, use<\/p>\r\n\r\n<code class=\"longsyntax\">explode(<em>$delimiter<\/em>, <em>$haystack<\/em>);<\/code>\r\n\r\n<p>Note that it splits the whole string at every point it finds the delimiter, but it removes all occurrences of the delimiter itself.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Oh no, the new blogger insisted on using his own syntax for storing blog post information\r\n$post_information = \"Hello dear readers, thanks for reading my blog!#22 January 2203#News#10 comments\";\r\n\r\n\/\/Luckily, we can just split the string to get the information seperated;\r\nprint_r(explode(\"#\", $post_information));\r\n\/*\r\n\tArray\r\n\t(\r\n    \t[0] => Hello dear readers, thanks for reading my blog!\r\n    \t[1] => 22 January 2203\r\n    \t[2] => News\r\n    \t[3] => 10 comments\r\n\t)\r\n*\/\r\n<\/pre>\r\n\r\n<h2>Replacing<\/h2>\r\n\r\n<p>Last, but certainly not least, we might want to replace a piece of a string. (Instead of violently cutting it away.) (Or, you know, setting off explosions on the string.)<\/p>\r\n\r\n<p>To replace <em>all<\/em> occurrences of a search string with a replacement string, use one of these<\/p>\r\n\r\n<code class=\"longsyntax\">str_replace(<em>$search<\/em>, <em>$replace<\/em>, <em>$haystack<\/em> [, <em>$count<\/em>]);\r\nstr_ireplace(<em>$search<\/em>, <em>$replace<\/em>, <em>$haystack<\/em> [, <em>$count<\/em>]);<\/code>\r\n\r\n<p>The last parameter, if you set it, requires a <em>variable<\/em> to be put into it. After the function has executed, this variable will then hold the amount of replacements that have been made.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$post = \"Great news! Peanut butter sales are increasing, so buy stock now!\";\r\n\r\n\/\/Our boss read somewhere that the word Peanut makes potential customers feels uncomfortable\r\n\/\/Now we need to change every instance of the word with the friendlier sounding Apple\r\n$post = str_replace(\"Peanut\", \"Apple\", $post, $count_var);\r\n\r\necho $post;      \/\/Prints: Great news! Apple butter sales are increasing, so buy stock now!\r\necho $count_var; \/\/Prints: 1 \t(because we've made one replacement)\r\n<\/pre>\r\n\r\n<p>Just as before, it&rsquo;s possible that we don&rsquo;t know the exact string, but we do know the index where it starts and ends. To perform a replacement in these cases, use<\/p>\r\n\r\n<code class=\"longsyntax\">substr_replace(<em>$haystack<\/em>, <em>$replace<\/em>, <em>$start<\/em> [, <em>$length<\/em>]);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Let&#x27;s say our comment system allows users to make their comments red\r\n\/\/To enable this fancy functionality, they need to start their comment with the word PANDA\r\n$comment = &#x22;PANDAWow, this post was very informative!&#x22;;\r\n\r\n\/\/Replace the first five characters with an opening HTML tag\r\n$comment = substr_replace($comment, &#x27;&#x3C;span style=&#x22;color:red;&#x22;&#x3E;&#x27;, 0, 5);\r\n\r\n\/\/Then add a closing tag at the end\r\n$comment .= &#x22;&#x3C;\/span&#x3E;&#x22;;\r\n\r\necho $comment;\r\n\/\/Prints a red comment reading &#x22;Wow, this post was very informative!&#x22;\r\n<\/pre>\r\n","slur":"php-strings-II","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"430","title":"[PHP] Conditionals","post":"<p>After all this talk about floats, integers, and strings, you might start to think &ndash; <em>Booleans can only be true or false, how important could they possibly be?<\/em> Well, extremely important. And that&rsquo;s an understatement.<\/p>\r\n\r\n<p>To computers, the world is binary and exact. Computers can&rsquo;t &ldquo;sorta execute this&rdquo;, or &ldquo;just try to do this or that&rdquo;. They either do it, or they don&rsquo;t. Something is either executed exactly as it was written, or it isn&rsquo;t executed at all. Therefore, we must use Booleans to tell the computer when to execute which pieces of code.<\/p>\r\n\r\n<p>For example, we could check whether a user is logged in. If the check returns <em>true<\/em>, we can execute a piece of code that welcomes him and throws confetti into his face. If the check returns <em>false<\/em>, we display a login page. A user can&rsquo;t be &ldquo;sort of logged in&rdquo; &ndash; he either is, or he isn&rsquo;t.<\/p>\r\n\r\n<p>Similarly, we could check whether a search query was successful, by checking the amount of results it returned. We could write a piece of code that checks whether or not that amount is greater than 0. If the check returns <em>true<\/em>, we have results and we should display them. If the check returns <em>false<\/em>, we have no results and we should suggest a different query to the user. A query can&rsquo;t have more than zero results, yet zero results &ndash; either there are results, or there aren&rsquo;t.<\/p>\r\n\r\n<p>Not surprisingly, we have another set of operators at our disposable for this important aspect of PHP; the <strong>comparison operators<\/strong> and <strong>logical operators<\/strong>. Both of these are <em>conditional operators<\/em>, and using them creates a <em>conditional<\/em> &ndash; a certain condition under which the program should or shouldn&rsquo;t do something.<\/p>\r\n\r\n<h2>Comparison Operators<\/h2>\r\n\r\n<p>In our examples above, we already saw how we could compare two values to get a truth value. As it turns out, comparison is the best and only way to do so; is this greater than that? Or is this less than that? Or is this equal to that?<\/p>\r\n\r\n<p>Therefore, if you place any of the following comparison operators between two operands, PHP will not perform some arithmetic operation &ndash; instead, it will check whether the comparison is true or false, and return that.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both operands are equal (after type conversion)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>===<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Identical<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both operands are equal, and of the same data type<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!=<\/code><br \/>\r\n\t\t\t<code>&lt;&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Not Equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both operands are not equal (after type conversion)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Not Identical<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both operands are not equal, or not of the same data type<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Less than<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left hand side is less than the right hand side<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Greater than<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left hand side is greater than the right hand side<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Less than or equal to<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left hand side is less than or equal to the right hand side<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Greater than or equal to<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left hand side is greater than or equal to the right hand side<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This is true, because \"2\" and 2 have the same integer value\r\n$cond = (2 == \"2\");\r\n\r\n\/\/This is false, because \"2\" and 2 are not identical (one is integer, one is string)\r\n$cond = (2 === \"2\");\r\n\r\n\/\/This is true, because \"Panda\" is equal to \"Panda\"\r\n$cond = (\"Panda\" <= \"Panda\");\r\n\r\n\/\/This is false, because true is the same as true\r\n$cond = (true != true);\r\n<\/pre>\r\n\r\n<h2>Logical Operators<\/h2>\r\n\r\n<p>Performing one comparison is great, but it&rsquo;s usually not enough. For example, if a user logs in we want to check whether the username matches the password. In other words, only if our check for the username returns true, <em>and<\/em> our check for the password returns true as well, we can log the user in. To combine conditionals, we can use the following logical operators:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>and<\/code><br \/>\r\n\t\t\t<code>&amp;&amp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Logical AND<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both operands are true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>or<\/code><br \/>\r\n\t\t\t<code>||<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Logical OR<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if either the left <em>or<\/em> the right operand is true, or both<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>xor<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Logical XOR<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if either the left <em>or<\/em> the right operand is true, but <em>not<\/em> both<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Logical NOT<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the operand is not true. (It negates the value.)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$password = \"1234\";\r\n$username = \"Ginty\";\r\n\r\n\/\/This is true, because both password and username are correct\r\n$cond = ($password === \"1234\" && $username === \"Ginty\");\r\n\r\n\/\/This is false, because both are true, so the inversion is false\r\n$cond = (!($password === \"1234\" && $username === \"Ginty\"));\r\n\r\n\/\/This is not secure; it already returns true if only one of the two is correct!\r\n$cond = ($password === \"1234\" || $username === \"Ginty\");\r\n\r\n\/\/If a user has at least 10 credits, or it is a new user, return true\r\n\/\/(so that we can level up the user, or give him bonus credits, or whatever)\r\n$cond = ($credits_total >= 10 || $new_user);\r\n<\/pre>\r\n\r\n<p>NOTE: Even though the function of <code>and<\/code> and <code>&amp;&amp;<\/code> is exactly the same, just as <code>or<\/code> and <code>||<\/code>, there&rsquo;s a difference in precedence. The shorthand operators <code>&amp;&amp;<\/code> and <code>||<\/code> have a higher precedence than <code>and<\/code> and <code>or<\/code>, which means they are evaluated first.<\/p>\r\n","slur":"php-conditionals","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"431","title":"[PHP] Control Flow","post":"<p>Now that we&rsquo;ve seen how to create conditionals, we can look at how to actually use them. The name of this chapter &ndash; Control Flow &ndash; is just a fancy name for controlling which parts of the code the program executes, and which it doesn&rsquo;t. You can use the result of conditionals to control the flow of a program; does it go into this direction, or that direction?<\/p>\r\n\r\n<p>To do so, we have <em>if statements<\/em> (and its related brothers and sisters). They are quite intuitive actually; if a certain condition is true, do that. Because you&rsquo;ll be using some kinds of if statements a lot, PHP also provides a few special <em>conditional operators<\/em> again to make our lives easier.<\/p>\r\n\r\n<h2>The if Statement<\/h2>\r\n\r\n<p>To execute a certain block of code only <strong>if<\/strong> a certain condition is true, we use<\/p>\r\n\r\n<code class=\"longsyntax\">if(<em>condition<\/em>) { <em>lots of statements<\/em> }<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$logged_in = ($password === \"1234\" && $username === \"Ginty\");\r\n\r\n\/\/If the username and password entered are correct...\r\nif($logged_in) {\r\n\t\/\/...welcome the logged in user\r\n\techo \"Welcome, $username!\";\r\n}\r\n<\/pre>\r\n\r\n<h2>The else Statement<\/h2>\r\n\r\n<p>Once upon a time, there was a game that changed its settings based on what time it was. If it was night, it would display a dark background, if it was day, it would display a light background. Undoubtedly, this game used an <strong>else<\/strong> statement.<\/p>\r\n\r\n<p>An <strong>else<\/strong> statement is executed if the condition within the preceding if statement returns false. In normal language you would say: if this condition is true, do this, else do that. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">else { <em>lots of statements<\/em> }<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$hours = 20;\r\n\r\n\/\/If it's morning or afternoon...\r\nif($hours <= 18) {\r\n\techo \"Good day!\";\r\n\/\/Else if it's night ($hours > 18)\r\n} else {\r\n\techo \"Good night!\";\r\n}\r\n<\/pre>\r\n\r\n<h2>The else if Statement<\/h2>\r\n\r\n<p>Now, suppose that game wanted to be more dynamic and display three different backgrounds. Night would mean a black background, daylight a bright background, and morning a neutral background. This would be the perfect situation for an <strong>else if<\/strong> statement!<\/p>\r\n\r\n<p>The else if statement is executed when the previous condition is false, <em>and<\/em> checks for a new condition. In normal language: if this condition is true, do this, else if this other condition is true, do that. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">else if(<em>condition<\/em>) { <em>lots of statements<\/em> }<\/code>\r\n\r\n<p>You can put as many of these after each other as you need. The&nbsp;first must, however, always follow an <code>if<\/code> statement.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$hours = 20;\r\n\r\nif($hours < 12) {\r\n\techo \"Good morning!\";\r\n} else if($hours <= 18){\r\n\techo \"Good day!\";\r\n} else {\r\n\techo \"Good night!\";\r\n}\r\n<\/pre>\r\n\r\n<p>The <code>else<\/code> statement, if you decide to include it, must always be put at the end of such an if&ndash;elseif construction. In any case, it only executes if <em>all<\/em> the other conditions have returned false.<\/p>\r\n\r\n<p>NOTE: It&rsquo;s highly recommended to always use <code>else<\/code> as the last statement in the construction, and not <code>else if<\/code>. That&rsquo;s because the latter requires another condition, which requires more work from you to type, and if anything changes within the program, you have to change that condition as well.<\/p>\r\n\r\n<h2>The Ternary Operator<\/h2>\r\n\r\n<p>By far the most common conditional structure you&rsquo;ll use is: if this condition is true, set a variable to that value, else set it to another value. That&rsquo;s why the <strong>ternary operator<\/strong> was invented to reduce the amount of work! The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">$variable = <em>condition<\/em> ? <em>value if true<\/em> : <em>value if false<\/em>;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/ A simple piece of code to make a player in a game\r\n\/\/ face in the direction he's running\r\n$player_velocity = -20;\r\n\r\n\/\/LONG syntax\r\nif($player_velocity > 0) {\r\n\t$player_direction = 1;\r\n} else {\r\n\t$player_direction = -1;\r\n}\r\n\r\n\/\/SHORT syntax\r\n$player_direction = ($player_velocity > 0) ? 1 : -1;\r\n<\/pre>\r\n\r\n<h2>The Spaceship Operator<\/h2>\r\n\r\n<p>Another common conditional structure, is where you want to check whether two values are the same, or if one is less\/greater than the other. You could do this with an if-elseif-else statement, but the <strong>spaceship operator<\/strong> (dumdumdumduuuum) makes this much easier.<\/p>\r\n\r\n<p>It compares the two operands, and<\/p>\r\n\r\n<ul>\r\n\t<li>Returns <code>0<\/code> if both operands are equal<\/li>\r\n\t<li>Returns <code>1<\/code> if the left operand is greater<\/li>\r\n\t<li>Returns <code>-1<\/code> if the right operand is greater.<\/li>\r\n<\/ul>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">x &lt;=&gt; y<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$points_player_1 = 160;\r\n$points_player_2 = 240;\r\n\r\n$result = $points_player_1 <=> $points_player_2;\r\n\r\nif($result === 0) {\r\n\techo \"It's a tie\";\r\n} else if($result === 1) {\r\n\techo \"Player 1 won!\";\r\n} else {\r\n\techo \"Player 2 won!\";\r\n}\r\n<\/pre>\r\n\r\n<h2>Null Coalescing<\/h2>\r\n\r\n<p>The last common conditional structure, is one where you want to check whether some variable is null before you start doing anything with it. Because, if you don&rsquo;t, you&rsquo;ll likely run into lots of errors because the variable isn&rsquo;t properly set. To easily set a default value for a variable if it happens to be null, use the <strong>null coalescing<\/strong> operator. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">x ?? y<\/code>\r\n\r\n<p>Because it&rsquo;s an operator, you can chain it as many times as you want. In that case, it will return the first value that is not null.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say a user requested a blog post.\r\n\r\n\/\/If, for some reason, the post can't be found and the request returns null..\r\n\/\/display the newest post to satisfy the user - if that returns null as well...\r\n\/\/display an error page saying that the post could not be found\r\n$post = $requested ?? $newest ?? $error_404_page;\r\n<\/pre>\r\n\r\n<h2>Integration with HTML<\/h2>\r\n\r\n<p>Here I just want to point out the very important property of PHP we also saw at the beginning &ndash; it integrates seamlessly with HTML. So, we don&rsquo;t have to restrict our control structures to PHP statements only. We can place an if statement, then break out of PHP mode and write some regular HTML\/CSS\/JavaScript, and then get into PHP mode again to close the if statement. This way, we let PHP decide whether whole chunks of HTML are displayed or not, based on certain conditions.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n&#x3C;?php\r\n&#x9;if($current_url == &#x22;search.php&#x22;) {\r\n?&#x3E;\r\n\r\n&#x9;&#x3C;p&#x3E;Give us a moment, and we will search our database for what you were looking for!&#x3C;\/p&#x3E;\r\n\r\n&#x3C;?php\r\n&#x9;} else {\r\n?&#x3E;\r\n\r\n&#x9;&#x3C;p&#x3E;Welcome to &#x3C;span&#x3E;awesomewebsite.com&#x3C;\/span&#x3E;! I hope you enjoy your stay.&#x3C;\/p&#x3E;\r\n\r\n&#x3C;?php\r\n&#x9;}\r\n?&#x3E;\r\n<\/pre>\r\n","slur":"php-control-flow","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"432","title":"[PHP] Arrays I","post":"<p>Having looked intensively at the four scalar data types, it&rsquo;s time to move on to compound types; arrays and objects.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">An array is nothing more than a list of values.<\/p>\r\n\r\n<p>They are incredibly useful for grouping huge amounts of related data. Once saved inside an array, you can perform all sorts of operations on it - such as sorting or combining the data. For example, I could retrieve all the usernames of users that are currently in a chat room, put them inside an array, sort them alphabetically, and then display them to all other users with some HTML markup around them.<\/p>\r\n\r\n<p>NOTE: The values of an array are called its <em>elements<\/em>.<\/p>\r\n\r\n<h2>Types of Arrays<\/h2>\r\n\r\n<p>There are many types of lists in the real world &ndash; grocery lists, step-by-step lists, definition-explanation lists &ndash; which means we need versatile arrays. That&rsquo;s why PHP arrays can, unlike some other programming languages, store values of different data type. For example, some elements can be integers while others are strings.<\/p>\r\n\r\n<p>Additionally, we need to be able to retrieve the <em>value<\/em> of an element by accessing its <em>key<\/em>. For example, we could save a value &ldquo;5 dollars&rdquo; under the key &ldquo;price&rdquo;. There are three different types of arrays, based on how they use these key-value pairs:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Indexed Arrays: <\/strong>The key of an element is a numeric index. Just as with strings, the first element of the array has index 0, the next one has index 1, and so on.<\/li>\r\n\t<li><strong>Associative Arrays:<\/strong> The key of an element is a string or integer. In this case, the keys can be anything you like. (But they can&rsquo;t be other data types, such as float or Boolean.)<\/li>\r\n\t<li><strong>Multidimensional Arrays:<\/strong> The values are arrays! By placing an array inside an array, we basically create a table with rows and columns of data. (And, by adding even more arrays, we could make it three-dimensional and higher.) But, all of this is advanced stuff that will be discussed later.<\/li>\r\n<\/ul>\r\n\r\n<h2>Creating an Array<\/h2>\r\n\r\n<p>Arrays are flexible. Based on what syntax you use to define its elements, the array changes its type for you. To create an <em>indexed array<\/em>, use one of the following two syntaxes<\/p>\r\n\r\n<code class=\"longsyntax\">array(value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>);\r\n[value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>];<\/code>\r\n\r\n<p>This could only create an indexed array, because we&rsquo;ve only provided values and no keys.<\/p>\r\n\r\n<p>To create an <em>associative array<\/em>, use one of these two syntaxes<\/p>\r\n\r\n<code class=\"longsyntax\">array(key<sub>1<\/sub> =&gt; value<sub>1<\/sub>, &hellip;, key<sub>n<\/sub> =&gt; value<sub>n<\/sub>);\r\n[key<sub>1<\/sub> =&gt; value<sub>1<\/sub>, &hellip;, key<sub>n<\/sub> =&gt; value<sub>n<\/sub>];<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$shopping_cart = [\"Bicycle\", \"Plush Toy\", \"Table Tennis Table\"];\r\nprint_r($shopping_cart);\r\n\/* Prints:\r\nArray\r\n(\r\n    [0] => Bicycle\r\n    [1] => Plush Toy\r\n    [2] => Table Tennis Table\r\n)\r\n*\/\r\n\r\n$bicycle_info = [\"price\" => 10, \"colour\" => \"red\", \"gears\" => 5, \"forsale\" => true];\r\nprint_r($bicycle_info);\r\n\/* Prints:\r\nArray\r\n(\r\n    [price] => 10\r\n    [colour] => red\r\n    [gears] => 5\r\n    [forsale] => 1\r\n)\r\n*\/\r\n<\/pre>\r\n\r\n<p>NOTE: PHP will automatically try to cast strings to integers, if possible, because indexed arrays are easier and faster to handle than associative ones. So, don&rsquo;t add numbers enclosed in quotes as keys (like <code>&quot;1&quot;<\/code>), because they will be converted to numeric indexes &ndash; and you will be confused.<\/p>\r\n\r\n<h2>Accessing Elements<\/h2>\r\n\r\n<p>We&rsquo;ve now seen how to set an array&rsquo;s values when you define it, but what if we want to add\/remove or get\/set a value later on? We can use the bracket-syntax &ndash; which we also used for accessing characters of a string &ndash; to refer to a single element of the array:<\/p>\r\n\r\n<code class=\"longsyntax\">$somearray[key];<\/code>\r\n\r\n<p>Note that this key can be an integer index, or a string &ndash; the syntax is the same. Also note that we can use the assignment operator (just as we would with variables) to assign a new value.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$shopping_cart = [\"Bicycle\", \"Plush Toy\", \"Table Tennis Table\"];\r\necho $shopping_cart[1]; \/\/Prints: Plush Toy\r\n<\/pre>\r\n\r\n<p>When you assign a value to a key that doesn&rsquo;t exist within the array, PHP will be nice and add this new key-value pair to the array for you. On the other hand, to remove an element, you need to use <code>unset()<\/code> again (just as with regular variables).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$shopping_cart = [\"Bicycle\", \"Plush Toy\", \"Table Tennis Table\"];\r\necho $shopping_cart[5]; \/\/Prints error that no element exists with index 5\r\n\r\n$shopping_cart[5] = \"Laptop\";\r\necho $shopping_cart[5]; \/\/Prints Laptop\r\n\r\nunset($shopping_cart[5]); \/\/Now it's been removed from the array again\r\n<\/pre>\r\n\r\n<h2>Array Operators<\/h2>\r\n\r\n<p>Arrays, just like the other datatypes, support operators as well. Because it&rsquo;s a list of things, however, they change their meaning if both operands are arrays. If only one operand is an array, these will throw an error.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Name<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Result<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Union<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Combines two arrays, and removes duplicate elements<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Equality<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both arrays have the same key\/value pairs<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>===<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Identity<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both arrays have the same key\/value pairs, in the same order, and of the same data type<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!=<\/code><br \/>\r\n\t\t\t<code>&lt;&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Inequality<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both arrays don&rsquo;t have the exact same key\/value pairs<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Non-identity<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both arrays don&rsquo;t have the exact same key\/value pairs, or in a different order, or values of different data types<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$user_login = [\"usn\" => \"Ginty\", \"pwd\" => \"1234\"];\r\n$user_profile = [\"pet\" => \"Panda\", \"gender\" => \"Girl\"];\r\n\r\n$user = $user_login + $user_profile; \/\/Contains all information on the user\r\n\r\n$user_login_1 = [\"usn\" => \"Ginty\", \"pwd\" => \"1234\"];\r\n$user_login_2 = [\"pwd\" => \"1234\", \"usn\" => \"Ginty\"];\r\n\r\n\/\/Prints bool(false), because key-value pairs are exactly the same\r\nvar_dump($user_login_1 <> $user_login_2); \r\n\r\n\/\/Prints bool(true), because the order is different\r\nvar_dump($user_login_1 !== $user_login_2);\r\n<\/pre>\r\n\r\n<p>NOTE: Even though it&rsquo;s not possible to cast an array onto some other type, it <em>is<\/em> possible to cast scalar types to arrays. The result will be an array with a single element at index 0, with the scalar as its value.<\/p>\r\n\r\n<h2>Retrieving the Length<\/h2>\r\n\r\n<p>You&rsquo;ll be retrieving the length of an array quite often, because you either want to display how many items are in a list, or want to go through all the elements of the array. (Which we&rsquo;ll discuss in the chapters on <em>Loops<\/em>.) To do so, use one of these:<\/p>\r\n\r\n<code class=\"longsyntax\">sizeof($array);\r\ncount($array);<\/code>\r\n\r\n<p>They do exactly the same (they are called <em>aliases<\/em>) &ndash; just pick the one you&rsquo;re most likely to remember. Also keep in mind that, in the case of indexed arrays, the last element of the array has index (<em>length-1<\/em>), because we start counting from 0.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$users = [\"Ginty\", \"Juan\", \"Mark\", \"Avocado\", \"BATMAN\"];\r\necho sizeof($users); \/\/Prints 5\r\n<\/pre>\r\n\r\n<h2>Glue<\/h2>\r\n\r\n<p>Just as we could explode a string into an array, we can glue all the elements of an array together into a string. To do so,&nbsp;use one of these (again, they do exactly the same):<\/p>\r\n\r\n<code class=\"longsyntax\">implode(separator, $array);\r\njoin(separator, $array);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Suppose we want to thank all our users for their contribution in a single sentence\r\n$users = [\"Ginty\", \"Juan\", \"Mark\", \"Avocado\", \"BATMAN\"];\r\n\r\necho \"Thanks to \" . implode(\", \", $users) . \"!\";\r\n\/\/Prints Thanks to Ginty, Juan, Mark, Avocado, Batman!\r\n<\/pre>\r\n\r\n<h2>Adding\/Removing Elements<\/h2>\r\n\r\n<p>For the quizzing system on this website, I dynamically create an array full of random, wrong answers and one right answer I fetch from my question database. It would be a pain to have to shift all the current elements one position to the right so I can add a new one at the start. Fortunately, PHP has some nice methods for adding\/removing elements from the start\/end of arrays.<\/p>\r\n\r\n<p>To add elements at the <em>start<\/em> of the array (and therefore shift all the other elements one position to the right), use<\/p>\r\n\r\n<code class=\"longsyntax\">array_unshift($array, value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>);<\/code>\r\n\r\n<p>To add elements at the <em>end<\/em> of an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">array_push($array, value<sub>1<\/sub>, &hellip;, value<sub>n<\/sub>);<\/code>\r\n\r\n<p>To remove the <em>first<\/em> element of an array (and therefore shift all the other elements one position to the left), use<\/p>\r\n\r\n<code class=\"longsyntax\">array_shift($array);<\/code>\r\n\r\n<p>To remove the <em>last<\/em> element of an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">array_pop($array);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$users_in_chatroom = [\"Ginty\", \"Juan\", \"Mark\", \"Avocado\", \"BATMAN\"];\r\n\r\n\/\/Hey, Laura just came into the chatroom!\r\narray_push($users_in_chatroom, \"Laura\");\r\n\r\n\/\/But, Ginty hates Laura, so she leaves\r\narray_shift($users_in_chatroom);\r\n\r\n\/\/Now Laura is upset as well, so she leaves\r\narray_pop($users_in_chatroom);\r\n\r\n\/*Now the array is \r\nArray\r\n(\r\n    [0] => Juan\r\n    [1] => Mark\r\n    [2] => Avocado\r\n    [3] => BATMAN\r\n)\r\n*\/\r\n<\/pre>\r\n","slur":"php-arrays-I","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"433","title":"[PHP] Arrays II","post":"<p>Last chapter discussed the most important functions and operators you can use with arrays, but they still can&rsquo;t do everything. Just as I did with strings, I want to use this chapter to outline other extremely useful functions to use with arrays &ndash; such as <em>cutting a subarray<\/em>, <em>searching for specific keys or values<\/em>, and <em>sorting <\/em>the array.<\/p>\r\n\r\n<h2>Subarrays<\/h2>\r\n\r\n<p>We&rsquo;ve already seen how we can select a single element of the array, but what if we want to select multiple elements? Well, then your selection is a list, which means it is a subarray! (Just as with substrings.)<\/p>\r\n\r\n<p>To get part of an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">array_slice(<em>$array<\/em>, <em>offset<\/em> [, <em>length<\/em>, <em>preserve_keys<\/em>]);<\/code>\r\n\r\n<p>The slice starts at index <em>offset<\/em>, and takes <em>length<\/em> amount of elements. If it&rsquo;s not set, it will end the slice at the end of the array. Note that this does not alter the original array; it simply returns the slice so you can use it.<\/p>\r\n\r\n<p>If you&rsquo;re working with indexed arrays, PHP will automatically reorder the keys of the slice so that they start at index 0. Set <em>preserve_keys<\/em> to true if you want to prevent this.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Oh no, somehow, some wrong information entered the array\r\n$tweet_information = [\"just setting up my twttr\", \"21 March 2006\", \"Jack\", \"250 retweets\", \"PANDAS ARE COOL\", \"CRISPS ARE DELICIOUS\"];\r\n\r\n\/\/Luckily, we can slice out the right information\r\n$tweet_information = array_slice($tweet_information, 0, 4);\r\n\r\n\/\/The result is [\"just setting up my twttr\", \"22 January 2016\", \"Jack\", \"250 retweets\"];\r\n<\/pre>\r\n\r\n<p>Alternatively, you can use the following syntax to remove a portion of the array and perhaps replace it:<\/p>\r\n\r\n<code class=\"longsyntax\">array_splice(<em>$array<\/em>, <em>offset<\/em> [, <em>length<\/em>, <em>$replacement_array<\/em>]);<\/code>\r\n\r\n<p>The elements from the <em>$replacement_array<\/em> are inserted at the <em>offset<\/em> index. Note that it only replaces the elements it removes &ndash; so, if you remove say five elements, and the replacement array contains ten, it will only insert the first five.<\/p>\r\n\r\n<p>The function itself returns the elements that have been removed, but it also alters the original array (unlike the <code>array_slice()<\/code> function).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$user = [\"downvotes received\" => 24, \"upvotes received\" => 7, \"comments\" => 5, \"forum posts\" => 15];\r\n\r\n\/\/If we only care about his\/her votes, we could remove the other two elements\r\narray_splice($user, 2);\r\n\r\n\/\/Or we can replace them with other information regarding votes\r\narray_splice($user, 2, 2, [\"downvotes given\" => 3, \"upvotes given\" => 8]);\r\n\r\n\/\/Or we can do something with the elements we've removed\r\n$comments_and_posts = array_splice($user, 2);\r\n<\/pre>\r\n\r\n<h2>Searching<\/h2>\r\n\r\n<p>To check if a value exists in an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">in_array(<em>$needle<\/em>, <em>$haystack<\/em> [, <em>$strict<\/em>]);<\/code>\r\n\r\n<p>This searches for the value <em>$needle<\/em> in the array <em>$haystack<\/em>. If you set the third parameter to <em>true<\/em>, it also requires that the data type is the same. The functions returns <code>true<\/code> if it finds the value, and <code>false<\/code> otherwise.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$grocery_list = [\"Butter\", \"Pizza\", \"Chocolate\", \"Milk\"];\r\n\r\n\/\/If there's milk on our grocery list...\r\nif(in_array(\"Milk\", $grocery_list)) {\r\n\t\/\/...notify the milk man!\r\n}\r\n<\/pre>\r\n\r\n<p>Sometimes, though, you want to get the key that belongs to a certain value. For that, use<\/p>\r\n\r\n<code class=\"longsyntax\">array_search(<em>$needle<\/em>, <em>$haystack<\/em> [, <em>$strict<\/em>]);<\/code>\r\n\r\n<p>If it can&rsquo;t find the value, and therefore can&rsquo;t find the key, it returns <code>false<\/code>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$grocery_list = [\"Butter\", \"Pizza\", \"Chocolate\", \"Milk\"];\r\n\r\nvar_dump( array_search(\"Milk\", $grocery_list) ); \/\/Prints int(3)\r\nvar_dump( array_search(\"Pancakes\", $grocery_list) ); \/\/Prints bool(false). Aww, no pancakes today.\r\n<\/pre>\r\n\r\n<p>Lastly, to check if a certain key is within an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">array_key_exists(<em>$needle<\/em>, <em>$haystack<\/em>);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$comment = [\"message\" => \"Hey Juan, nice holiday photos! Really dig your beard.\", \r\n\t\t\t\"timestamp\" => \"May 30 2016, 2PM\",\r\n\t\t\t\"from\" => \"Ginty\",\r\n\t\t\t\"reply\" => true];\r\n\r\nif(array_key_exists(\"reply\", $comment)){\r\n\t\/\/notify Juan that he has a reply to his fabulous holiday photographs.\r\n}\r\n<\/pre>\r\n\r\n<h2>Compare &amp; Replace<\/h2>\r\n\r\n<p>The following functions can be used for performing certain operations between multiple arrays:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array_diff(<em>$arr1<\/em>, <em>$arr2<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the values from <em>$arr1<\/em> that are not present in <em>$arr2<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array_intersect(<em>$arr1<\/em>, <em>$arr2<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the values from <em>$arr1<\/em> that are also present in <em>$arr2<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array_combine(<em>$keys<\/em>, <em>$values<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns an array with the elements from <em>$keys<\/em> as keys, and elements from <em>$values<\/em> as values.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array_merge(<em>$arr1<\/em>, <em>$arr2<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Appends the elements from <em>$arr2<\/em> to the end of <em>$arr1<\/em>. Duplicate keys will be set to the value from <em>$arr2<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>array_replace(<em>$arr1<\/em>, <em>$arr2<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Replaces values from <em>$arr1<\/em> with values from <em>$arr2<\/em>, if they have the same key.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we're writing a system for Santa Claus to manage his presents\r\n$wishlist_papa = [\"Beer\", \"Television\", \"Cat\"];\r\n$wishlist_mama = [\"Lipstick\", \"Mirror\", \"Cat\"];\r\n\r\n\/\/Result: [Beer, Television, Lipstick, Mirror]\r\narray_diff($wishlist_papa, $wishlist_mama); \r\n\r\n\/\/Result: [Cat]\r\narray_intersect($wishlist_papa, $wishlist_mama); \r\n\r\n\/\/Result: [Beer => Lipstick, Television => Mirror, Cat => Cat]\r\narray_combine($wishlist_papa, $wishlist_mama); \r\n\r\n\/\/Result: [Beer, Television, Lipstick, Mirror, Cat]\r\narray_merge($wishlist_papa, $wishlist_mama); \r\n\r\n\/\/Result: [Lipstick, Mirror, Cat]\r\narray_replace($wishlist_papa, $wishlist_mama); \r\n\r\n\/\/Obviously, Santa Claus is going to use the intersection to minimize his costs\r\n<\/pre>\r\n\r\n<p>NOTE: All methods, except for combine, can actually accept as many arrays as you want, as long as you provide at least two.<\/p>\r\n\r\n<h2>Sorting<\/h2>\r\n\r\n<p>Up until now, the order of an array is simply the order in which you put in the values, and it hasn&rsquo;t really mattered much. There are many cases imaginable, however, where sorting an array is a crucial action. Obvious cases are when you want to display lists in alphabetical order, but you also need it to display blog posts from newest to oldest or display comments ordered on how many upvotes they have.<\/p>\r\n\r\n<p>To do so, PHP has these functions available to us:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>sort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an array in ascending order<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>rsort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an array in descending order<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>asort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an associative array in ascending order, according to value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ksort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an associative array in ascending order, according to key<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>arsort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an associative array in descending order, according to value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>krsort(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Sort an associative array in descending order, according to key<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>shuffle(<em>$arr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Randomly orders the elements of an array.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p><em>How does PHP sort values?<\/em> First it sorts alphabetically (strings), then numerically (integers, floats, Booleans). For sorting alphabetically, it uses <em>lexicographical<\/em> ordering, which simply means that it uses the same ordering as dictionaries &ndash; first check the first character, then the next one, then the next one, and so on. For sorting numerically, the order is the same as the one you&rsquo;re used to &ndash; 0, 1, 2, and so on.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$users = [\"Ginty\", \"Juan\", \"Mark\", \"Avocado\", \"BATMAN\"];\r\n\r\nsort($users);  \/\/Results in [\"Avocado\", \"BATMAN\", \"Ginty\", \"Juan\", \"Mark\"];\r\nrsort($users); \/\/Results in [\"Mark\", \"Juan\", \"Ginty\", \"BATMAN\", \"Avocado\"];\r\n<\/pre>\r\n\r\n<p>NOTE: Only lowercase characters are supported for string ordering.<\/p>\r\n\r\n<p>Lastly, PHP also has an easy function to reverse the current order of an array:<\/p>\r\n\r\n<code class=\"longsyntax\">array_reverse(<em>$arr<\/em> [, <em>$preserve_keys<\/em>]);<\/code>\r\n\r\n<p>The <em>$preserve_keys<\/em> parameter, if set to true, will preserve numeric indexes. String keys are always preserved.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$users = [\"Ginty\", \"Juan\", \"Mark\", \"Avocado\", \"BATMAN\"];\r\n\r\narray_reverse($users); \r\n\/\/Results in [\"BATMAN\", \"Avocado\", \"Mark\", \"Juan\", \"Ginty\"];\r\n\r\narray_reverse($users, true); \r\n\/* Results in \r\n   Array (\r\n\t  [\"4\"] => \"BATMAN\", \r\n\t  [\"3\"] => \"Avocado\", \r\n\t  [\"2\"] => \"Mark\", \r\n\t  [\"1\"] => \"Juan\", \r\n\t  [\"0\"] => \"Ginty\", \r\n  )\r\n*\/\r\n<\/pre>","slur":"php-arrays-II","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"434","title":"[PHP] Loops","post":"<p>Sometimes you want a piece of code to be executed a lot of times (especially with arrays). For example, say you wanted to calculate the total price of all items in a shopping cart. Then you could access each item separately, and add that to the total sum, and copy that line of code dozens of times. But, a much easier way would be to put all prices in an array, and execute a single line of code (that accesses the next element in the array and adds the value to the total) lots of times. For this, <em>loops<\/em> have been invented.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">A loop allows you to easily execute the same block of code as many times as you want.<\/p>\r\n\r\n<p>Arrays are the typical use case, but they are applicable everywhere &ndash; I promise you, you&rsquo;ll be writing lots of loops in your programming life. Loops can run indefinitely, or a fixed amount of iterations. And, of course, you can use variables in the loop to slightly change the block of code that&rsquo;s being executed every time.<\/p>\r\n\r\n<h2>While<\/h2>\r\n\r\n<p>The <em>while loop<\/em> is the easiest, and simply keeps looping a block as long as a certain condition returns true.&nbsp; Just as with if statements, it&rsquo;s rather intuitive: while this condition is true, keep doing this.<\/p>\r\n\r\n<code class=\"longsyntax\">while(<em>condition<\/em>) {\r\n\t<em>lots of statements<\/em>\r\n}<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/SCRIPT: Find all the divisors of a number\r\n$x = 52;\r\n$divisors = [];\r\n$i = 2;\r\n\r\n\/\/As long as the following condition is true\r\nwhile($i &lt;= $x*0.5) {\r\n\t\/\/Check if the current number ($i) can divide $x\r\n\tif(is_integer($x \/ $i)) {\r\n\t\t\/\/If so, add it to the divisors array\r\n\t\tarray_push($divisors, $i);\r\n\t}\r\n\t$i++;\r\n}\r\n\r\n\/\/The result should be [2,4,13,26], which are all the divisors of 52, so it works!\r\n<\/pre>\r\n\r\n<p>This loop, however, can keep going on <em>forever<\/em> &ndash; which will freeze the computer or lead to other unpleasant consequences. Therefore, you must make sure that there&rsquo;s always a possibility that the condition returns false, and you break out of the loop.<\/p>\r\n\r\n<h2>Do-While<\/h2>\r\n\r\n<p>Another problem with the while loop, is that there&rsquo;s the possibility that it never runs &ndash; not even once &ndash; if the condition is false to begin with. To execute a block of statements once with certainty, and then enter a while loop, we use a <em>do-while loop<\/em>.<\/p>\r\n\r\n<code class=\"longsyntax\">do {\r\n\t<em>lots of statements<\/em>\r\n} while (<em>condition<\/em>);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we want to display a random quote on the homepage, but we don't want the quote to be the same as one we've used the past 3 days\r\n$old_quotes = [\"To be or not to be\", \"Never stop dreaming\", \"C'est la Vie\"];\r\n\r\n\r\ndo {\r\n\t$new_quote = \/\/get a new quote from the database...;\r\n} while (in_array($new_quote, $old_quotes));\r\n\/\/... and keep trying for as long as the quote we've chosen is one of the 3 old quotes\r\n<\/pre>\r\n\r\n<p>NOTE: As you can see, had the loop from the example been a simple while loop, the variable <code>$new_quote<\/code> would not exist, so it wouldn't have worked out.<\/p>\r\n\r\n<h2>For<\/h2>\r\n\r\n<p>When you know exactly how many times you want the loop to run, a <em>for loop<\/em> is usually better. For example, for loops are typically used to go through elements of an indexed array and do something with them. You know the length of the array, so you know exactly how many iterations you&rsquo;re going to need. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">for(<em>initializer<\/em>; <em>condition<\/em>; <em>updater<\/em>){\r\n\t<em>lots of statements<\/em>\r\n}<\/code>\r\n\r\n<p>The <strong>initializer<\/strong> is run once at the start of the loop, and declares a variable and its starting value. This variable is called the <em>iterator<\/em>, and usually denoted with a simple <code>$i<\/code>.<\/p>\r\n\r\n<p>The <strong>condition<\/strong> is checked at the end of every loop. If it&rsquo;s still true, it will do another round, if not, it breaks out of the loop.<\/p>\r\n\r\n<p>The <strong>updater<\/strong> is called at the end of every loop, and updates one or multiple variables. Usually, it simply increments the iterator (by one).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$shopping_cart = [\"Playmobil\", \"LEGO\", \"Candy\"];\r\n\r\n\/\/Loop through all the items within the shopping cart\r\nfor($i = 0; $i&lt;sizeof($shopping_cart); $i++) {\r\n\t\/\/and display their number and value\r\n\techo \"Item $i: $shopping_cart[$i] &lt;br\/&gt;\";\r\n}\r\n\r\n\/*The loop should print\r\n\tItem 0: Playmobil\r\n\tItem 1: LEGO\r\n\tItem 2: Candy\r\n*\/\r\n<\/pre>\r\n\r\n<p>NOTE: You can declare multiple variables in the initializer, as long as you separate them by a comma.<\/p>\r\n\r\n<h2>For-Each<\/h2>\r\n\r\n<p>The for loop is great for going through indexed arrays, or doing anything else related with numbers, but what if we have an associative array? We use the <em>for-each loop<\/em> instead. This loop was made specifically for arrays and objects, and goes through all the key-value pairs. There are two syntaxes:<\/p>\r\n\r\n<code class=\"longsyntax\">foreach(<em>$array<\/em> as <em>$value<\/em>) {\r\n\t<em>lots of statements<\/em>\r\n}<\/code>\r\n\r\n<code class=\"longsyntax\">foreach(<em>$array<\/em> as <em>$key<\/em> =&gt; <em>$value<\/em>) {\r\n\t<em>lots of statements<\/em>\r\n}<\/code>\r\n\r\n<p>In the first syntax, you can only use the value of the current element. In the second syntax, you can use both the key and the value.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we want to send every user a \"personalized\" email\r\n$user_list = [\"Ginty\", \"Juan\", \"Juan's Brother\", \"Juan's Guineapig\", \"BATMAN\"];\r\n\r\nforeach($user_list as $user) {\r\n\t$message = \"Hello, $user. Thanks for using our service. Regards, the team.\";\r\n}\r\n\r\n\/\/Now suppose we want to tell the user how many others have signed up for the service before him\/her\r\nforeach($user_list as $rank => $user) {\r\n\t$message = \"Hello, $user. Thanks for using our service. $rank people have gone before you, and are still happy! Regards, the team.\";\r\n}\r\n<\/pre>\r\n\r\n<h2>The break Keyword<\/h2>\r\n\r\n<p>Sometimes you want to break out of a loop prematurely. For example, if you use a loop on an array to find a certain combination of values, you can stop the loop once it has been found. To exit the current loop, use the <code>break<\/code> keyword.<\/p>\r\n\r\n<p>NOTE: If you want to break out of multiple loops at once, you can supply an integer behind the keyword.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$comments = [\"Ginty\" => \"Great post!\", \"BATMAN\" => \"I'M BATMAN.\", \"Juan\" => \"Wow, I'm never looking at turtles the same way again\", \"Gandalf\" => \"Fly, you fools!\"];\r\n\r\n\/\/We think batman is a very valuable customer, so we want to know if he left a comment\r\n\/\/If so, we don't need to go through the rest of the loop, so we can break out to save resources\r\nforeach($comments as $user => $message) {\r\n\tif($user === 'BATMAN') {\r\n\t\techo \"Found him.\";\r\n\t\tbreak;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<h2>The continue Keyword<\/h2>\r\n\r\n<p>Instead of completely breaking out of a loop, you can also choose to go to the next iteration prematurely. For example, you could accidentally have some null values in your array, and if that&rsquo;s the case you don&rsquo;t want the rest of the loop code to run (as it will probably throw some errors). To continue to the next iteration, use the <code>continue<\/code> keyword.<\/p>\r\n\r\n<p>NOTE: If you want to skip multiple iterations, you can supply an integer behind the keyword.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Our super secret spy agency seems to have picked up some weird signal that is going through our servers\r\n$signal = \"Kthe liSJo7VnC FJhas0 beeEn2Z6 cONoVmpA0HJrComiYsed. i 93rYepOZeaEHt,6 tPhH52HYe lioVTn hasXJ BPbeeTTnK V2cKLomIpr7Y3TSom85ised.\";\r\n\r\n\/\/Juan thinks that we can retrieve the original message by cutting away all numbers and capital letters\r\n$actual_message = \"\";\r\nfor($i = 0;$i&lt;strlen($signal);$i++) {\r\n\t\/\/If it's an integer, continue\r\n\tif(is_integer($signal[$i])) {\r\n\t\tcontinue;\r\n\t}\r\n\t\/\/If transforming the letter to uppercase doesn't change anything, it's a capital letter, so continue\r\n\tif($signal[$i] != \" \" && strtoupper($signal[$i]) === $signal[$i]) {\r\n\t\tcontinue;\r\n\t}\r\n\t\/\/Otherwise, we've found a piece of the original message\r\n\t$actual_message .= $signal[$i];\r\n}\r\n\r\n\/\/Test it yourself to find the original message!\r\n<\/pre>\r\n","slur":"php-loops","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"435","title":"[PHP] Control Flow II","post":"<p>Last chapters introduced lots of useful blocks we can use to control the flow of a system, and before we go on to more exciting stuff, I want to provide some alternative syntaxes that might come in handy someday. I&rsquo;d also like to introduce a very useful feature: <em>inserting the contents of other PHP files into the current file.<\/em><\/p>\r\n\r\n<h2>The switch Statement<\/h2>\r\n\r\n<p>Suppose that we have a system that checks for multiple states in a sign up process. If a user clicks sign up, we start at state 0, where he can choose a name. When finished, we go to state 1, where the user can input his email. This goes on until we&rsquo;ve reached state 20.<\/p>\r\n\r\n<p>Now, we could use an <em>if&ndash;elseif&ndash;else block<\/em> to check for all those states, but I wouldn&rsquo;t like to be in your position if you had to write that out. Instead, for checking the same expression against different values, we can use the more readable <em>switch statement<\/em>. The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">switch(<em>expression<\/em>) {\r\n\tcase <em>value<sub>1<\/sub><\/em>:\r\n\t\t<em>code<\/em>\r\n\tcase <em>value<sub>n<\/sub><\/em>:\r\n\t\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<p>This checks the expression against the different cases, and executes the code underneath a case if it matches. So, in normal language: in case the expression is this value, execute the code underneath it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/A system for leveling up users if they do something awesome on your website\r\n$level = 2;\r\n$status = \"\";\r\n\r\n\/\/OLD CODE\r\nif($level == 0) {\r\n\t$status = \"Beginner\";\r\n} else if($level == 1) {\r\n\t$status = \"Professional\";\r\n} else {\r\n\t$status = \"Wizard\";\r\n}\r\n\r\n\/\/NEW CODE\r\nswitch($level) {\r\n\tcase 0:\r\n\t\t$status = \"Beginner\";\r\n\tcase 1:\r\n\t\t$status = \"Professional\";\r\n\tcase 2:\r\n\t\t$status = \"Wizard\";\r\n}\r\n<\/pre>\r\n\r\n<p>The switch statement, however, by default executes <em>everything<\/em> underneath a certain case &ndash; which is called falling through cases. This can be useful if you want to execute multiple blocks of code on certain occasions, but more often than not you don&rsquo;t want it. To break out of the statement we &ndash; not surprisingly &ndash; use the <code>break<\/code> keyword again.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$result = 0;\r\n\r\nswitch($value) {\r\n\tcase 0:\r\n\t\t$result++;\r\n\t\tbreak;\r\n\tcase 1:\r\n\t\t$result += 5;\r\n\tcase 2:\r\n\t\t$result -= 5;\r\n\t\tbreak;\r\n}\r\n\r\n\/\/If $value is 0, $result will be 1\r\n\/\/If $value is 1, $result will be 0\r\n\/\/If $value is 2, $result will be -5\r\n<\/pre>\r\n\r\n<p>Lastly, just as the <em>else statement<\/em>, we would like to have a default block of code that should be executed if all the other cases are not matched. For this, we use the <code>default<\/code> keyword.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$search_query = \"Panda\";\r\n\r\nswitch(strtolower($search_query)) {\r\n\tcase \"tiger\":\r\n\t\t\/\/Display the page about tigers\r\n\tcase \"panda\":\r\n\t\t\/\/Display the page about pandas\r\n\tdefault:\r\n\t\t\/\/Display the page with an overivew of all animal species\r\n}\r\n<\/pre>\r\n\r\n<h2>The Alternative Syntax<\/h2>\r\n\r\n<p>For most of its control structures, PHP offers an alternative syntax that you may or may not like better. This alternative syntax only replaces the opening and closing braces ( <code>{ }<\/code> ). It can be applied to the <em>if, else if, else, for, foreach<\/em>, and <em>switch <\/em>statements.<\/p>\r\n\r\n<p>The opening brace is replaced with a colon ( <code>:<\/code> ). The closing brace is replaced by a word that depends on the control structure: <em>endif<\/em>, <em>endfor<\/em>, <em>endforeach<\/em>, and <em>endwhile<\/em>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Regular syntax\r\nif($post_category == \"\") {\r\n\techo \"This post was unassigned\";\r\n} else {\r\n\techo \"Category: $post_category\";\r\n}\r\n\r\n\/\/Alternative syntax\r\nif($post_category == \"\"):\r\n\techo \"This post was unassigned\";\r\nelse:\r\n\techo \"Category: $post_category\";\r\nendif;\r\n<\/pre>\r\n\r\n<p>The rest of the syntax is the same, and their function is identical. So, it&rsquo;s mostly a matter of preference.<\/p>\r\n\r\n<p>NOTE: Do not, however, mix braces and this alternative syntax in one code block.<\/p>\r\n\r\n<h2>The goto Keyword<\/h2>\r\n\r\n<p>Ye be warned! The <code>goto<\/code> keyword is powerful, but evil. With it, you can jump to any other part of the program any time you want. This can save your life, but it also makes code unreadable and can easily lead to indecipherable errors. If you&rsquo;re in a situation you feel you should use this keyword, you should first check with yourself: is there really no way to restructure this program to solve all my problems?<\/p>\r\n\r\n<p>Let&rsquo;s see how it works. To be able to specify where we want to jump to, we need to <em>label<\/em> a certain position in the code. This is done with the simple colon syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">some_label:<\/code>\r\n\r\n<p>Note that this label is <em>not<\/em> a string, and doesn&rsquo;t need quotes around it. The syntax for going to that label is then<\/p>\r\n\r\n<code class=\"longsyntax\">goto some_label;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$x = 0;\r\nmy_label: $x++;\r\nif($x < 10) {\r\n\techo $x;\r\n\tgoto my_label;\r\n}\r\n\/\/Prints 123456789\r\n\r\n\/\/But please, just use loops (or functions) instead.\r\n<\/pre>\r\n\r\n<h2>Including Code<\/h2>\r\n\r\n<p>As promised, PHP allows you to easily import the contents from another PHP file. For example, most websites import the same PHP file containing the header\/navigation at the top of every page. This way, if they ever were to change the navigation, they can just edit that single PHP file and everything will be fine.<\/p>\r\n\r\n<p>Because this functionality so important, it&rsquo;s a <em>language construct<\/em> (just as <code>echo<\/code>), and uses functions that don&rsquo;t need parentheses around the parameter. In fact, PHP is faster without the parentheses. There are four functions for including code, all with slight differences:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>include &quot;pathtofile&quot;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Includes the file. If it can&rsquo;t find the file at the path specified, it will search the current file&rsquo;s directory. If that fails, it emits a warning.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>require &quot;pathtofile&quot;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as include, but if it can&rsquo;t find the file, it throws an errors and halts further execution.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>include_once &quot;pathtofile&quot;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as include, but checks if the file has already been included somewhere. If that&rsquo;s the case, it doesn&rsquo;t do anything.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>require_once &quot;pathtofile&quot;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as require, but checks if the file has already been included somewhere. If that&rsquo;s the case, it doesn&rsquo;t do anything.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>So, if your program strictly depends on a file, use <code>require<\/code>. Otherwise, use <code>include<\/code>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/** content of header.php **\/\r\n&#x3C;?php\r\n&#x9;echo &#x22;&#x3C;html&#x3E;&#x3C;head&#x3E;&#x22;;\r\n&#x9;echo &#x22;&#x3C;title&#x3E;Awesomewebsite - Your credible source for information&#x3C;\/title&#x3E;&#x22;;\r\n&#x9;echo &#x22;&#x3C;\/head&#x3E;&#x3C;body&#x3E;&#x22;;\r\n?&#x3E;\r\n\r\n\/** content of footer.php **\/\r\n&#x3C;?php \r\n&#x9;echo &#x22;&#x3C;footer&#x3E;Copyright Awesomeness Inc.&#x3C;\/footer&#x3E&#x22;;\r\n&#x9;echo &#x22;&#x3C;\/body&#x3E;&#x3C;\/html&#x3E;&#x22;;\r\n?&#x3E;\r\n\r\n\/** Every other page on the website **\/\r\n&#x3C;?php\r\n&#x9;include &#x22;header.php&#x22;;\r\n?&#x3E;\r\n&#x9;lots of HTML code\r\n&#x3C;?php\r\n&#x9;include &#x22;footer.php&#x22;;\r\n?&#x3E;\r\n<\/pre>","slur":"php-control-flow-II","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"436","title":"[PHP] Functions","post":"<p>Before we can start talking about the God of all data types (Objects), I want to talk about functions and variable scope first. Not only are they insanely useful to learn and use early on, they also play a large role in understanding Objects.<\/p>\r\n\r\n<p>We&rsquo;ve already seen many of PHP&rsquo;s built-in functions (although there are many more to come), and this chapter will explain how you can create your own such functions.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">A function is a block of statements that can be used repeatedly by calling it<\/p>\r\n\r\n<p><em>Hmm, repeating a set of statements &ndash; what&rsquo;s the difference with a loop?<\/em> The difference is huge. A function can be defined anywhere within the program, but the code inside will only be executed once you call it. Furthermore, you can call the function from anywhere, anytime you want, whilst loops are rooted to the spot and can&rsquo;t be called.<\/p>\r\n\r\n<h2>Creating a Function<\/h2>\r\n\r\n<p>To define your own function, use the <strong>function<\/strong> keyword (ain&rsquo;t programming straightforward, eh?):<\/p>\r\n\r\n<code class=\"longsyntax\">function <em>some_function_name<\/em>() {\r\n\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<p>Naming your own functions follows the same rules as naming variables. Just as built-in PHP functions, the name is case-insensitive.<\/p>\r\n\r\n<p>Then, to call the function from anywhere, simply use the syntax you&rsquo;re already used to:<\/p>\r\n\r\n<code class=\"longsyntax\">some_function_name();<\/code>\r\n\r\n<p>NOTE: Yes, even when a function takes no parameters, you still need to use the parentheses to tell PHP we&rsquo;re looking for a function with that name. We&rsquo;ll look at functions with parameters next.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction print_welcome() {\r\n\techo \"Welcome everybody!\";\r\n}\r\n\r\nprint_welcome();\r\n<\/pre>\r\n\r\n<h2>Parameters &amp; Arguments<\/h2>\r\n\r\n<p>Like we saw with the built-in ones, functions work at their best when they take a few parameters. You already know how to pass arguments to the function, namely with<\/p>\r\n\r\n<code class=\"longsyntax\">some_function_name(<em>arg<sub>1<\/sub><\/em>, <em>&hellip;<\/em>, <em>arg<sub>n<\/sub><\/em>);<\/code>\r\n\r\n<p>But, how do we program the function to be able to accept these arguments and do something with them? For that we use the following syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">function some_function_name(<em>$par<sub>1<\/sub><\/em>, <em>&hellip;<\/em>, <em>$par<sub>n<\/sub><\/em>) {\r\n\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<p>Remember that when <em>calling<\/em> the function we pass in actual values (arguments), while in the function <em>definition<\/em> we only define variable names (parameters) to hold those values.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Here we define the function and its parameters\r\nfunction print_welcome($name, $time) {\r\n\techo \"Welcome $name on this lovely $time.\";\r\n}\r\n\r\n\/\/Here we can pass in the arguments for every parameter\r\nprint_welcome(\"Juan\", \"afternoon\"); \/\/Prints: Welcome Juan on this lovely afternoon.\r\nprint_welcome(\"Batman\", \"night\");   \/\/Prints: Welcome Batman on this lovely night.\r\n<\/pre>\r\n\r\n<h2>Defaults<\/h2>\r\n\r\n<p>Times will come when you have a crucial function that can&rsquo;t be allowed to fail. In those cases, you can supply a <em>default<\/em> value for parameters. If no argument is passed in when the function is called, the function will use the defined default value instead. The syntax is what you&rsquo;d expect:<\/p>\r\n\r\n<code class=\"longsyntax\">function some_function_name($par<sub>1<\/sub> = <em>default_value<\/em>) {\r\n\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nfunction print_welcome($name, $time = \"day\") {\r\n\techo \"Welcome $name on this lovely $time.\";\r\n}\r\n\r\nprint_welcome(\"Juan\", \"afternoon\"); \/\/Prints: Welcome Juan on this lovely afternoon.\r\nprint_welcome(\"Batman\");\t\/\/Prints: Welcome Batman on this lovely day.\r\n<\/pre>\r\n\r\n<h2>The return Statement<\/h2>\r\n\r\n<p>All these functions are nice, but you might struggle to find a use for them. Well, remember that nearly all built-in PHP functions <em>returned<\/em> something? For example, the <code>in_array()<\/code> function returned a value <code>true<\/code> (if the element was in the specified array) or <code>false<\/code> (if not).<\/p>\r\n\r\n<p>We can do that with our own functions as well. In fact, it&rsquo;s so important, that it has become a <em>language construct<\/em> again. The syntax for returning something is<\/p>\r\n\r\n<code class=\"longsyntax\">return value;<\/code>\r\n\r\n<p>When a return statement is executed, the function returns the value after it, and immediately stops executing the rest of the function. This can be useful, because you don&rsquo;t want to waste resources on executing other code (or even returning other values) when you&rsquo;ve already found your value.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction find_highest($x, $y, $z) {\r\n\t$current_highest = $x;\r\n\tif($y > $current_highest) {\r\n\t\t$current_highest = $y;\r\n\t}\r\n\tif($z > $current_highest) {\r\n\t\t$current_highest = $z;\r\n\t}\r\n\treturn $current_highest;\r\n}\r\n\r\n$max_number = find_highest(4,10,-2);    \/\/$max_number is 10\r\n$max_number = find_highest(0, 0, 1000); \/\/$max_number is 1000\r\n<\/pre>\r\n\r\n<h2>Variable Functions<\/h2>\r\n\r\n<p>There&rsquo;s an alternative syntax for creating functions. Instead of defining a function separately from the rest of the code, you can put a function inside a variable. The variable is then said to be <em>callable<\/em>, and the syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">$some_function_name = function () { <em>code<\/em> };<\/code>\r\n\r\n<p>Its functionality is identical to the other syntax, and the other syntax is usually regarded as more easily readable and maintainable. <em>Then why would I want to do this?<\/em> Because this way, you can change functions on the fly! You can assign a different function to the same variable name any time you want, and from that moment on every call made to that variable will use the new function.<\/p>\r\n\r\n<p>NOTE: The dollar sign is part of the function name, don&rsquo;t forget to include it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$greeting = function() {\r\n\techo \"Welcome everybody!\";\r\n};\r\n\r\n$greeting(); \/\/Prints: Welcome everybody!\r\n\r\n\r\n$greeting = function() {\r\n\techo \"Goodbye my friends!\";\r\n};\r\n\r\n$greeting(); \/\/Prints: Goodbye my friends!\r\n<\/pre>\r\n\r\n<h2>Return Types &amp; Type Hinting<\/h2>\r\n\r\n<p>Because functions usually contain important functionality, it&rsquo;s common to check whether the parameters are of the right data type, and whether the returned value is of the right data type. It would be a pain to have to write lots of if-statements to check those data types, which is why PHP has <strong>return types<\/strong> and <strong>type hinting<\/strong>.<\/p>\r\n\r\n<p>To tell PHP that a function should return a value of a certain data type, use:<\/p>\r\n\r\n<code class=\"longsyntax\">function <em>some_function<\/em>() : type { <em>code<\/em> };<\/code>\r\n\r\n<p>If the returned value is not of that type, PHP throws an error and quits. If your function shouldn&rsquo;t return anything, use return type <strong>void<\/strong>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Signing in the user should return true if succeeded, false if not (thus, a boolean value)\r\nfunction sign_in_user() : bool {\r\n    \/\/This line will be explained next chapter\r\n    global $username_correct, $password_correct;\r\n    \r\n\tif($username_correct && $password_correct) {\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn \"SOMETHING WENT WRONG\";\r\n\t}\r\n}\r\n\r\n$username_correct = true;\r\n$password_correct = true;\r\n$login = sign_in_user(); \/\/$login is true\r\n\r\n$username_correct = true;\r\n$password_correct = false;\r\n$login = sign_in_user(); \/\/PHP throws an error and quits executing, because we returned a string.\r\n<\/pre>\r\n\r\n<p>To tell PHP that certain parameters should be of certain data types, use<\/p>\r\n\r\n<code class=\"longsyntax\">function <em>some_function<\/em>(type $par<sub>1<\/sub>, &hellip;, type $par<sub>n<\/sub>) { <em>code<\/em> };<\/code>\r\n\r\n<p>Again, if these conditions are not met, PHP throws an error and kills a kitten. As you can see, using these return types and type hinting is completely optional &ndash; functions would work just fine without them &ndash; but it&rsquo;s generally recommended to use them, as it makes your code clearer and less error prone.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction find_highest(int $x, int $y, int $z) {\r\n\t$current_highest = $x;\r\n\tif($y > $current_highest) {\r\n\t\t$current_highest = $y;\r\n\t}\r\n\tif($z > $current_highest) {\r\n\t\t$current_highest = $z;\r\n\t}\r\n\treturn $current_highest;\r\n}\r\n\r\n$max_number = find_highest(4,10,-2);    \/\/$max_number is 10\r\n$max_number = find_highest(0, \"two and a half\", 1000); \/\/ERROR\r\n<\/pre>","slur":"php-functions","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"437","title":"[PHP] Scope","post":"<p>Last chapter proved to use that functions kind of live in their own world; they coexist with the rest of the code in a file, but they are only executed once called, and have their own set of parameters. So, the questions that begs asking is: can functions interact with the rest of the code, and if so, how?<\/p>\r\n\r\n<p>For example, what happens if one of our parameters has the same name as a variable declared somewhere else? We could frantically start adding random letters behind parameter names to make them distinct, but that&rsquo;s not the best way to go. Instead, PHP uses <em>scope<\/em>.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Scope refers to the part of a program where a certain variable is available<\/p>\r\n\r\n<p>A variable&rsquo;s scope can be <em>global<\/em>, <em>local<\/em>, or <em>static<\/em>.<\/p>\r\n\r\n<h2>Global<\/h2>\r\n\r\n<p>Any variable declared <em>outside<\/em> of a function is automatically global. It can be accessed from anywhere within the program, except from within functions.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction multiply() {\r\n\t$x *= 2;\r\n}\r\n\r\n$x = 5;\r\n$x += 5;    \/\/Refers to the same $x, $x is no 10\r\nmultiply(); \/\/Gives an ERROR, as the function doesn't know the global variable $x\r\n<\/pre>\r\n\r\n<h2>Local<\/h2>\r\n\r\n<p>Any variable declared <em>inside<\/em> of a function is automatically local. It can be accessed only from within that specific function.<\/p>\r\n\r\n<p>This is usually what you want, but sometimes you want to be able to change or use global variables within the function. To do so, you can tell PHP to use the global versions of a variable, with the <code>global<\/code> keyword:<\/p>\r\n\r\n<code class=\"longsyntax\">global $var<sub>1<\/sub>, &hellip;, $var<sub>n<\/sub>;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nfunction multiply() {\r\n\tglobal $x, $y;\r\n\t$x *= 2;\r\n\t$y *= 4;\r\n}\r\n\r\n$x = 4;\r\n$y = 2;\r\nmultiply(); \/\/$x and $y are now 8\r\n<\/pre>\r\n\r\n<p>If you intend on using both local and global versions of a variable (which can be confusing), there&rsquo;s an alternative syntax. PHP automatically stores all global variables in an array called <code>$GLOBALS<\/code>, and we can access elements of that array if we want the global version of a variable.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction multiply() {\r\n        \/\/Here, $x is 16\r\n\t$x = 16;\r\n\t$GLOBALS['x'] *= 2;\r\n}\r\n\r\n$x = 4;\r\nmultiply(); \/\/Here, in global scope, $x is 8\r\n<\/pre>\r\n\r\n\r\n<h2>Static<\/h2>\r\n\r\n<p>Lastly, to bridge the gap between local and global scope, there&rsquo;s static scope. If you define a static variable within a function, it will only be usable within that function <em>but<\/em> it won't be deleted when the function ends. To do so, simply use the <code>static<\/code> keyword:<\/p>\r\n\r\n<code class=\"longsyntax\">static $var = value;<\/code>\r\n\r\n<p>It is important to note that static variables are only assigned a value if they don&rsquo;t have a value yet. This is useful, for you can call the same function multiple times, but only the first time is a variable initialized\/reset. You can only initialize static variables to a literal value though, not an expression (such as another variable).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/You'd think that the $count variable would be reset each time, but it's only set to zero the first time it's called\r\nfunction counter() {\r\n    static $count = 0;\r\n    $count++;\r\n    if($count >= 3) {\r\n    \techo \"GO!\";\r\n    }\r\n}\r\n\r\ncounter();\r\ncounter();\r\ncounter(); \/\/Prints: GO!\r\n\r\necho $count; \/\/Prints an undefined variable warning\r\n<\/pre>\r\n\r\n<p>NOTE: Static variables are still local to that particular function &ndash; you can&rsquo;t mindlessly use them in other functions.<\/p>\r\n\r\n<h2>Constants<\/h2>\r\n\r\n<p>This is great, but what if we want like a <em>super-static variable<\/em> &ndash; one that is accessible anywhere? Well, we can&rsquo;t easily do that. (They do exist, and are called <em>superglobals<\/em>, but we can&rsquo;t define them ourselves.) PHP does provide the ability, however, to define a <em>constant<\/em> that can be used and accessed anywhere.<\/p>\r\n\r\n<p>A constant is nothing more than a variable that can&rsquo;t be changed. So it&rsquo;s simply a value that is the same for the entire program, which you can access any place, any time.<\/p>\r\n\r\n<p>To define a constant, use<\/p>\r\n\r\n<code class=\"longsyntax\">define(<em>&quot;name&quot;<\/em>, <em>value<\/em> [, <em>case_insensitivity<\/em>]);\r\nconst <em>name<\/em> = <em>value<\/em>;<\/code>\r\n\r\n<p>If the last parameter is set to <code>true<\/code>, the constant is case-insensitive. (It&rsquo;s case-sensitive by default.) Also, the <code>const<\/code> keyword can only be used in global scope.<\/p>\r\n\r\n<p>To use a constant, you simply call it by its name (<em>without<\/em> quotes).<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nfunction define_my_constant($name, $value) {\r\n\tdefine($name, $value);\r\n\techo \"Created constant $name with value $value\";\r\n}\r\n\r\n\/\/Even though the constant is created within the function, it's accessible anywhere\r\ndefine_my_constant(\"PANDA\", \"I'll Bamboo You!\");\r\n\r\necho PANDA; \/\/Prints: I'll Bamboo You!\r\n\r\nPANDA = \"No, you won't\"; \/\/Will give a syntax ERROR - you can't change a constant\r\n<\/pre>\r\n\r\n<p>NOTE: Again, constants follow the same naming rules as variables and functions.<\/p>\r\n\r\n<h2>References<\/h2>\r\n\r\n<p>The only thing that is really tricky when it comes to scope, is applying it to references. We&rsquo;ve seen that references are a great way to point one variable to another, and they are a great way to bridge the gap between scopes and code blocks. But there&#39;s good and bad things.<\/p>\r\n\r\n<p><em>The Good<\/em>: You can pass a variable by reference to automatically make it act in the same scope. To do so, simply place the familiar ampersand ( <code>&amp;<\/code> ) in front of the parameter name.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This works fine\r\nfunction echo_user_count(&$count) {\r\n\techo \"There are $count users online at the moment\";\r\n}\r\n\r\n$user_count = 10;\r\necho_user_count($user_count);\r\n<\/pre>\r\n\r\n<p><em>The Bad<\/em>: Say we declare a variable inside a function (local scope), and assign it a reference to a variable elsewhere (global scope). Well, when the function ends, the local variable would be removed, in which case the global variable would be removed as well. PHP doesn&rsquo;t want this happening, which means changing referenced variables in a function has <em>no<\/em> effect.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This does not work fine. It doesn't give an error, it just does nothing.\r\nfunction add_user() {\r\n\t$count = &$user_count;\r\n\t$count++;\r\n}\r\n\r\n$user_count = 10;\r\nadd_user($user_count);\r\n\r\necho $user_count; \/\/Prints: 10\r\n<\/pre>\r\n","slur":"php-scope","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"438","title":"[PHP] Objects I","post":"<p>Finally, finally, finally we arrive at the big guns. The whole course has been building up to this moment, and now we can use all our knowledge to start performing some object magic.<\/p>\r\n\r\n<p>I&rsquo;ve briefly mentioned them a few times already, especially in relation with arrays and loops, but <em>what are objects<\/em>? Objects are, essentially, an intuitive and easy way of programming. Instead of using a lot of separate functions, we can group together related information inside one object &ndash; just as in the real world. If you want work with multiple blog posts (with lots of metadata attached to them), turn every blog post into a single object. If you want to create collectible items for a browser game, turn every item into an object.<\/p>\r\n\r\n<p><em>What&rsquo;s the difference with arrays<\/em>? For starters, objects can store key-value pairs as well as functions. Additionally, objects can inherit from or extend other objects &ndash; so, for example, you could use one &ldquo;master object&rdquo; to hold all the data that all objects will have in common.<\/p>\r\n\r\n<img src=\"media\/PHPObjectsClasses.png\" \/>\r\n\r\n<h2>Classes<\/h2>\r\n\r\n<p>Remember this: an object is a single, specific instance of a certain <strong>class<\/strong>. Within PHP, you must first define a class, and once that's done you can instance as many objects of that class as you want. Think of classes as blueprints for objects &ndash; within them you can define what you want a certain class of objects to look like, but nothing is actually created until you create a new object of that type.<\/p>\r\n\r\n<p>To create a new class, use<\/p>\r\n\r\n<code class=\"longsyntax\">class SomeClass {\r\n\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\t\/\/code that provides all sorts of information about this User\r\n}\r\n<\/pre>\r\n\r\n<p>It&rsquo;s a custom to write classes with capital letters starting each word. This is to make sure you can easily see the difference between creating an object and calling a function later on.<\/p>\r\n\r\n<p>NOTE: Classes follow the same naming rules as variables.<\/p>\r\n\r\n<h2>Creating Objects<\/h2>\r\n\r\n<p>To create a new object from an already defined class, use the <code>new<\/code> keyword:<\/p>\r\n\r\n<code class=\"longsyntax\">$var = new SomeClass();<\/code>\r\n\r\n<p>I think the fact that you need to use the <em>new<\/em> word is a good reminder of how objects work; every object you create is unique, even though it shares the same class with other objects. Two cars might be exactly the same, but it&rsquo;s still two separate cars.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\t\/\/code that provides all sorts of information about this User\r\n}\r\n\r\n\/\/$user_1 and $user_2 are two seperate objects, instantiated from the same class\r\n$user_1 = new User();\r\n$user_2 = new User();\r\n<\/pre>\r\n\r\n<h2>Defining Properties &amp; Methods<\/h2>\r\n\r\n<p>As I said, objects can contain key-value pairs and functions. In the case of objects, we call them <strong>properties<\/strong> and <strong>methods<\/strong> instead. (This is to differentiate it from regular variables and functions.)<\/p>\r\n\r\n<p>To create a <em>property<\/em>, one simply defines a variable within the class definition. It&rsquo;s important to note, though, that you can only assign values to the variable &ndash; expressions are not allowed. To create a <em>method<\/em>, one simply defines a function within the class definition.<\/p>\r\n\r\n<p>PHP, however, requires you to say something about the <em>visibility<\/em> of the properties and methods. For safety reasons, we sometimes don&rsquo;t want other parts of the code lurking around in our properties. We have three keywords for that:<\/p>\r\n\r\n<ul>\r\n\t<li><code>public<\/code>: the property\/method is accessible from anywhere<\/li>\r\n\t<li><code>protected<\/code>: the property\/method is accessible only from within the class itself and inherited classes<\/li>\r\n\t<li><code>private<\/code>: the property\/method is accessible only from within the class itself<\/li>\r\n<\/ul>\r\n\r\n<pre data-lang=\"php\">\r\n\/* The user has three properties (username, favrite pet, and password)\r\n   The user has one method (that prints a message) *\/\r\nclass User {\r\n\tpublic $username = \"Ginty\";\r\n\tpublic $favorite_pet = \"Rabbits\";\r\n\tprivate $password = \"gintyisawesomeyeah\";\r\n\r\n\tpublic function print_message() {\r\n\t\techo \"Hey there, I am Ginty!\";\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: You can also define constants with the familiar <code>const<\/code> keyword. These are automatically public and need no visibility keyword in front of them.<\/p>\r\n\r\n<h2>Accessing Properties &amp; Methods<\/h2>\r\n\r\n<p>To access a property or method, we use the <em>arrow syntax<\/em> ( <code>-&gt;<\/code> ):<\/p>\r\n\r\n<code class=\"longsyntax\">$some_object-&gt;property;\r\n$some_object-&gt;method();<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Ginty\";\r\n\tpublic $favorite_pet = \"Rabbits\";\r\n\tprivate $password = \"gintyisawesomeyeah\";\r\n\r\n\tpublic function print_message() {\r\n\t\techo \"Hey there, I am Ginty!\";\r\n\t}\r\n}\r\n\r\n$user = new User();\r\necho $user->username; \/\/Prints: Ginty\r\necho $user->password; \/\/Prints: ERROR cannot access private property \r\n\r\n$user->print_message(); \/\/Prints: Hey there, I am Ginty!\r\n<\/pre>\r\n\r\n<p>NOTE: Leave out the dollar sign when accessing a property. If you do include the dollar sign, PHP will use the <em>value<\/em> of that variable to access a property.<\/p>\r\n\r\n<h2>The $this Pseudo-variable<\/h2>\r\n\r\n<p>The arrow syntax I just introduced isn&rsquo;t just for accessing properties\/methods from outside of the object &ndash; it&rsquo;s also the only way to access one from within the object. However, how do we access the current object from within the class definition? I mean, is there any way we could access the current object that we&rsquo;re in? Well, we can do so using the <code>$this<\/code> pseudo-variable!<\/p>\r\n\r\n<p>This variable can be used in a class definition to reference the current object, and therefore allows us to access its own properties and methods. You&rsquo;re going to need it a lot.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Juan\";\r\n\tpublic $favorite_pet = \"Rabbits\";\r\n\tprivate $password = \"juanisawesomeyeah\";\r\n\r\n\t\/\/Returns true only if $password and $pwd match\r\n\tpublic function check_password($pwd) {\r\n\t\treturn ($this->password === $pwd) ? true : false;\r\n\t}\r\n\r\n\tpublic function print_message() {\r\n\t\techo \"Hey, I am $this->username, and I like $this->favorite_pet.\";\r\n\t}\r\n}\r\n\r\n$user = new User();\r\n\r\n$is_password_correct = $user->check_password(\"juanisawesomeyeah\"); \/\/Returns true\r\n\r\n$user->print_message(); \/\/Prints: Hey I am Juan, and I like rabbits.\r\n\r\n\/* As you can see, we can't access the password directly, but we can check if the password we entered is correct (which is more secure than if anyone were to just get the password) *\/\r\n<\/pre>\r\n\r\n<p>NOTE: I call it a pseudo-variable, as it is a variable &ndash; but we can&rsquo;t change it ourselves. It automatically adapts itself to the object in which we&rsquo;re currently executing a function.<\/p>\r\n\r\n<h2>Object Operators<\/h2>\r\n\r\n<p>Because objects are so complex, they only allow two operators:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>==<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both objects have the same properties\/methods and values, and are instances of the same class.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>===<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both objects refer to the exact same instance of the same class.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>How the second (strict) operator works has everything to do with how objects are assigned and copied, which next section is about.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Juan\";\r\n\tpublic $favorite_pet = \"Tree Kangaroos\";\r\n}\r\n\r\n$user_1 = new User();\r\n$user_2 = new User();\r\n\r\nvar_dump($user_1 == $user_2);  \/\/Prints: bool(true)\r\nvar_dump($user_1 === $user_2); \/\/Prints: bool(false)\r\n<\/pre>\r\n\r\n<h2>Object Assignment<\/h2>\r\n\r\n<p>With all the other data types, if you assign one variable to another, the value is simply <em>copied<\/em>. If you wanted to avoid that, you could use a <em>reference<\/em> to make two variables identical.<\/p>\r\n\r\n<p>With objects, it works a little differently. If you assign a variable containing an object to a new variable, an address <em>pointing<\/em> to the object is passed on. This means that both variables will point to the same object and both will edit the same object. But, it&rsquo;s not a reference, as changing one variable will <em>not<\/em> automatically update the other. So, it&rsquo;s a middle-ground between copying and referencing.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Juan\";\r\n\tpublic $favorite_pet = \"Tree Kangaroos\";\r\n}\r\n\r\n$user_1 = new User();\r\n$user_2 = $user_1;\r\n\r\n$user_2->username = \"HE WHO MUST NOT BE NAMED\";\r\n\r\n\/\/Both $user_1 and $user_2 are now exactly the same object\r\nvar_dump($user_1);\r\nvar_dump($user_2);\r\n\/* Both print\r\n\tobject(User)#1 (2) {\r\n\t  [\"username\"]=>\r\n\t  \tstring(24) \"HE WHO MUST NOT BE NAMED\"\r\n\t  [\"favorite_pet\"]=>\r\n\t  \tstring(14) \"Tree Kangaroos\"\r\n\t}\r\n*\/\r\n\r\n$user_2 = 0;\r\n\r\n\/\/Now $user_1 will contain the original object, but $user_2 is 0. If it were a reference, $user_1 and $user_2 should both have been 0 by now. But objects are not passed by reference.\r\n<\/pre>\r\n\r\n<p><em>But, what do I do if I actually want to copy the object?<\/em> Well, because objects are supposed to be unique, we call it <strong>cloning<\/strong>. To do so, use<\/p>\r\n\r\n<code class=\"longsyntax\">$var = clone $obj;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Juan\";\r\n\tpublic $favorite_pet = \"Tree Kangaroos\";\r\n}\r\n\r\n$user_1 = new User();\r\n$user_2 = clone $user_1;\r\n\r\nvar_dump($user_1);\r\nvar_dump($user_2);\r\n\/* Prints\r\n\tobject(User)#1 (2) {\r\n\t  [\"username\"]=>\r\n\t  \tstring(4) \"Juan\"\r\n\t  [\"favorite_pet\"]=>\r\n\t  \tstring(14) \"Tree Kangaroos\"\r\n\t}\r\n\t\r\n\tobject(User)#2 (2) {\r\n\t  [\"username\"]=>\r\n\t  \tstring(4) \"Juan\"\r\n\t  [\"favorite_pet\"]=>\r\n\t  \tstring(14) \"Tree Kangaroos\"\r\n\t}\r\n*\/\r\n<\/pre>\r\n\r\n<h2>Object Iteration<\/h2>\r\n\r\n<p>We&rsquo;ve already seen (in the <em>Loops<\/em> chapter) that you must use the <code>foreach<\/code> loop to iterate through all the properties and methods of an object. But, there&rsquo;s a subtle difference to be aware of &ndash; it will only loop through all the <em>visible<\/em> elements.<\/p>\r\n\r\n<p>So, if the loop is somewhere outside of the class, it will only go through all the <em>public<\/em> properties. But, if it&rsquo;s inside the class definition, it will go through <em>all<\/em> properties.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User {\r\n\tpublic $username = \"Juan\";\r\n\tpublic $favorite_pet = \"Tree Kangaroos\";\r\n\tprivate $password = \"treesareawesomeyeah\";\r\n\r\n\tpublic function iterate() {\r\n\t\tforeach($this as $value) {\r\n\t\t\techo $value . \" | \";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n$user = new User();\r\n\r\n\/\/This prints: Juan | Tree Kangaroos |\r\nforeach($user as $value) {\r\n\techo $value . \" | \";\r\n}\r\n\r\n\/\/This prints: Juan | Tree Kangaroos | treesareawesomeyeah |\r\n$user->iterate();\r\n<\/pre>","slur":"php-objects-I","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"439","title":"[PHP] Objects II","post":"<p>Now that we know how to create objects from our template class, all we really need to do is upgrade the template class to achieve more complex or sophisticated objects.<\/p>\r\n\r\n<h2>Auto-loading<\/h2>\r\n\r\n<p>As a project grows in size (as it often does), you&rsquo;re going to be working with lots of classes. It&rsquo;s a custom, therefore, to put every class into its own separate PHP file. So, for example, the class <em>User<\/em> is put in the file <em>User.php<\/em>. This way you can easily keep track of all classes, and simply <code>include<\/code> all the classes you&rsquo;re going to need at the top of a file.<\/p>\r\n\r\n<p>But, it&rsquo;s a lot of hard work to copy around these includes from file to file, which is why PHP allows you to auto-load all your classes. To do so, use<\/p>\r\n\r\n<code class=\"longsyntax\">spl_autoload_register(function($name) {\r\n\tinclude <em>&lt;find correct file using $name&gt;<\/em>;\r\n});<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we have classes saved inside the files User.php, Comment.php, BlogPost.php\r\nspl_autoload_register(function($name) {\r\n\tinclude \"$name.php\";\r\n});\r\n\r\n\/\/The autoload will automatically load the User.php file when we try to create an object from it.\r\n$user = new User();\r\n\r\n\/\/The other two files are not loaded, as we don't need them. Saves time!\r\n<\/pre>\r\n\r\n<h2>Inheritance<\/h2>\r\n\r\n<p>One of the best things about objects and classes, is that you can use <em>inheritance<\/em>. This means that you can create a class that is a child of another class (a &ldquo;subclass&rdquo;), and therefore automatically inherits all the properties and methods of its parent. Using this, you can create huge classes that contain some general functionality and variables, and then create subclasses that automatically inherit this general functionality and add their own special bag of tricks.<\/p>\r\n\r\n<p>To create a subclass, simply <em>extend<\/em> another class:<\/p>\r\n\r\n<code class=\"longsyntax\">class SomeSubClass extends SomeParentClass<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nclass Product {\r\n\tpublic $price = 10;\r\n\tpublic $manufacturer = \"LEGO\";\r\n\tpublic $reviews = 9.6;\r\n}\r\n\r\n\/\/A product on sale extends the general product class, and adds a discount\r\nclass SaleProduct extends Product {\r\n\tpublic $discount = 0.8;\r\n}\r\n\r\n$new_item = new SaleProduct();\r\necho \"The final price is \" . ($new_item->discount * $new_item->price) . \" euros.\";\r\n\r\n\/\/Prints: The final price is 8 euros.\r\n<\/pre>\r\n\r\n<p>NOTE: The parent class must be defined first in the file, otherwise PHP doesn&rsquo;t know what to extend.<\/p>\r\n\r\n<h2>Traits<\/h2>\r\n\r\n<p>Instead of inheriting from complete classes, we can also just save a bunch of methods and properties under a certain name, and copy this code around inside other classes. In other words, we let multiple classes share the same <em>traits<\/em>. To create a trait, use<\/p>\r\n\r\n<code class=\"longsyntax\">trait SomeTraitName { <em>code<\/em> }<\/code>\r\n\r\n<p>To include or <em>use<\/em> it inside some other class, use (not surprisingly)<\/p>\r\n\r\n<code class=\"longsyntax\">use SomeTraitName;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nclass Product {\r\n\tpublic $price = 10;\r\n\tpublic $manufacturer = \"LEGO\";\r\n\tpublic $reviews = 9.6;\r\n}\r\n\r\ntrait Discount {\r\n\tpublic $discount = 0.8;\r\n\tfunction calculate_price() {\r\n\t\treturn ($this->discount * $this->price);\r\n\t}\r\n} \r\n\r\nclass SaleProduct extends Product {\r\n\tuse Discount;\r\n}\r\n\r\n$new_item = new SaleProduct();\r\necho \"The final price is \" . $new_item->calculate_price() . \" euros.\";\r\n\r\n\/\/Prints: The final price is 8 euros.\r\n<\/pre>\r\n\r\n<h2>Abstract Classes<\/h2>\r\n\r\n<p>Remember when I told you about the huge classes and the subclasses? (You should, I <em>just<\/em> told you.) Well, in most cases, you aren&rsquo;t going to create an object from the huge class &ndash; you&rsquo;ll only be creating objects from the subclasses.<\/p>\r\n\r\n<p>For example, you could have a general class called &ldquo;vehicle&rdquo;, and lots of smaller classes called &ldquo;car&rdquo; and &ldquo;truck&rdquo; that extend this general class. If you were to attach functions to the vehicle class such as &ldquo;accelerate&rdquo; and &ldquo;brake&rdquo;, all vehicles would inherit this functionality and add their own functionality (such as colour or maximum speed). Now, you can instantiate lots of car and truck objects, but you will never create an object from the vehicle class as it is too general.<\/p>\r\n\r\n<p>In these cases, it&rsquo;s best to make that vehicle class an <em>abstract class<\/em>. To do so, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">abstract class SomeAbstractClass { <em>code<\/em> }<\/code>\r\n\r\n<p>You can&rsquo;t instantiate such a class, but you can <em>extend<\/em> it. Additionally, you can use the <code>abstract<\/code> keyword in front of methods and properties to force the extending class to define it. (This is useful if subclasses share the same method name but with slightly different functionality.)<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/An abstract Item class that contains no real information (it's too general)\r\nabstract class Item {\r\n\tabstract public $price;\r\n\tabstract public $item_id;\r\n}\r\n\r\n\/\/A specific LegoItem class that is forced to define the price and item_id properties. In addition, it adds some more information to help the customer.\r\nclass LegoItem extends Item {\r\n\tpublic $price = 250;\r\n\tpublic $manufacturer = \"LEGO\";\r\n\tpublic $item_id = 1234\r\n\tpublic $description = \"LEGO is fun for all ages! Buy it now, or buy something else. As long as you buy from our webshop.\";\r\n}\r\n<\/pre>\r\n\r\n<h2>Anonymous Classes<\/h2>\r\n\r\n<p>Lastly, if you only need a simple, one-off object, you can use an anonymous class to create it. This simply means that, instead of placing a call to an existing class after the <code>new<\/code> keyword, you simply type the whole class definition.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$object = new class { public $username = \"Ginty\"; public $dating_profile = \"Looking for a man that likes to dance.\"; };\r\n\r\necho $object->username; \/\/Prints Ginty, as expected.\r\n<\/pre>\r\n\r\n<h2>Constructors &amp; Destructors<\/h2>\r\n\r\n<p>Constructors are very important, as they are what make every object truly unique. For example, say we&rsquo;re making an online chatroom, and we create an object for every user that is currently logged in. This object would then be instantiated from the User class, which means every user would be identical &ndash; but they&rsquo;re not, so how do we fix that by giving every object its own ID or username? <strong>Constructors<\/strong>.<\/p>\r\n\r\n<p>Just after PHP has created a new object, it automatically makes a call to the <code>__construct()<\/code> method on that object. If you haven&rsquo;t defined it, no worries, PHP just goes on with its life.<\/p>\r\n\r\n<p>If you <em>do<\/em> define it, you can use that method to construct the object and tweak its settings. Moreover, did you ever wonder why we need parentheses after the class name when instantiating a new object (like <code>new Class()<\/code>)? Well, it&rsquo;s because we can pass arguments to that constructor method, just like with any function!<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User { \r\n\tpublic $username; \r\n\tpublic $favorite_movie;\r\n\r\n    \/\/BEHOLD THE POWER OF THE CONSTRUCTOR\r\n\tfunction __construct($usn, $movie) {\r\n\t\t$this->username = $usn;\r\n\t\t$this->favorite_movie = $movie;\r\n\t}\r\n};\r\n\r\n$user_1 = new User(\"Juan\", \"Inception\"); \/\/Creates a User object, and sets username and movie\r\necho $user_1->username; \/\/Prints: Juan\r\n\r\n\r\n$user_2 = new User(\"BATMAN\", \"The Dark Knight. Duh.\");\r\necho $user_2->favorite_movie; \/\/Prints: The Dark Knight. Duh.;\r\n<\/pre>\r\n\r\n<p>On the other hand, PHP also automatically calls the <code>__destruct()<\/code> method when an object is deleted. There&rsquo;s some subtlety involved here; an object is deleted only if all references to it are gone. So, if two variables hold the reference to the same object, they <em>both<\/em> need to be deleted in order to delete the object.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nclass User { \r\n\tpublic $username; \r\n\t\r\n\tfunction __construct($usn) {\r\n\t\t$this->username = $usn;\r\n\t}\r\n\r\n    \/\/BEHOLD THE MIGHTY DESTRUCTOR\r\n\tfunction __destruct() {\r\n\t\techo \"User $this->username has been removed from chat.\";\r\n\t}\r\n};\r\n\r\n$user_1 = new User(\"Juan\");\r\nunset($user_1);\r\n\r\n\/\/Prints: User Juan has been removed from chat.\r\n<\/pre>\r\n\r\n<h2>Magic Methods<\/h2>\r\n\r\n<p>The methods from last section aren&rsquo;t the only ones that are automatically called by PHP on some occasions &ndash; they are part of a larger group called the <strong>magic methods<\/strong>. All magic methods start with those two underscores ( <code>__<\/code> ). (Which means that you shouldn&rsquo;t use it for non-magic methods.)<\/p>\r\n\r\n<p>Here&rsquo;s a nice overview of all the other magic methods (although, the constructor is by far the most important):<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Magic Method<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__call(<em>$name<\/em>, <em>$arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to access inaccessible methods.<br \/>\r\n\t\t\t<em>$name<\/em> holds the name of the method<br\/><em>$arg<\/em> holds an array with the arguments you provided<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__callStatic(<em>$name<\/em>, <em>$arg<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to access inaccessible static methods (more on that later).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__get(<em>$name<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to access an inaccessible property<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__set(<em>$name<\/em>, <em>$val<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to set an inaccessible property.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__isset(<em>$name<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you check if an inaccessible property is set (with the <code>isset()<\/code> function)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__unset(<em>$name<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you delete an inaccessible property (with the <code>unset()<\/code> function)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__sleep()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed just before an object is serialized (more on that later).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__wakeup()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed just after an object is unserialized.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__invoke(<em>$arg<sub>1<\/sub><\/em>, <em>&hellip;<\/em>, <em>$arg<sub>n<\/sub><\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to call an object like a function (like <code>$obj()<\/code>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__clone()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed after you&rsquo;ve cloned an object<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__toString()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you try to cast an object to a string. (Basically, you can use it to define how you want the object to be cast to a string.)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__debugInfo()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is executed when you display information about an object (with <code>var_dump()<\/code>), and returns how that information should be displayed.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__set_state(<em>$properties<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Is called when a class is exported with <code>var_export()<\/code>. <br\/><em>$properties<\/em> holds an array containing the properties that should be exported.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\nclass User { \r\n\tprivate $password = \"pinkelephant\"; \r\n\t\r\n\tfunction __get($prop) {\r\n\t\techo \"Denied access to $prop. Threat has been removed.\";\r\n\t\t\r\n\t\t\/\/Reveal password only if current user is administrator\r\n\t\tif($current_user == \"Administrator\") {\r\n\t\t\techo $this->$prop;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction __clone() {\r\n\t\techo \"Somebody tried to clone this object.\";\r\n\t}\r\n};\r\n\r\n$user_1 = new User();\r\n\r\n$user_copy = clone $user_1;\r\n\/\/Prints: Somebody tried to clone this object (but cloning continues anyway)\r\n\r\n$user_password = $user_copy->password;\r\n\/\/Prints: Denied access to password. Threat has been removed.\r\n<\/pre>\r\n","slur":"php-objects-II","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"440","title":"[PHP] Superglobals","post":"<p>We have, so far, been fairly on the PHP side of things &ndash; create all sorts of variables and functions, and do stuff with them. However, how do we relate this to HTML and the user? How do we send input from HTML to the server? How do we retrieve data from the server and do something with it in the HTML? How do we create and upload files?<\/p>\r\n\r\n<p>These questions won&rsquo;t get a definitive answer in this chapter, as it will take much more time than that to explain it, but we will start with something that lies at the basis of all of them: <strong>superglobals<\/strong>.<\/p>\r\n\r\n<p>Superglobals are variables (usually associative arrays) that can be accessed from <em>anywhere<\/em> within the program, and which are automatically set by PHP to the right value. For example, a superglobal could contain the current URL of the page you&rsquo;re on.<\/p>\r\n\r\n<p>There&rsquo;s 8 superglobal variables available (and you&rsquo;ve already seen the first one):<\/p>\r\n\r\n<ul>\r\n\t<li><code>$GLOBALS<\/code><\/li>\r\n\t<li><code>$_SERVER<\/code><\/li>\r\n\t<li><code>$_POST<\/code><\/li>\r\n\t<li><code>$_GET<\/code><\/li>\r\n\t<li><code>$_FILES<\/code><\/li>\r\n\t<li><code>$_ENV<\/code><\/li>\r\n\t<li><code>$_COOKIE<\/code><\/li>\r\n\t<li><code>$_SESSION<\/code><\/li>\r\n<\/ul>\r\n\r\n<p>As you can see, superglobals have uppercase names starting with <code>$_<\/code>. I recommend you keep this naming system for the superglobals, and don&rsquo;t use it on your own variables, to avoid confusion.<\/p>\r\n\r\n<p>As you can also see, there&rsquo;s a lot of them with lots of different things they can do &ndash; and all of it&rsquo;s important. Therefore, I will cover the simpler superglobals in this chapter, and the others subsequently in their own chapters. If you want to know <em>all<\/em> the things you can do with a superglobal, check the <a href=\"http:\/\/php.net\/manual\/en\/language.variables.superglobals.php\">PHP Manual<\/a><\/p>\r\n\r\n<h2>$_SERVER<\/h2>\r\n\r\n<p>This superglobal contains information about the server &ndash; more specifically, the host you&rsquo;re on, its settings, and the filename you&rsquo;re currently accessing. Its most important keys are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Key<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>PHP_SELF<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The <em>relative<\/em> path to the current file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SCRIPT_NAME<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The <em>absolute<\/em> path to the current file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SERVER_ADDR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The IP address of the server<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SERVER_NAME<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The name of the server<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REMOTE_ADDR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The IP address of the user accessing the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REQUEST_URI<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The URL used to access the page<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n$get_url = $_SERVER[\"SCRIPT_NAME\"];\r\n\r\n\/\/If we're on the article page of our blog...\r\nif($get_url == '\/blogArticles.php') {\r\n\t\/\/...display the article\r\n} else {\r\n\t\/\/...display the homepage\r\n}\r\n<\/pre>\r\n\r\n<h2>$_ENV<\/h2>\r\n\r\n<p>This superglobal is used for managing <em>environmental variables<\/em>. These are simply variables that are only available within a certain environment. Which data it holds, however, depends on the server and of course environment, which means I won&rsquo;t say anything more about it.<\/p>\r\n\r\n<p>It can also be used to pass variables between files, but I recommend using the <code>$_SESSION<\/code> superglobal for that, which is discussed in the <em>Cookies &amp; Sessions<\/em> chapter.<\/p>\r\n\r\n<h2>Magic Constants<\/h2>\r\n\r\n<p>A slightly downplayed version of the superglobals, are the <strong>magic constants<\/strong>. They are the regular constants that you&rsquo;re used to, with one difference: PHP changes their value based on where you call the constant from. They are constants, but they&rsquo;re not necessarily constant. Magic, right?<\/p>\r\n\r\n<p>So, instead of being a superglobal <em>variable<\/em>, they are superglobal <em>constants<\/em> that you can access, but automatically change for you. For example, one of the magic constants contains the current line number that is being executed when you call it. They are usually used together with superglobals, but they can also stand on their own.<\/p>\r\n\r\n<p>The 8 magical constants are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Magic Constant<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__LINE__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The current line number of the current file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__FILE__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The full path and filename of the current file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__DIR__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The directory of the current file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__FUNCTION__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The function that&rsquo;s currently being executed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__CLASS__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The class name of the object<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__TRAIT__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The trait name of the object<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__METHOD__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The method that&rsquo;s currently being executed<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>__NAMESPACE__<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The name of the current namespace (more on that in the Advanced PHP course)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\nclass Post {\r\n\tpublic $content;\r\n\tpublic $time;\r\n\tpublic $category;\r\n\r\n\tfunction __construct($a, $b, $c) {\r\n\t\t$this->content = $a;\r\n\t\t$this->time = $b;\r\n\t\t$this->category = $c;\r\n\t\techo \"Created object of class \" . __CLASS__ . \" at line \" . __LINE__;\r\n\t}\r\n}\r\n\r\n$new_post = new Post(\"Hello world!\", \"31 May 2016\", \"Test Posts\");\r\n\/\/Prints: Created object of class Post at line 11\r\n<\/pre>\r\n\r\n<p>NOTE: You can define more if you want, but that&rsquo;s for another time.<\/p>\r\n","slur":"php-superglobals","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"441","title":"[PHP] Forms & Dynamic Pages","post":"<p>The only way to let the user send data to a server (such as login information or a search query) is by using forms. Sometimes these forms may be disguised as something else &ndash; such as a zone where you can drop files to upload them &ndash; but in the end they will always work like a form.<\/p>\r\n\r\n<p>And if you remember from learning HTML, forms have two methods for sending data: <code>GET<\/code> and <code>POST<\/code>. (You can set this on a form by setting the <code>method=&quot;GET&quot;<\/code> or <code>method=&quot;POST&quot;<\/code> attribute.)<\/p>\r\n\r\n<p>Both methods are a way of sending extra data towards a file you&rsquo;re requesting from the server &ndash; basically, it&rsquo;s a way to use <em>cross-file variables<\/em>. For example, when I login with my username and password, I am sending the input as two variables towards another page that checks whether they are correct and then logs me in. Both methods have their advantages and disadvantages, and you&rsquo;ll typically use them in different situations.<\/p>\r\n\r\n<img src=\"media\/PHPGETvsPOST.png\" \/>\r\n\r\n<h2>$_GET<\/h2>\r\n\r\n<p>You&rsquo;ve probably come across URLs that look something like<\/p>\r\n\r\n<p style=\"margin-left:36.0pt;\"><em>file.php?id=blabla&amp;name=vlavla<\/em><\/p>\r\n\r\n<p>Even though it may look odd, there&rsquo;s nothing wrong about it. The question mark behind the file name ( <code>?<\/code> ) signals PHP that there&rsquo;s some variables to come. Each variable is passed using <code>name=value<\/code>, and every subsequent variable definition separated by an ampersand ( <code>&amp;<\/code> ).<\/p>\r\n\r\n<p>This way, we can pass as many values as we want to another file. The great thing is, though, that this is just a URL you can access. So, we can let a form pass that data for us, or we can just provide links to URLs with the variables attached.<\/p>\r\n\r\n<p>For example, we could create an anchor tag with the <code>href<\/code> attribute set to <code>\"file.php?id=blabla\"<\/code>, to create a link that automatically goes to the file <em>file.php<\/em> and passes along the <em>blabla<\/em> value.<\/p>\r\n\r\n<p>The <code>$_GET<\/code> superglobal works by &ldquo;getting&rdquo; these variables from the URL. To do so, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">$_GET[\"variablename\"];<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we're accessing the URL item.php?id=25&name=LEGO\r\n\r\necho $_GET['id'];   \/\/Prints 25\r\necho $_GET['name']; \/\/Prints LEGO\r\n\/\/Using this information, we can load the information on the right product and display it to the user\r\n<\/pre>\r\n\r\n<p>This method is typically used for dynamic pages. For example, every tutorial on this website is loaded by a single file! All I have to do is pass the right ID to the file using the syntax described above, get the value of that variable from within the file, and use that to load the right information from my database. I don&rsquo;t have to create a separate file for every tutorial. (Which would, frankly, be a very, very bad thing to do.)<\/p>\r\n\r\n<p>NOTE: The reason you&rsquo;re not seeing any of this in your browser bar is because I&rsquo;m rewriting my URLs using Mod Rewrite. But that&rsquo;s beyond the scope of this tutorial.<\/p>\r\n\r\n<h2>$_POST<\/h2>\r\n\r\n<p>Alternatively, you can pass variables to a file without making the URLs look ridiculous. Additionally, the <em>POST<\/em> method is safer to use, as users can&rsquo;t see or temper with the data being passed on. This may seem like it&rsquo;s always the better option, but the downside is that you can only use them with forms. Essentially, you can remember that the form &ldquo;<em>posts<\/em>&rdquo; the variables to the other page.<\/p>\r\n\r\n<p><em>How does PHP know which variables to post?<\/em> PHP posts all variables within a form that have the <code>name<\/code> attribute set. This means that you can&rsquo;t have colliding names, or PHP wouldn&rsquo;t know which one to send.<\/p>\r\n\r\n<p>To access a cross-file variable using the <code>$_POST<\/code> superglobal, use<\/p>\r\n\r\n<code class=\"longsyntax\">$_POST[\"variablename\"];<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we're accessing the URL login.php, with variable username and password posted to it\r\n\r\nif($_POST['username'] === \"Juan\" && $_POST['password'] === \"1234\") {\r\n\t\/\/sign in the user\r\n} else {\r\n\t\/\/tell the user the username\/password is incorrect\r\n}\r\n<\/pre>\r\n\r\n<h2>A Simple Form<\/h2>\r\n\r\n<p>Here&rsquo;s a simple form to show you how superglobals and HTML come together.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Code from the home page\r\n&#x3C;form method=&#x22;POST&#x22; action=&#x22;actionPage.php&#x22;&#x3E;\r\n&#x9;&#x3C;input name=&#x22;usn&#x22; type=&#x22;text&#x22; placeholder=&#x22;username&#x22; \/&#x3E;\r\n&#x9;&#x3C;input name=&#x22;pwd&#x22; type=&#x22;text&#x22; placeholder=&#x22;password&#x22; \/&#x3E;\r\n&#x9;&#x3C;input type=&#x22;submit&#x22; value=&#x22;Log in!&#x22; \/&#x3E;\r\n&#x3C;\/form&#x3E;\r\n\r\n\/\/Code from actionPage.php\r\n&#x3C;?php\r\n&#x9;$administrators = [&#x22;Juan&#x22;, &#x22;Johnny&#x22;, &#x22;Don Juan&#x22;];\r\n&#x9;$admin_passwords = [&#x22;1234&#x22;, &#x22;5678&#x22;, &#x22;90&#x22;];\r\n\r\n&#x9;$username_correct = array_search($_POST[&#x27;usn&#x27;], $administrators);\r\n\r\n&#x9;\/\/If the username exists...\r\n&#x9;if($username_correct != false) {\r\n&#x9;&#x9;\/\/...and the corresponding password is correct as well...\r\n&#x9;&#x9;if($admin_passwords[$username_correct] == $_POST[&#x27;pwd&#x27;]) {\r\n&#x9;&#x9;&#x9;\/\/Log him in!\r\n&#x9;&#x9;}\r\n&#x9;}\r\n?&#x3E;\r\n<\/pre>\r\n\r\n<h2>Some Additional Notes<\/h2>\r\n\r\n<p>Passing data between files can be a tricky business, especially if that data is sensitive. The number one rule to PHP security is to <em>never pass sensitive data using the GET method<\/em>.<\/p>\r\n\r\n<p>Besides that, however, there are numerous ways that a user can (consciously or not) play with your system by trying to input stuff you didn&rsquo;t expect. If you&rsquo;re going to use the variables in a harmless way, there&rsquo;s no reason to worry much about security.<\/p>\r\n\r\n<p>On the other hand, if you&rsquo;re working with user information or interacting with your server, there&rsquo;s surely going to be hackers trying to get access to your server. And you don&rsquo;t want that.<\/p>\r\n\r\n<p>The first thing you usually want to do is make sure those cross-file variables are actually set, and set to the right type. This is normally done with <code>isset()<\/code>.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If no username or no password is set\r\nif(!isset($_POST['usn']) || !isset($POST['pwd'])) {\r\n\t\/\/return to the homepage with an error\r\n}\r\n<\/pre>\r\n\r\n<p>Then, you could use string operations to cut out any words or characters you don&rsquo;t want. There are better ways, however, and I will explain much more about internet security in the <strong><em>Advanced PHP<\/em><\/strong> course.<\/p>\r\n\r\n<p>My last note is about another superglobal I intentionally didn&rsquo;t mention: <code>$_REQUEST<\/code>. It holds both the <em>GET<\/em> and <em>POST<\/em> variables. I don&rsquo;t think you should ever use it, as it&rsquo;s just redundant and unsafe. Nevertheless, I wanted you to know it&rsquo;s out there in case you ever encounter it in the wild.<\/p>\r\n","slur":"php-forms-dynamic-pages","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"442","title":"[PHP] Files I","post":"<p>Everything on a server is a file. The PHP programs we&rsquo;ve been executing all the time are files, images are files, CSS stylesheets are files, and so on. So, it&rsquo;s not unreasonable to expect that PHP might have to deal with other files at some time. A typical use case is, for example, uploading files to a server, or displaying the contents of a text file.<\/p>\r\n\r\n<p>I must warn you though. Just as with dynamic pages, users can (accidentally or not) do things with files you don&rsquo;t want. Because files are actually stored on a server, and therefore somewhat permanent, you should make sure they don&rsquo;t get extremely large and don&rsquo;t get erased. That said, let&rsquo;s start looking at files.<\/p>\r\n\r\n<h2>File Creation\/Opening<\/h2>\r\n\r\n<p>Before we can start doing anything with a file, we need to <em>open<\/em> it. This is done with<\/p>\r\n\r\n<code class=\"longsyntax\">$file = fopen(\"path\/to\/file.ext\", permissions);<\/code>\r\n\r\n<p>The <em>permissions<\/em> parameter is a string that determines what we intend to do with the file (read the contents, overwrite it, etcetera). More on that in next section.<\/p>\r\n\r\n<p><em>What if the file doesn&rsquo;t exist?<\/em> Fortunately, PHP is a real go-getter. If it can&rsquo;t find the file you&rsquo;re looking for, it <strong>creates<\/strong> the file for you, and then opens it!&nbsp;This is only the case, however, if you&rsquo;ve set the permissions to anything but reading the file.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This opens the file user_settings.txt for reading its contents\r\n$file = fopen(\"user_settings.txt\", \"r\");\r\n<\/pre>\r\n\r\n<h2>Permissions<\/h2>\r\n\r\n<p>As promised, here&rsquo;s a table of all the permissions we can give ourselves for a file:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Type<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Symbol<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Read<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"r\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Only read the contents of a file, from the start.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Write<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"w\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Erase all data, and start writing in the file from the start. (This is also called <em>overwriting<\/em>.)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Append<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"a\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Write data to a file, from the end. (So it doesn&rsquo;t overwrite anything.)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Read\/Write<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"r+\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Allows you to read and write into a file (a combination of <em>r<\/em> and <em>a<\/em>), from the start<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Write\/Read<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"w+\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Allows you to read and overwrite a file (a combination of <em>r <\/em>and <em>w<\/em>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Read\/Append<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\"a+\"<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Allows you to read and write into a file (a combination of <em>r <\/em>and <em>a<\/em>), from the end.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This opens the file user_settings.txt and erases all contents\r\n$file = fopen(\"user_settings.txt\", \"w\");\r\n\r\n\/\/This simply opens the file user_settings.txt, and will let you append extra information at the end\r\n$file = fopen(\"user_settings.txt\", \"a\");\r\n\r\n\/\/If the file user_settings.txt didn't exist, both would first create the file and then open it\r\n<\/pre>\r\n\r\n<h2>Reading<\/h2>\r\n\r\n<p>There&rsquo;s two ways of reading from a file: <em>load a certain amount of characters once<\/em> or <em>line by line<\/em>.<\/p>\r\n\r\n<p>The syntax for the first method is<\/p>\r\n\r\n<code class=\"longsyntax\">fread($file, length);<\/code>\r\n\r\n<p>The <em>file<\/em> parameter always points to an opened file, whilst the <em>length<\/em> parameter specifies the amount of characters to load. If you want to load all the characters within the file, simply set the length to:<\/p>\r\n\r\n<code class=\"longsyntax\">filesize(\"path\/to\/file.ext\");<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/* Content of user_settings.txt:\r\n\tmaximum_upload_size=10;maximum_download_size=100;\r\n*\/\r\n\r\n$file = fopen(\"user_settings.txt\", \"r\");\r\necho fread($file, filesize(\"user_settings.txt\"));\r\n\r\n\/\/Prints: maximum_upload_size=10;maximum_download_size=100;\r\n<\/pre>\r\n\r\n<p>The syntax for the second method is<\/p>\r\n\r\n<code class=\"longsyntax\">fget($file);<\/code>\r\n\r\n<p>The first time you call it, this gets you the first line of the file. The second time you call it, it returns the second line, and so on.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/* Content of user_settings.txt:\r\n\tmaximum_upload_size=10;\r\n\tmaximum_download_size=100;\r\n*\/\r\n\r\n$file = fopen(\"user_settings.txt\", \"r\");\r\necho fget($file); \/\/Prints maximum_upload_size=10;\r\necho fget($file); \/\/Prints maximum_download_size=100;\r\n<\/pre>\r\n\r\n<h2>Writing\/Appending<\/h2>\r\n\r\n<p>To write into a file, all you have to do is use a single function<\/p>\r\n\r\n<code class=\"longsyntax\">fwrite($file, $new_data);<\/code>\r\n\r\n<p>This works for both the <code>w<\/code> and <code>a<\/code> permissions, as both write into a file, but the first one just erases the content before it starts writing.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/* Content of user_settings.txt:\r\n\tmaximum_upload_size=10;\\n\r\n*\/\r\n\r\n$file = fopen(\"user_settings.txt\", \"a\");\r\nfwrite($file, \"maximum_download_size=100;\"); \r\n\/* Now user_settings.txt contains:\r\n\t  maximum_upload_size=10;\r\n\t  maximum_download_size=100;\r\n*\/\r\n\r\n$file = fopen(\"user_settings.txt\", \"w\");\r\nfwrite($file, \"THE USER SETTINGS HAVE BEEN HACKED\"); \r\n\/* Now user_settings.txt contains: \r\n\t  THE USER SETTINGS HAVE BEEN HACKED\r\n*\/\r\n<\/pre>\r\n\r\n<p>NOTE: If all you want to do is erase a file, without writing in it, you can of course just open the file using the <strong>w<\/strong> permission and don&rsquo;t write anything in it. This is called <em>truncating<\/em>.<\/p>\r\n\r\n<h2>Deleting<\/h2>\r\n\r\n<p>If you want to delete a file, you don&rsquo;t have to open it first. You can make it vanish with<\/p>\r\n\r\n<code class=\"longsyntax\">unlink(\"path\/to\/file.ext\");<\/code>\r\n\r\n<p>NOTE: Of course, when using the unlink function somewhere, always make sure you are deleting the right file.<\/p>\r\n\r\n<h2>Closing<\/h2>\r\n\r\n<p>When you&rsquo;re done playing with a file, you should always close it. This is to prevent security issues, save memory, and make sure you&rsquo;re always opening the right file before writing\/reading. To do so, use<\/p>\r\n\r\n<code class=\"longsyntax\">fclose($file);<\/code>\r\n\r\n<h2>File Functions<\/h2>\r\n\r\n<p>As stated earlier, file security is a big thing. Before you do any dangerous file operation, you often want to check if the file you&rsquo;re looking for is already there or not, whether the type of file is correct, and whether you even have permission to change the file. For this, we have several file functions, which will also play a big role in next chapter.<\/p>\r\n\r\n<p>To check if a file has a certain property, you can use the following functions.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_file(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the path leads to a file, false if it&rsquo;s a directory or doesn&rsquo;t exist.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_readable(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true you have permissions to read the file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_writeable(<em>path<\/em>)<\/code><br \/>\r\n\t\t\t<code>is_writable(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if you have permissions to write to the file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_uploaded_file(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if a file has been uploaded by the script<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_executable(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the file is executable<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>is_dir(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the path is a directory, false if it&rsquo;s a file or doesn&rsquo;t exist.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If a settings file exists...\r\nif(is_file(\"user_settings.txt\")) {\r\n\t\/\/...update some of the settings\r\n} else {\r\n\t\/\/...if not, tell the user something went wrong\r\n}\r\n<\/pre>\r\n\r\n<p>To get specific information about a certain file, use<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>filesize(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the size of the file ( = the amount of bytes\/characters)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>file_exists(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the file exists, false otherwise.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>filetype(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the type; file or directory<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>basename(<em>path<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the last element of the path (which is usually the current file or directory you&rsquo;re in).<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\nif(filetype($user_uploaded_file) == \"image\/png\") {\r\n\t\/\/it's an image, upload it to our images folder\r\n} else {\r\n\t\/\/abort mission, the user tricked us!\r\n}\r\n<\/pre>\r\n\r\n<h2>Shorthand Functions<\/h2>\r\n\r\n<p>Lastly, if you&rsquo;re planning on reading\/writing a file only once, there are easier ways to do so (instead of having to open and close it every time).<\/p>\r\n\r\n<p>To read a file and automatically put all the lines of a file inside an array, use<\/p>\r\n\r\n<code class=\"longsyntax\">$arr = file(path);<\/code>\r\n\r\n<p>To get all the characters between position offset and (offset + maxlen), use<\/p>\r\n\r\n<code class=\"longsyntax\">file_get_contents(path [, false, null, $offset, $maxlen]);<\/code>\r\n\r\n<p>To write data to a file, use<\/p>\r\n\r\n<code class=\"longsyntax\">file_put_contents(path, $data);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If new data arrives...\r\nif($new_data) {\r\n\t\/\/...immediately write it into the data.txt file\r\n\tfile_put_contents(\"data.txt\", $new_data);\r\n}\r\n<\/pre>\r\n\r\n<p>NOTE: I&rsquo;ve glossed over lots of functions and optional parameters here, but they don&rsquo;t make sense until you are reading the <strong><em>Advanced PHP<\/em><\/strong> course, so you can find them there!<\/p>\r\n","slur":"php-files-I","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"443","title":"[PHP] Files II","post":"<p>Last chapter discussed pretty elementary file operations &ndash; creating, reading, writing, deleting. In this chapter, we&rsquo;ll be putting those to good use by looking at <em>downloading<\/em>, <em>uploading<\/em>, and<em> directories<\/em> (and all functions that come with it). This is also the moment we get to see the <code>$_FILES<\/code> superglobal in action.<\/p>\r\n\r\n<h2>Downloading<\/h2>\r\n\r\n<p>Some file types (such as <code>.zip<\/code>) are automatically downloaded by the browser, but most are just opened or ignored. This isn&rsquo;t very useful, especially when downloading is a big deal for your website (e.g., if you&rsquo;re running an online file service or want to allow users to download something they created in your web app). It would therefore be nice if we could force PHP to download a file, and as you might have expected, we can!<\/p>\r\n\r\n<p>The trick is to not go to the file&rsquo;s URL, but instead use a PHP script to fetch the file and push it to the browser. For this, we have the function<\/p>\r\n\r\n<code class=\"longsyntax\">readfile(\"path\/to\/file.ext\");<\/code>\r\n\r\n<p>But, simply reading the file isn&rsquo;t enough &ndash; as we&rsquo;ve seen in last chapter, that alone doesn&rsquo;t download anything. So, we need to tell the browser that we want the data to be treated as a file to be downloaded, and to do so we use <strong>headers<\/strong>. For now I&rsquo;ll just show you how to use them without an in-depth explanation, but be sure to check out all the cool stuff you can do with them once you feel like it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n$file = 'awesomeImage.png';\r\n\r\n\/\/If the image exists...\r\nif (file_exists($file)) {\r\n\t\/\/...force the browser to download it instead of display it\r\n    header('Content-Description: File Transfer');\r\n    header('Content-Type: application\/octet-stream');\r\n    header('Content-Disposition: attachment; filename=\"'.basename($file).'\"');\r\n    header('Expires: 0');\r\n    header('Cache-Control: must-revalidate');\r\n    header('Pragma: public');\r\n    header('Content-Length: ' . filesize($file));\r\n\r\n    \/\/...and actually request the file and download it\r\n    readfile($file);\r\n    exit;\r\n}\r\n<\/pre>\r\n\r\n<h2>Uploading<\/h2>\r\n\r\n<p>To upload files we need to use forms, again. HTML has a special element that allows you to select a file, and by using the POST method, we can give this file to PHP to upload it.<\/p>\r\n\r\n<img src=\"media\/PHPUploadingFiles.png\" \/>\r\n\r\n<p>A simple form that allows uploading looks like this:<\/p>\r\n\r\n<pre data-lang=\"html\">\r\n&#x3C;form method=&#x22;POST&#x22; formenctype=&#x22;multipart\/form-data&#x22; action=&#x22;uploadPage.php&#x22;&#x3E;\r\n&#x9;&#x3C;input type=&#x22;file&#x22; name=&#x22;file&#x22; \/&#x3E;\r\n&#x9;&#x3C;input type=&#x22;submit&#x22; value=&#x22;Upload!&#x22; \/&#x3E;\r\n&#x3C;\/form&#x3E;\r\n<\/pre>\r\n\r\n<p>When you submit the form, PHP automatically uploads the file under a temporary name to a temporary directory. It&rsquo;s your job to check if the file fits your requirements, and then move it to where you want.<\/p>\r\n\r\n<p>All the information related to file uploads is saved in the <code>$_FILES<\/code> superglobal. Just as with the <em>GET <\/em>and <em>POST<\/em> method, you can access the file by name with<\/p>\r\n<code class=\"longsyntax\">$_FILES[\"name\"]<\/code>\r\n\r\n<p>This returns another array with these 5 properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Syntax<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>name<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Path to the original file<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>tmp_name<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Path to the temporary file on the server<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>type<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The type of the file (image\/jpeg, image\/png, and so on)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>size<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The size of the file (in bytes)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>error<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An error code. If this is 0, everything went fine. If it&rsquo;s not, something went wrong during the uploading process.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Say we need to check whether the upload was an image, and whether its size isn't too large\r\nif($_FILES[\"file\"][\"type\"] == \"image\/jpeg\" || $_FILES[\"file\"][\"type\"] == \"image\/png\") {\r\n\tif($_FILES[\"file\"][\"size\"] <= 1024) {\r\n\t\t\/\/the file is good!\r\n\t} else {\r\n\t\techo \"Sorry, the file is too large\";\r\n\t}\r\n} else {\r\n\techo \"Sorry, the file is not an image\";\r\n}\r\n<\/pre>\r\n\r\n<p>Knowing this, we have to take one last step: moving the temporary file to the place we want it to be. From that moment on, it will permanently stay there unless we move it again. To do so, use:<\/p>\r\n\r\n<code class=\"longsyntax\">move_uploaded_file($tmp_file, $target_file);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$upload_dir = \"\/images\";\r\n\r\nif($_FILES[\"file\"][\"type\"] == \"image\/jpeg\") {\r\n\tif($_FILES[\"file\"][\"size\"] <= 1024) {\r\n\t\t\/\/The file is good, save it permanently\r\n\t\t$temporary_name = $_FILES[\"file\"][\"tmp_name\"];\r\n\t\t$original_name = $_FILES[\"file\"][\"name\"]\r\n\t\tmove_uploaded_file($temporary_name, \"$upload_dir\/$original_name\");\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<h2>Directories<\/h2>\r\n\r\n<p>Once a file is on a server, the story of course doesn&rsquo;t end there. We can dynamically add and remove directories, rename files, or copy them around. For example, a website that allows photo storage could allow you to create &ldquo;albums&rdquo; to which to upload your photos. Then, for every album a user creates, it simply creates a new folder on the server with the name you&rsquo;ve chosen, and this way the billions of photos on the website&rsquo;s server stay neatly organized.<\/p>\r\n\r\n<p>To make a new directory, use<\/p>\r\n\r\n<code class=\"longsyntax\">mkdir($pathname [, $mode = 0777, $recursive = false]);<\/code>\r\n\r\n<p>The default <em>$mode<\/em> allows the widest possible access &ndash; you can both read, write and execute the directory. (Read more on <a href=\"http:\/\/php.net\/manual\/en\/function.chmod.php\">chmod<\/a>.) The <em>$recursive<\/em> parameter, if set to true, can create multiple nested directories at once if you specify them in the <em>$pathname<\/em>.<\/p>\r\n\r\n<p>To remove an existing directory, use<\/p>\r\n\r\n<code class=\"longsyntax\">rmdir($dirname);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/ Desired folder structure\r\n$folders = '\/images\/Ginty\/FamilyPhotos\/';\r\n\r\nif (mkdir($folders, 0777, true)) {\r\n\techo \"Succesfully created folders!\";\r\n} else {\r\n\techo \"Folder creation failed :(\";\r\n}\r\n<\/pre>\r\n\r\n<h2>Renaming<\/h2>\r\n\r\n<p>To rename a file or directory, use<\/p>\r\n\r\n<code class=\"longsyntax\">rename($oldname, $newname);<\/code>\r\n\r\n<p>Note that this function allows you to input paths, which means it also allows you to move the file to somewhere else.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/ User requested to change the album name to OldFamilyPhotos\r\nrename(\"\/images\/Ginty\/FamilyPhotos\", \"\/images\/Ginty\/OldFamilyPhotos\");\r\n<\/pre>\r\n\r\n<h2>Copying<\/h2>\r\n\r\n<p>To copy a file or directory, use:<\/p>\r\n\r\n<code class=\"longsyntax\">copy($source, $destination);<\/code>\r\n\r\n<p>Again, the file can be copied to any other place. If the file is copied to a place where there&rsquo;s already another file with the same name, that old file is overwritten.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/ Juan, Ginty's Husband, requested a copy of the family photos for himself as well\r\ncopy(\"\/images\/Ginty\/OldFamilyPhotos\", \"\/images\/Juan\/OldFamilyPhotos\");\r\n<\/pre>\r\n\r\n<h2>Path Information<\/h2>\r\n\r\n<p>To get the path to the <em>parent directory<\/em> of a certain file\/directory, use<\/p>\r\n\r\n<code class=\"longsyntax\">dirname($path [, $levels]);<\/code>\r\n\r\n<p>The <em>$levels<\/em> parameter specifies how many levels to go upwards. The default value is 1, which means it access the direct parent. A value of 2, for example, would access the parent of the parent.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\necho dirname(\"\/images\/Ginty\/OldFamilyPhotos\/IMG_0002.png\"); \/\/Prints OldFamilyPhotos\r\necho dirname(\"\/images\/Ginty\/OldFamilyPhotos\/IMG_0002.png\", 3); \/\/Prints images\r\n<\/pre>\r\n\r\n<p>To access lots of different information about a path, use<\/p>\r\n\r\n<code class=\"longsyntax\">pathinfo($path [, $options]);<\/code>\r\n\r\n<p>The <em>$options<\/em> parameter can have one of four values:<\/p>\r\n\r\n<ul>\r\n\t<li><code>PATHINFO_DIRNAME<\/code>: Returns the parent directory<\/li>\r\n\t<li><code>PATHINFO_BASENAME<\/code>: Returns the last element (directory or file) of the path<\/li>\r\n\t<li><code>PATHINFO_EXTENSION<\/code>: Returns the extension of the last file of the path<\/li>\r\n\t<li><code>PATHINFO_FILENAME<\/code>: Returns the name of the last file of the path<\/li>\r\n<\/ul>\r\n\r\n<p>If it isn&rsquo;t set, the function returns all elements.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\necho pathinfo(\"\/images\/Ginty\/OldFamilyPhotos\/IMG_0002.png\", PATHINFO_BASENAME); \/\/Prints IMG_0002.png\r\n<\/pre>","slur":"php-files-II","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"444","title":"[PHP] Cookies & Sessions","post":"<p>If you thought the other superglobals were all-powerful and extremely useful, you&rsquo;re in for a treat. The two topics of this chapter, cookies and sessions, can be viewed as <em>ultra-superglobals<\/em>. They aren&rsquo;t just available within the complete program, they are also available <em>across all files<\/em>.<\/p>\r\n\r\n<h2>What are cookies?<\/h2>\r\n\r\n<p>I&rsquo;m sure you&rsquo;ve seen cookie notifications or at least heard about them before. <strong>Cookies<\/strong> are everywhere, and they are used to save information within a user&rsquo;s web browser. A website can simply tell the browser to store certain data, under a certain name, for a certain amount of time.<\/p>\r\n\r\n<p><em>Why are they called cookies<\/em>? Well, let&rsquo;s look at an example. Say you&rsquo;re running a an online store, which lets users place items they like into their &ldquo;shopping cart&rdquo;, and at the end of the day pay for all products inside the cart at once. The way most sites do this, is by creating cookies that hold the items you&rsquo;ve selected thus far. So, essentially, as you&rsquo;re browsing the site, the website&rsquo;s placing <em>cookie crumbs<\/em> along the path you&rsquo;re taking.<\/p>\r\n\r\n<h2>Creating Cookies<\/h2>\r\n\r\n<p>To create a cookie, use<\/p>\r\n\r\n<code class=\"longsyntax\">setcookie(\"name\", $value [, $expiration_date});<\/code>\r\n\r\n<p>The <em>expiration_date <\/em>parameter determines how long the cookie will be kept by the browser. If set to 0 or omitted, the cookie is removed when the browser closes. Otherwise, you can set it to expire at a specific date, which we&rsquo;ll discuss in the advanced course.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Sets a cookie that keeps the user logged in for a day, so that he doesn't have to sign in again every time.\r\nsetcookie(\"login\", true, time()+60*60*24);\r\n<\/pre>\r\n\r\n<p>If you want to <strong>modify<\/strong> an existing cookie, all you have to do is call this function again, with the same <em>name<\/em>, but different parameters. Essentially, it overwrites the old cookie with the new one.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Everytime the user logs in, update the cookie again to last another day.\r\nsetcookie(\"login\", true, time()+60*60*24);\r\n<\/pre>\r\n\r\n<p>Of course, some people don&rsquo;t like having stuff saved into their browser, no matter how tiny. Therefore, cookies can be disabled. To check if cookies are working, you can simply set a cookie, and then check if it was successful. This is done by checking whether the <code>$_COOKIE<\/code> superglobal holds any elements:<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nsetcookie(\"login\", true, time()+60*60*24);\r\n\r\nif(count($COOKIE) > 0) {\r\n\t\/\/Cookies are enabled, let's do this!\r\n}\r\n<\/pre>\r\n\r\n<h2>Retrieving Cookies<\/h2>\r\n\r\n<p>To retrieve a cookie&rsquo;s value, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">$_COOKIE[\"name\"];<\/code>\r\n\r\n<pre data-lang=\"php\">\r\nsetcookie(\"login\", true, time()+60*60*24);\r\nsetcookie(\"username\", \"Juan\", time()+60*60*24);\r\n\r\nif($_COOKIE['login']) {\r\n\t\/\/user is logged in, display welcome message\r\n\techo \"Welcome dear $_COOKIE['username']!\";\r\n}\r\n<\/pre>\r\n\r\n<h2>Deleting cookies<\/h2>\r\n\r\n<p>Because cookies are saved in the browser and across files, you can&rsquo;t use functions like <code>unset()<\/code> on it. Instead, you can simply overwrite the cookie to an expiration date in the past. The browser will set the cookie, check the data, see it should have already expired, and delete it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If the user logs out, remove the cookie\r\nsetcookie(\"login\", false, time()-1);\r\n<\/pre>\r\n\r\n<h2>What are Sessions?<\/h2>\r\n\r\n<p>The cookies we&rsquo;ve just seen are on the <em>user-side<\/em> of an application. The very same cookie you set with PHP could also be created or edited by JavaScript, for example, or deleted right from the browser.<\/p>\r\n\r\n<p>Sometimes &ndash; particularly, when working with sensitive information &ndash; we don&rsquo;t want that, and we want the <em>server-side<\/em> to keep track of certain variables for a particular user. For this we can use <strong>sessions<\/strong>.<\/p>\r\n\r\n<p>For example, when a user starts a sign up process we can start a session. Now we can easily keep track of the current state of the process that a user is in (and perhaps some other variables), even if he decides to switch pages or take a temporary break from signing up. And then, when the user is done, we just stop the session.<\/p>\r\n\r\n<p>A session can be started on the server with a single function. From that moment on, PHP scripts can save any data they want within the session, and use it everywhere across the application &ndash; until the session is closed or deleted.<\/p>\r\n\r\n<h2>Starting Sessions<\/h2>\r\n\r\n<p>To start a session, use<\/p>\r\n\r\n<code class=\"longsyntax\">session_start();<\/code>\r\n\r\n<p>This must be placed <em>before<\/em> any HTML is written into the file, so it&rsquo;s often best to place it as the first line of the file. Unlike cookies, we can&rsquo;t set a specific expiration date &ndash; the session will keep working until the user either closes the browser, or we delete the sessions ourselves.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n&#x3C;?php\r\n&#x9;session_start();\r\n?&#x3E;\r\n&#x3C;html&#x3E;\r\n&#x9;...\r\n&#x3C;\/html&#x3E;\r\n<\/pre>\r\n\r\n<p><em>If all of this is stored on the server, how does the server recognize a user?<\/em> Well, when a session is started, PHP simply plants a small user ID into the browser. If, later on, your scripts want to access session variables, the server will match the user ID it saved with the one on the server, and return the right variables for that specific user.<\/p>\r\n\r\n<h2>Getting &amp; Setting Session Variables<\/h2>\r\n\r\n<p>To get and set a session variable, you can use it like any other variable:<\/p>\r\n\r\n<code class=\"longsyntax\">$get_var = $_SESSION[\"name\"];\r\n$_SESSION[\"name\"] = $some_value;<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/At some page, a sign up process is initialized...\r\nsession_start();\r\n\r\n$_SESSION[\"username\"] = \"John Dorian\";\r\n$_SESSION[\"state\"] = 0;\r\n\r\n\/\/At another page, the user goes through the process...\r\nif($_SESSION[\"state\"] == 0) {\r\n\techo \"Welcome $_SESSION['username'], please choose your password\";\r\n} else if($_SESSION[\"state\"] == 1) {\r\n\techo \"Please provide your email address\";\r\n} else if($_SESSION[\"state\"] == 2) {\r\n\techo \"Please tell us a bit about yourself\";\r\n} else {\r\n\techo \"Thank you! You should receive an email confirmation soon!\";\r\n}\r\n<\/pre>\r\n\r\n<h2>Destroying Sessions<\/h2>\r\n\r\n<p>To explicitly destroy a session, it&rsquo;s best to unset all associated variables first and then perform some session destruction. To do so, use<\/p>\r\n\r\n<code class=\"longsyntax\">session_unset();\r\nsession_destroy();<\/code>\r\n","slur":"php-cookies-sessions","cat":"Website","subcat":"PHP","video":"","diff":"3","quiz":""},
{"id":"445","title":"[PHP] Databases (MySQL)","post":"<p>Last chapter looked at storing relatively small pieces of data, for a small period of time. If the size of the data grows, or we want data to be permanently available to <em>all<\/em> users, it&rsquo;s best to save it inside a <strong>database<\/strong>.<\/p>\r\n\r\n<p>As the name suggests, they are the basis for your data; the command centre from which you retrieve, store, and transport all the data. It has, therefore, no certain layout or structure or anything attached to it &ndash; it&rsquo;s just raw data stored in tables. And that&rsquo;s exactly when PHP jumps onto the stage. It has to tell the database which parts of the data it wants, and upon retrieving it has to do meaningful things with the data, such as placing it between certain HTML tags and creating a nice layout around them.<\/p>\r\n\r\n<img src=\"media\/PHPDatabasesOverview.png\" \/>\r\n\r\n<h2>SQL<\/h2>\r\n\r\n<p>Databases are extremely powerful and behind most products that work with data in any way. But, as I just illustrated, a database works completely separate from PHP, which you also need another <em>language<\/em> to work with them. For this, there&rsquo;s <strong>SQL<\/strong>: Structured Query Language. It lets you perform all sorts of queries on databases, such as &ldquo;load all posts with category X&rdquo; or &ldquo;load the 10 newest posts&rdquo;.<\/p>\r\n\r\n<p>If you want to learn SQL (and you certainly should), I advise you to read the <strong><em>SQL Course<\/em><\/strong>. I will now just continue explaining how to connect to databases with PHP, assuming you know some SQL. You don&rsquo;t need to be an SQL master, you just need to have a slight sense of the beast I&rsquo;m talking about here.<\/p>\r\n\r\n<h2>MySQL<\/h2>\r\n\r\n<p>There are many different systems that have implemented SQL. I will explain how to work with the most popular one that most beginners automatically use, MySQL, but the concepts can easily be adapted to other systems. Usually, this simply means changing some letters of the function here and there. (Also, MySQL is free.)<\/p>\r\n\r\n<p>PHP, however, didn&rsquo;t always have support for those powerful <em>Objects<\/em> we&rsquo;ve discussed earlier. This means that the first versions of MySQL worked without objects, and an object-oriented system was implemented much later. It&rsquo;s now recommended, though, to use this object-oriented version, which is called <strong>MySQLi<\/strong>. So, we&rsquo;ll be talking about that.<\/p>\r\n\r\n<h2>Connecting to the Database<\/h2>\r\n\r\n<p>To connect a database, use:<\/p>\r\n\r\n<code class=\"longsyntax\">$conn = new mysqli(<em>$server_name<\/em>, <em>$username<\/em>, <em>$password<\/em>, <em>$database_name<\/em>);<\/code>\r\n\r\n<p>If you&rsquo;re running PHP locally (with software on your computer), the server is most likely <code>localhost<\/code>. If you have a website hosted somewhere, you should be able to find information about your databases in the control panel.<\/p>\r\n\r\n<p>If something goes wrong, the error will be attached to the connection object, and you can get it with<\/p>\r\n\r\n<code class=\"longsyntax\">$conn-&gt;connect_error<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Connects to the database holding data for a blog\r\n$conn = new mysqli(\"localhost\", \"administrator\", \"admin_password\", \"blog\");\r\n\r\nif($conn->connect_error) {\r\n\techo \"Sorry, something went wrong. Try waiting a few minutes, and then reloading.\";\r\n\techo \"The error was: \" . $conn->connect_error;\r\n}\r\n<\/pre>\r\n\r\n<h2>Performing a Query<\/h2>\r\n\r\n<p>Once a connection has been established, you can perform queries. To do so, use<\/p>\r\n\r\n<code class=\"longsyntax\">$result = $conn-&gt;query(\"SQL QUERY HERE\");<\/code>\r\n\r\n<p>Note that the query returns something &ndash; the results &ndash; so you need to save that in a variable. Even if your query inserts new data into the database (and doesn&rsquo;t &ldquo;get&rdquo; anything), it will return the results of that operation.<\/p>\r\n\r\n<p>To check how many results the query returned, or whether it returned anything at all, use<\/p>\r\n\r\n<code class=\"longsyntax\">$result-&gt;num_rows<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$conn = new mysqli(\"localhost\", \"administrator\", \"admin_password\", \"blog\");\r\n\r\n\/\/This requests the last 10 rows from the table \"articles\"\r\n$result = $conn->query(\"SELECT * FROM `articles` ORDER BY id DESC LIMIT 10\");\r\n\r\nif($result->num_rows > 0) {\r\n\t\/\/display the posts to the user\r\n} else {\r\n\t\/\/tell the user we couldn't find anything\r\n}\r\n<\/pre>\r\n\r\n<h2>Fetching the Data<\/h2>\r\n\r\n<p>Even if you&rsquo;ve successfully executed a query, PHP isn&rsquo;t sure how to interpret the data, as it can interpret it in numerous ways. Usually, though, the best way is to put the data into an associative array.<\/p>\r\n\r\n<p>PHP, however, has an odd way of dealing with query results. Instead of first saving the results inside an array, and then looping through that, it wants to do both <em>at the same time<\/em>. So, to loop through all the data you&rsquo;ve fetched, use<\/p>\r\n\r\n<code class=\"longsyntax\">while($row = $result-&gt;fetch_assoc()) {\r\n\t<em>do something with current row<\/em>\r\n}<\/code>\r\n\r\n<p>This saves the next row inside the <code>$row<\/code> variable, as an associative array, every time the loop runs again. Because it&rsquo;s an associative array, you can access the data in each column with<\/p>\r\n\r\n<code class=\"longsyntax\">$row[<em>\"some_column_name\"<\/em>];<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n$result = $conn-&#x3E;query(&#x22;SELECT * FROM &#x60;articles&#x60; ORDER BY id DESC LIMIT 10&#x22;);\r\n\r\nif($result-&#x3E;num_rows &#x3E; 0) {\r\n&#x9;while($row = $result-&#x3E;fetch_assoc()) {\r\n&#x9;&#x9;\/\/Displays the post title\r\n&#x9;&#x9;echo &#x22;&#x3C;h1&#x3E;&#x22; . $row[&#x22;post_title&#x22;] . &#x22;&#x3C;\/h1&#x3E;&#x22;;\r\n\r\n&#x9;&#x9;\/\/Displays the actual post\r\n&#x9;&#x9;echo $row[&#x22;post&#x22;];\r\n\r\n&#x9;&#x9;\/\/A &#x22;footer&#x22; added to the end of every post\r\n&#x9;&#x9;echo &#x22;&#x3C;p&#x3E;Thanks for reading! Please leave a comment below with your thoughts!&#x22;;\r\n&#x9;}\r\n} else {\r\n&#x9;echo &#x22;Sorry, your search had no results. Perhaps try the homepage?&#x22;;\r\n}\r\n<\/pre>\r\n\r\n<h2>Closing the Connection<\/h2>\r\n\r\n<p>Once you&rsquo;re done with your business, it&rsquo;s best to close the connection. It&rsquo;s also automatically closed when the user closes the tab, but it&rsquo;s usually wise to save resources wherever you can.<\/p>\r\n\r\n<p>To close it, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">$conn-&gt;close();<\/code>\r\n","slur":"php-databases-mysql","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"446","title":"[PHP] Error Handling & Debugging","post":"<p>Congratulations, you&rsquo;ve seen almost all the cool things PHP has to offer! Now, it&rsquo;s time for the other 50% of the programming job &ndash; fixing your errors, or <strong>debugging<\/strong>. Humans aren&rsquo;t perfect (no matter how much we&rsquo;d like to be that), which means spelling errors slip in, we forget the occasional semicolon here and there, and we lose oversight when projects grow large. Things don&rsquo;t always work the way you expected them to work, but if that happens you can&rsquo;t just quit working on the project. Instead, you need to learn how to find out what went wrong specifically, and how to fix it.<\/p>\r\n\r\n<h2>A Word on Debugging<\/h2>\r\n\r\n<p>I wasn&rsquo;t just throwing hyperboles at you in the introduction; debugging really is a very important aspect of programming. When you write a program, you want it to work exactly like you intended. There&rsquo;s billions of ways things can go wrong, and most of them are easily fixed &ndash; however, you can&rsquo;t look inside a computer&rsquo;s head to see what exactly happened. Therefore, when it comes to debugging, <em>the more errors the better<\/em>.<\/p>\r\n\r\n<p>Every time you write a crucial line of code, or something that is too complex to grasp at first glance, try to make the program throw an error if anything goes wrong.<\/p>\r\n\r\n<p>PHP will automatically throw errors if it finds something wrong with your <em>syntax<\/em>, but it can&rsquo;t find problems with your <em>logic<\/em>. If you expect some variable to have the value 2, but it keeps returning value 3 all the time, you clearly did something wrong, but PHP will not throw an error.<\/p>\r\n\r\n<p>So, this chapter will look at the error types PHP automatically throws, and how to implement your own safety mechanisms.<\/p>\r\n\r\n<h2>Errors<\/h2>\r\n\r\n<p>PHP can throw many different types of errors (also called <em>error report levels<\/em>). These are usually separated into two categories: <strong>fatal errors<\/strong> that make the program crash and stop executing, and <strong>non-fatal<\/strong> errors that simply warn you about something but let the program continue.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Value<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Constant<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_ERROR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A fatal error, which can&rsquo;t be recovered from.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>2<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_WARNING<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A non-fatal warning that something might go wrong if you keep using the current code.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>8<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_NOTICE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A non-fatal notice that there <em>might<\/em> be an error somewhere, but it&rsquo;s not sure.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>256<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_USER_ERROR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A fatal error generated by the user.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>512<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_USER_WARNING<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A non-fatal warning generated by the user<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>1024<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_USER_NOTICE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A non-fatal notice generated by the user<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>2048<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_STRICT<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A non-fatal error that merely <em>suggests<\/em> code improvements.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>4096<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_RECOVERABLE_ERROR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A fatal error that can be solved by the user, so it&rsquo;s recoverable<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>8191<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>E_ALL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>All errors and warnings.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This emits a notice telling me that $some_var is undefined, but continues anyway\r\necho $some_var;\r\n\r\n\/\/This prints INF (infinity), but emits a warning that I'm dividing something by zero (which isn't really a possible math operation)\r\necho 10\/0;\r\n\r\n\/\/This emits a fatal error which crashes the program\r\necho 1 << -1;\r\n\r\n\/\/Which means this isn't executed anymore\r\necho \"HEY!\";\r\n<\/pre>\r\n\r\n<p>There are even more error report levels, but they don&rsquo;t occur often, unless something went very, very wrong with setting up PHP or your server. Nevertheless, you can find them all in the List of <a href=\"http:\/\/php.net\/manual\/en\/errorfunc.constants.php\">Error Function Constants<\/a><\/p>\r\n\r\n<h2>Reporting Errors<\/h2>\r\n\r\n<p>To tell PHP which errors you want to see, and which you don&rsquo;t, use<\/p>\r\n\r\n<code class=\"longsyntax\">error_reporting(<em>ERROR_CONSTANT<sub>1<\/sub><\/em> | <em>&hellip;<\/em> | <em>ERROR_CONSTANT<sub>N<\/sub><\/em>);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Everything is reported\r\nerror_reporting(E_ALL);\r\n\r\n\/\/Only warnings and notices are reported\r\nerror_reporting(E_WARNING | E_NOTICE);\r\n<\/pre>\r\n\r\n<p>Usually, when developing something you want <em>all<\/em> errors to turn op, whilst if your program is online and in production, you only want to show the fatal errors.<\/p>\r\n\r\n<h2>Exceptions<\/h2>\r\n\r\n<p>Exceptions are a lot like errors, but there&rsquo;s a clear distinction that needs to be clarified. Errors are built-in rules for checking whether something went wrong, while exceptions are created by the <em>programmer<\/em>. The programmer decides whether something is allowed or not, and writes code to handle these <em>exceptions<\/em> or special cases.<\/p>\r\n\r\n<p>There&rsquo;s nothing inherently wrong with those special cases when it comes to syntax, there&rsquo;s just something wrong with the logic. For example, it&rsquo;s perfectly logical to forbid users from entering birth dates in the future when signing up, even though PHP could perfectly store that date and perform calculations with it.<\/p>\r\n\r\n<p>To throw an exception, use<\/p>\r\n\r\n<code class=\"longsyntax\">throw new Exception(&ldquo;some custom error message&rdquo;);<\/code>\r\n\r\n<p>If you don&rsquo;t deal with this exception, it will result in a fatal error. I will talk about handling errors carefully with satin gloves in the next section.<\/p>\r\n\r\n<h2>Catching Errors &amp; Exceptions<\/h2>\r\n\r\n<p>When something goes wrong, we say the program <em>throws<\/em> an error. Using the same metaphor, we can display any error messages by <em>catching<\/em> them.<\/p>\r\n\r\n<p>For this, we use a <strong>try-catch block<\/strong>. When working with crucial or error-prone code, you first <em>try <\/em>it, and if anything goes wrong, you can let it throw an understandable error instead of wildly crashing. And, perhaps even more importantly, the program continues even if the error was fatal.<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">try {\r\n\t<em>code<\/em>\r\n} catch(Throwable <em>$error<\/em>) {\r\n\t<em>do something with the error<\/em>\r\n} finally {\r\n\t<em>code<\/em>\r\n}<\/code>\r\n\r\n<p>First, you <em>try<\/em> a piece of code. Then, you <em>catch<\/em> any error that might have occurred and display it in a readable way, and perhaps do something about it. The last piece, the <em>finally<\/em> block, is optional and contains code that is executed either way; it doesn&rsquo;t matter if an error occurred. This is useful for checking what the code before it did, and for cleaning up after it or solving the problem.<\/p>\r\n\r\n<p>That word before the variable, <code>Throwable<\/code>, simply means that it should catch both errors and exceptions. You can also set it to <code>Error<\/code> or <code>Exception<\/code> if you want only one type. Either way, the variable will be an object that has the <code>getMessage()<\/code> method that retrieves the message from the error\/exception.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/This prints \"Bit shift by negative number\", which is a fatal error message telling us exactly what's wrong. But, the program continues without problems, because we've caught it in a try-catch block\r\ntry {\r\n\t$x = 1 << -1;\r\n} catch(Throwable $e) {\r\n\techo $e->getMessage();\r\n}\r\n\r\n\/\/This will tell us that the input number is wrong, so we know exactly why something went wrong in our script\r\ntry {\r\n\t$x = 15;\r\n\tif($x > 1) {\r\n\t\tthrow new Exception(\"Please provide input between 0 and 10\");\r\n\t} else {\r\n\t\techo \"Thanks for rating this product!\";\r\n\t}\r\n} catch(Throwable $e) {\r\n\techo $e->getMessage();\r\n}\r\n<\/pre>\r\n\r\n<h2>Triggering Errors<\/h2>\r\n\r\n<p>We&rsquo;ve seen the many types of errors that can be forgiving (warnings and notices) or fatal, and we&rsquo;ve seen exceptions that must always use a try-catch statement to be solved. These are two ends of a very broad error spectrum, and sometimes you want something in between, which lead to the creation of <em>error triggering<\/em> &ndash; forcing PHP to throw an error of the type we want.<\/p>\r\n\r\n<p>At the start of the chapter, we saw that there were three special user error types: <code>E_USER_ERROR<\/code>, <code>E_USER_WARNING<\/code> and <code>E_USER_NOTICE<\/code>. We can trigger any one of them with<\/p>\r\n\r\n<code class=\"longsyntax\">trigger_error(\"some error message\", ERROR_CONSTANT);<\/code>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/If the ID of the blog post we want is not set in the URL, we want to warn the programmers that something is wrong\r\nif(!isset($_GET['post_id'])) {\r\n\ttrigger_error(\"Watch out, the ID is not set!\", E_WARNING);\r\n}\r\n<\/pre>\r\n\r\n<p>Last but not least, there&rsquo;s a shorthand for calling a fatal error with a custom message, which is<\/p>\r\n\r\n<code class=\"longsyntax\">die(\"some error message\");<\/code>\r\n\r\n<p>It&rsquo;s quite intuitive actually; you try to do something very important, but if it doesn&rsquo;t work, let the program die!<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Safety mechanism to make sure we handle it right if connecting to a database went wrong.\r\n$conn = new mysqli(\"localhost\", \"Juan\", \"Juanisawesomeyeah\", \"Items\");\r\n\r\nif($conn->error_message) {\r\n\tdie(\"Couldn't connect to database. The error was: \" . $conn->error_message);\r\n}\r\n\r\n\/\/Any code here will not be executed anymore...\r\n<\/pre>\r\n","slur":"php-error-handling-debugging","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"447","title":"[PHP] Best Practices","post":"<p>So, you&rsquo;re starting to feel like a real PHP wizard by now? Great! Even wizards, however, need to optimize their workflow. There&rsquo;s always more than one way to do something in PHP, and sometimes even multiple &ldquo;best ways&rdquo; of doing something. To make sure your scripts stay well organized and as quick and efficient as possible, I want to dedicate this last chapter to programming best practices. Some of it is applicable to all programming languages, some of it is PHP specific.<\/p>\r\n\r\n<h2>Be Consistent<\/h2>\r\n\r\n<p>The first rule is: be consistent and clear with your names &ndash; for variables, constants, functions, classes, and so on. Decide on a system, and stick with it. This way, you can easily see what a certain name belongs to and what it does, which saves time and reduces errors.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/An example of naming conventions:\r\nclass SomeClassName {\r\n\t\r\n}\r\n\r\nfunction some_function_name() {\r\n\t$_local_var = 5;\r\n}\r\n\r\n$global_var = 10;\r\nconst SOME_CONSTANT = 15;\r\n<\/pre>\r\n\r\n<p>Also, use the same PHP tags all the time. I haven&rsquo;t told you this, but there are many other ways to start a PHP block (instead of the regular <code>&lt;?php ?&gt;<\/code>). My advice, however, is to ignore them when you see them and just stick with the simplest and clearest one.<\/p>\r\n\r\n<h2>Write Readable Code<\/h2>\r\n\r\n<p>Almost all errors are a result of code that isn&rsquo;t readable, and therefore can&rsquo;t easily be grasped or understood.<\/p>\r\n\r\n<p>The first step to readable code is using proper indentation. If lines of code are not on the same level in the hierarchy, let them have a different indentation!<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/Bad indentation\r\nfunction some_func() {\r\n$x = 10;\r\nfor($i=0;$i<10;$i++) {\r\necho \"The number is $i\";\r\n}\r\n}\r\n\r\n\/\/Good indentation\r\nfunction some_func() {\r\n\t$x = 10;\r\n\tfor($i=0;$i<10;$i++) {\r\n\t\techo \"The number is $i\";\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>The next step is adding comments everywhere. And by that I mean: <em>everywhere<\/em>. Anytime you write a new function, take time to make a comment above it about what parameters it accepts, and exactly what it does. Anytime you write a new class, write about the properties and methods it has and their functionality. Anytime you write a line of code that seems like it could provide problems in the further, make an insightful comment about it.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/* FUNCTION: Returns the sum of two numbers\r\n *\r\n * @param $a (integer) = first number\r\n * @param $b (integer) = second number\r\n *\/\r\nfunction sum(int $a, int $b) : int {\r\n\treturn $a + $b;\r\n}\r\n<\/pre>\r\n\r\n<p>Lastly, there&rsquo;s a balance to be found between the length of the lines and the amount of lines. You don&rsquo;t want lines to be too long (in width), but neither do you want to have a document with thousands of lines. Break strings over multiple lines if you can, and try to only save something inside a variable when you absolutely must.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/An overly complex and long line\r\n$a = (($x > 5 && !($y < 5)) || $x <> $y) ? 5\/10 * (5 + $x*$y + $y + $x) : \"PANDAS ARE AWESOME AND THEY SHOULD ALWAYS HAVE ENOUGH BAMBOO TO EAT\";\r\n\r\n\/\/Can sometimes be refactored to be more readable, which also allows you to add comments\r\n$xy_correct = ($x > 5 && (!$y < 5));\r\n$condition = ($xy_correct || $x <> $y);\r\n\r\n$value_1 = 0.5 * (5 + $x*$y + $y + $x);\r\n$value_2 = \"PANDAS ARE AWESOME AND THEY SHOULD \\\r\n\t\t\tALWAYS HAVE ENOUGH BAMBOO TO EAT\";\r\n\r\n$a = $condition ? $value_1 : $value_2;\r\n<\/pre>\r\n\r\n<h2>Don&rsquo;t Repeat Yourself<\/h2>\r\n\r\n<p>The DRY-principle &ndash; <em>Don&rsquo;t Repeat Yourself<\/em> &ndash; is very important in all programming. You don&rsquo;t want to write any piece of code more than once, which is exactly why classes, objects and functions were invented. Not only does this save a tremendous amount of time and effort, it also makes it much easier to change the program at a late stage or to spot problems.<\/p>\r\n\r\n<p>So, any time you think there&rsquo;s a chance you&rsquo;ll need some functionality more than once, turn it into a function or class! Beware, however, of breaking up your program into too many tiny pieces.<\/p>\r\n\r\n<p>In general, functions should accept no more than three parameters. If you find one that needs to do that, rewrite the code and perhaps use more functions. They&rsquo;re called <em>functions <\/em>for a reason &ndash; they should provide a single core <em>functionality<\/em>, not try to do many things at once that could also be handled by many more specific functions.<\/p>\r\n\r\n<p>Objects, on the other hand, can have as many properties and methods as they need, as long as it seems logical for the object. For example, if you have multiple classes related to animals (<em>Fish<\/em>, <em>Panda<\/em>, <em>Bird<\/em>, &hellip;), it&rsquo;s logical that each of them has a different method for the sound they make, but things like pooping and moving are general functions that you could move into an abstract parent class.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/* WRONG: This function tries to do too many things at once:\r\n *   - calculate the final grade\r\n *\t - assign that grade to the correct course\r\n *   - assign the right amount of points to the student (if he failed the course, none)\r\n *\/\r\nfunction grading($grades, $weights, $course, $study_points, $student) {\r\n\r\n}\r\n\r\n\/\/ BETTER:\r\nfunction grading() {\r\n\t$grade = calculate_grade([7.6, 9.5], [0.4, 0.6]);\r\n\tadd_to_course($grade, \"Linear Algebra\");\r\n\t$points = determine_points($grade, 5);\r\n\tupdate_points(\"Juan\", $points);\r\n}\r\n\r\nfunction calculate_grade($grades, $weights) {\r\n\t$total = 0;\r\n\tfor($i=0;$i&lt;sizeof($grades);$i++) {\r\n\t\t$total += $grades[$i] * $weights[$i];\r\n\t}\r\n\treturn $total;\r\n}\r\n\r\nfunction add_to_course($grade, $course) {\r\n\t\/\/add this grade to list of all grades in university's database\r\n}\r\n\r\nfunction determine_points($grade, $points) {\r\n\treturn ($grade >= 5.5) ? $points : 0;\r\n}\r\n\r\nfunction update_points($student, $points) {\r\n\t\/\/update the row containing the student's information in the database\r\n}\r\n<\/pre>\r\n\r\n<h2>Optimize<\/h2>\r\n\r\n<p>It&rsquo;s always good to have a faster website that consumes less bandwidth. Therefore, some small optimizations can make a big difference, and can generally do no harm.<\/p>\r\n\r\n<p>Firstly, optimize your loops. A loop can call a block of code many, many times, which means that it can take quite a bit of processing power from the server if that block of code is too complex. Try to reduce the amount of loops, and especially reduce the complexity of the code within them.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\n\/\/For example, this loop searches an array for the first sequence of two zeros\r\n$arr = [0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0];\r\n\r\nfor($i = 0;$i&lt;(sizeof($arr)-1);$i++) {\r\n\tif($arr[$i] == 0 && $arr[$i+1] == 0) {\r\n\t\techo \"Found it at position $i!\";\r\n\t}\r\n}\r\n\r\n\/\/What's wrong? The code runs more often than it should (it should end after we've found what we're looking for), and it calculates the size of the array every time. Better is:\r\n\r\n$size = (sizeof($arr)-1);\r\nfor($i = 0;$i&lt;$size;$i++) {\r\n\tif($arr[$i] == 0 && $arr[$i+1] == 0) {\r\n\t\techo \"Found it at position $i!\";\r\n\t\tbreak;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>Secondly, PHP is actually quite lenient when it comes to syntax. Unlike lots of other big programming languages, variables don&rsquo;t need to be declared before you can use them, you can switch between data types any time you want, function names are case-insensitive, and so on. Although this is nice and programmer-friendly, it&rsquo;s also a subtle invitation to be sloppy with your code. Don&rsquo;t.<\/p>\r\n\r\n<p>Write PHP using as many good coding practices and methods as you can. PHP frameworks, such as the popular <a href=\"https:\/\/laravel.com\/\">Laravel<\/a>, can help with this by forcing you to write clean PHP code.<\/p>\r\n\r\n<p>Thirdly, scripts working with databases (which they often do) can also ask quite a lot of resources and bandwidth from the server. You&rsquo;ll want to reduce the amount of SQL queries as much as possible, so choose your SQL query wisely, and use smart PHP code to handle the rest.<\/p>\r\n\r\n<p>Lastly, when it comes to defining constants, it&rsquo;s preferred to use <code>define()<\/code> over the <code>const<\/code> keyword. The first defines the constant at runtime, which saves time and resources. Use the latter only when you absolutely need it from the start.<\/p>\r\n\r\n<h2>Provide Backup &amp; Security<\/h2>\r\n\r\n<p>Security is extremely important when it comes to your servers. PHP has lots of special functionality to help you be as secure as possible, which I will talk about in the <strong><em>Advanced PHP<\/em><\/strong> course. In the meantime, there&rsquo;s some things you can and should always apply.<\/p>\r\n\r\n<p>First of all, always set <em>default values<\/em>, and check if a variable is actually set and set to the right type. You don&rsquo;t want to run into errors or bigger problems by working with undefined variables.<\/p>\r\n\r\n<p>Secondly, when testing and debugging, set as many <em>breakpoints<\/em> as you can. A breakpoint is a place where you echo information from the last piece of code to the browser, so that you can see what was going on in that block of code. Make it a habit to use <code>echo<\/code> and <code>var_dump<\/code> to check variables and functionality often.<\/p>\r\n\r\n<pre data-lang=\"php\">\r\nif(!isset($_GET[\"password\"])) {\r\n\techo \"Note to self: Somehow, the password is not being set here\";\r\n\t$password = \"defaultpass\";\r\n} else {\r\n\t$password = $_GET[\"password\"];\r\n}\r\n\r\n$a = ($password_correct && $username_correct);\r\necho $a; \/\/Will print nothing, as $a is either true or false, and both aren't converted to strings\r\nvar_dump($a); \/\/Will print useful information, namely bool(true) or bool(false)\r\n<\/pre>\r\n","slur":"php-best-practices","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"448","title":"[PHP] Conclusion: what now?","post":"<p>After reading this course, you should have a solid understanding of how PHP works, its basic functionality, what you can do with it, and even some advanced functionality. It should be enough to create any moderately complex web application; a blog, a system where users can sign up and log in, a game, anything you want!<\/p>\r\n\r\n<p>In the 28 chapters of this course, however, I couldn&rsquo;t possibly explain every single bit of PHP. If you want to know more, or you&rsquo;re stuck and <em>need<\/em> to know more, I have made the <strong><em>Advanced Course<\/em><\/strong> for that. I can&rsquo;t promise it will be as easy and as much fun as this introductory course, but at least it will turn you from PHP wizard into a PHP god ;)<\/p>\r\n\r\n<p>If that&rsquo;s not your cup of tea, you can already start looking into databases now, especially <strong><em>SQL<\/em><\/strong>. Anyone that works with computer systems is going to need databases, also when working with other languages than PHP, so it&rsquo;s generally wise to learn it.<\/p>\r\n\r\n<p>If that still doesn&rsquo;t interest you, then I just wish you good luck on your PHP journey! I hope this course taught you what you wanted to know, and made the huge world of PHP more friendly and comfortable.<\/p>\r\n","slur":"php-conclusion-what-now","cat":"Website","subcat":"PHP","video":"","diff":"4","quiz":""},
{"id":"449","title":"A Guide to SQL","post":"<p>Databases are everywhere. When I say database, people often think about websites gathering lots of data about something, so they can use the results to optimize or learn something about their users. That&rsquo;s data analysis, and while you can use databases for that, they can do so much more.<\/p>\r\n\r\n<p>For example, blogs load their posts and comments from a database, user accounts are saved inside a database, online games save game data inside a database, web shops save their products in a database, and so on. Whatever you&rsquo;re working on, if it&rsquo;s going to be even a little complex or dynamic, you&rsquo;ll need a database.<\/p>\r\n\r\n<p>Therefore, we need a way of communicating with databases, a way of telling it to do what we want. Luckily, just like HTML and CSS, there&rsquo;s a single standardized language we can use: <strong>SQL<\/strong>, which stands for <em>Structured Query Language<\/em>. Basically, it lets us query the database (such as request specific data from it) following a structured syntax. So, it helps the database understand us better, and it helps us not lose our minds in the complexity of the world of databases.<\/p>\r\n\r\n<p>Just like HTML and CSS, however, SQL on its own isn&rsquo;t enough. A browser is needed to interpret HTML and display it as something meaningful, and in the same way, a database management system is needed to process SQL queries and do something meaningful with it. We call these systems <strong>RDBMS<\/strong>: <em>Relational Database Management Systems<\/em>.<\/p>\r\n\r\n<p>You can view SQL as the native tongue of these RDBMS. Generally, they all speak it in nearly the exact same way. The only difference is that each RDBMS has its own dialect; they add and remove some of the functionality of basic SQL in favour of their own system.<\/p>\r\n\r\n<p><img src=\"media\/SQLIntroduction.png\" \/><\/p>\r\n\r\n<p>Therefore, whichever RDBMS you choose, there will be some differences with the (advanced) syntax and functionality. Most systems add their own functions, change some keywords here and there, or remove things they think they have a better alternative for.<\/p>\r\n\r\n<p>In this course, I will discuss the standardized SQL language, and if necessary mention some RDBMS specific information for the popular databases. Otherwise, you should be fine, or you should be able to find the differences in the documentation of your particular system.<\/p>\r\n\r\n<p>Have fun!<\/p>\r\n\r\n<p>NOTE: There&rsquo;s one alternative to SQL, which are NoSQL databases that mainly use JavaScript or JavaScript-like syntax. No one is strictly better than the other, and I think you should take a look at both if you plan on doing a lot of work with databases. Both systems are applicable to different use cases.<\/p>\r\n\r\n<h2>Table of Contents<\/h2>\r\n\r\n<ol class=\"toc\">\r\n\t<li>Installation<\/li>\r\n\t<li>Relational Databases<\/li>\r\n\t<li>Syntax &amp; Queries<\/li>\r\n\t<li>Creating<\/li>\r\n\t<li>Reading<\/li>\r\n\t<li>Updating<\/li>\r\n\t<li>Deleting<\/li>\r\n\t<li>Structure<\/li>\r\n\t<li>Keys &amp; Constraints<\/li>\r\n\t<li>Data Types<\/li>\r\n\t<li>Operators &amp; Conditions<\/li>\r\n\t<li>Aliases &amp; Variables<\/li>\r\n\t<li>Aggregators<\/li>\r\n\t<li>Sorting<\/li>\r\n\t<li>Grouping<\/li>\r\n\t<li>Filtering<\/li>\r\n\t<li>Joins I<\/li>\r\n\t<li>Joins II<\/li>\r\n\t<li>Searching<\/li>\r\n\t<li>Functions<\/li>\r\n\t<li>Subqueries<\/li>\r\n\t<li>Security &amp; Optimization<\/li>\r\n\t<li>Conclusion: what now?<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n","slur":"guide-to-sql","cat":"Website","subcat":"SQL","video":"","diff":"1","quiz":""},
{"id":"450","title":"[SQL] Installation","post":"<p>Before we start, you obviously need to have a way of testing the SQL you&rsquo;re going to write. You have two options:<\/p>\r\n\r\n<ul>\r\n\t<li>Install a database system on your own computer via some software<\/li>\r\n\t<li>Buy hosting. The system you want could already be pre-installed, or you can put it on the server yourself.<\/li>\r\n<\/ul>\r\n\r\n<p>If you&rsquo;re learning SQL for (your) business, you probably already have a server and system, and it&rsquo;s wise to stick with learning that particular system for now. If you&rsquo;re here for any other reason, I suggest keeping an open mind and trying out multiple systems!<\/p>\r\n\r\n<h2>Meet the Systems<\/h2>\r\n\r\n<p>There are many systems out there, and it&rsquo;s certainly not needed to learn all of them. The most popular and powerful systems are:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>SQLite: <\/strong>For learning how SQL works, this might be your best option. It&rsquo;s not actually a system; it&rsquo;s a small piece of software that allows you to have a local database on your computer. This means that it doesn&rsquo;t play with the official SQL syntax, and that it&rsquo;s very fast. The only downside is that you can&rsquo;t really use it in websites, as it only allows one user at a time to write data into it.<\/li>\r\n\t<li><strong>MySQL: <\/strong>The most commonly used system across the world wide web. It&rsquo;s free, beginner-friendly, and can handle very large data sets. Very good at handling simple operations, not so good at handling complex operations.<\/li>\r\n\t<li><strong>PostgreSQL:<\/strong> A relatively new system that is quickly gaining ground. It&rsquo;s free, adheres to the official SQL syntax the most, and has a rich feature set. Very good at handling complex operations, not so good at handling simple operations.<\/li>\r\n\t<li><strong>Oracle: <\/strong>Used by some large businesses, a mature and heavyweight system. But, that also means that it isn&rsquo;t free, and there&rsquo;s quite a learning curve.<\/li>\r\n\t<li><strong>Microsoft SQL Server: <\/strong>Also used by some large business (and most companies that use Microsoft), a mature and big system. However, it also isn&rsquo;t free, and it deviates a lot from the official SQL syntax.<\/li>\r\n\t<li><strong>Microsoft Access:<\/strong> Essentially a spin-off of SQL server, but meant to be used locally, as a database replacement for Excel. Because of that, some features have been left out, but it still has the same quality as other Microsoft products. It also isn&rsquo;t free.<\/li>\r\n<\/ul>\r\n\r\n<h2>Getting Started<\/h2>\r\n\r\n<p>Systems change, versions change, documentation changes. I don&rsquo;t think I can do a better job explaining how to install a certain database system than the system itself, which is why I will only give a quick explanation and a link to a how-to-install page for every system.<\/p>\r\n\r\n<p>NOTE: If you don&rsquo;t want to get into the database installing business now, find a hosting service that has the system pre-installed for you, so that you can immediately start trying out.<\/p>\r\n\r\n<h3>SQLite<\/h3>\r\n\r\n<p>SQLite comes as a downloadable package, but it doesn&rsquo;t have an interface. This means that queries are submitted to the system via a nifty command line tool.<\/p>\r\n\r\n<ul>\r\n\t<li>To download the package: <a href=\"https:\/\/www.sqlite.org\/download.html\">SQLite Download<\/a><\/li>\r\n\t<li>To get started: <a href=\"https:\/\/www.sqlite.org\/cli.html\">SQLite Getting Started<\/a><\/li>\r\n<\/ul>\r\n\r\n<p>NOTE: A good, complete tutorial on SQLite specifically can be found here: <a href=\"https:\/\/www.guru99.com\/download-install-sqlite.html\">Guru99 SQLite Tutorial<\/a><\/p>\r\n\r\n<h3>MySQL<\/h3>\r\n\r\n<p>MySQL does have an interface, and can be set up on any system you like.<\/p>\r\n\r\n<ul>\r\n\t<li>To read about installing MySQL: <a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/installing.html\">MySQL Documentation<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>PostgreSQL<\/h3>\r\n\r\n<p>PostgreSQL has very nice documentation. (So, if you&rsquo;re ever in doubt about something, go read their docs!)<\/p>\r\n\r\n<ul>\r\n\t<li>To read about installing PostgreSQL: <a href=\"https:\/\/www.postgresql.org\/docs\/9.3\/static\/tutorial-install.html\">PostgreSQL Documentation<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>Oracle<\/h3>\r\n\r\n<p>To be honest, Oracle&rsquo;s documentation is very complete, but that also makes it complex for beginners. Nevertheless, if you really want to make the best choice, read through the whole page.<\/p>\r\n\r\n<ul>\r\n\t<li>To read about installing Oracle: <a href=\"https:\/\/docs.oracle.com\/cd\/E11882_01\/server.112\/e10897\/install.htm#ADMQS0212\">Oracle Documentation<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>SQL Server<\/h3>\r\n\r\n<p>It&rsquo;s an official Microsoft product, so it has an installation wizard. And the documentation is fine.<\/p>\r\n\r\n<ul>\r\n\t<li>To read about installing SQL Server: <a href=\"https:\/\/msdn.microsoft.com\/en-us\/library\/ms143219.aspx\">SQL Server Documentation<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>MS Access<\/h3>\r\n\r\n<p>Microsoft Access is just a piece of software (it comes bundled with the Office Suite), so installing it just means <em>installing it<\/em>.<\/p>\r\n","slur":"sql-installation","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"451","title":"[SQL] Relational Databases","post":"<p>To make the most use out of learning SQL, I think it&rsquo;s very useful to examine these questions:<\/p>\r\n\r\n<ul>\r\n\t<li>What exactly is a database?<\/li>\r\n\t<li>What&rsquo;s the difference with a relational database?<\/li>\r\n\t<li>Why should I care about databases at all?<\/li>\r\n<\/ul>\r\n\r\n<h2>What&rsquo;s a Database?<\/h2>\r\n\r\n<p>It&rsquo;s exactly what it says: the base where all your data resides. More importantly, it&rsquo;s <em>nothing but data<\/em>. It doesn&rsquo;t have a layout, or programmed behaviour, or whatever &ndash; it&rsquo;s only data. It&rsquo;s the reason that you need other systems and languages to do something with databases, but it&rsquo;s also the reason why they are so fast, and can hold huge amounts of data.<\/p>\r\n\r\n<p>This &ldquo;data&rdquo; can be anything: numbers, pieces of text, prices, passwords, even huge strings that make up an image.<\/p>\r\n\r\n<p>To store the data, we use the best method known to mankind: <strong>tables<\/strong>. Every row within the table is a single entry, while the columns of the table designate the different properties of that entry. For example, one entry could be a specific user account, with the columns &ldquo;username&rdquo;, &ldquo;password&rdquo; and &ldquo;email&rdquo;.<\/p>\r\n\r\n<p><img src=\"media\/SQLDefinitionTables.png\" \/><\/p>\r\n\r\n<h2>What&rsquo;s a Relational Database?<\/h2>\r\n\r\n<p>Essentially, a relational database is one that consists of <strong>multiple tables<\/strong> that can be related. These tables can reference rows from other tables, and therefore create useful relationships between data.<\/p>\r\n\r\n<p>For example, say you have an online gaming website, where you can win achievements if you finish a game. You have one table containing all users, and one table containing the achievements per game.<\/p>\r\n\r\n<p>Now, one way to store this information, is by adding the username to the string of users that got a certain achievement. With a relational database, however, you can simply reference the corresponding row in the users table. This way, if the username is changed some day, all data is still correct.<\/p>\r\n\r\n<p><img src=\"media\/SQLRelationalDatabases.png\" \/><\/p>\r\n\r\n<p><em>If it&rsquo;s so useful, what other databases could there possibly be?<\/em> As I mentioned in the introduction, NoSQL database systems also exist. One of the huge differences between them and SQL systems, is that all SQL systems work with relational databases, while NoSQL doesn&rsquo;t necessarily work that way.<\/p>\r\n\r\n<p>For example, you could have a <em>hierarchical database<\/em> that is one big table, which has lots of &ldquo;children tables&rdquo; that contain data on one specific aspect of the parent. With such a system, data becomes more like a tree structure. Which is useful if you have, you know, data that is connected more like a tree. Don&rsquo;t worry though, we won&rsquo;t be doing anything with that in this course.<\/p>\r\n\r\n<h2>What can a Database do?<\/h2>\r\n\r\n<p>A database is the best possible way to handle data &ndash; and data is everywhere. Data can be large, such as a complete blog post or subtitles for a video, or very small, such as a username or the amount of credits in somebody&rsquo;s account. Databases not only store this data in a sensible manner, SQL also provides numerous ways to select exactly the data that you want. You want to show the last 10 comments made? Easily done. You want to find all blog posts with the word &ldquo;panda&rdquo;? Done. You want to send a &ldquo;thank you&rdquo; message to every user that has been registered for more than a year? You get the idea.<\/p>\r\n\r\n<h2>CRUD<\/h2>\r\n\r\n<p>Every (proper) database has 4 fundamental operations, known as <strong>CRUD<\/strong>:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Create<\/strong>: Creating a new database, table, or entry.<\/li>\r\n\t<li><strong>Read<\/strong>: Requesting certain information from the database<\/li>\r\n\t<li><strong>Update<\/strong>: Changing a certain entry, or the columns of a table<\/li>\r\n\t<li><strong>Delete<\/strong>: Deleting entries or columns from a table, or deleting a whole table or database<\/li>\r\n<\/ul>\r\n\r\n<p>With fundamental, I mean that you really can&rsquo;t do anything else. And that&rsquo;s fine, because you won&rsquo;t ever need more than this.<\/p>\r\n\r\n<p>Of these 4 operations, the first two are by far the most complex. First of all, there are many different settings you can use when creating a table. You can set a column to allow only integer numbers, or to allow only strings of text, or to automatically increment every time you add a new entry.<\/p>\r\n\r\n<p>Secondly, there are even more ways to select data. You can select all existing entries, or all entries within a certain category, or all entries with a username that starts with the letter &ldquo;P&rdquo; &ndash; the list goes on and on.<\/p>\r\n\r\n<p>On the other hand, there aren&rsquo;t many ways to change an already existing entry, or to delete data from a table.<\/p>\r\n\r\n<p>I will, therefore, start the course by explaining the CRUD syntax in short, and then use all of the remaining chapters to talk about <em>creating<\/em> and <em>reading<\/em> data. From now on, I will also call the columns of a table its <strong>structure<\/strong>, and one specific value (e.g., row 2 column 2) a <strong>field<\/strong>. I might also call entries <strong>rows<\/strong> or <strong>records<\/strong>, because it&rsquo;s more intuitive sometimes.<\/p>\r\n\r\n<p><img src=\"media\/SQLTheCRUDOperations.png\" \/><\/p>\r\n","slur":"sql-relational-databases","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"452","title":"[SQL] Syntax & Queries","post":"<p>Like every computer language, SQL has a basic syntax that it uses for everything. Because SQL is so specific to databases, however, this syntax is very simple and you can actually only do one thing: write <strong>queries<\/strong>.<\/p>\r\n\r\n<h2>Queries<\/h2>\r\n\r\n<p>A query is nothing more than a single request from the database. As we saw in last chapter, this request can be any of the four CRUD operations. For example, you can <em>request<\/em> the five newest entries in a table, which means you <em>query<\/em> the table for the five newest entries. So, every time you do something with your database, you&rsquo;re providing a list of queries that should be executed one after the other. Just as with other programming languages, one query is not executed until the previous one finishes.<\/p>\r\n\r\n<p>All we need now, is to have a way to tell the database when one query ends and another begins. For this, we use the <strong>semicolon<\/strong> ( <code>;<\/code>).<\/p>\r\n\r\n<pre data-lang=\"sql\">\r\n-- Both of these queries do exactly the same\r\nINSERT INTO users (username, bio, gender) VALUES (\"Gandalf\", \"Use the force, Harry!\", \"male\"); SELECT (username, signup_date, bio) FROM users WHERE gender=\"female\"; \r\n\r\n\r\nINSERT INTO \r\n\tusers (username, bio, gender) \r\nVALUES \r\n\t(\"Gandalf\", \"Use the force, Harry!\", \"male\"); \r\n\r\nSELECT \r\n\t(username, signup_date, bio) \r\nFROM \r\n\tusers \r\nWHERE \r\n\tgender=\"female\"; \r\n<\/pre>\r\n\r\n<p>It&rsquo;s important to note that SQL disregards extra white space and newlines. This means that you can display the query in a way that you can easily understand it, without breaking something. It also means that if you forget a semicolon, errors will pop up all over the place.<\/p>\r\n\r\n<h2>Comments<\/h2>\r\n\r\n<p>When developing anything, it&rsquo;s often useful to include comments telling you what exactly a certain query is trying to do. These comments are removed when the query is sent to the database and actually executed. Don&rsquo;t worry though, they do not make a query slower.<\/p>\r\n\r\n<p>To create a single-line comment, use<\/p>\r\n\r\n<code class=\"longsyntax\">-- Some nice comment here<\/code>\r\n\r\n<p>To create a multi-line comment, <em>if your RDBMS supports it<\/em>, use<\/p>\r\n\r\n<code class=\"longsyntax\">\/*\r\nA MULTILINE COMMENT\r\n*\/<\/code>\r\n\r\n<h2>Keywords, Functions &amp; Names<\/h2>\r\n\r\n<p>Every query is built out of three components: <em>keywords<\/em>, <em>functions<\/em> and <em>names<\/em>.<\/p>\r\n\r\n<p><strong>Keywords<\/strong> are words provided by SQL that, well, do something if you include them in the query. For example, the <code>SELECT<\/code> keyword starts a query that reads things from a database.<\/p>\r\n\r\n<p><strong>Functions<\/strong> transform the data of a query. For example, the <code>AVG(<em>column<\/em>)<\/code> function takes the average of all values of the specified column.<\/p>\r\n\r\n<p><strong>Names<\/strong> are the names of your columns, tables, databases &ndash; anything that you&rsquo;ve given a name.<\/p>\r\n\r\n<pre data-lang=\"sql\">\r\n-- SELECT, FROM and WHERE are keywords\r\n-- COUNT(*) is a function that counts the amount of entries\r\n-- users is a table name we decided ourselves\r\n\r\nSELECT \r\n\tCOUNT(*) \r\nFROM \r\n\tusers  \r\n<\/pre>\r\n\r\n<h2>Case Insensitivity<\/h2>\r\n\r\n<p>Everything in SQL is case insensitive. This means that you can write <code>select<\/code>, or <code>SELECT<\/code>, or <code>Select<\/code>, or whatever spelling you want. Writing the words differently every time, however, is not a good idea.<\/p>\r\n\r\n<p>It&rsquo;s best practice to write your keywords and functions in <em>all uppercase<\/em>, and to choose your column and table names <em>all lowercase<\/em>. If needed, separate words are connected with an underscore ( <code>_<\/code> ).<\/p>\r\n\r\n<pre data-lang=\"sql\">\r\n-- All queries do exactly the same, but I think you can see which one reads better;\r\n\r\nSELECT COUNT(*) FROM users;\r\n\r\nselect Count(*) from USERS;\r\n\r\nSelect count(*) From users;\r\n<\/pre>\r\n\r\n<p>NOTE: The names you decide yourself are <strong>not<\/strong> case insensitive. For example, you could have a column named <code>user_id<\/code>, and one named <code>USER_ID<\/code>, and they would be completely different.<\/p>\r\n\r\n<h2>Dynamic Queries<\/h2>\r\n\r\n<p>Most RDBMS have an interface that allows you directly put in queries. While this can be very useful to do some database maintenance, such as remove some garbage or replace things that need to be updated, it&rsquo;s not that useful to most applications. Usually, you want to execute an SQL query when users load a page, and you want that query to change depending on certain variables.<\/p>\r\n\r\n<p>For example, most blogs use only a single file for displaying all posts. When a user visits a URL, there is usually some information about the post in the URL (such as <code>\/News\/05-06-2016\/hello-world<\/code>). You must use a programming language (not SQL) to get these variables, and put them into a query that selects the right blog post. That programming language then sends the query to the database, retrieves the results, and displays them in a sensible manner.<\/p>\r\n\r\n<img src=\"media\/SQLDynamicQueries.png\" \/>\r\n\r\n<p>Therefore, if you haven&rsquo;t done so already, it&rsquo;s wise to also learn a server-side language (such as PHP or ASP.NET) that can interact with SQL and databases. Remember, SQL is for databases, not for layout or websites.<\/p>\r\n","slur":"sql-syntax-queries","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"453","title":"[SQL] Creating","post":"<p>When it comes to a relational database, we can create three things: a database, a table, and a specific entry. The commands for these operations are all quite straightforward &ndash; the real complexity comes when you learn about the best settings for your structure.<\/p>\r\n\r\n<p>To clarify this statement, say you have a database containing all user accounts. Creating the database is easy (make up a name and run a single command), as well as inserting a row (provide data and run a single command). But, the structure of the table must be constrained &ndash; for example, it should not be possible that a user has no username, or no password, or that his email address is a number instead of text.<\/p>\r\n\r\n<h2>Creating a Database<\/h2>\r\n\r\n<p>Let&rsquo;s start very, very simple. To create a new database, use<\/p>\r\n\r\n<code class=\"longsyntax\">CREATE DATABASE <em>someDatabaseName<\/em>;<\/code>\r\n\r\n<pre data-lang=\"sql\">\r\n-- Creates a database called users, with nothing in it (yet)\r\nCREATE DATABASE users;\r\n<\/pre>\r\n\r\n<h2>Creating a Table<\/h2>\r\n\r\n<p>To create a table, we must first navigate to the correct database. (If we don&rsquo;t, SQL doesn&rsquo;t know in which database to place the table.)<\/p>\r\n\r\n<ul>\r\n\t<li>If you have an interface to work with, you can simply click on the database and perform the query there.<\/li>\r\n\t<li>If you&rsquo;re working with a programming language (such as PHP), you should be able to connect to the right database with some function, and all will be fine.<\/li>\r\n\t<li>Otherwise, you can select the database with <code>USE someDatabaseName<\/code><\/li>\r\n<\/ul>\r\n\r\n<p>Now that the right database is selected, we can create a table with<\/p>\r\n\r\n<code class=\"longsyntax\">CREATE TABLE <em>someTableName<\/em>\r\n\t(<em>column_name_1 type attributes<\/em>,\r\n\t <em>column_name_2 type attributes<\/em>,\r\n\t\t\t|\r\n\t <em>column_name_n type attributes<\/em>);<\/code>\r\n\r\n<p>The <em>type<\/em> parameter specifies the type of data the column will hold, and is required. Examples of data types are <code>INTEGER<\/code> and <code>TEXT<\/code>.<\/p>\r\n\r\n<p>The <em>attributes<\/em> parameter is optional, and can set properties for a certain column. Examples of attributes are <code>NOT NULL<\/code> (it&rsquo;s never allowed to have an empty value) and <code>AUTO INCREMENT<\/code> (the value of this column is automatically incremented with 1 every time a new entry is added).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\nUSE users;\r\n\r\n\/* \r\nCreates a table to hold usernames and corresponding email address\r\nINT(11) just tells it to hold an integer of at most 11 digits\r\nVARCHAR(255) means the column should hold strings of at most 255 characters\r\n*\/\r\nCREATE TABLE accounts \r\n\t(id       INT(11) PRIMARY KEY,\r\n\t username VARCHAR(255),\r\n\t email    VARCHAR(255)       );\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>email<\/td><\/tr>\r\n\t\t<tr><td colspan=\"3\">No entries yet.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: As promised, you&rsquo;ll learn all about structure, constraints and data types in later chapters.<\/p>\r\n\r\n<h2>Creating a new Entry<\/h2>\r\n\r\n<p>When we create a new entry, we usually call it <strong>inserting<\/strong> an entry. It&rsquo;s a more intuitive way of looking at it, as we&rsquo;re not really creating anything, we&rsquo;re just inserting data in an already existing table. Not surprisingly, the command for inserting an entry is<\/p>\r\n\r\n<code class=\"longsyntax\">INSERT INTO <em>someTableName<\/em> \r\n\t(<em>column_1<\/em>, <em>&hellip;<\/em>, <em>column_n<\/em>)\r\nVALUES \r\n\t(<em>value_1<\/em>,<em> &hellip;<\/em>,<em> value_n<\/em>);<\/code>\r\n\r\n<p>As you can see, you don&rsquo;t necessarily have to insert values for all columns. If you leave out some columns, they will be set to the default value you specified when you created the table structure. This saves time and effort from your side.<\/p>\r\n\r\n<p>Additionally, if you don&rsquo;t specify any columns at all, SQL is going to assume you want to insert data into all columns.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\nINSERT INTO accounts (id, username, email) \r\n       VALUES (1,\"Panda\",\"panda@pandaqi.com\"); \r\n\r\nINSERT INTO accounts VALUES (2,\"Ginty\",\"\"); \r\n\r\nINSERT INTO accounts VALUES (\"Juan\",\"juaniscool@gmail.com\");\r\n\r\nINSERT INTO accounts VALUES (\"Gandalf\");  \r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">username<\/td><td>email<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>panda@pandaqi.com<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>juaniscool@gmail.com<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Gandalf<\/td><td><\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-creating","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"454","title":"[SQL] Reading","post":"<p>The most important operation you can perform on databases is reading data from it. The whole reason you need a database in the first place, is so that you can do something useful with the information it provides. Because you&rsquo;re usually not reading everything within the database, we call this process <strong>selecting<\/strong>. You select the information you&rsquo;re looking for from the database, and then you use some other programming language to do whatever you want with it. In this chapter I will provide the very basic syntax for reading from a database, in the rest of this course many additions and variations will be discussed.<\/p>\r\n\r\n<h2>Syntax<\/h2>\r\n\r\n<p>The very basic syntax for selecting entries from a table is<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT <em>column_1<\/em>, <em>&hellip;<\/em>,<em> column_n<\/em> FROM <em>someTableName<\/em>;<\/code>\r\n\r\n<p>This selects the columns you specified of <em>all<\/em> the rows in the table <em>someTableName<\/em>.<\/p>\r\n\r\n<p>If you want to select all columns as well, use the asterisk ( <code>*<\/code> ) character:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT * FROM <em>someTableName<\/em>;<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Selects the columns username and email from every entry in the table\r\nSELECT username, email FROM accounts;  \r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>email<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>panda@pandaqi.com<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>juaniscool@gmail.com<\/td><\/tr>\r\n\t\t<tr><td>Gandalf<\/td><td><\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Finding Rows<\/h2>\r\n\r\n<p>You usually don&rsquo;t need all the rows. Instead, you&rsquo;re looking for rows that fulfil a certain condition; for example, rows that belong to the same category, or all rows that were inserted by a certain user.<\/p>\r\n\r\n<p>To modify our selection to find only the entries that we want, use<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>condition<\/em>;<\/code>\r\n\r\n<p>Again, SQL always tries to make queries feel like a real English sentence. &ldquo;Select these columns, from this table, where this condition is true&rdquo; is a simple way to remember the syntax.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Selects all accounts with an email address set\r\nSELECT * FROM accounts WHERE email NOT IS NULL;  \r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">username<\/td><td>email<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>panda@pandaqi.com<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>2<\/td><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>juaniscool@gmail.com<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>4<\/td><td>Gandalf<\/td><td><\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-reading","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"455","title":"[SQL] Updating","post":"<p>Once you&rsquo;ve created your tables, and inserted lots of entries, there will come a time when you want to change some things. More specifically, you can: change the <em>structure<\/em> of a table, or change the <em>values<\/em> of an entry.<\/p>\r\n\r\n<h2>Altering the Structure<\/h2>\r\n\r\n<p>When it comes to updating or changing the structure, we call it <em>altering<\/em> instead. Not surprisingly, every query related to this starts with the <code>ALTER<\/code> keyword.<\/p>\r\n\r\n<h3>Adding Columns<\/h3>\r\n\r\n<p>To add a column to a table, use<\/p>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> ADD <em>column_name type attributes<\/em>;<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Adds a new column, on top of id, username and email\r\nALTER TABLE accounts ADD password VARCHAR(255); \r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>email<\/td><td style=\"white-space:pre;\">password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>panda@pandaqi.com<\/td><td>1234<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td><\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>juaniscool@gmail.com<\/td><td>butterfree<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Gandalf<\/td><td><\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Removing Columns<\/h3>\r\n\r\n<p>To remove a column from a table, use<\/p>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> DROP COLUMN <em>column_name<\/em>;<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- We noticed users don't like giving us their email, so we remove that column\r\nALTER TABLE accounts DROP COLUMN email; \r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>1234<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>butterfree<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Gandalf<\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Modifying &ndash; Changing Column Type<\/h3>\r\n\r\n<p>To modify an already existing column means two things: changing the <em>type<\/em>, or changing the <em>name<\/em>. Unfortunately, the syntax is slightly different across different database systems.<\/p>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> ALTER <em>column_name<\/em> SET<em> type attributes<\/em>;<span class=\"extraInformation\">SQLite<br\/>PostgreSQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> ALTER COLUMN <em>column_name type attributes<\/em>;<span class=\"extraInformation\">SQL Server<br\/>MS Access<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> MODIFY COLUMN <em>column_name type attributes<\/em>;<span class=\"extraInformation\">MySQL<br\/>Oracle (<10G)<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName <\/em>MODIFY <em>column_name type attributes<\/em>;<span class=\"extraInformation\">Oracle (>=10G)<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Additionally, we noticed users started taking unnecessarily long usernames, so we're going to change that column to only accept shorter strings.\r\nALTER TABLE accounts MODIFY COLUMN username VARCHAR(12);\r\n\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>1234<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>butterfree<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>GandalfTheGr<\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Modifying &ndash; Changing Column Name<\/h3>\r\n\r\n<p>Changing the name of an already existing column is much easier, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">ALTER TABLE <em>tableName<\/em> RENAME <em>old_column<\/em> TO <em>new_column<\/em>;<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- And we thought the word secret_spy_name sounded cooler than username\r\nALTER TABLE accounts RENAME username TO secret_spy_name;\r\n\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">secret_spy_name<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>1234<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>butterfree<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>GandalfTheGr<\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Updating Entries<\/h2>\r\n\r\n<p>Changing entries, as opposed to altering table structure, is usually called <em>updating<\/em> an entry. Therefore, such queries always start with the <strong>UPDATE<\/strong> keyword.<\/p>\r\n\r\n<p>The syntax for updating entries &ndash; you can update multiple entries at the same time &ndash; is<\/p>\r\n\r\n<code class=\"longsyntax\">UPDATE <em>tableName<\/em>\r\nSET (<em>column_name<\/em> = <em>new_value<\/em>, <em>&hellip;<\/em>, <em>column_name<\/em> = <em>new_value<\/em>)\r\nWHERE <em>condition<\/em>;<\/code>\r\n\r\n<p>Including the <code>WHERE<\/code> clause is very important, because if you don&rsquo;t, SQL will just update <em>all<\/em> the entries with the new information. For the rest, it works exactly the same as in the <code>SELECT<\/code> statement &ndash; &ldquo;Update this table by setting these columns to these values, where a row meets a certain condition&rdquo;<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- User Panda forgot his password, again, so we send him a password reset email, and temporarily reset his password to \"whatislovebabydonthurtme\";\r\nUPDATE\r\n\taccounts\r\nSET\r\n\t(password = \"whatislovebabydonthurtme\")\r\nWHERE\r\n\tsecret_spy_name = \"Panda\";\r\n\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">secret_spy_name<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>whatislovebabydonthurtme<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>butterfree<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>GandalfTheGr<\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>","slur":"sql-updating","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"456","title":"[SQL] Deleting","post":"<p>Last but not least, instead of updating something, you might just want to delete it altogether. This can be useful if entries are not needed anymore; for example, when a user closes her account on a website, or if you want to automatically remove obsolete data that&rsquo;s more than 5 years old. Again, a distinction has to be made between multiple types of deletion: deleting a <em>database<\/em>, deleting a <em>table<\/em>, and deleting an <em>entry<\/em>.<\/p>\r\n\r\n<h2>Deleting Databases<\/h2>\r\n\r\n<p>To delete a complete database, use<\/p>\r\n\r\n<code class=\"longsyntax\">DROP DATABASE <em>someDatabaseName<\/em>;<\/code>\r\n\r\n<p>I must strongly urge you to always make sure you don&rsquo;t create a program that might accidentally remove something, or that might allow users to remove something. SQL doesn&rsquo;t send you a warning message to confirm if you really want to delete the database &ndash; once you&rsquo;ve issued the command, the database is gone.<\/p>\r\n\r\n<h2>Deleting Tables<\/h2>\r\n\r\n<p>To delete a table, use<\/p>\r\n\r\n<code class=\"longsyntax\">DROP TABLE <em>someTableName<\/em>;<\/code>\r\n\r\n<h2>Deleting Entries<\/h2>\r\n\r\n<p>To delete one or multiple entries, use<\/p>\r\n\r\n<code class=\"longsyntax\">DELETE FROM <em>someTableName<\/em> WHERE <em>condition<\/em>;<\/code>\r\n\r\n<p>Again, do not forget to include the <code>WHERE<\/code> clause, or all entries within the table will be deleted. Always make sure you have the proper condition for deleting an entry. This mostly means that the condition should not return true in unexpected cases &ndash; make sure every entry has something that makes it unique, so you don&rsquo;t accidentally remove more rows than you intended.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Juan's cover has been compromised, and his secret spy name leaked, so he needs to remove all traces of him on the interwebs\r\nDELETE FROM accounts WHERE (id = 3 && secret_spy_name = \"Juan\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">secret_spy_name<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>whatislovebabydonthurtme<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>pikapika<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>GandalfTheGr<\/td><td>flyyoufools<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Truncation<\/h2>\r\n\r\n<p>If you want to remove all entries, however, there&rsquo;s a quicker and better way. Erasing all the data within a table, but <em>not<\/em> erasing the table itself, is called <strong>truncating<\/strong>. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">TRUNCATE TABLE <em>someTableName<\/em>;<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Oh boy, our enemies tortured Juan to find out the names of his comrads, and he gave in to the pressure! We need to remove all traces of all spies.\r\nTRUNCATE TABLE accounts;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td style=\"white-space:pre;\">secret_spy_name<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td colspan=\"3\">No entries.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"SQL-deleting","cat":"Website","subcat":"SQL","video":"","diff":"2","quiz":""},
{"id":"457","title":"[SQL] Structure","post":"<p>Databases from professional grade applications usually contain thousands and thousands of rows. For example, imagine the sheer amount of users that Twitter has, or the amount of videos uploaded to Youtube. In order to quickly create new entries, and select the exact entries you want from such huge databases, you will need to be smart about your table structure.<\/p>\r\n\r\n<p>More specifically, you want to have the least data possible stored in the database, and you need to tell the database system exactly what type of data it&rsquo;s holding, so that working with it becomes much faster. This is done with two things: <strong>constraints<\/strong> and <strong>keys<\/strong>. This chapter will mainly talk about things that <em>must<\/em> be done for every table.<\/p>\r\n\r\n<h2>Primary Keys<\/h2>\r\n\r\n<p>The first thing that must be true for every table, is that <em>every entry must be unique<\/em>. If multiple entries are identical, which means the value for every column is exactly the same, you can&rsquo;t select only one of them &ndash; which is a problem.<\/p>\r\n\r\n<p>For example, say we have a table containing user accounts. When a user logs in, we fetch its profile information from the database and display it. If we had two identical entries, however, we would always select more than one row, and our script wouldn&rsquo;t know what to do! It expects one row and wants to deal with that, but now it will always have two, which it can&rsquo;t distinguish in any way whatsoever.<\/p>\r\n\r\n<p>So, to make every entry unique, every table must have exactly one <strong>primary key<\/strong>. A column that is a primary key must contain <strong>unique values<\/strong> and may never contain no value (so-called <code>NULL<\/code>). If you try to insert a value that already exists, SQL will throw an error and your query will not be executed.<\/p>\r\n\r\n<p>NOTE: It is possible to create a table without primary key, but that&rsquo;s only recommended if you&rsquo;re storing lots and lots of data for personal use (as you don&rsquo;t need it then, and it saves time). Otherwise, even when highly in doubt, use a primary key.<\/p>\r\n\r\n<p>Usually, a column called <code>id<\/code> is used to assign a numeric id to every entry. This way, even if all the other values are the same, the id will be different, and can be used to uniquely identify every entry.<\/p>\r\n\r\n<p>To set a column to be primary key, use<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em>,\r\nPRIMARY KEY (<em>column_name<\/em>)<span class=\"extraInformation\">MySQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> PRIMARY KEY<span class=\"extraInformation\">Others<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\nCREATE TABLE users\r\n\t(id  INT(11) PRIMARY KEY,\r\n\t usn VARCHAR(50));\r\n\r\nINSERT INTO users VALUES (1,\"Panda\");\r\nINSERT INTO users VALUES (2,\"Juan\");\r\n-- This is not allowed.\r\nINSERT INTO users VALUES (1,\"Gandalf\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>usn<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Juan<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Advanced Primary Keys<\/h2>\r\n\r\n<p>It&rsquo;s also possible to create a primary key out of multiple columns, in which case you need to give it a special name yourself. Remember that this is still just one, unique primary key column &ndash; it&rsquo;s just created by adding together several other columns.<\/p>\r\n\r\n<code class=\"longsyntax\">CONSTRAINT <em>primaryKeyName<\/em> PRIMARY KEY (<em>column_1<\/em>, <em>&hellip;<\/em>, <em>column_n<\/em>)<\/code>\r\n\r\n<p>The query above creates a primary key called <em>primaryKeyName<\/em> which holds the result of <em>column_1 + &hellip; + column_n<\/em> for every entry. Obviously, this value should be unique for each entry.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- This table stores courses. However, a course is given multiple times a year, so we need a second id to distinguish each one of them.\r\nCREATE TABLE courses\r\n\t(id        INT(11),\r\n\t second_id INT(11),\r\n\t name      VARCHAR(50),\r\n\t CONSTRAINT primKey PRIMARY KEY (id, signup_date));\r\n\r\n-- Has primKey 2\r\nINSERT INTO courses VALUES (1,1,\"Calculus\");\r\n-- Has primKey 3\r\nINSERT INTO courses VALUES (1,2,\"Calculus\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>second_id<\/td><td>course<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>1<\/td><td>Calculus<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>2<\/td><td>Calculus<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Defaults<\/h2>\r\n\r\n<p>The second thing that must be true for every table, is that <em>every field must have a value<\/em>. Even if you don&rsquo;t know the value yet, or the value has somehow (accidentally) disappeared, there has to be <em>some<\/em> value.<\/p>\r\n\r\n<p>It is, therefore, wise to set a default for such columns. If you don&rsquo;t do so, columns will default to the value <code>NULL<\/code> if you don&rsquo;t specify a value yourself. (More on that in the next section.)<\/p>\r\n\r\n<p>To set a default for a column, use<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> DEFAULT <em>default_value<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- If a user leaves a comment, but isn't logged in, set the name to \"Anonymous\" by default\r\nCREATE TABLE comments\r\n\t(id      INT(11),\r\n\t name    VARCHAR(50) DEFAULT \"Anonymous\",\r\n\t comment VARCHAR(255));\r\n\r\nINSERT INTO comments VALUES (1,\"Panda\",\"Nice article!\");\r\nINSERT INTO comments VALUES (2, NULL  ,\"This article is garbage. I'm cool because I anonymously leave hateful comments online.\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>comment<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>Nice article!<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Anonymous<\/td><td>This article is garbage. I'm cool because I anonymously leave hateful comments online.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Null<\/h2>\r\n\r\n<p>The <code>NULL<\/code> value is a special one. It represents <em>missing <\/em>or <em>unknown<\/em> <em>data<\/em>, which means it&rsquo;s useful if you don&rsquo;t know a field&rsquo;s value yet, but also that you can&rsquo;t really perform any meaningful operations with it.<\/p>\r\n\r\n<p>To forbid a column from having <code>NULL<\/code> values, use the following constraint<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> NOT NULL<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- But, anonymous users don't leave very nice comments on our website, so we decide it's not allowed anymore. \r\nALTER TABLE comments ALTER name SET VARCHAR(50) NOT NULL;\r\n\r\n-- This is not allowed anymore\r\nINSERT INTO users (id, comment) VALUES (3,\"Thanks for sharing!\");\r\n\r\n-- However, this works fine; an empty string, or 0, is NOT the same as NULL\r\nINSERT INTO users VALUES (3,\"\", \"No problemo!\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>comment<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>Nice article!<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Anonymous<\/td><td>This article is garbage. I'm cool because I anonymously leave hateful comments online.<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td> <\/td><td>No problemo!<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: This is a constraint you&rsquo;ll need very often, and I advise you to use it on every column that is critical to your application.<\/p>\r\n\r\n<h2>Best Relational Practices<\/h2>\r\n\r\n<p>At the start of this course, I listed all the advantages of relational database systems. But, you might be wondering, how do I actually use this in the best way possible?<\/p>\r\n\r\n<p>Well, we use something called <strong>normalization<\/strong>. Normalization is a process where you minimize redundancy and dependency &ndash; in other words, you make sure there&rsquo;s no duplicate data in your table.<\/p>\r\n\r\n<p>For example, say you have a table containing your blog <em>posts<\/em>, and a table containing all the <em>categories<\/em> and brief descriptions of whatever that category is about. What you could do, is create a column in the <em>posts<\/em> table that holds the exact name of the category a post was put in. What&rsquo;s better, however, is to let that column hold references to the entries in the <em>categories<\/em> table.<\/p>\r\n\r\n<p>This has two huge benefits:<\/p>\r\n\r\n<ul>\r\n\t<li>If the name of the category ever changes, everything is automatically updated<\/li>\r\n\t<li>The table needs to store less data, which saves space and makes queries faster.<\/li>\r\n<\/ul>\r\n\r\n<img src=\"media\/SQLNormalization.png\" \/>\r\n\r\n<p>In conclusion, try to make sure you never repeat yourself. Think about which tables you need (and their structure) upfront, and make sure they reference each other in a meaningful way. Make sure you never store more data than needed, because it would waste valuable space and resources. More about this, and about setting other important constraints and data types, is covered in next chapters.<\/p>","slur":"sql-structure","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"458","title":"[SQL] Keys & Constraints","post":"<p>Continuing on last chapter, we&rsquo;ll be talking about the rest of the (more advanced) keys and constraints. These are: <em>auto increment<\/em>, <em>unique<\/em>, <em>check<\/em> and <em>foreign keys<\/em>.<\/p>\r\n\r\n<h2>Auto Increment<\/h2>\r\n\r\n<p>The auto increment constraint is typically used on the primary key. It does exactly what it says: it automatically increments the value of a certain column for you. Whenever you insert a new entry, it checks the last value of the auto increment column, and inserts (<em>last_value + 1<\/em>) for the new entry.<\/p>\r\n\r\n<p>This saves you lots of time and energy, as you don&rsquo;t need to keep track of the last value of the column yourself, and all values in the column are automatically unique.<\/p>\r\n\r\n<p>NOTE: Most database systems also let you set the starting value of the column, and allow larger increments than 1. For example, you could add 1000 every time, if that&rsquo;s what you needed.<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> AUTO_INCREMENT\r\nALTER TABLE <em>someTable<\/em> AUTO_INCREMENT=<em>start<\/em><span class=\"extraInformation\">MySQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> AUTOINCREMENT(<em>start<\/em>, <em>interval<\/em>)<span class=\"extraInformation\">SQLite<br\/>PostgreSQL<br\/>MS Access<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> IDENTITY(<em>start<\/em>, <em>interval<\/em>)<span class=\"extraInformation\">SQL Server<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\nCREATE TABLE posts\r\n\t(id    INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t title VARCHAR(255),\r\n\t post  LONGTEXT);\r\n\r\n-- Notice how we don't insert an id\r\nINSERT INTO posts (title, post) VALUES (\"Panda captured.\", \"Today, we captured a panda. He is safe now.\");\r\nINSERT INTO posts (title, post) VALUES (\"PANDA ESCAPED!\", \"Oh no, our pet panda has escaped and is now wreaking havoc in our cities!\");\r\nINSERT INTO posts (title, post) VALUES (\"Tiger captured.\", \"Today, we captured a tiger. it is safe now. What can go wrong?\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><td>post<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda captured.<\/td><td>Today, we captured a panda. He is safe now.<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>PANDA ESCAPED!<\/td><td>Oh no, our pet panda has escaped and is now wreaking havoc in our cities!<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Tiger captured.<\/td><td>Today, we captured a tiger. it is safe now. What can go wrong?<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Oracle doesn&rsquo;t support a simple auto increment feature &ndash; instead, you can emulate it using sequences, which will be discussed later.<\/p>\r\n\r\n<h2>Unique<\/h2>\r\n\r\n<p>As the name suggests, the <code>UNIQUE<\/code> keyword forces a column to only contain unique values &ndash; no two values may be the same, and if you try to insert an entry with an already existing value, it will throw errors and crash.<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type attributes,<\/em>\r\nUNIQUE (<em>column_name<\/em>)<span class=\"extraInformation\">MySQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type<\/em> UNIQUE<span class=\"extraInformation\">Others<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- We demand every user has a username, and that username is unique\r\nCREATE TABLE users\r\n\t(id       INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t username VARCHAR(255) UNIQUE NOT NULL);\r\n\r\nINSERT INTO posts (username) VALUES(\"Juan\");\r\nINSERT INTO posts (username) VALUES(\"Panda\");\r\n\r\n-- Not allowed.\r\nINSERT INTO posts (username) VALUES(\"Juan\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Juan<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Panda<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>You can also create a unique constraint over multiple columns. This means that the combination of values must be unique across the table, not that those values itself must be different. For example, if one entry has values (2,2,3) and another has (2,3,2), they will be unique. If they both have (2,2,3), they are not.<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">CONSTRAINT <em>someName<\/em> UNIQUE (<em>column_1<\/em>,<em> &hellip;<\/em>,<em> column_n<\/em>)<\/code>\r\n\r\n<h2>Check<\/h2>\r\n\r\n<p>The <code>CHECK<\/code> constraint simply <em>checks<\/em> whether a certain condition is true when inserting a new entry. If it&rsquo;s true, everything&rsquo;s fine. If not, the entry is rejected. You can use this, for example, to make sure somebody can&rsquo;t place a negative amount of orders on your web shop.<\/p>\r\n\r\n<p>The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type attributes,<\/em>\r\nCHECK (<em>condition<\/em>)<span class=\"extraInformation\">MySQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type <\/em>CHECK (<em>condition<\/em>)<span class=\"extraInformation\">Others<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Our website has games with violence, so only people over 18 are allowed!\r\nCREATE TABLE users\r\n\t(id       INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t username VARCHAR(255) UNIQUE NOT NULL,\r\n\t age      INT(3) CHECK (age >= 18));\r\n\r\nINSERT INTO posts (username) VALUES(\"Juan\", 20);\r\nINSERT INTO posts (username) VALUES(\"Panda\", 24);\r\n\r\n-- Not allowed.\r\nINSERT INTO posts (username) VALUES(\"Ginty\", 16);\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>age<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Juan<\/td><td>20<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Panda<\/td><td>24<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Again, to place a check on multiple columns at the same time, use<\/p>\r\n\r\n<code class=\"longsyntax\">CONSTRAINT <em>someName<\/em> CHECK (<em>condition_1 <\/em>AND <em>condition_2 <\/em>AND <em>&hellip;<\/em>);<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- After numerous complaints, we added a kids section to our website. Now people who are over 18, or who are a kid, can register.\r\nCREATE TABLE users\r\n\t(id       INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t username VARCHAR(255) UNIQUE NOT NULL,\r\n\t type\t  VARCHAR(10),\r\n \t age      INT(3),\r\n\t CONSTRAINT ageCheck CHECK (age >= 18 OR type = 'Kid'));\r\n\r\nINSERT INTO posts (username) VALUES(\"Juan\",\"Adult\",20);\r\nINSERT INTO posts (username) VALUES(\"Panda\",\"Adult\",24);\r\n\r\n-- Now it is allowed\r\nINSERT INTO posts (username) VALUES(\"Ginty\",\"Kid\",16);\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>type<\/td><td>age<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Juan<\/td><td>Adult<\/td><td>20<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Panda<\/td><td>Adult<\/td><td>24<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Ginty<\/td><td>Kid<\/td><td>16<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: I will explain the <code>AND<\/code> and <code>OR<\/code> operators, and many more things about conditions, in the later chapters about reading from the database.<\/p>\r\n\r\n<h2>Foreign Keys<\/h2>\r\n\r\n<p>As you might have noticed by now, keywords and concepts in SQL are named quite intuitively. If you know the name, you know the syntax and the idea behind it. Foreign keys are no different.<\/p>\r\n\r\n<p>A column that is set to be a foreign key, only contains references to the primary key of another table. In other words, such a column contains the primary keys from a foreign table.<\/p>\r\n\r\n<p>Foreign keys are useful for <em>normalizing<\/em> your database (remember I introduced that term at the end of last chapter?). Instead of inserting all the actual data inside a table, you simply insert the primary key value of an entry from another table. Then, if you need the actual data, just select the right entry from the other table (with another query).<\/p>\r\n\r\n<p>Because foreign keys reference primary keys, they are automatically never <code>NULL<\/code>, and they always reference exactly one entry (because of uniqueness). They do not, however, need to be unique themselves. For example, say you have a table (for a web shop) that holds the orders that have been placed, and a table that holds all users. It&rsquo;s perfectly possible, then, that one user places multiple orders, and thus the orders table has multiple identical values for the user column.<\/p>\r\n\r\n<p>The syntax for foreign keys is:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>column_name type attributes,<\/em>\r\nFOREIGN KEY (<em>column_name<\/em>) REFERENCES <em>Table<\/em>(<em>foreign_column<\/em>)<span class=\"extraInformation\">MySQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\"><em>column_name type <\/em>FOREIGN KEY REFERENCES <em>Table<\/em>(<em>foreign_column<\/em>)<span class=\"extraInformation\">Others<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Our post_id references the primary key of the posts table (used at the start of this chapter), so that we know which post a certain comment belongs to.\r\nCREATE TABLE comments\r\n\t(id       INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t comment  VARCHAR(255),\r\n\t post_id  INT(11) FOREIGN KEY REFERENCES posts(id));\r\n\r\nINSERT INTO comments (comment, post_id) VALUES (\"Dude, you really need to keep those pandas from escaping.\", 2);\r\nINSERT INTO comments (comment, post_id) VALUES (\"Cool, a tiger!\", 3);\r\nINSERT INTO comments (comment, post_id) VALUES (\"Your panda ate my crops!\", 2);\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>comment<\/td><td>post_id<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Dude, you really need to keep those pandas from escaping.<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Cool, a tiger!<\/td><td>3<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Your panda ate my crops!<\/td><td>2<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Again, you can define a foreign key on multiple columns at the same time. This is needed if your primary key was also created out of multiple columns. The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">CONSTRAINT <em>someName<\/em>\r\nFOREIGN KEY (<em>column_1<\/em>,<em> &hellip;<\/em>,<em> column_n<\/em>)\r\nREFERENCES <em>Table<\/em>(<em>foreign_column_1<\/em>,<em> &hellip;<\/em>,<em> foreign_column_n<\/em>);<\/code>","slur":"sql-keys-constraints","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"459","title":"[SQL] Data Types","post":"<p>When defining keys and constraints, and creating tables in general, you&rsquo;ve seen me include the <em>type<\/em> in the syntax. You&rsquo;ve probably already guessed what it is used for, but I haven&rsquo;t had the time to properly introduce these <strong>data types<\/strong>. This changes now!<\/p>\r\n\r\n<p>Every column <em>must<\/em> be set to a certain data type. This data type will determine what kinds of values are allowed to be stored for that column. For example, a column that holds usernames can be set to data type <code>TEXT<\/code> with a maximum length of 100 characters, while the column that stores how many credits each user has in their account could be an <code>INTEGER<\/code>.<\/p>\r\n\r\n<p><em>Why do I need to use these data types?<\/em> Efficiency and good organization. If the database knows exactly what kinds of values it will have in a certain column, it needs to perform less operations and can execute your queries faster. Additionally, by forcing every column to only contain values of one data type, you force your tables to be organized correctly and logically.<\/p>\r\n\r\n<p><em>Alright, tell me the data types already!<\/em> Not so fast, my friend. As usual, every database system was being egocentric, and implemented their own version of data types. Every system borrowed some data types from the official SQL standard, threw some of them out, and perhaps added one or two itself.<\/p>\r\n\r\n<p>Therefore, I will provide the official SQL data types, and include links to the documentation for each system. There, you will find the peculiarities regarding data types for each system, and which data types it does or doesn&rsquo;t support.<\/p>\r\n\r\n<h2>The Data Types<\/h2>\r\n\r\n<p>Don&rsquo;t worry trying to learn and remember all of these. The list is here to give a general sense of how data types work and which categories exist. You can just look at the types your specific system provides when you start creating your own database system.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Data Type<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>CHARACTER(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>String of characters, with a fixed length of <em>n<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>VARCHAR(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>String of characters, with a maximum length of <em>n<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>BINARY(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Binary string*, with a fixed length of <em>n<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>VARBINARY(n)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Binary string, with a maximum length of <em>n<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>BOOLEAN<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>A <em>true<\/em> or <em>false<\/em> value<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SMALLINT<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Integer of at most 5 digits<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>INTEGER<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Integer of at most 10 digits<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>BIGINT<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Integer of at most 19 digits<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>INTEGER(p)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Integer of at most <em>p<\/em> digits<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>DECIMAL(p, s)<\/code><\/p>\r\n\r\n\t\t\t<p><code>NUMERIC(p, s)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Decimal number, of at most <em>p<\/em> digits, of which <em>s<\/em> are in front of the decimal.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REAL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Approximate decimal number, mantissa precision** 7<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>FLOAT<\/code><\/p>\r\n\r\n\t\t\t<p><code>DOUBLE PRECISION<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Approximate decimal number, mantissa precision 16<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>FLOAT(p)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Approximate decimal number, mantissa precision <em>p<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>DATE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Year, month, and day values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>TIME<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Hour, minute, and second values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>TIMESTAMP<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Year, month, day, hour, minute, and second values<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ARRAY<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An ordered collection of values, with a fixed length<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>MULTISET<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>An unordered collection of values, with a variable length<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>INTERVAL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Contains integer fields***, usually representing a period of time.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>XML<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Raw XML data<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Let me clarify some of the terms used:<\/p>\r\n\r\n\t<ul>\r\n\t\t<li>*Binary strings are simply strings of <code>0<\/code>s and <code>1<\/code>s.<\/li>\r\n\t\t<li>**Mantissa precision refers to the number of digits in a certain base notation. In the case of SQL, this means that any number can be written as <em>m <\/em>* <em>10^n<\/em>, where mantissa precision is the amount of digits that <em>m<\/em> has.<\/li>\r\n\t\t<li>***An integer field is something that has a starting point, and an end point, and contains every number between start and end.<\/li>\r\n\t<\/ul>\r\n\r\n<p>Even though the actual name for a type may differ, the syntax remains the same across systems. Simply type the name of the data type in capital letters, and if needed, provide the parameters between parentheses.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- id is an integer of at most 11 digits, primary key and auto increment are additional attributes or constraints we put on it\r\n-- name of the video is a string of at most 255 characters long\r\n-- video_id is used to access the video, like Youtube's ?v=ZMtNyG5OPqM, and is a fixed length string\r\n-- time_uploaded holds the time at which the video was first uploaded\r\nCREATE TABLE videos\r\n\t(id            INT(11) PRIMARY KEY AUTO INCREMENT,\r\n\t name          VARCHAR(255),\r\n\t video_id      CHAR(11),\r\n\t time_uploaded TIMESTAMP);\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>video_id<\/td><td>time_uploaded<\/td><\/tr>\r\n\t\t<tr><td colspan=\"4\">No entries.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Data Types per System<\/h2>\r\n\r\n<ul>\r\n\t<li><a href=\"https:\/\/www.postgresql.org\/docs\/9.3\/static\/datatype.html\">PostgreSQL<\/a><\/li>\r\n\t<li><a href=\"https:\/\/www.sqlite.org\/datatype3.html\">SQLite<\/a> \r\n\t\t<ul style=\"list-style-type:circle\">\r\n\t\t\t<li>SQLite actually doesn&rsquo;t force your columns into specific data types. Instead, it just supports a few general data types and changes the column based on whatever data you throw into it.<\/li>\r\n\t\t<\/ul>\r\n\t<\/li>\r\n\t<li><a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/data-types.html\">MySQL<\/a>\r\n\t\t<ul style=\"list-style-type:circle\">\r\n\t\t\t<li>Their documentation page is quite unorganized at the time of speaking. So, know that its data types are divided into three categories: <em>numeric <\/em>(integers and decimal numbers), <em>strings<\/em> (text and even more text), and <em>date and time<\/em>. Click each one to get the full overview for the category.<\/li>\r\n\t\t<\/ul>\r\n\t<\/li>\r\n\t<li><a href=\"https:\/\/msdn.microsoft.com\/nl-nl\/library\/ms187752.aspx\">SQL Server<\/a><\/li>\r\n\t<li><a href=\"https:\/\/msdn.microsoft.com\/en-us\/library\/ms714540(v=vs.85).aspx\">MS Access<\/a><\/li>\r\n\t<li><a href=\"https:\/\/docs.oracle.com\/cd\/B28359_01\/server.111\/b28318\/datatype.htm\">Oracle<\/a><\/li>\r\n<\/ul>\r\n\r\n<h2>Best Practices<\/h2>\r\n\r\n<p>It&rsquo;s generally best to make the data type constraint as tight and accurate as possible. If you expect to use strings of at most 10 characters for now, set the data type to be <code>VARCHAR(10)<\/code>. If you can make something into a string of fixed length, do so.<\/p>\r\n\r\n<p>If you can store something as a number instead of a string, go for it! We already saw this with foreign keys, but it can also be applied in many other cases. For example, say you have a column <em>email_confirmed<\/em> in your <em>users<\/em> table. Then, you could use the values <code>&ldquo;yes&rdquo;<\/code> and <code>&ldquo;no&rdquo;<\/code>, but you can also just use <code>1<\/code> and <code>0<\/code>, which is shorter.<\/p>\r\n\r\n<p>On the other hand, you don&rsquo;t want to be surprised by your own constraints. For example, say you have a primary key <em>id<\/em> in your <em>users<\/em> table, which has <code>AUTO INCREMENT<\/code> set on it. If you have thousands of users signing up every hour, this <em>id<\/em> will grow larger and larger very quickly. In these cases, you want to give yourself some breathing space, and set it to be an integer of, say, at most 10 digits.<\/p>\r\n","slur":"sql-data-types","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"460","title":"[SQL] Operators & Conditions","post":"<p>Earlier in this course, you&rsquo;ve seen me mention <em>conditions<\/em> several times. When selecting entries from a database, we saw that we can choose only the entries for which a specified condition is true &ndash; for example, only select articles that were posted in the month of January, or select all users with a username longer than 20 characters.<\/p>\r\n\r\n<p>While some of those conditions could be used when creating the table structure, such as with the <code>CHECK<\/code> constraint, they will become much more important when reading data from a database. When selecting data, we usually don&rsquo;t want all of it, and using conditions is the only way to (logically) specify exactly which entries we want. Remember this:<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">An entry in an SQL query is selected only if the corresponding condition is <em>true<\/em><\/p>\r\n\r\n<h2>Arithmetic Operators<\/h2>\r\n\r\n<p>Conditions make heavy use of <strong>operators<\/strong>, but before we dive into conditional operators, I want to show the other type of operator: basic arithmetic.<\/p>\r\n\r\n<p>The five arithmetic operators are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>+<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Addition<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>-<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subtraction<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>*<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Multiplication<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>\/<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Division<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Modulus ( = remainder after integer division)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>As usual, they require two values around it (one on the left, one on the right), which we call its <strong>operands<\/strong>. As you&rsquo;d also expect, you can use parentheses to determine the execution order. You could use these operators, for example, to transform a fixed value into percentages.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Select the name of each product, and the multiplication of the price and discount columns (which is their final price)\r\nSELECT name, price*discount FROM products;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>price*discount<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>18.67<\/td><\/tr>\r\n\t\t<tr><td>Plush Panda<\/td><td>56.77<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Conditional Operators<\/h2>\r\n\r\n<p>These operators are also called <em>comparison operators<\/em>, and for a good reason: they compare the operands. Then, they return <em>true<\/em> if the comparison was true, and <em>false<\/em> otherwise. For example, you could compare if the <em>signup date<\/em> of a certain user is later than the <em>signup date<\/em> of another user. Or, you could compare if the amount of points a certain user has scored in your game is less than that of another user.<\/p>\r\n\r\n<p>The conditional operators are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>=<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if operands are equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>!=<\/code><br\/>\r\n\t\t\t\t<code>&lt;&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if operands are <em>not<\/em> equal<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;&nbsp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand <em>is greater than<\/em> the right operand<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&gt;=<\/code><br\/>\r\n\t\t\t\t<code>!&lt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand <em>is greater than or equal to<\/em> the right operand<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;&nbsp;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand <em>is less than<\/em> the right operand<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>&lt;=<\/code><br\/>\r\n\t\t\t\t<code>!&gt;<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand <em>is less than or equal to<\/em> the right operand<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Selects all products that cost at most 20 euros\r\nSELECT name, price FROM products WHERE price <= 20;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>price<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>12.50<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Plush Panda<\/td><td>75.00<\/td><\/tr>\r\n\t\t<tr><td>Playmobil<\/td><td>18.50<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Playstation<\/td><td>80.00<\/td><\/tr>\r\n\t\t<tr><td>Keychain<\/td><td>5.00<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Logical Operators<\/h2>\r\n\r\n<p>We&rsquo;ve seen how to create a single condition, and we&rsquo;ve seen how to transform the values with some arithmetic &ndash; but what if we want to use multiple conditions? For that, we use <em>logical operators<\/em>.<\/p>\r\n\r\n<h3>General Logic<\/h3>\r\n\r\n<p>Essentially, logical operators chain together multiple conditions. With general logic operators, you can glue together any amount and any type of conditions.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>AND<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if both conditions are true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>OR<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if at least one of the conditions is true<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>NOT<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the condition is false<\/p>\r\n\r\n\t\t\t<p>It inverses your condition, and is often called the <em>negate operator<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Again, parentheses will help you out with grouping your conditions.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Juan wants to buy a present for his kids, but doesn't want to spend more than 20 euros.\r\nSELECT name, price FROM products WHERE price <= 20 AND (age='kids' OR age='all');\r\n\r\n-- Looks like it's going to be LEGO then!\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>price<\/td><td>age<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>12.50<\/td><td>all<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Plush Panda<\/td><td>75.00<\/td><td>kids<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Small Plush Panda<\/td><td>25.00<\/td><td>kids<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Playmobil<\/td><td>28.50<\/td><td>all<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Playstation<\/td><td>80.00<\/td><td>teenagers<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Keychain<\/td><td>5.00<\/td><td>adults<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>NULL Logic<\/h3>\r\n\r\n<p>As we&rsquo;ve seen before, the <code>NULL<\/code> value is common yet very special, and that&rsquo;s why it isn&rsquo;t so friendly towards our other operators. It requires its own syntax.<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>IS NULL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the value is indeed <code>NULL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>NOT IS NULL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the value is indeed <em>not<\/em> <code>NULL<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Ginty, on the other hand, wants to read reviews first, before buying a product\r\nSELECT name, price, reviews FROM products WHERE reviews NOT IS NULL;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>price<\/td><td>reviews<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>12.50<\/td><td>4.6<\/td><\/tr>\r\n\t\t<tr><td>Plush Panda<\/td><td>75.00<\/td><td>5.0<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Small Plush Panda<\/td><td>25.00<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>Playmobil<\/td><td>28.50<\/td><td>3.8<\/td><\/tr>\r\n\t\t<tr><td>Playstation<\/td><td>80.00<\/td><td>4.1<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Keychain<\/td><td>5.00<\/td><td><\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Fast Logic<\/h3>\r\n\r\n<p>Writing lots of <code>AND<\/code> and <code>OR<\/code> operators is exhausting. Therefore, SQL provides several shorthand ways to perform logic you&rsquo;ll commonly need.<\/p>\r\n\r\n<p>For example, say you have 10 administrators working on the website, and when somebody logs in you want to check the username to see if they are an admin. Then, you need to check the username against 10 different names. This is a pain with only general operators, but would be easy with the <code>IN<\/code> operator.<\/p>\r\n\r\n<img src=\"media\/SQLLogicOperators.png\" \/>\r\n\r\n<p>The fast and useful logic operators are:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Operator<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ALL (<em>value_1<\/em>, <em>&hellip;<\/em>, <em>value_n<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the comparison is true for all values in the given set*<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ANY (<em>value_1<\/em>, <em>&hellip;<\/em>, <em>value_n<\/em>)<\/code><br\/>\r\n\t\t\t\t<code>SOME (<em>value_1<\/em>, <em>&hellip;<\/em>, <em>value_n<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the comparison is true for at least one value in the given set<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>BETWEEN <em>x<\/em> AND <em>y<\/em><\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand is between <em>x<\/em> and <em>y<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>IN (<em>value_1<\/em>, <em>&hellip;<\/em>, <em>value_n<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns true if the left operand is also somewhere within the given set<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>NOTE: *Sets are those comma-separated lists of values. Sets can also be the result of another query, but that&rsquo;s discussed in the <em>Subqueries<\/em> chapter.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Select all items that are not LEGO, Playmobil or Duplo\r\nSELECT brand, price FROM products WHERE brand NOT IN (\"LEGO\", \"Playmobil\", \"Duplo\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>brand<\/td><td>price<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>LEGO<\/td><td>12.50<\/td><\/tr>\r\n\t\t<tr><td>WWF<\/td><td>75.00<\/td><\/tr>\r\n\t\t<tr><td>999 Games<\/td><td>25.00<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Playmobil<\/td><td>28.50<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Duplo<\/td><td>80.00<\/td><\/tr>\r\n\t\t<tr><td>Sony<\/td><td>55.00<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-operators-conditions","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"461","title":"[SQL] Aliases & Variables","post":"<p>We&rsquo;ve seen in all the previous chapters, that we can use the value inside a certain column by simply typing the column&rsquo;s name. For example, when selecting a user entry from a database based on the <em>username<\/em> column, we can just use a condition like <code>WHERE username = &ldquo;PANDA&rdquo;<\/code>.<\/p>\r\n\r\n<p>Being able to easily access these values is great, but we want more. Instead of focusing on a single row at a time, we often want to see how the data is related across rows. For example, perhaps we want to count the amount of users that are female, or get the average age of all users. How to do all those fancy things will be discussed in later chapters, but in this chapter I want to introduce a tool you can use to simplify your life: <strong>aliases<\/strong>.<\/p>\r\n\r\n<h2>Aliases<\/h2>\r\n\r\n<p>An alias is an alternative name you can give to some data. For example, once we&rsquo;ve counted the amount of female users in our table, we want to save that result in a name we can easily remember &ndash; such as <em>female_count<\/em>. While it&rsquo;s not mandatory, I recommend to always use aliases, as they make queries much clearer and faster (because you don&rsquo;t need to recalculate things).<\/p>\r\n\r\n<p>To create an alias, use<\/p>\r\n\r\n<code class=\"longsyntax\"><em>some_expression<\/em> AS <em>some_alias_name<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Saves the value of price*discount under the alias of final_price\r\nSELECT name, price*discount AS final_price FROM products;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>final_price<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>18.67<\/td><\/tr>\r\n\t\t<tr><td>Plush Panda<\/td><td>56.77<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Note that these aliases are only defined and available in that specific query. You can&rsquo;t create an alias for a certain expression, and expect it to still work with a new query a few days later. You&rsquo;re really just renaming a certain part of a query so that you can use it more easily elsewhere within the same query.<\/p>\r\n\r\n<h2>Special Aliases<\/h2>\r\n\r\n<p>Instead of merely saving a column or certain expression as an alias, we can also save a complete table under a different name. Now, you haven&rsquo;t actually seen ways to use multiple tables within the same query <em>yet<\/em>, but you will soon enough. For now, just remember that you can give a better name to such table with the following syntax:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>some_table<\/em> <em>some_alias_name<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Example: Now we want to select all items from \"products\", plus the description of the category they belong to (which is saved in another table \"categories\")\r\nSELECT prod.name, prod.price*prod.discount AS final_price, cat.description\r\nFROM products prod\r\nINNER JOIN categories cat\r\nON prod.cat_id = cat.id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td style=\"white-space:pre;\">final_price<\/td><td>description<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>18.67<\/td><td>LEGO is a brand of blocks from Norway...<\/td><\/tr>\r\n\t\t<tr><td>Plush Panda<\/td><td>56.77<\/td><td>WWF has been making plush toys of high quality since...<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: If you ever encounter an SQL query in the wild that you don&rsquo;t understand, it&rsquo;s more than likely there&rsquo;s multiple tables being renamed. Because the syntax is so easy and quick, it&rsquo;s also easy to overlook it.<\/p>\r\n\r\n<p>Do not, however, fall into the trap of giving your tables the shortest names imaginable (such as <code>a<\/code> or <code>b<\/code>). Try to always provide clear and descriptive names for aliases that actually <em>help<\/em> you understand and write the query, not ones that merely make it shorter.<\/p>\r\n\r\n<h2>Variables<\/h2>\r\n\r\n<p>Instead of renaming data we already have, SQL, like any proper computer language, can also save new data inside <strong>variables<\/strong>! Variables are nothing more than data containers &ndash; you choose a name and data type, and assign a certain value to the variable. This way, if needed, we can create and save strings of text, numbers, anything you want.<\/p>\r\n\r\n<p>To create a variable, use<\/p>\r\n\r\n<code class=\"longsyntax\">DECLARE @<em>variable_name type<\/em>;<\/code>\r\n\r\n<p>Yes, this <em>type<\/em> can be any of the data types your particular database system supports. So, for example, if you set it to <code>varchar(10)<\/code>, you can save any piece of text of at most 10 characters inside this variable.<\/p>\r\n\r\n<p>To set a variable to the value you want, use<\/p>\r\n\r\n<code class=\"longsyntax\">SET @<em>variable_name<\/em> = <em>desired_value<\/em>;<\/code>\r\n\r\n<p>To use the variable, simply type the name wherever you want to insert the variable&rsquo;s value.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Our boss has gone mad and wants to increase all our prices by a different random factor every day!\r\nDECLARE @random_num FLOAT(5,3);\r\nSET @random_num = 2.25;\r\n\r\nSELECT name, price*discount*random_num AS final_price FROM products;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>final_price<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>42.0075<\/td><\/tr>\r\n\t\t<tr><td>Plush Panda<\/td><td>127.7325<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>If you have never used any other programming language before, this babble about variables may seem like bogus. In this case, I suggest you do not worry about this, as it is quite an advanced feature you won&rsquo;t regularly need. Nevertheless, I also suggest you learn about programming languages and variables as soon as possible, as they are the cornerstone of computer science! (Or, well, one of the big building blocks, at least.)<\/p>\r\n","slur":"sql-aliases-variables","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"462","title":"[SQL] Aggregators","post":"<p>Now that we know how to create aliases for complex expressions, we of course need to work on creating those complex expressions. In the last chapter, I mentioned the example of counting the total amount of rows a certain query returned. When SQL does so, it essentially looks at all entries, and reduces their values to a single value &ndash; the total amount of rows, which is just one number. In other words, functions like these <em>aggregate<\/em> a set of rows into one value.<\/p>\r\n\r\n<p>Not surprisingly, they are called <strong>aggregators<\/strong>, or aggregate functions. The five aggregators are: <em>count<\/em>, <em>sum<\/em>, <em>average<\/em>, <em>maximum<\/em>, and <em>minimum<\/em>. Most databases also add a few aggregators of their own, but you&rsquo;ll need those far less often than the five fundamental aggregators.<\/p>\r\n\r\n<h2>Count<\/h2>\r\n\r\n<p>The <strong>count<\/strong> aggregator counts the amount of entries that you&rsquo;ve selected. You can, however, slightly modify how it will count those rows.<\/p>\r\n\r\n<p>To count <em>all<\/em> the rows, use<\/p>\r\n\r\n<code class=\"longsyntax\">COUNT(*)<\/code>\r\n\r\n<p>To count the amount of rows of a certain column that have a meaningful value, which just means it does <em>not<\/em> count <code>NULL<\/code> values, use<\/p>\r\n\r\n<code class=\"longsyntax\">COUNT(<em>column_name<\/em>)<\/code>\r\n\r\n<p>Additionally, you can tell SQL to only count rows that are <em>different<\/em>. In other words, to only count the amount of rows with distinct values, use<\/p>\r\n\r\n<code class=\"longsyntax\">COUNT(DISTINCT <em>column_name<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Counts the amount of users\r\nSELECT username, COUNT(*) AS user_amount FROM users;\r\n\r\n-- Notice how the username column also has only on value - with an aggregate function, this is always the value of the last column that was counted.\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>user_amount<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>43<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: This <code>DISTINCT<\/code> keyword can also be used with all the other aggregators, and at some other places, which I&rsquo;ll discuss later.<\/p>\r\n\r\n<h2>Sum<\/h2>\r\n\r\n<p>The <strong>sum<\/strong> aggregator calculates the sum of all values in a certain column. Again, <code>NULL<\/code> values are omitted. (In a sense, they have the value <code>0<\/code> in the summation.) The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">SUM(<em>column_name<\/em>)\r\nSUM(DISTINCT <em>column_name<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Returns the sum of all the points scored by user Panda\r\nSELECT username, SUM(points) AS points_total FROM users WHERE username = \"Panda\";\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>50<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>15<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>50<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>25<\/td><\/tr>\r\n\t<\/table>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>points_total<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>125<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Average<\/h2>\r\n\r\n<p>The <strong>average<\/strong> aggregator returns the average of all values in a certain column. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">AVG(<em>column_name<\/em>)\r\nAVG(DISTINCT <em>column_name<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Calculate the average points earned per day by Panda\r\nSELECT username, AVG(points) AS points_avg FROM users WHERE username = \"Panda\";\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>points_avg<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>41.67<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: Essentially, this is a shorthand method for calculating the total <em>sum<\/em> of the values, and dividing that by the <em>count<\/em>. Because, if you remember from math classes, average = sum\/(amount of items).<\/p>\r\n\r\n<h2>Minimum<\/h2>\r\n\r\n<p>The <strong>minimum<\/strong> aggregator returns the minimum of a column &ndash; the smallest value of all values. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">MIN(<em>column_name<\/em>)\r\nMIN(DISTINCT <em>column_name<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Since this year, students are not allowed to have any grade below 4.0. Let's check if Panda and Juan are allowed to pass!\r\nSELECT username, MIN(grade) AS min_grade FROM users GROUP BY username;\r\n\r\n-- The GROUP BY statement at the end simply groups the results, don't worry about it for now\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>username<\/td><td>grade<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>6.7<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>8.2<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>5.8<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>3.8<\/td><\/tr>\r\n\t<\/table>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>min_grade<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>5.8<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>3.8<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Maximum<\/h2>\r\n\r\n<p>The <strong>maximum<\/strong> aggregator returns the maximum of a column &ndash; the largest value of all values. The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">MAX(<em>column_name<\/em>)\r\nMAX(DISTINCT <em>column_name<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- To ease the pain, professor Qi decided to reward the username with the highest grade with candy.\r\nSELECT username, MAX(grade) AS max_grade FROM users GROUP BY username;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>max_grade<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>6.7<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>8.2<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-aggregators","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"463","title":"[SQL] Sorting","post":"<p>Let&rsquo;s say you&rsquo;ve crafted a nifty select statement that returns all the rows you want &ndash; how do you go about creating order out of this perhaps huge set of entries? Well, the way any structured person would organize his stuff. You collect everything you want to go through, divide it into groups, put them in a sensible order, and throw out everything you don&rsquo;t need.<\/p>\r\n\r\n<p>For example, say you want to select the 10 latest blog posts from a table. In that case, you first <em>sort<\/em> the table by date (so that the latest posts come first in the results), and then tell SQL to ignore all entries that come after the first 10.<\/p>\r\n\r\n<h2>Regular Ordering<\/h2>\r\n\r\n<p>Sorting or <em>ordering<\/em> results in this way is not only useful when it comes to displaying the data in a sensible manner, it&rsquo;s also often necessary for performing certain queries. To order results of a select statement, use<\/p>\r\n\r\n<code class=\"longsyntax\">ORDER BY <em>expression <\/em>[ASC | DESC]<\/code>\r\n\r\n<p>The expression, as always, can contain any column names or aliases you have. You need to put either the keyword <code>ASC<\/code> <em>or<\/em> <code>DESC<\/code> behind the expression. The first one orders results <em>ascending<\/em> (low to high), the second does so <em>descending<\/em> (high to low).<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- This sorts the grades DESCENDING (from highest to lowest).\r\nSELECT * FROM grades ORDER BY grade DESC;\r\n\r\n-- Note how this only influences the results we selected; the original table still has the same \"order\", namely the primary key id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>grade<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Panda<\/td><td>8.5<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Juan<\/td><td>7.6<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Ginty<\/td><td>7.1<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Fluffykins<\/td><td>5.9<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Lexicographical Ordering<\/h2>\r\n\r\n<p>Lexicographical ordering simply refers to the type of ordering used in dictionaries. First, words are ordered based on the first letter. Then, if the first letter is the same, words are ordered based on the second letter. If the second letter is also the same, they are ordered based on the third letter &ndash; and so on.<\/p>\r\n\r\n<p>Instead of supplying only a single expression, we can supply as many as we want. SQL will first order based on the first expression, but if multiple entries have the same value, it will order based on the second expression. To do so, simply use<\/p>\r\n\r\n<code class=\"longsyntax\">ORDER BY <em>expression <\/em>[ASC | DESC], <em>&hellip;<\/em>, <em>expression <\/em>[ASC | DESC]<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- This sorts the grades DESCENDING, and if the grade is the same, the usernames ASCENDING (which is just alphabetical order)\r\nSELECT * FROM grades ORDER BY grade DESC, username ASC;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>grade<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Juan<\/td><td>8.5<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Panda<\/td><td>8.5<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Ginty<\/td><td>7.1<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Jean Valjean<\/td><td>5.9<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Aladin<\/td><td>5.6<\/td><\/tr>\r\n\t\t<tr><td>6<\/td><td>Tigres<\/td><td>5.6<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Advanced Ordering<\/h2>\r\n\r\n<p>Additionally, you can also use those <em>aggregators<\/em> from last chapter within the expression. However, the main feature of aggregators was that they reduce to a single value &ndash; and how do you order a single value?<\/p>\r\n\r\n<p>We will look into that more intensively in a few chapters, but the main idea is that you can let SQL divide the results into groups before you start ordering. So, you can group the results based on some condition, and then order the <em>groups<\/em> instead of all individual entries. This way, using aggregators makes sense. You could, for example, divide a table containing blog posts into groups based on category, and then order these groups based on how many posts are within that category.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Quick Example: This result isn't so interesting... (the ORDER BY has no function whatsoever)\r\nSELECT COUNT(*) AS high_grades FROM grades WHERE grade > 7 ORDER BY grade DESC;\r\n\r\n-- ...but this is. It shows the amount of students that got the same grade, ordered from high to low\r\nSELECT grade, COUNT(*) AS group_num FROM grades GROUP BY grade ORDER BY grade DESC;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>high_grades<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>grade<\/td><td>group_num<\/td><\/tr>\r\n\t\t<tr><td>8.5<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>7.1<\/td><td>1<\/td><\/tr>\r\n\t\t<tr><td>5.9<\/td><td>1<\/td><\/tr>\r\n\t\t<tr><td>5.6<\/td><td>2<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-sorting","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"464","title":"[SQL] Grouping","post":"<p>Now that we know how to select entries based on conditions and expressions, and how to establish some order amongst them, we can start <em>grouping<\/em> the results. Notice that grouping is very different from <em>filtering<\/em> (discussed in next chapter). When grouping results, we&rsquo;re collecting all the results and putting them into larger or smaller groups. When filtering results, we&rsquo;re simply throwing out all the information we don&rsquo;t need.<\/p>\r\n\r\n<p>We&rsquo;ll also see in this chapter that the order of the keywords is, in fact, very important in SQL. Intuitively, we understand that you can&rsquo;t place an <code>ORDER BY<\/code> statement at the start of a <code>SELECT<\/code> statement, because there would be nothing to order yet. But, for example, we will also see that there&rsquo;s a good reason that the <code>GROUP BY<\/code> keyword must come before the <code>ORDER BY<\/code> keyword.<\/p>\r\n\r\n<h2>Group By<\/h2>\r\n\r\n<p>The <code>GROUP BY<\/code> keyword is extremely powerful, especially when used in combination with aggregators. Not only does it group entries for you, based on certain conditions, it&rsquo;s also smart enough to apply the aggregator function per group. Essentially, it compresses multiple entries from the same group, into one entry containing relevant information about the whole group.<\/p>\r\n\r\n<p>The syntax is<\/p>\r\n\r\n<code class=\"longsyntax\">GROUP BY <em>expression<\/em>,<em> &hellip;<\/em>,<em> expression<\/em><\/code>\r\n\r\n<p>It will group entries together if they have the same value for all the expressions. For example, you could group entries in a <em>movies<\/em> table if the average rating <em>and<\/em> genre are the same. Usually though, one expression is more than enough.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Count the amount of users, grouped by gender\r\nSELECT gender, COUNT(*) AS amount FROM users GROUP BY gender;\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>gender<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>male<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>female<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><td>male<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Gandalf<\/td><td>male<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>gender<\/td><td>amount<\/td><\/tr>\r\n\t\t<tr><td>male<\/td><td>3<\/td><\/tr>\r\n\t\t<tr><td>female<\/td><td>1<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>The <code>GROUP BY<\/code> keyword directly follows the <code>WHERE<\/code> statement of a query. The reason for this, is that you want to group the results immediately &ndash; you can&rsquo;t order the results first, and then group them, because grouping undoes the ordering.<\/p>\r\n\r\n<h2>Union<\/h2>\r\n\r\n<p>Alternatively, instead of chopping up results into smaller groups, we can combine results into bigger groups! Instead of only selecting data from one table, we can chain as many small <code>SELECT<\/code> statements as we want, and combine the results before we group them, or sort them, or do anything else with them. In other words, we can unite different results from several places with the <code>UNION<\/code> keyword.<\/p>\r\n\r\n<p>I say <em>small<\/em> select statements, because you&rsquo;re only allowed to use the simplest form of the select query before the <code>UNION<\/code> keyword; the SELECT-FROM-WHERE format. Therefore, the general syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>__<\/em>\r\nUNION\r\nSELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>__<\/em>\r\n<em>other keywords or operations here<\/em><\/code>\r\n\r\n<p>You can create a union from as many select statements as you want, as long as you adhere to the SELECT-FROM-WHERE format. (Or, you can use subqueries, but those are so powerful that I&rsquo;ve given them their own huge chapter near the end of the course.)<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Say we have an online game where each game world has its own table. Then we can count all the users\r\nSELECT username, points FROM world_one\r\n\r\nUNION\r\n\r\nSELECT username, points FROM world_two\r\n\r\nORDER BY points DESC\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>255<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>125<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Juan<\/td><td>60<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Gandalf<\/td><td>1000<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>Gandalf<\/td><td>1000<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>255<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td>125<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>60<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p><em>Why can&rsquo;t I use other keywords before the <code>UNION<\/code> keyword?<\/em> Because, in every SQL query, you first need to select all your data before you can perform any special actions on it (such as grouping, sorting, and more). So, just as with grouping, you first need to unite all the data you could possibly need, and only later in the query can you sort them.<\/p>\r\n\r\n<h2>Union All<\/h2>\r\n\r\n<p>The regular <code>UNION<\/code> keyword, by default, only combines distinct rows. In other words, if it finds two entries that are the same, it will throw out one of them. This is often what you want &ndash; remember, <em>identical rows are evil!<\/em> &ndash; however, if you want to keep those duplicate rows, use<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>__<\/em>\r\nUNION ALL\r\nSELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>__<\/em>\r\n<em>other keywords or operations here<\/em><\/code>\r\n","slur":"sql-grouping","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"465","title":"[SQL] Filtering","post":"<p>Continuing in the spirit of last chapter, we will now look at ways to limit your data set. Often, a query returns more results than you need, and there&rsquo;s no way to change that with a simple condition. Instead, even more awesome keywords can be used to filter out the right results!<\/p>\r\n\r\n<h2>Intersect &amp; Except<\/h2>\r\n\r\n<p>As opposed to combining data sets using the <code>UNION<\/code> keyword (discussed in last chapter), we can also reduce the amount of entries by checking them against another set. This means that we <em>compare<\/em> entries from multiple <code>SELECT<\/code> statements, and keep an entry only if some condition is satisfied.<\/p>\r\n\r\n<ul>\r\n\t<li>To keep an entry only if it appears in both tables, use the <code>INTERSECT<\/code> keyword.<\/li>\r\n\t<li>To keep an entry only if it <em>doesn&rsquo;t<\/em> appear in both tables, use the <code>EXCEPT<\/code> keyword.<\/li>\r\n<\/ul>\r\n\r\n<img src=\"media\/SQLIntersectExcept.png\" \/>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Looking at our online game again, we want to select all users that have explored both worlds\r\nSELECT username FROM world_one\r\n\r\nINTERSECT\r\n\r\nSELECT username FROM world_two\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><td>255<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><td>125<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Gandalf<\/td><td>50<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><td>points<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Juan<\/td><td>60<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Panda<\/td><td>300<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Gandalf<\/td><td>1000<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><\/tr>\r\n\t\t<tr><td>Gandalf<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: These keywords are available in all systems, except for MySQL. Do not fret, however, as you can recreate how they work with some <em>joins <\/em>magic (explained in a later chapter).<\/p>\r\n\r\n<h2>Distinct<\/h2>\r\n\r\n<p>Up until now, the <code>SELECT<\/code> keyword has been quite lonely in all our queries, with no keywords near it. You might have silently accepted that this is just the way the syntax works, but, surprise surprise, it can actually have the <code>DISTINCT<\/code> keyword after it!<\/p>\r\n\r\n<p>Without it, the default behaviour is that the statement selects all information, as you&rsquo;ve seen. With the <code>DISTINCT<\/code> keyword after it, the select statement only selects <em>unique<\/em> rows, no matter what query magic comes after it. So, the general syntax becomes:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT DISTINCT <em>__<\/em>\r\nFROM <em>__<\/em>\r\nWHERE <em>__<\/em>\r\n<em>other operations here<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- We want to show all the different cheap products in our store. However, lots of items have multiple versions (such as a black and a white laptop case), but we want to count those as only one.\r\nSELECT DISTINCT name FROM products WHERE price <= 100\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>price<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>LEGO<\/td><td>20.50<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>LEGO<\/td><td>15.50<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Laptop<\/td><td>599.99<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>The Hobbit<\/td><td>12.99<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Laptop<\/td><td>499.99<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><\/tr>\r\n\t\t<tr><td>The Hobbit<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Having<\/h2>\r\n\r\n<p>Many, many times we&rsquo;ve used the powerful <code>WHERE<\/code> keyword to filter our results. Now that we can also group the results, however, we need another keyword to filter the <em>groups<\/em>. To avoid confusion, SQL doesn&rsquo;t use the same keyword again, but instead uses the <code>HAVING<\/code> keyword.<\/p>\r\n\r\n<p>For example, say you have a web shop with a table containing products, and you want to provide a list of the best-rated categories. Therefore, you only want to display the categories with a rating higher than 90%. To do so, you select everything from the database, group them by the average rating, and then remove all groups that have a rating that&rsquo;s too low.<\/p>\r\n\r\n<p>The <code>HAVING<\/code> keyword must always follow a <code>GROUP BY<\/code> statement, and provides conditions that determine which groups are kept and which are thrown away. Therefore, the syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT <em>__<\/em> FROM <em>__<\/em> WHERE <em>__ <\/em>\r\nGROUP BY <em>__<\/em>\r\nHAVING <em>conditions<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Alternatively, we could do this (to also count the amount of versions we have per product)\r\nSELECT name, COUNT(*) AS amount, MIN(price) AS min_price\r\nFROM products \r\nGROUP BY name\r\n\r\nHAVING min_price < 100\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>price<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>LEGO<\/td><td>20.50<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>LEGO<\/td><td>15.50<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Laptop<\/td><td>599.99<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>The Hobbit<\/td><td>12.99<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Laptop<\/td><td>499.99<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>name<\/td><td>amount<\/td><td>min_price<\/td><\/tr>\r\n\t\t<tr><td>LEGO<\/td><td>2<\/td><td>15.50<\/td><\/tr>\r\n\t\t<tr><td>The Hobbit<\/td><td>1<\/td><td>12.99<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>So, instead of filtering results upfront (like <code>WHERE<\/code>), it filters the groups after they&rsquo;ve been formed.<\/p>\r\n\r\n<h2>Limiting<\/h2>\r\n\r\n<p>Last but certainly not least, we can throw out entries based on their position in the results. Once we&rsquo;ve ordered our results, we can say things like &ldquo;pick only the first 10 rows&rdquo; or &ldquo;pick rows 10-20&rdquo;. A very common application of limiting is selecting the latest 5 or 10 blog posts from a database.<\/p>\r\n\r\n<p>Unfortunately, ideas about how to implement this differ vastly across systems. The syntax for selecting the first <em>X<\/em> amount of rows is:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>&hellip;<\/em> ORDER BY <em>__<\/em> LIMIT <em>X<\/em><span class=\"extraInformation\">SQLite<br\/>MySQL<br\/>PostgreSQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">SELECT TOP <em>X __<\/em> FROM <em>&hellip;<\/em><span class=\"extraInformation\">SQL Server<br\/>MS Access<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">FROM <em>__<\/em> WHERE ROWNUM &lt;= <em>X<\/em><span class=\"extraInformation\">Oracle<\/span><\/code>\r\n\r\n<p>NOTE: As you can see, besides the keyword itself, the placement of the keyword is also different.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Select the titles from the latest 3 blog posts\r\nSELECT title FROM posts ORDER BY id DESC LIMIT 3\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><td>post<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Hello World!<\/td><td>Hi...<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Test.<\/td><td>Just testing...<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Test Again.<\/td><td>Grumpf...<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Finally, it works.<\/td><td>Yay!...<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Blog Post #1<\/td><td>Welcome every...<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>title<\/td><\/tr>\r\n\t\t<tr><td>Blog Post #1<\/td><\/tr>\r\n\t\t<tr><td>Finally, it works.<\/td><\/tr>\r\n\t\t<tr><td>Test Again.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Pagination<\/h3>\r\n\r\n<p>Another common application for limiting is creating a paginated website. Once the user has reached the bottom of the page, he can click on a button to go to the next page, which will display the next 10 posts or results from the database. (Of course, there are many more uses for this SQL technique.)<\/p>\r\n\r\n<p>Essentially, you want to select the first <em>X<\/em> rows, starting from position <em>Y<\/em>. The syntax is:<\/p>\r\n\r\n<code class=\"longsyntax\">LIMIT <em>X<\/em> OFFSET <em>Y<\/em>\r\nLIMIT <em>X<\/em>, <em>Y<\/em><span class=\"extraInformation\">SQLite<br\/>MySQL<br\/>PostgreSQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">OFFSET <em>Y<\/em> ROWS FETCH NEXT <em>X<\/em> ROWS ONLY<span class=\"extraInformation\">SQL Server, MS Access<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">(ROWNUM &gt;= <em>Y<\/em> AND ROWNUM &lt;= (<em>X+Y<\/em>))<span class=\"extraInformation\">Oracle<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- On page 2, select the titles from the latest 3-6 blog posts\r\nSELECT title FROM posts ORDER BY id DESC LIMIT 3,3\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><td>post<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Hello World!<\/td><td>Hi...<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Test.<\/td><td>Just testing...<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Test Again.<\/td><td>Grumpf...<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Finally, it works.<\/td><td>Yay!...<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Blog Post #1<\/td><td>Welcome every...<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Blog Post #2<\/td><td>Today I want...<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>title<\/td><\/tr>\r\n\t\t<tr><td>Test Again.<\/td><\/tr>\r\n\t\t<tr><td>Test.<\/td><\/tr>\r\n\t\t<tr><td>Hello World!<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: As you can see, the syntax for pagination is extremely easy in MySQL and the like, but not in the other systems. Therefore, you can usually achieve much better performance by implementing this in another way, using subqueries. Again. Really, subqueries are important.<\/p>\r\n","slur":"sql-filtering","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"466","title":"[SQL] Joins I","post":"<p>All the queries and fancy keywords we&rsquo;ve used thus far, were mainly used on single tables. Sure, we learnt how to combine select statements to get much larger data sets from multiple tables. That&rsquo;s only one of many ways, however, to create queries that work with multiple tables. Instead of mixing <em>everything<\/em> together, it&rsquo;s far more common to only combine data sets on rows that have something in common, or only include extra entries based on a certain condition, and so on.<\/p>\r\n\r\n<p>For working with many entries from many different places, we use <strong>joins<\/strong>. Many different types of joins exist, and I will explain them from simplest to most complex.<\/p>\r\n\r\n<h2>Cross Join<\/h2>\r\n\r\n<p>The <strong>cross join<\/strong> simply joins <em>every<\/em> row from one table, with <em>every <\/em>row from another table. If you remember anything from mathematics, you might know this as a <em>Cartesian product<\/em>, commonly denoted with a cross (&times;). Not surprisingly, it&rsquo;s also called the <strong>Cartesian join<\/strong>.<\/p>\r\n\r\n<p>So, if you have one table with 10 rows and 2 columns, and another with 5 rows and 2 columns, the result will be a data set with 50 rows and 4 columns.<\/p>\r\n\r\n<img src=\"media\/SQLCrossJoin.png\" \/>\r\n\r\n<p>To create a cross join, use one of these syntaxes<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT * FROM <em>table1<\/em>, <em>table2<\/em>\r\nSELECT * FROM <em>table1<\/em> CROSS JOIN <em>table2<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Say we're writing a program that randomly combines sentences, just for fun\r\n-- CONCAT simply puts the strings together, don't worry about it for now\r\nSELECT CONCAT(front, back) AS sentence\r\n\r\nFROM front_sentences \r\n\r\nCROSS JOIN back_sentences\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>front<\/td><\/tr>\r\n\t\t<tr><td>Mike went swimming...<\/td><\/tr>\r\n\t\t<tr><td>He borrowed a duck...<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>back<\/td><\/tr>\r\n\t\t<tr><td>because he was lonely.<\/td><\/tr>\r\n\t\t<tr><td>because it was his mission.<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>sentence<\/td><\/tr>\r\n\t\t<tr><td>Mike went swimming...because he was lonely.<\/td><\/tr>\r\n\t\t<tr><td>Mike went swimming...because it was his mission.<\/td><\/tr>\r\n\t\t<tr><td>He borrowed a duck...because he was lonely.<\/td><\/tr>\r\n\t\t<tr><td>He borrowed a duck...because it was his mission.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>Usually, this join is a bit over the top &ndash; you&rsquo;ll likely only need a small set of those rows you&rsquo;re selecting. Either way, it&rsquo;s the simplest join there is if you want to play around with joins.<\/p>\r\n\r\n<h2>Inner Join<\/h2>\r\n\r\n<p>An <strong>inner join<\/strong> is essentially a cross join with conditions added. It doesn&rsquo;t combine <em>all<\/em> rows, but only rows that fulfil a certain condition. So, it selects a subset of the cross join, or an <em>inner part<\/em> of the full data set &ndash; hence the name.<\/p>\r\n\r\n<img src=\"media\/SQLInnerJoin.png\" \/>\r\n\r\n<p>An inner join can be performed <em>implicitly<\/em>, which means you&rsquo;re playing with rows from multiple tables at the same time and trusting SQL to do the right thing, or <em>explicitly<\/em>, by using a keyword.<\/p>\r\n\r\n<h3>Implicit<\/h3>\r\n\r\n<p>One powerful feature of SQL, is that we can easily access anything from any table within the database. This is done with the <strong>dot notation<\/strong>:<\/p>\r\n\r\n<code class=\"longsyntax\"><em>someTable<\/em>.<em>someColumn<\/em><\/code>\r\n\r\n<p>We can use this notation to work with data from multiple tables at the same time, without having to explicitly join anything. All we need to do is include a <code>WHERE<\/code> clause, using the dot notation, that states which rows we should combine.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Combine comments with information about the user\r\nSELECT users.username AS usn, \r\n       comments.comment AS cmt\r\nFROM users, comments\r\n\r\nWHERE usn = comments.user_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>username<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Panda<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Ginty<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Juan<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>user_id<\/td><td>comment<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>This is a test comment.<\/td><\/tr>\r\n                <tr><td>4<\/td><td>Dragons are awesome!<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>usn<\/td><td>cmt<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>This is a test comment.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: This notation can also be used at any other place within the query, because it isn&rsquo;t really any different from the column names we&rsquo;ve been using thus far. It simply selects a column from a foreign table, nothing more, nothing less.<\/p>\r\n\r\n<h3>Explicit<\/h3>\r\n\r\n<p>The alternative syntax for inner joins, which is less flexible but often makes the query more readable, is:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>table1<\/em>\r\nINNER JOIN <em>table2\r\n<\/em>ON <em>conditions<\/em><\/code>\r\n\r\n<p>Note that we must still use the dot notation &ndash; it&rsquo;s just that the join itself and the corresponding condition have their own syntax.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- This does exactly the same as the previous example\r\nSELECT users.username AS usn, \r\n       comments.comment AS cmt\r\nFROM users\r\nINNER JOIN comments\r\nON usn = comments.user_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>usn<\/td><td>cmt<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>This is a test comment.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Biased Joins<\/h2>\r\n\r\n<p>We&rsquo;ve seen the cross join that selects <em>everything<\/em>, and the inner join that only selects rows if they match a certain condition in <em>both tables<\/em>. That&rsquo;s nice and fair, but what if we want the query to be biased, and select results from one table differently than from the other? We can use what I call <strong>biased joins<\/strong>.<\/p>\r\n\r\n<img src=\"media\/SQLBiasedJoins.png\" \/>\r\n\r\n<h3>Left Join<\/h3>\r\n\r\n<p>The <strong>left join<\/strong> selects <em>all<\/em> rows from the first table, but only the rows that match the conditions from the second table. Therefore, there will be rows from the first table that don&rsquo;t have a matching row in the second. If that&rsquo;s the case, it fills in <code>NULL<\/code> values for those columns. Use one of these syntaxes:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>table1<\/em> LEFT JOIN <em>table2<\/em>\r\nSELECT __ FROM <em>table1<\/em> LEFT OUTER JOIN <em>table2<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Using the same tables as previous examples, a left join instead of inner join would give these results\r\nSELECT users.username AS usn, \r\n       comments.comment AS cmt\r\nFROM users\r\n\r\nLEFT JOIN comments\r\nON usn = comments.user_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>usn<\/td><td>cmt<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>This is a test comment.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Right Join<\/h3>\r\n\r\n<p>The <strong>right join<\/strong> selects only the rows that match the conditions from the first table, but <em>all<\/em> rows from the second table. So, it&rsquo;s a reversed left join. Use one of these syntaxes:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>table1<\/em> RIGHT JOIN <em>table2<\/em>\r\nSELECT __ FROM <em>table1<\/em> RIGHT OUTER JOIN <em>table2<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- If we turn around the table order, a right join would do exactly the same as the previous left join\r\nSELECT users.username AS usn, \r\n       comments.comment AS cmt\r\nFROM comments\r\n\r\nRIGHT JOIN users\r\nON usn = comments.user_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>usn<\/td><td>cmt<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>This is a test comment.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Full Join<\/h3>\r\n\r\n<p>The <strong>full join<\/strong> is a combination of the left and right join.<\/p>\r\n\r\n<p><em>What&rsquo;s the difference with a cross join or inner join?<\/em> The full join uses <em>every<\/em> row from the first table, and <em>every<\/em> row from the right table (like a cross join). However, if it finds two rows that match the provided conditions, it will combine them (just like an inner join). If it can&rsquo;t find a matching row from the other table, it will fill in <code>NULL<\/code> values for all the other columns (like left and right joins).<\/p>\r\n\r\n<p>So, it will include every row from the first table <em>only once<\/em>, and every row from the second table <em>only once<\/em>. And, if possible, it will combine rows.<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>table1<\/em> FULL OUTER JOIN <em>table2<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Combine comments with information about the user\r\nSELECT users.username AS usn, \r\n       comments.comment AS cmt\r\nFROM users\r\n\r\nFULL JOIN comments\r\nON usn = comments.user_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>usn<\/td><td>cmt<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>I like to move it, move it<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>This is a test comment.<\/td><\/tr>\r\n\t\t<tr><td><\/td><td>Dragons are awesome!<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n","slur":"sql-joins-I","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""},
{"id":"467","title":"[SQL] Joins II","post":"<p>Joins are so powerful and important, that they deserve a second chapter! The previous chapter outlined all the types of joins &ndash; there is no other way to combine two data sets. So, this chapter will look at what to do if you don&rsquo;t have two data sets, but only one or more than two.<\/p>\r\n\r\n<p>If a table joins on itself, we call it a <strong>self join<\/strong>. If you chain more than one join, so that at least three tables are being joined, I like to call it a <strong>multi join<\/strong>.<\/p>\r\n\r\n<p><em>When would I use this advanced joining wizardry?<\/em> Well, say you&rsquo;re running a university, and you have a system with tables <em>students<\/em>, <em>grades<\/em>, and <em>courses<\/em>. You want to get the amount of ECTS (&ldquo;study points&rdquo;) that a certain student has earned, and email her this information. Then you need the email address from the students table, the grade from the grades table, <em>and<\/em> the amount of study points the course gives from the courses table.<\/p>\r\n\r\n<h2>Self Join<\/h2>\r\n\r\n<p>Joining a table with itself might seem obvious &ndash; just use an inner join with the same table. While that is indeed how a self join can be made, there&rsquo;s one problem: how do you distinguish the first instance of the table with the second one, if they both have the same name?<\/p>\r\n\r\n<p>That&rsquo;s where those handy table aliases come into play! When working with self joins, always make sure you give useful and distinct names to your tables and expressions. Otherwise, you quickly lose focus of what you&rsquo;re trying to do, and SQL will lose focus too.<\/p>\r\n\r\n<p>NOTE: In fact, it&rsquo;s always best to properly name the components of your query in joins, or any situation you&rsquo;re working with data from lots of different places.<\/p>\r\n\r\n<p>So, to get the full picture, look at the following example. It demonstrates a typical use case of self joins: when a table references data within itself.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Say we have a categories table that uses multiple levels; one category can be the subcategory of another. This is how we could get the name of the parent category of every subcategory.\r\nSELECT first.name AS parent, second.name AS category\r\nFROM categories first\r\n\r\nINNER JOIN categories second\r\nON second.subcat_id = first.id\r\n\r\n-- the WHERE statement, and other keywords, come after the joining process\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>name<\/td><td>subcat_id<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>News<\/td><td><\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Local<\/td><td>1<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Blog<\/td><td>1<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>parent<\/td><td>category<\/td><\/tr>\r\n\t\t<tr><td>News<\/td><td>Local<\/td><\/tr>\r\n\t\t<tr><td>News<\/td><td>Blog<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Multi Join<\/h2>\r\n\r\n<p>Similarly, chaining multiple joins is nothing more than using the same syntax over and over.<\/p>\r\n\r\n<p>The only thing that might create problems, is the placement and usage of the <code>ON<\/code> keyword. With multiple joins, you can&rsquo;t separate the <code>JOIN<\/code> keyword and the <code>ON<\/code> keyword. Instead, the syntax for one join needs to stay together, like this:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>table1<\/em>\r\nJOIN <em>table2<\/em> ON <em>condition<\/em>\r\nJOIN <em>table3<\/em> ON <em>condition<\/em>\r\n<em>lots of other keywords and expressions here<\/em><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- We have three tables: movie titles, actors linked to movie titles, and actor names\r\nSELECT \r\n\tmovies.id AS movie_id, \r\n\tmovies.title AS title,\r\n\tCONCAT(actors.firstname,' ',actors.lastname) AS name\r\nFROM movies\r\n\r\nINNER JOIN movie_actors\r\nON movies.id = movie_actors.movie_id\r\n\r\nINNER JOIN actors\r\nON actors.id = movie_actors.actor_id\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Inception<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Harry Potter and the Goblin on Fire<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Lord of the Rings<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>actor_id<\/td><td>movie_id<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>1<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>3<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>id<\/td><td>firstname<\/td><td>lastname<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Ian<\/td><td>McKellen<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Daniel<\/td><td>Radcliffe<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Leonardo<\/td><td>diCaprio<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>movie_id<\/td><td>title<\/td><td>name<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Inception<\/td><td>Leonardo diCaprio<\/td><\/tr>\r\n\t\t<tr><td>2<\/td><td>Harry Potter and the Goblin on Fire<\/td><td>Daniel Radcliffe<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>Lord of the Rings<\/td><td>Ian McKellen<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>It&rsquo;s also important to note that the <em>condition<\/em> you use theoretically has no problem with using data from tables you&rsquo;ll be joining later. As long as you use the dot notation, you could use something from <em>table3<\/em> in the condition for <em>table2<\/em>. However, I don&rsquo;t see how this could ever be put to practice (without making the code a complete mess), so I suggest you really keep joins separate. A single join should add rows from a new table, based on a condition using the new table and all previous tables.<\/p>\r\n\r\n<h2>A Note on Joins<\/h2>\r\n\r\n<p>Joins have many uses, but that also makes them prone to abuse.<\/p>\r\n\r\n<p>First of all, check if you really need to use a join. Sometimes a simple <code>WHERE<\/code> statement or something else we&rsquo;ve learned can replace it, and is much simpler and faster. On the other hand, if you&rsquo;re writing a complex query, check if you can&rsquo;t use a join instead. For example, subqueries can take over all the functionality of joins, but they are more tedious to write and much slower to execute.<\/p>\r\n\r\n<p>Secondly, check if you really need that many rows or columns. Most developers are lazy, and they just select everything and forget that they&rsquo;re not going to use half of it. Don&rsquo;t be that kind of guy (or girl). Most databases need to perform lots of complex queries during the day &ndash; if you can reduce the complexity and increase the speed, you&rsquo;re doing yourself a big favour.<\/p>\r\n","slur":"sql-joins-II","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""},
{"id":"468","title":"[SQL] Searching","post":"<p>I don&rsquo;t think I need to explain the importance of this topic to you. Search engines. Searching through a website. There will be times when you don&rsquo;t know <em>exactly<\/em> where you can find the entries you need, and in those cases, you want to write conditions to &ldquo;vaguely match&rdquo; against entries in your database. I say vaguely match, because searching is nothing more than checking if values from the database look somewhat like a search value the user provided. It&rsquo;s up to you how lenient your database is, what it searches through, and how it assigns importance to the results.<\/p>\r\n\r\n<h2>Simple Search<\/h2>\r\n\r\n<p>The simplest type of searching is simply checking if the value of a column matches a certain pattern. For example, if we want to find all blog posts that have the tag <em>&ldquo;news&rdquo;<\/em>, we can perform a simple search for entries where the column <em>tags<\/em> contains the string &ldquo;<em>news&rdquo;<\/em>.<\/p>\r\n\r\n<p>For this, we use the <code>LIKE<\/code> operator. Notice that it&rsquo;s an operator, not a keyword, so it is used in conditions, and can be inverted:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM <em>__<\/em> WHERE <em>column<\/em> LIKE<em> some_pattern<\/em>\r\nSELECT __ FROM <em>__<\/em> WHERE <em>column<\/em> NOT LIKE<em> some_pattern <\/em><\/code>\r\n\r\n<p>However, notice that I&rsquo;m using the word <em>pattern<\/em> here. If we knew the exact value we were looking for, we wouldn&rsquo;t need the <code>LIKE<\/code> operator &ndash; instead, we could have just used the <code>=<\/code> operator. So, in our example, we&rsquo;re not looking for the exact string &ldquo;<em>news<\/em>&rdquo;, but rather for any string that <em>contains<\/em> the word &ldquo;news&rdquo;. To accomplish this, we use <strong>wildcards<\/strong>.<\/p>\r\n\r\n<p>A wildcard is a symbol that stands for <em>everything that resembles what I&rsquo;m looking for<\/em>. We&rsquo;ve already seen one wildcard character, the asterisk ( <code>*<\/code> ), which was used to select <em>all rows from this table<\/em>. Within searches, we can use two more wildcards:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Wildcard<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>_<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any <em>single<\/em> character<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>%<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Matches any <em>sequence<\/em> of characters &ndash; zero, one, or more.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Select all posts with a title that talks about cats\r\nSELECT id, title FROM posts\r\nWHERE title LIKE \"%cat%\" OR title LIKE \"%Cat%\"\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Big cats you are beautiful.<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>2<\/td><td>Another panda has been rescued!<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>3<\/td><td>Warning: storm at sea.<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Look at this cute cat!<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Cats; what we know about them.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: As you can see, you can use as many wildcards as you want, or none at all.<\/p>\r\n\r\n<h2>Regular Expressions<\/h2>\r\n\r\n<p>If that is not enough for your searching needs, you can use <strong>regular expressions<\/strong>. These are extremely flexible and powerful, and will be able to do just about anything you&rsquo;d ever want. They are also complicated, however, and I will not explain how regular expressions themselves work. Their syntax is the same across all programming languages, so there&rsquo;s no need to go in-depth in this SQL tutorial.<\/p>\r\n\r\n<p>Nevertheless, I do need to tell you the syntax for using a regular expression in SQL. Instead of the <code>LIKE<\/code> operator, you can simply use a different operator (mostly <code>REGEXP<\/code>):<\/p>\r\n\r\n<code class=\"longsyntax\">WHERE <em>column<\/em> REGEXP <em>some_regular_expression<\/em><span class=\"extraInformation\">MySQL<br\/>SQLite<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">WHERE <em>column<\/em> SIMILAR TO <em>some_regular_expression<\/em><span class=\"extraInformation\">PostgreSQL<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">WHERE REGEXP_LIKE(<em>column<\/em>, some<em>_regular_expression<\/em>)<span class=\"extraInformation\">Oracle<\/span><\/code>\r\n\r\n<p><em>SQL Server<\/em> and <em>MS Access<\/em> already support regular expressions using the <code>LIKE<\/code> operator.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Select all posts with a title that does not contain any numbers\r\nSELECT id, title FROM posts\r\nWHERE title REGEXP \"[^0-9]+\"\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><\/tr>\r\n\t\t<tr><td>1<\/td><td>Big cats you are beautiful.<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>2<\/td><td>Panda #11 has been rescued!<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>3<\/td><td>Warning: sea storm level at 10.<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>Look at this cute cat!<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>5<\/td><td>Cats; what we know about them, and why they have 9 lives.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Full text Search<\/h2>\r\n\r\n<p>Even though simple searches, with wildcards and regular expressions, are very powerful, they also lack a lot of useful features. For example, when we find an entry that matches, we can&rsquo;t really determine the relevance of the match. Or, when we&rsquo;re searching through extremely large pieces of text, the queries can become very slow.<\/p>\r\n\r\n<p>To solve this, databases have something called <strong>full text search<\/strong>. The problem is that it&rsquo;s implemented almost completely differently in every system, so I&rsquo;ll try to explain the concept here, and you should be able to find specific syntax or functions for full text search in your particular system.<\/p>\r\n\r\n<p>A full text search works in two steps:<\/p>\r\n\r\n<ol>\r\n\t<li>The database indexes the words within the columns you&rsquo;re looking for. This works just like an index in a regular book &ndash; it creates a list of every word and in what entries it occurs. Additionally, in this step, you can use some functions or keywords to tell your database to be smart. For example, you could tell it to group related or similar words together, such as &ldquo;mice&rdquo; and &ldquo;mouse&rdquo;.<\/li>\r\n\t<li>With the index created, searching for certain expressions is quick and easy. All you need to do is provide the expression you&rsquo;re searching for, and perhaps provide ways to rank the results of how lenient you want to be. The database then looks in the index, finds every word that fits, selects every entry that is connected to it, and returns that.<\/li>\r\n<\/ol>\r\n\r\n<img src=\"media\/SQLFulltextSearch.png\" \/>\r\n\r\n<p>NOTE: You&rsquo;ll learn later how to create these kinds of indexes yourself &ndash; they can really save your life.<\/p>\r\n\r\n<p>As said earlier, how systems implement this differs vastly. Some systems have an easy general syntax:<\/p>\r\n\r\n<code class=\"longsyntax\">WHERE MATCH(<em>col_1<\/em>,<em> &hellip;<\/em>,<em> col_n<\/em>) AGAINST (<em>search expressions, etcetera<\/em>)<span class=\"extraInformation\">MySQL<br\/>SQLite<\/span><\/code>\r\n\r\n<code class=\"longsyntax\">WHERE CONTAINS(<em>search expressions, conditions, functions, etcetera<\/em>)<span class=\"extraInformation\">SQL Server<br\/>Oracle<\/span><\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Searches all the posts, and selects the ones that mention something related to javascript objects\r\n-- It also orders the results based on relevance\r\nSELECT id, title FROM articles\r\n\r\nWHERE MATCH(post) AGAINST('javascript objects')\r\n\r\nORDER BY MATCH(post) AGAINST('javascript objects')\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>title<\/td><\/tr>\r\n\t\t<tr><td>4<\/td><td>[JavaScript] Objects II<\/td><\/tr>\r\n\t\t<tr><td>3<\/td><td>[JavaScript] Objects I<\/td><\/tr>\r\n\t\t<tr><td>7<\/td><td>Object-Oriented Programming<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>2<\/td><td>Introduction to JavaScript<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>1<\/td><td>The Pandas and their Whereabouts; Part 2<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>NOTE: <em>MS Access<\/em> doesn&rsquo;t support full text search, <em>PostgreSQL<\/em> does but requires a lot more advanced SQL knowledge to pull off.<\/p>\r\n","slur":"sql-searching","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""},
{"id":"469","title":"[SQL] Functions","post":"<p>One of the most important aspects of any programming language, is number and string manipulation. Every language has lots of functionality for extracting the information you want from a number or string, and SQL is no different. For example, one day you might decide that you want to replace all occurrences of the word &ldquo;client&rdquo; with &ldquo;user&rdquo; across the whole database. Or, you might change the system of your movie website to store ratings as integers between 0 and 10, instead of decimal numbers between 1 and 5. Obviously, you don&rsquo;t want to spend countless days changing every single entry &ndash; luckily, functions allow you to execute a single query and be done with it.<\/p>\r\n\r\n<p>Again, however, the available functions differ across systems, and there&rsquo;s only a handful of really useful functions that is supported by all. Needless to say, I will discuss those and leave the rest to you.<\/p>\r\n\r\n<h2>Numeric<\/h2>\r\n\r\n<p>Functions for numbers aren&rsquo;t necessarily very applicable in a website environment, but are insanely useful if you&rsquo;re analysing data from a database, or if you&rsquo;re running a game or other system that depends heavily on correct and precise numbers.<\/p>\r\n\r\n<h3>General<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>RAND()<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns a random number between 0 and 1. By multiplying it, and adding\/subtracting from it, you can achieve random numbers within any range.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>STD(<em>x<\/em>)<\/code><br \/>\r\n\t\t\t<code>STDDEV(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Calculates the standard deviation for a certain expression <em>x<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Rounding &amp; Formatting<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ROUND(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds a number <em>x<\/em> to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>FLOOR(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds a number <em>x<\/em> <em>down<\/em> to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>CEIL(<em>x<\/em>)<\/code><\/p>\r\n\r\n\t\t\t<p><code>CEILING(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds a number <em>x<\/em> <em>up<\/em> to the nearest integer<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>ABS(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Calculates the absolute value of <em>x<\/em>. (That is, if <em>x<\/em> is negative, it is turned positive.)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>TRUNCATE(<em>x<\/em>, <em>y<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Rounds the number <em>x<\/em> to <em>y<\/em> number of decimal places. If <em>y<\/em> is 0, the decimal point is simply removed. If <em>y<\/em> is negative, it removes that amount of values from the integer part of the number.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Fetch a random quote from our database\r\nSELECT quote FROM quotes WHERE id = ROUND(RAND()*4+1)\r\n\r\n-- In my case, it was 5.\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>id<\/td><td>quote<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>1<\/td><td>To be, or not to be.<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>2<\/td><td>A life you don't live is still lost.<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>3<\/td><td>Every moment matters.<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>4<\/td><td>The best way out is always through.<\/td><\/tr>\r\n\t\t<tr><td>5<\/td><td>Do it with passion or not at all.<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>String<\/h2>\r\n\r\n<p>String functions, unlike numbers, are more applicable in the day-to-day situations you&rsquo;ll encounter when making a (simple) website. Typical uses are working with blog posts, descriptions, tags, comments, etcetera.<\/p>\r\n\r\n<p>NOTE: In SQL, oddly enough, string indices start at 1. So, the first character in an SQL string has position 1. (Unlike other programming languages, which all start at 0).<\/p>\r\n\r\n<h3>General<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>CHAR_LENGTH(<em>x<\/em>)<\/code><br \/>\r\n\t\t\t<code>CHARACTER_LENGTH(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the length of a string measured in characters.<\/p>\r\n\r\n\t\t\t<p>This means that symbols made out of multiple bytes are counted as 1.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>LENGTH(<em>x<\/em>)<\/code><br \/>\r\n\t\t\t<code>LEN(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the length of a string measured in bytes.<\/p>\r\n\r\n\t\t\t<p>This means that it will return a longer string length if your strong consists of complex symbols made out of multiple bytes.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>CONCAT(<em>str_1<\/em>, <em>&hellip;<\/em>, <em>str_n<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Concatenates all strings, which means it places all of them after each other to create one string.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>CONCAT_WS(<em>sep<\/em>, <em>str, &hellip;, str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Concatenates all strings, but places a separator <em>sep<\/em> between each of them.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Create a full name from user's first and last names\r\nSELECT \r\n\tfirst, \r\n\tlast, \r\n\tCONCAT(first, ' el ', last, 'o') AS full\r\nFROM users\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>first<\/td><td>last<\/td><td>full<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>Dragon<\/td><td>Juan el Dragono<\/td><\/tr>\r\n\t\t<tr><td>Panda<\/td><td>Pettisan<\/td><td>Panda el Pettisano<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td>Bon<\/td><td>Ginty el Bono<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Formatting<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>LTRIM(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Removes all whitespace characters from the start of the string.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>RTRIM(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Removes all whitespace characters from the end of the string.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>TRIM(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Removes all whitespace characters from both the start and end of string.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>LOWER(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes the string lowercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>UPPER(<em>x<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Makes the string uppercase<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Substrings<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SUBSTRING(<em>str<\/em>, <em>pos<\/em>, <em>len<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the part of <em>str<\/em> that starts at position<em> pos<\/em> and ends at position (<em>pos + len<\/em>)<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>LOCATE(<em>substr<\/em>, <em>str<\/em>, <em>pos<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the position of the first occurrence of <em>substr<\/em> in <em>str<\/em>, and starts looking from position <em>pos<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>FIELD(<em>substr<\/em>, <em>str<\/em>, <em>&hellip;<\/em>, <em>str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Returns the position of <em>substr<\/em> in the set of strings.<\/p>\r\n\r\n\t\t\t<p>Returns 0 if it can&rsquo;t be found.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>FIND_IN_SET(<em>substr<\/em>, &ldquo;<em>str<\/em>,<em> &hellip;<\/em>,<em> str<\/em>&rdquo;)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Same as the previous function, but the set of strings is provided as a string itself.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>INSERT(<em>str<\/em>, <em>pos<\/em>, <em>len<\/em>, <em>newstr<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Removes all characters in <em>str<\/em> between <em>pos<\/em> and <em>len<\/em>, and replaces them with the new string <em>newstr<\/em>.<\/p>\r\n\r\n\t\t\t<p>Of course, if you only want to remove characters from the string, you can make the new string empty.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Some old (and weird) database system stores every username with the tags &lt;user&gt;&lt;\/user&gt; around it. We don't want those when selecting\r\nSELECT \r\n\tusername, \r\n\tSUBSTR(username, 6, LENGTH(username)-7) AS better_usn\r\nFROM users\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td style=\"white-space:pre;\">better_usn<\/td><\/tr>\r\n\t\t<tr><td>&lt;user&gt;Juan el Dragono&lt;\/user&gt;<\/td><td>Juan el Dragono<\/td><\/tr>\r\n\t\t<tr><td>&lt;user&gt;Panda el Pettisano&lt;\/user&gt;<\/td><td>Panda el Pettisano<\/td><\/tr>\r\n\t\t<tr><td>&lt;user&gt;Ginty el Bono&lt;\/user&gt;<\/td><td>Ginty el Bono<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h3>Comparing &amp; Replacing<\/h3>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Function<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Description<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REPLACE(<em>str<\/em>, <em>old<\/em>, <em>new<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Replaces all occurrences of <em>old<\/em> with <em>new<\/em>, in the string <em>str<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REVERSE(<em>str<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simply reverses the string<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>REPEAT(<em>str<\/em>, <em>count<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Creates a new string that simply consists of <em>str<\/em> repeated <em>count<\/em> number of times.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>STRCMP(<em>str1<\/em>, <em>str2<\/em>)<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Compares two strings. Returns 0 if both are <em>equal<\/em>, returns -1 if the first argument is <em>smaller<\/em>, and returns 1 if the first argument is <em>greater<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><code>SOUNDEX(<em>str<\/em>)<\/code><\/p>\r\n\r\n\t\t\t<p><code>SOUNDS LIKE<\/code><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Can be used to check if two strings <em>sound<\/em> alike. If that is the case, the <em>soundex<\/em> strings should be identical. Especially useful in searching or databases working with sound files.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Oh no, something went wrong when updating our database, so now all users have the word FLUFFY randomly placed in their name! We want to remove it.\r\nUPDATE users SET username = REPLACE(username, \"FLUFFY\", \"\");\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable helperDatabaseTable\">\r\n\t\t<tr><td>username<\/td><\/tr>\r\n\t\t<tr><td>FLUFFYJuan el Dragono<\/td><\/tr>\r\n\t\t<tr><td>Panda el FLUFFYPettisano<\/td><\/tr>\r\n\t\t<tr><td>Ginty el BonoFLUFFY<\/td><\/tr>\r\n\t<\/table>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><\/tr>\r\n\t\t<tr><td>Juan el Dragono<\/td><\/tr>\r\n\t\t<tr><td>Panda el Pettisano<\/td><\/tr>\r\n\t\t<tr><td>Ginty el Bono<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>","slur":"sql-functions","cat":"Website","subcat":"SQL","video":"","diff":"3","quiz":""},
{"id":"470","title":"[SQL] Subqueries","post":"<p>I&rsquo;ve mentioned subqueries quite a few times in this course, but I needed to explain other SQL concepts first, before subqueries would make sense to you. You might have already, from their name, made up some ideas about what they do, and you&rsquo;re probably right.<\/p>\r\n\r\n<p style=\"margin-left:36.0pt\">Subqueries are queries within queries<\/p>\r\n\r\n<p>Woah! Within a query, we can use the results of another query &ndash; a so-called <strong>subquery<\/strong>. The best thing is that this subquery doesn&rsquo;t require any alternative syntax, and you can nest them as deep as you like. If you wanted, you could place a subquery, within a subquery, within the main query.<\/p>\r\n\r\n<img src=\"media\/SQLSubqueries.png\" \/>\r\n\r\n<p><em>When would I use subqueries?<\/em> Typically, a subquery is used to get a single result from another table, so that we can use that in our main query.<\/p>\r\n\r\n<p>For example, we might have a table <em>blog_posts<\/em> and another table <em>comments<\/em>. If we wanted to find all blog posts that received a higher than average amount of comments this month, we would need to do two things: calculate the average amount of comments this month from the <em>comments <\/em>table, and use that value to find all <em>blog_posts<\/em> with the amount of comments higher than that value. For the first step, we would need a subquery!<\/p>\r\n\r\n<p>Subqueries, however, are more powerful than that, and can also be used to return a list of results &ndash; a <strong>data set<\/strong>. We saw in the <em>Operators<\/em> chapter that some operators (such as <code>IN<\/code>) require a data set instead of a specific value. Well, you can use a subquery for that too!<\/p>\r\n\r\n<h2>The Syntax<\/h2>\r\n\r\n<p>As I said earlier, subqueries use the exact same syntax as regular queries. However, we <em>do<\/em> need a way to tell SQL when our subquery ends and our main query continues. Because, if we don&rsquo;t, how does SQL know if a certain keyword belongs to the subquery or the main query?<\/p>\r\n\r\n<p>Subqueries must, therefore, <em>always<\/em> be enclosed within <strong>parentheses<\/strong>. So, for example, the syntax of a simply subquery conditional is:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT __ FROM __ WHERE <em>some_val &gt; <\/em>(<em>subquery<\/em>)<\/code>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- For our movie night, we want to select all movies with a higher than average rating\r\nSELECT title, rating FROM movies WHERE rating > (SELECT AVG(rating) FROM movies)\r\n\r\n-- Essentially, with the current table, this reads WHERE rating > 3.65\r\n<\/pre>\r\n<div>\r\n\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>title<\/td><td>rating<\/td><\/tr>\r\n\t\t<tr><td>Inception<\/td><td>4.8<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Her<\/td><td>2.4<\/td><\/tr>\r\n\t\t<tr><td>Harry Potter (all)<\/td><td>4.4<\/td><\/tr>\r\n\t\t<tr><td>Bridge of Spies<\/td><td>4.2<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Fantastic Four<\/td><td>3.3<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Mean Girls<\/td><td>2.8<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n\r\n<h2>Rules for Subqueries<\/h2>\r\n\r\n<p>Subqueries are very flexible and can be just as complex as the main query, but there are some rules you must follow. More specifically, those rules must be followed if you don&rsquo;t want your whole program to break.<\/p>\r\n\r\n<ul>\r\n\t<li>A subquery can only have, at most, the same amount of columns as the main query. This means that if you, for example, selected three columns in the main query, you can&rsquo;t select ten columns from another table with a subquery.<\/li>\r\n\t<li>The <code>ORDER BY<\/code> keyword cannot be used in subqueries, simply because the order of the results does not matter.<\/li>\r\n\t<li>Subqueries that return a single result can only be used with operators that expect a single value. Subqueries that return multiple results can only be used with operators that expect multiple values. For example, I can&rsquo;t compare a list of rows with a single number 5.<\/li>\r\n\t<li>Subqueries can&rsquo;t be too big, or the query will explode. This means that your subquery is not allowed to work with the largest data types your system has. (For example, for MySQL this means BLOB, or <em>Binary Large Object<\/em>.)<\/li>\r\n<\/ul>\r\n\r\n<h2>Types of Subqueries<\/h2>\r\n\r\n<p>We typically distinguish two types of subqueries: <em>correlated<\/em> and <em>non-correlated<\/em>.<\/p>\r\n\r\n<p>A <strong>correlated<\/strong> subquery contains values that depend on the main query. This means that the result of the subquery depends on which row is being evaluated in the main query.<\/p>\r\n\r\n<p>A<strong> non-correlated<\/strong> subquery does <em>not<\/em> depend on values from the main query. It executes independently, and returns the same set of results for all entries.<\/p>\r\n\r\n<p>As you can see, there&rsquo;s no difference in the syntax, it&rsquo;s just a difference in terminology and usage that I wanted to point out. When writing a subquery, simply know whether it should be correlated or not. Because, if the subquery depends on the main query, if one of them has a mistake or gives an error, the whole query blows up.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- The previous example was a non-correlated subquery. This one is correlated. It selects all users with more points than the average number of points, *depending* on their level.\r\n\r\nSELECT * FROM users AS u\r\n\tWHERE points >= \r\n\t\t(SELECT AVG(points) \r\n\t\t FROM users \r\n\t\t WHERE level = u.level)\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>points<\/td><td>level<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Juan<\/td><td>15<\/td><td>2<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Panda<\/td><td>10<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td>25<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>Gandalf<\/td><td>35<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>Walt Disney<\/td><td>0<\/td><td>1<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Examples for the Confused<\/h2>\r\n\r\n<p>Let me illustrate some more subquery magic, in case you&rsquo;re still not convinced of their importance, or it&rsquo;s still too abstract and complex for you.<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"sql\">\r\n-- Some hackers thought it would be fun to point out the bad players in our game, so they changed the bad user's names into NOOB.\r\nUPDATE users SET username = 'NOOB' WHERE points <= (SELECT AVG(points) FROM users)\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>points<\/td><td>level<\/td><\/tr>\r\n\t\t<tr><td>NOOB<\/td><td>15<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>NOOB<\/td><td>10<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>Ginty<\/td><td>25<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>Gandalf<\/td><td>35<\/td><td>2<\/td><\/tr>\r\n\t\t<tr><td>NOOB<\/td><td>0<\/td><td>1<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<p>I told you subqueries can be used for everything, and as you can see, that really means everything. You can use subqueries with all four CRUD operations, and instead of only using them with the <code>WHERE<\/code> keyword, you could also, for example, use them after the <code>SELECT<\/code> keyword.<\/p>\r\n","slur":"sql-subqueries","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""},
{"id":"471","title":"[SQL] Security & Optimization","post":"<p>I already scattered pieces of optimization wisdom throughout the course, because I think it&rsquo;s useful to start getting into that optimization habit early on. I, however, left out one very important aspect: <strong>security<\/strong>.<\/p>\r\n\r\n<p>How do we make sure people don&rsquo;t hack into our databases? How do we make sure the passwords of millions of users are not stolen? Or that users don&rsquo;t &ldquo;accidentally&rdquo; change an SQL query to request information that&rsquo;s private? Lots of questions, lots of answers.<\/p>\r\n\r\n<p>If you&rsquo;re the only one who&rsquo;s going to be accessing the database, you&rsquo;re fine as far as security goes &ndash; well, as long as you don&rsquo;t give other people the link to the database and your password.<\/p>\r\n\r\n<p>If you are one of multiple administrators of the database, you can use <em>permissions<\/em> and set <em>user accounts<\/em> to control who can do what. (More on that in the advanced SQL course.)<\/p>\r\n\r\n<p>However, if your users are going to be interacting with the database, you could be in a lot of trouble. And with interacting with the database, I mean that they could potentially modify any SQL query. For example, when a user logs into his or her account, the input he provides is used in the query &ndash; thus modifying the query. Or, when a user requests a certain blog post, he is modifying a general query to select only that particular post from the database.<\/p>\r\n\r\n<p>All of this is pretty harmless, but if a user has malicious intent, they could do something called <strong>SQL injection<\/strong> &ndash; with devastating consequences!<\/p>\r\n\r\n<h2>SQL Injection<\/h2>\r\n\r\n<p>Imagine you have a site with users. Every user account is an entry in your <em>users<\/em> table, and users can log in via a simple form. So, to be able to check whether a username and password are correct, you&rsquo;d do something like:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT * FROM users WHERE username=inputName AND password=inputPass;<\/code>\r\n\r\n<p>This query works fine, <em>until<\/em> somebody with good SQL knowledge decides to play with it. Instead of typing his password, he types (in the username field): <code>&ldquo;&rdquo; OR 1=1 --<\/code><\/p>\r\n\r\n<p>Now, the query reads:<\/p>\r\n\r\n<code class=\"longsyntax\">SELECT * FROM users WHERE username=&rdquo;&rdquo; OR 1=1;<\/code>\r\n\r\n<p>Oh no, the password check has been removed! To make it worse, the condition <code>1=1<\/code> is always true, so the query returns <em>all <\/em>entries. Outrageous! Now the hacker knows all the usernames and passwords, and maybe has even more sensitive information.<\/p>\r\n\r\n<p>This is SQL injection at its finest. An evil user might inject SQL code in a place where normal input is expected, and in doing so hack your system (without actually doing anything illegal).<\/p>\r\n\r\n<p>To protect against this, people tried sanitizing the inputs. Before sending the query, the website checks whether the input contains any words or characters that are not allowed. But, this has two problems:<\/p>\r\n\r\n<ul>\r\n\t<li>It takes a lot of work, and there will always be some cases you didn&rsquo;t think of.<\/li>\r\n\t<li>It heavily restricts the website&rsquo;s functionality. For example, to prevent against SQL injection commenting out parts of the query (with <code>--<\/code>), you could forbid hyphens. But, hyphens are quite essential to most (English) texts.<\/li>\r\n<\/ul>\r\n\r\n<p>Therefore, the only way to <em>really<\/em> protect your database, is using <strong>pre-processed queries<\/strong>.<\/p>\r\n\r\n<h2>Pre-processed Queries<\/h2>\r\n\r\n<p>A <em>pre-processed query<\/em> is a query whose general form has been saved, and only needs a few variables to be filled in. These variables also have a fixed type, such as a number or string of length 5.<\/p>\r\n\r\n<img src=\"media\/SQLPreparedStatements.png\" \/>\r\n\r\n<p>This way, all you need to do is replace the variables in the query with the user input, and send the query. If the user tries to give you illegal input, the query is simply not executed. Additionally, because the general form of the query is already determined beforehand, input can <em>never<\/em> mess with the SQL.<\/p>\r\n\r\n<p>However, any web application that uses some kind of user interaction or input, also has to use a server-side language (such as the famous PHP). Pre-processing queries needs to be done with this server-side programming language, and can <em>not<\/em> be done with SQL only. Because I don&rsquo;t know what language you&rsquo;ll be using, I suggest you look up pre-processed queries in the documentation of your language to see how they work.<\/p>\r\n\r\n<p>Nevertheless, to show you how they ought to work, I will give an example using the most popular server-side language (PHP):<\/p>\r\n\r\n<div class=\"sideImagePreview\">\r\n<pre data-lang=\"php\">\r\n\/\/This prepares the statement; it declares what is fixed, and where our variables (?) are\r\n$statement = $mysqli->prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\r\n\r\n\/\/This fills in (\"binds\") the variables\r\n$statement->bind_param(\"ss\", $inputName, $inputPass);\r\n\r\n$inputName = \"Juan\";\r\n$inputPass = \"juaniscool\";\r\n\r\n\/\/This actually executes the query\r\n$statement->execute()\r\n<\/pre>\r\n<div>\r\n\t<table class=\"databaseTable\">\r\n\t\t<tr><td>username<\/td><td>password<\/td><\/tr>\r\n\t\t<tr><td>Juan<\/td><td>juaniscool<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Panda<\/td><td>1234<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Ginty<\/td><td>fluffybuffly<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Gandalf<\/td><td>eagles<\/td><\/tr>\r\n\t\t<tr class=\"unSelectedRow\"><td>Juan<\/td><td>dinikskan<\/td><\/tr>\r\n\t<\/table>\r\n<\/div>\r\n<\/div>\r\n\r\n<h2>Database &amp; Query Tuning<\/h2>\r\n\r\n<p>Last but not least, some last tips on tuning your queries and databases for optimal performance. Most of these will probably be familiar to you, except for the first. I will explain it in detail after the list.<\/p>\r\n\r\n<ul>\r\n\t<li>Use 3NF database design.<\/li>\r\n\t<li>Avoid type conversions, especially number-to-character (or vice versa).<\/li>\r\n\t<li>Create <em>indexes<\/em> for extremely large tables, or tables you need to search through very often. If that&rsquo;s not the case, avoid indexes.<\/li>\r\n\t<li>Avoid pattern matching\/searching and wildcards as much as you can. They often match too many rows, and are too slow.<\/li>\r\n\t<li>Avoid using the <code>OR<\/code>operator as much as you can. It slows down queries against any table of substantial size.<\/li>\r\n\t<li>Name your constraints, instead of directly attaching them to a specific column. It makes it easier to drop or alter it if needed, and it&rsquo;s more descriptive.<\/li>\r\n\t<li>Choose <code>JOIN<\/code>s over subqueries, and <code>WHERE<\/code> or <code>HAVING<\/code> clauses over <code>JOIN<\/code>s. When in doubt, simply test multiple versions of a query to see which one performs best.<\/li>\r\n\t<li>You&rsquo;re only allowed to discard 3NF database design (and therefore avoid database normalization and indexes), when working with bulk loads of data that need not be searched often (or at all).<\/li>\r\n<\/ul>\r\n\r\n<p>That odd acronym, <strong>3NF<\/strong>, stands for <em>third normal form<\/em>. As you expect, there&rsquo;s also a <strong>1NF<\/strong> (<em>first normal form<\/em>) and <strong>2NF<\/strong> (<em>second normal form<\/em>), from which it has been derived. Their definition is as follows:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>1NF:<\/strong> All the data depends on the (primary) key. This means that columns are allowed to have duplicate values, as long as the entries are not exactly the same (which is the case if they all have a unique primary key value).<\/li>\r\n\t<li><strong>2NF:<\/strong> First normal form, plus the fact that all data depends on the <em>whole<\/em> primary key. For example, if your primary key is made up of two columns, a change in any of the two columns should mean a change in the column value.<\/li>\r\n\t<li><strong>3NF:<\/strong> Second normal form, plus the fact that all data depends on <em>nothing but<\/em> the primary key. This means that columns with identical values are not allowed, if the information can be derived from other columns that are not the key. Instead, those fields should reference a primary key from another table.<\/li>\r\n<\/ul>\r\n\r\n<p>So, essentially, you've finally learned the terminology and theory behind that database normalization I mentioned so often.<\/p>\r\n","slur":"sql-security-optimization","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""},
{"id":"472","title":"[SQL] Conclusion: what now?","post":"<p>You&rsquo;ve seen all the fundamental features of SQL, lots of advanced ones, and how to keep your databases fast and secure. Have you seen everything there is? No, certainly not. Is this already more than enough to get you going on your first projects? Yes, definitely.<\/p>\r\n\r\n<p>I hope this course taught you what databases are, how insanely useful they are, and how you can create awesome things with them as well. Here and there I explained some advanced functionality, because I think you&rsquo;ll need it often, or because it helps understand some important concept of SQL. Nevertheless, I also created an <strong><em>Advanced SQL <\/em><\/strong>course to outline everything this course has ignored. It mainly provides lots of concepts that could dramatically improve your database system one day, but nothing a beginner would need.<\/p>\r\n\r\n<p>I therefore recommend you first try a few projects of your own, before reading the advanced course. Once you have the basics down, the more complex parts start to make sense, and should be easy as pie.<\/p>\r\n\r\n<p>Good luck with the rest of your database adventures!<\/p>\r\n","slur":"sql-conclusion-what-now","cat":"Website","subcat":"SQL","video":"","diff":"4","quiz":""}
]
}
,{"type":"table","name":"categories","database":"u4302d8117_main","data":
[
{"id":"1","cat":"Website","desc":"Everything about creating your own websites. From basic markup language and layout design, to databases and fancy animations. The recommended order is: HTML, CSS, JavaScript, PHP.","pre":""},
{"id":"2","cat":"HTML5","desc":"A complete course on HTML5. It's the latest version of the HyperText Markup Language that is the first step to creating anything on the internet. It is very easy to learn, quick to write, and will in the end make you able to create a basic website without any design or layout.","pre":""},
{"id":"3","cat":"Beginner","desc":"All tutorials that can be taken without any knowledge of the subject up front. Usually introductory courses, or standalone tutorials on small, simple subjects.","pre":""},
{"id":"4","cat":"Amateur","desc":"All tutorials that are a little more complex and in-depth than beginner tutorials, or use skills learned in previous tutorials. Usually though you should be able to follow them without too much difficulty.","pre":"Beginner tutorials."},
{"id":"5","cat":"Intermediate","desc":"All tutorials that go even further than beginner or amateur tutorials, or that are just too complex to understand for anyone new to a subject. If you feel confident you can tackle them without up-front knowledge, but it may not be a very wise move.","pre":"Beginner or Amateur tutorials."},
{"id":"6","cat":"Advanced","desc":"All tutorials that take a fundamental concept from an introductory course, and take it one or two steps further. Very much advised if you've studied the basics of any skill and want to learn more. Not so much if you don't know what you're doing.","pre":"Beginner, Amateur or Intermediate tutorials."},
{"id":"7","cat":"Expert","desc":"All tutorials for the hardcore nerds amongst us. Just kidding, take these courses on if you're in for a challenge and want to take a look at the pure heart and soul of a subject. If that sounds too complex, don't worry, you can always look at some of the beginner tutorials.","pre":"Beginner, Amateur, Intermediate or Advanced tutorials."},
{"id":"8","cat":"Phaser","desc":"Phaser is a \"fast, free and fun open source framework for Canvas and WebGL powered browser games\". It's a JavaScript library that is easy to learn and include in your webpage, and allows you to create HTML5 games - games that run straight from the browser, no plugins needed.","pre":"HTML5 and JavaScript knowledge."},
{"id":"9","cat":"Threejs","desc":"Three.js is a JavaScript library that uses WebGL to create 3D graphics right in your browser. You can then use these to create stunning visuals or nice animations for your web design, but I'm going to focus mostly on another important aspect it's used for a lot: 3D games.","pre":"HTML5, JavaScript and basic 3D knowledge."},
{"id":"10","cat":"Foosball","desc":"Foosball (or table soccer, or table football) is an incredibly fun game that is often played at schools, universities and offices. There are however also (inter)national championship competitions, which means that there is a lot more to the sport than most people think. This course will teach you basic attacking and defending fundamentals, professional rules and some tips & tricks to elevate your playing style.","pre":""},
{"id":"11","cat":"Soccer","desc":"Soccer (or football) is perhaps the most famous and most watched sport in the world. It's all about being creative with the ball, and being strong with your strategies. Scoring stunning goals and making beautiful tackles. This course will teach you about ball control, touches, shooting techniques, passing techniques, and everything else you could possibly need to know.","pre":""},
{"id":"12","cat":"Card Tricks","desc":"Card tricks are usually the first step to becoming a great magician. Not only because they are simpler and easier than most tricks, also because they only require a regular deck of cards. Card tricks can be done quickly, anywhere you want, which makes them the perfect tool to liven up a party, impress someone, or just simply pass the time.","pre":""},
{"id":"13","cat":"Games","desc":"Tutorials about creating all sorts of games: 2D, 3D, in-browser, MMORPG, you name it. For now, there are only tutorials on the <em>very basic<\/em> in-browser 2D and 3D games. I'll try to expand it as soon as I can, with tutorials for al lot of different software packages, and more specific tutorials on creating actual games.","pre":"Depends on type of game. Mostly, however, only very basic computer knowledge is needed."},
{"id":"14","cat":"Sports","desc":"Sports are good for you in a bunch of different ways; they make you stronger, improve your stamina, and make you happy. On top of that, being good at multiple sports enables you to have fun performing them with your friends or socialize with new teammates. I'll be explaining the basic ideas, rules, techniques and tips & tricks of multiple sports. I won't be giving specific exercises or ways to get in shape, those are confined to the Fitness course.","pre":"Attributes for the type of sport, space and time to practice."},
{"id":"15","cat":"Music","desc":"Music is an universal pleasure. Whether you create whole albums yourself, just hum a tune, or write beautiful melodies on certain instruments - everybody enjoys good music. In this category, I'll try to provide you with tutorials on singing, songwriting, music production\/mixing, and everything else you can think of.","pre":"Having at least one instrument can help a lot."},
{"id":"16","cat":"Singing","desc":"Singing is a skill everybody wants to have. People who are good singers can make music anytime, anywhere they want. They can write <em>and produce<\/em> their own songs. These days, most people think you are born with a bad, moderate or good voice, that is not entirely true. You are born with a certain voice sound, range and technique, but that doesn't mean you can't improve the last two through proper training.","pre":""},
{"id":"17","cat":"Typography","desc":"The art of making text look good, and this course will teach you exactly how to do that. Not only is it about integrating text with any design, it's also about making text clear, concise, readable and easy to understand.","pre":"Perhaps a word processor or webpage to try out the tips."},
{"id":"18","cat":"Music Mixing","desc":"Whether you're an enthousiastic musician that wants his own album, or someone looking to turn a hobby into a career, this is the guide for you. You'll learn what music mixing and mastering is all about, the basic tools you'll need and use, and all definitions and theory behind them to achieve your jaw-dropping sound.","pre":"Perhaps some knowledge of music and instruments."},
{"id":"19","cat":"Personal Hygiene","desc":"Hygiene is a very important aspect of anybody's life. Keeping yourself clean is something that takes work everyday, but it's always way better than allowing yourself to look like you don't care about yourself. This guide will go through the basic habits you should develop to keep your body clean.","pre":""},
{"id":"20","cat":"Fitness & Health","desc":"Everybody wants to be fit and healthy. You live longer, you can do more things in a day and do them faster. You feel more energized, and a very big plus is the fact that your body will look amazing. This guide will teach you the basics of sleeping, eating, exercising and living a healthy lifestyle in general. It's not meant to make you a bodybuilder or marathon runner, but I guarantee it will improve your life if you at least read these basic concepts.","pre":""},
{"id":"21","cat":"Chess","desc":"Chess is one of the oldest games we know of. The fact that it still exists must certainly mean that is one of the most interesting games as well! This course will teach you the rules, but also try to go a step further and teach basic principles and strategies.","pre":""},
{"id":"22","cat":"CSS3","desc":"CSS3 is the second most important language of the internet, behind HTML5. It has the power to transform any webpage into a beautiful design. This course will discuss every singly concept and styling rule that exists within CSS, but will do so with gradually increasing difficulty. It starts off easy, but before you know it you're a CSS master!","pre":"HTML5"},
{"id":"23","cat":"JavaScript","desc":"JavaScript is the dynamic language of the web. It's a relatively simple programming language that can transform any webpage into a dynamic playground! It's present and enabled in every browser by default, which means you can start creating, testing and deploying your own <em>web apps<\/em> right away.","pre":"A bit of HTML5 and CSS3"},
{"id":"24","cat":"Advanced Javascript","desc":"Even though JavaScript is not as hard as most big programming languages, it still has some tough concepts, which I'll try to explain in depth in this advanced course.","pre":"Followed a JavaScript (basic) course"},
{"id":"25","cat":"LaTeX","desc":"A markup or typesetting language, used to make it easy to write scientific or informational pieces, but applicable to anything you want. Built on top of TeX, and by far the most popular variation.","pre":""},
{"id":"26","cat":"LaTeX Math","desc":"Everything that has to do with typesetting mathematics, or scientific pieces, with LaTeX. From simple things such as inserting and aligning equations to creating mathematical graphics, theorem environments and complex symbols. Full references of all possible symbols are also included.","pre":"LaTeX Basic Course"},
{"id":"27","cat":"SVG","desc":"Scalable Vector Graphics has been a stable and proven web technology for quite some time now, and allow you to create infinitely scalable graphics right within your web browser. It, however, uses the same concepts as HTML and CSS, and is therefore a small language you can learn in no time. ","pre":"HTML, CSS (and possibly a bit of JavaScript)"},
{"id":"28","cat":"Design","desc":"Everything about design, drawing and art in general. Mostly contains tutorials on fundamental design and drawing principles for websites, games, products - anything that needs some sort of design. Nevertheless, it also includes topics around the other sense of the word: creating a good user experience.","pre":""},
{"id":"29","cat":"Writing","desc":"Tutorials on the art of writing, be it novels, simple blog posts, or scientific articles. Goes over some basic principles and guidelines on using the English language, but also contains courses aimed at typesetting or publishing any type of written product.","pre":""},
{"id":"30","cat":"Film","desc":"Tutorials on creating your own videos, from writing a basic script and using equipment, to editing and adding special effects. I try to be as general as possible, so that you can apply what you learn when you want to create your own standalone film, but also when you just want to shoot your own YouTube videos. Doesn't contain anything at the moment.","pre":""},
{"id":"31","cat":"Programming","desc":"Tutorials on anything related to programming. Teaches the setup and syntax of some major, fundamental languages, but also tries to teach computer science theory. Doesn't contain anything at the moment.","pre":""},
{"id":"32","cat":"Scientific","desc":"Tutorials on anything related to common sciences, Think of it as what you'd learn during your years at high school, although there are some concepts I can discuss more in-depth than others. Doesn't contain anything at the moment.","pre":""},
{"id":"33","cat":"Lifehacks","desc":"Tutorials on how to make your life better and\/or easier. Discusses some basic habits you need to get down, such as grooming and diet, but also small (not so obivous) things that can help you a lot down the road.","pre":""},
{"id":"34","cat":"Miscellaneous","desc":"Tutorials on anything that didn't fit in another category. Could literally be anything that I know surprsingly much about, but probably doesn't really have that much use in your daily life. See it as the fun section.","pre":""},
{"id":"35","cat":"Canvas","desc":"The powerful HTML5 canvas provides a large set of JavaScript methods to draw anything you want inside a webpage. This course gives a complete overview, for you to unleash your inner artist as soon as possible! I must note, however, that creating somewhat complex shapes\/arrangements within the canvas takes some time and experience.","pre":"Good JavaScript knowledge, some HTML and CSS."},
{"id":"36","cat":"Writing with Style","desc":"A complete course on improving your writing <em>style<\/em>. It's not about plotting, coming up with great characters, or getting your book published - it's about writing with wonderful style. Obviously, this course is by no means complete, but it should get you started.","pre":""},
{"id":"37","cat":"Colour Theory","desc":"Anything you want to be visually appealing, needs a well-worked colour scheme. Even black & white photography, or the colours of your clothes. I'm not saying, however, that you should spend 30 minutes each morning calculating the best outfit, and this course aims to have the same philosophy: it will teach you the basic principles of colour theory and how it's often applied in the real world, but doesn't go further than that. Most experience with colours comes from experimenting, not reading about theory.","pre":""},
{"id":"38","cat":"English","desc":"English is (arguably) the biggest language in the world, but certainly the most important language in professional and online communications. And for a good reason: it has a simple and (mostly) intuitive grammar, while retaining a large set of words. This course will teach you all the rules (give or take a few minor details) of English grammar, and provides a cheat sheet at the end in case you forget something. (It doesn't expand your vocabulary, for that can only be done by reading a lot.)","pre":""},
{"id":"39","cat":"HTML5 Entities","desc":"All entities for HTML in nice tables, sorted alphabetically.","pre":""},
{"id":"40","cat":"Drawing","desc":"Drawing is a fundamental skill, but unfortunately often neglected. Being able to create striking, beautiful or helpful visuals can prove useful for any project or job. This course goes over all the fundamentals, which means it provides a complete picture of the art of drawing, but doesn't go into much detail on topics other than the basics. Because, ultimately, the only way to really learn to draw is by practicing!","pre":""},
{"id":"41","cat":"SASS","desc":"While CSS is a great language, it lacks some useful and common functionality found in other (programming) languages. To solve this problem, and make your designers life easier and faster, SASS was invented. It's a pre-processor that converts sassy SASS code to fully functional CSS code with the click of a button. And it's worth learning if you've played around with CSS for a while.","pre":"Intermediate to advanced CSS knowledge."},
{"id":"42","cat":"Graphic Design","desc":"Making things look good. Design is present in every aspect of our lives, and therefore has many different branches. This course will focus on the visual side &ndash; how do you make something look good? How do you convey the hierarchy of information through visual elements? How do you increase the aesthetics of a product? At the end, you should be able to take any idea or content, and turn it into a graphical masterpiece. (Design-wise, that is. We're not trying to paint the next Mona Lisa.)","pre":"Software or tools to create graphics with. Or a really, really strong imagination."},
{"id":"43","cat":"PHP","desc":"PHP is used by over 80% of all websites, and for a good reason. It's a fast and beginner-friendly way to let your server do awesome things for your website. Getting a server environment running with PHP is easy, and from that moment on, the possibilities are endless. You can create a blog, or an MMORPG, or an ecommerce website, or a user account system &ndash; the sky's the limit! Or, well, your server's capacity is the limit. ","pre":"Intermediate HTML and CSS knowledge, some JavaScript helps too"},
{"id":"44","cat":"SQL","desc":"SQL is the most used language for interacting with databases. It stands for <em>Structured Query Language<\/em>, and does exactly what it promises: allow you to write well-structured programs for your databases. With those databases you could start a blog, a web shop, an online game, a website that allows users to create accounts, and much more!","pre":"A tiny bit of (server-side) programming knowledge could be useful."}
]
}
]
